Index,SOFile,GitFile,Line,SOCodeI,SOCodeF,ResultS,GitCodeI,GitCodeF,ResultG,No more duplicates in Final,Index
0,InitialSO.csv0.txt,InitialGit.csv0.txt,3,"Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

// Get the size of an object
var size = Object.size(myArray);
 Object.keys() var size = Object.keys(myObj).length;
 Object.keys() ","Object.keys() var size = Object.keys(myObj).length;
 Object.keys() Object.keys Object.getOwnPropertyNames Object.getOwnPropertySymbols var person = {
  [Symbol('name')]: 'John Doe',
  [Symbol('age')]: 33,
  ""occupation"": ""Programmer""
};

const propOwn = Object.getOwnPropertyNames(person);
console.log(propOwn.length); // 1

let propSymb = Object.getOwnPropertySymbols(person);
console.log(propSymb.length); // 2 Object.size = function(obj) {
  var size = 0,
    key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }
  return size;
};

// Get the size of an object
const myObj = {}
var size = Object.size(myObj); ",FALSE,"/**
 * jqGrid pivot functions
 * Copyright (c) 2008-2014, Tony Tomov, tony@trirand.com, http://trirand.com/blog/
 * Copyright (c) 2014-2016, Oleg Kiriljuk, oleg.kiriljuk@ok-soft-gmbh.com
 * The modul is created initially by Tony Tomov and it's full rewritten
 * for free jqGrid: https://github.com/free-jqgrid/jqGrid by Oleg Kiriljuk
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
*/

/*jshint eqeqeq:false */
/*global jQuery, define */
/*jslint eqeq: true, plusplus: true, continue: true, white: true */
(function (factory) {
	""use strict"";
	if (typeof define === ""function"" && define.amd) {
		// AMD. Register as an anonymous module.
		define([""jquery"", ""./grid.grouping""], factory);
	} else if (typeof exports === ""object"") {
		// Node/CommonJS
		factory(require(""jquery""));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	""use strict"";
	var jgrid = $.jgrid;
	// begin module grid.pivot
	function Aggregation(aggregator, context, pivotOptions) {
		if (!(this instanceof Aggregation)) {
			return new Aggregation(aggregator);
		}
		//this.result = undefined;
		//this.count = undefined;
		this.aggregator = aggregator;
		this.finilized = false;
		this.context = context;
		this.pivotOptions = pivotOptions;
	}
	Aggregation.prototype.calc = function (v, fieldName, row, iRow, rows) {
		var self = this;
		if (v !== undefined) {
			self.result = self.result || 0; // change undefined to 0
			v = parseFloat(v);
			switch (self.aggregator) {
				case ""sum"":
					self.result += v;
					break;
				case ""count"":
					self.result++;
					break;
				case ""avg"":
					if (self.finilized) {
						self.count = self.count || 0; // change undefined to 0
						self.result = (self.result * self.count + v) / (self.count + 1);
						self.count++;
					} else {
						self.result += v;
						self.count = self.count || 0; // change undefined to 0
						self.count++;
					}
					break;
				case ""min"":
					self.result = Math.min(self.result, v);
					break;
				case ""max"":
					self.result = Math.max(self.result, v);
					break;
				default:
					if ($.isFunction(self.aggregator)) {
						self.result = self.aggregator.call(self.context, {
							previousResult: self.result,
							value: v,
							fieldName: fieldName,
							item: row,
							iItem: iRow,
							items: rows
						});
					}
					break;
			}
		}
	};
	Aggregation.prototype.getResult = function (obj, propName, forceSaving) {
		var self = this;
		if (self.result !== undefined || forceSaving) {
			if (forceSaving) {
				if (self.result !== undefined) {
					self.result = 0;
					self.count = 0;
				}
			}
			if (self.result !== undefined && !self.finilized && self.aggregator === ""avg"") {
				self.result = self.result / self.count;
				self.finilized = true;
			}
			obj[propName] = self.result;
		}
	};

	function ArrayOfFieldsets(trimByCollect, caseSensitive, skipSort, dimension, fieldName) {
		var iField, dimensionLength = dimension.length, dimensionItem, self = this,
			stringCompare = function (a, b) {
				var a1 = a, b1 = b;
				if (a1 == null) { a1 = """"; } // we will place undefined and null values as the lowest TOGETHER with """"
				if (b1 == null) { b1 = """"; }
				// be sure that we have no other input data (Number, Date and so on)
				a1 = String(a1);
				b1 = String(b1);
				if (!this.caseSensitive) {
					a1 = a1.toUpperCase();
					b1 = b1.toUpperCase();
				}
				if (a1 === b1) {
					if (a === b) {//typeof a === typeof b) {
						return 0;
					}
					// either a or b is undefined or null
					if (a === undefined) { return -1; } // make undefined less as all other
					if (b === undefined) { return 1; }
					if (a === null) { return -1; } // make null less as all other with the exception undefined
					if (b === null) { return 1; }
				}
				if (a1 < b1) {
					return -1;
				}
				return 1;
			},
			numberCompare = function (a, b) {
				a = Number(a);
				b = Number(b);
				if (a === b) {
					return 0;
				}
				if (a < b) {
					return -1;
				}
				return 1;
			},
			integerCompare = function (a, b) {
				a = Math.floor(Number(a));
				b = Math.floor(Number(b));
				if (a === b) {
					return 0;
				}
				if (a < b) {
					return -1;
				}
				return 1;
			};

		self.items = [];
		self.indexesOfSourceData = [];
		self.trimByCollect = trimByCollect;
		self.caseSensitive = caseSensitive;
		self.skipSort = skipSort;
		self.fieldLength = dimensionLength;
		self.fieldNames = new Array(dimensionLength);
		self.fieldSortDirection = new Array(dimensionLength);
		self.fieldCompare = new Array(dimensionLength); // 0 - number, 1 - integer, 2 - string, one can extend for Date and other
		for (iField = 0; iField < dimensionLength; iField++) {
			dimensionItem = dimension[iField];
			self.fieldNames[iField] = dimensionItem[fieldName || ""dataName""];
			switch (dimensionItem.sorttype) {
				case ""integer"":
				case ""int"":
					self.fieldCompare[iField] = integerCompare;
					break;
				case ""number"":
				case ""currency"":
				case ""float"":
					self.fieldCompare[iField] = numberCompare;
					break;
				default:
					self.fieldCompare[iField] = $.isFunction(dimensionItem.compare) ? dimensionItem.compare : stringCompare;
					break;
			}
			self.fieldSortDirection[iField] = dimensionItem.sortorder === ""desc"" ? -1 : 1;
		}
	}
	ArrayOfFieldsets.prototype.compareVectorsEx = function (vector1, vector2) {
		var self = this, fieldLength = self.fieldLength, iField, compareResult;
		for (iField = 0; iField < fieldLength; iField++) {
			compareResult = self.fieldCompare[iField](vector1[iField], vector2[iField]);
			if (compareResult !== 0) {
				return {
					index: iField,
					result: compareResult
				};
			}
		}
		return {
			index: -1,
			result: 0
		};
	};
	ArrayOfFieldsets.prototype.getIndexOfDifferences = function (vector1, vector2) {
		if (vector2 === null || vector1 === null) {
			return 0;
		}
		return this.compareVectorsEx(vector1, vector2).index;
	};
	ArrayOfFieldsets.prototype.compareVectors = function (vector1, vector2) {
		var compareRestlts = this.compareVectorsEx(vector1, vector2),
			sortDirection = compareRestlts.index >= 0 ? this.fieldSortDirection[compareRestlts.index] : 1;
		return sortDirection > 0 ? compareRestlts.result : -compareRestlts.result;
	};
	ArrayOfFieldsets.prototype.getItem = function (index) {
		return this.items[index];
	};
	ArrayOfFieldsets.prototype.getIndexLength = function () {
		return this.items.length;
	};
	ArrayOfFieldsets.prototype.getIndexesOfSourceData = function (index) {
		return this.indexesOfSourceData[index];
	};
	ArrayOfFieldsets.prototype.createDataIndex = function (data) {
		var self = this, iRow, nRows = data.length, fieldLength = self.fieldLength, values, v,
			fieldNames = self.fieldNames, indexesOfSourceData = self.indexesOfSourceData, iField, compareResult, i, item,
			items = self.items, iMin, iMax;

		for (iRow = 0; iRow < nRows; iRow++) {
			item = data[iRow];

			// build the set of fields with data of the current item
			values = new Array(fieldLength);
			for (iField = 0; iField < fieldLength; iField++) {
				v = item[fieldNames[iField]];
				if (v !== undefined) {
					if (typeof v === ""string"" && self.trimByCollect) {
						v = $.trim(v);
					}
					values[iField] = v;
				}
			}

			// compare values with items having index iMax and iMin
			// If we use skipSort:true option then we compare always
			// with iMax item only.
			iMin = 0;
			iMax = items.length - 1;
			if (iMax < 0) {
				items.push(values);
				indexesOfSourceData.push([iRow]);
				continue;
			}
			compareResult = self.compareVectors(values, items[iMax]);
			if (compareResult === 0) {
				indexesOfSourceData[iMax].push(iRow);
				continue;
			}
			if (compareResult === 1 || self.skipSort) {
				// in case of the empty array this.items or if the values is larger as the
				// the max (last) element of this.items: append values to the array this.items
				items.push(values);
				indexesOfSourceData.push([iRow]);
				continue;
			}
			compareResult = self.compareVectors(items[0], values);
			if (compareResult === 1) {
				// if the min (first) element values is larger as the values:
				// insert the values as the first element of the array this.items
				items.unshift(values);
				indexesOfSourceData.unshift([iRow]);
				continue;
			}
			if (compareResult === 0) {
				indexesOfSourceData[0].push(iRow);
				continue;
			}
			// we are sure that items[iMin] < values < items[iMax]
			while (true) {
				if (iMax - iMin < 2) {
					// no identical items are found we need to insert the item at i index
					items.splice(iMax, 0, values); // insert after iMin
					indexesOfSourceData.splice(iMax, 0, [iRow]);
					break;
				}
				i = Math.floor((iMin + iMax) / 2); // | 0 means Math.floor, but it's faster sometimes.
				compareResult = self.compareVectors(items[i], values);
				if (compareResult === 0) {
					indexesOfSourceData[i].push(iRow);
					break;
				}
				if (compareResult === 1) {
					iMax = i;
				} else {
					iMin = i;
				}
			}
		}
	};

	jgrid.extend({
		pivotSetup: function (data, options) {
			// data should come in json format
			// The function return the new colModel and the transformed data
			// again with group setup options which then will be passed to the grid
			var self = this[0], isArray = $.isArray, summaries = {},
				groupingView = {
					groupField: [],
					groupSummary: [],
					groupSummaryPos: []
				},
				groupOptions = {
					grouping: true,
					groupingView: groupingView
				},
				o = $.extend({
					totals: false, // replacement for rowTotals. totalText and totalHeader can be used additionally
					useColSpanStyle: false,
					trimByCollect: true,
					skipSortByX: false,
					skipSortByY: false,
					caseSensitive: false,
					footerTotals: false, // replacement colTotals. footerAggregator option and totalText properties of xDimension[i] can be used additionally
					groupSummary: true,
					groupSummaryPos: ""header"",
					frozenStaticCols: false,
					defaultFormatting: true,
					data: data
				}, options || {}),
				row, i, k, nRows = data.length, x, y, cm, iRow, cmName, iXData, itemXData, pivotInfos, rows,
				xDimension = o.xDimension, yDimension = o.yDimension, aggregates = o.aggregates, aggrContext,
				isRowTotal = o.totalText || o.totals || o.rowTotals || o.totalHeader, aggrTotal, gi,
				xlen = isArray(xDimension) ? xDimension.length : 0,
				ylen = isArray(yDimension) ? yDimension.length : 0,
				aggrlen = isArray(aggregates) ? aggregates.length : 0,
				headerLevels = ylen - (aggrlen === 1 ? 1 : 0),
				colHeaders = [], hasGroupTotal = [], colModel = [], outputItems = [],
				additionalProperties = [""pivotInfos""],
				aggrContextTotalRows = new Array(aggrlen), aggrContextGroupTotalRows = new Array(ylen),
				xIndexLength, indexesOfDataWithTheSameXValues, iYData, itemYData, indexesOfDataWithTheSameYValues,
				iRows, agr, outputItem, previousY, groupHeaders, iRowsY, xIndex, yIndex, yIndexLength,
				indexDataBy = function (dimension, skipSort, compareVectors) {
					var index = new ArrayOfFieldsets(o.trimByCollect, o.caseSensitive, skipSort, dimension);
					if ($.isFunction(compareVectors)) {
						index.compareVectorsEx = compareVectors;
					}
					index.createDataIndex(data);
					return index;
				},
				buildColModelItem = function (colType, agr1, iAggr, level, iyData) {
					var label, name, cmItem;
					switch (colType) {
						case 1: // total group
							label = yDimension[level].totalText || ""{0} {1} {2}"";
							name = ""y"" + iyData + ""t"" + level;
							break;
						case 2: // grand total
							label = o.totalText || ""{0}"";
							name = ""t"";
							break;
						//case 0: // standard column
						default:
							label = aggrlen > 1 ? agr1.label || ""{0}"" : yIndex.getItem(iyData)[level];
							name = ""y"" + iyData;
							break;
					}
					cmItem = $.extend({}, agr1, {
						name: name + (aggrlen > 1 ? ""a"" + iAggr : """"),
						label: $.isFunction(label) ?
									(label.call(self, colType === 2 ?
											{ aggregate: agr1, iAggregate: iAggr, pivotOptions: o } :
											{ yIndex: yIndex.getItem(iyData), aggregate: agr1, iAggregate: iAggr, yLevel: level, pivotOptions: o })) :
									(jgrid.template.apply(self, colType === 2 ?
											[label, agr1.aggregator, agr1.member, iAggr] :
											[label, agr1.aggregator, agr1.member, yIndex.getItem(iyData)[level], level]))
					});
					delete cmItem.member;
					delete cmItem.aggregator;
					return cmItem;
				},
				addColumnToColModel = function (colType, level, iyData) {
					var iAggr, aggregate;
					for (iAggr = 0; iAggr < aggrlen; iAggr++) {
						aggregate = aggregates[iAggr];
						if (aggregate.template === undefined && aggregate.formatter === undefined && o.defaultFormatting) {
							aggregate.template = aggregate.aggregator === ""count"" ? ""integer"" : ""number"";
						}
						colModel.push(buildColModelItem(colType, aggregate, iAggr, level, iyData));
					}
				},
				addGroupTotalHeaders = function (iyData, level, previousY1) {
					var iLevel, j, totalHeader, headerOnTop;
					for (iLevel = headerLevels - 1; iLevel >= level; iLevel--) {
						if (hasGroupTotal[iLevel]) {
							for (j = 0; j <= iLevel; j++) {
								groupHeaders = colHeaders[j].groupHeaders;
								groupHeaders[groupHeaders.length - 1].numberOfColumns += aggrlen;
							}
							y = yDimension[iLevel];
							totalHeader = y.totalHeader;
							headerOnTop = y.headerOnTop;
							for (j = iLevel + 1; j <= headerLevels - 1; j++) {
								colHeaders[j].groupHeaders.push({
									titleText: ((headerOnTop && j === iLevel + 1) || (!headerOnTop && j === headerLevels - 1)) ?
											($.isFunction(totalHeader) ?
													totalHeader.call(self, previousY1, iLevel) :
													jgrid.template.call(self, totalHeader || """", previousY1[iLevel], iLevel)) :
											"""",
									startColumnName: ""y"" + (iyData - 1) + ""t"" + iLevel + (aggrlen === 1 ? """" : ""a0""),
									numberOfColumns: aggrlen
								});
							}
						}
					}
				},
				createTotalAggregation = function (iAggr) {
					var aggrGroup = new Aggregation(aggregates[iAggr].aggregator === ""count"" ? ""sum"" : aggregates[iAggr].aggregator, self, options);
					aggrGroup.groupInfo = { iRows: [], rows: [], ys: [], iYs: [] };
					return aggrGroup;
				},
				initializeGroupTotals = function () {
					var iLevel, iAggr;
					for (iLevel = headerLevels - 1; iLevel >= 0; iLevel--) {
						if (hasGroupTotal[iLevel]) {
							if (aggrContextGroupTotalRows[iLevel] == null) {// first call
								aggrContextGroupTotalRows[iLevel] = new Array(aggrlen);
							}
							for (iAggr = 0; iAggr < aggrlen; iAggr++) {
								aggrContextGroupTotalRows[iLevel][iAggr] = createTotalAggregation(iAggr);
							}
						}
					}
				},
				finalizeGroupTotals = function (iyData, itemYData1, previousY1, iAggr) {
					var iLevel, level = yIndex.getIndexOfDifferences(itemYData1, previousY1), fieldName, aggrGroup;

					if (previousY1 !== null) {
						// test whether the group is finished and one need to get results
						level = Math.max(level, 0); // change -1 to 0 for the last call (itemYData === previousY)
						for (iLevel = headerLevels - 1; iLevel >= level; iLevel--) {
							fieldName = ""y"" + iyData + ""t"" + iLevel + (aggrlen > 1 ? ""a"" + iAggr : """");
							if (hasGroupTotal[iLevel] && outputItem[fieldName] === undefined) {
								aggrGroup = aggrContextGroupTotalRows[iLevel][iAggr];
								aggrGroup.getResult(outputItem, fieldName);
								outputItem.pivotInfos[fieldName] = {
									colType: 1,
									iA: iAggr,
									a: aggregates[iAggr],
									level: iLevel,
									iRows: aggrGroup.groupInfo.iRows,
									rows: aggrGroup.groupInfo.rows,
									ys: aggrGroup.groupInfo.ys,
									iYs: aggrGroup.groupInfo.iYs
								};
								if (itemYData1 !== previousY1) {
									aggrContextGroupTotalRows[iLevel][iAggr] = createTotalAggregation(iAggr);
								}
							}
						}
					}
				},
				calculateGroupTotals = function (itemYData1, previousY1, aggregate, iAggr, row1, iRow1, iyData) {
					// the method will be called at the first time with previousY === null in every output row
					// and finally with itemYData === previousY for getting results of all aggregation contexts
					var iLevel, aggrGroup, groupInfo;

					if (itemYData1 !== previousY1) { // not the last call in the row
						for (iLevel = headerLevels - 1; iLevel >= 0; iLevel--) {
							if (hasGroupTotal[iLevel]) {
								aggrGroup = aggrContextGroupTotalRows[iLevel][iAggr];
								aggrGroup.calc(row1[aggregate.member], aggregate.member, row1, iRow1, data);
								groupInfo = aggrGroup.groupInfo;
								if ($.inArray(iyData, groupInfo.iYs) < 0) {
									groupInfo.iYs.push(iyData);
									groupInfo.ys.push(itemYData1);
								}
								if ($.inArray(iRow1, groupInfo.iRows) < 0) {
									groupInfo.iRows.push(iRow1);
									groupInfo.rows.push(row1);
								}
							}
						}
					}
				};

			if (xlen === 0 || aggrlen === 0) {
				throw (""xDimension or aggregates options are not set!"");
			}

			// ****************************************************************
			// The step 1: scan input data and build the list of unique indexes
			// ****************************************************************
			xIndex = indexDataBy(xDimension, o.skipSortByX, o.compareVectorsByX);
			yIndex = indexDataBy(yDimension, o.skipSortByY, o.compareVectorsByY);

			// save to be used probably later
			options.xIndex = xIndex;
			options.yIndex = yIndex;

			// *******************************************
			// The step 2: build colModel and groupOptions
			// *******************************************
			// fill the first xlen columns of colModel and fill the groupOptions
			// the names of the first columns will be ""x""+i. The first column have the name ""x0"".
			for (i = 0; i < xlen; i++) {
				x = xDimension[i];
				cm = {
					name: ""x"" + i,
					label: x.label != null ?
								($.isFunction(x.label) ? x.label.call(self, x, i, o) : x.label) :
								x.dataName,
					frozen: o.frozenStaticCols
				};
				if (i < xlen - 1 && !x.skipGrouping && !x.additionalProperty) {
					// based on xDimension levels build grouping
					groupingView.groupField.push(cm.name);
					groupingView.groupSummary.push(o.groupSummary);
					groupingView.groupSummaryPos.push(o.groupSummaryPos);
				}
				cm = $.extend(cm, x);
				delete cm.dataName;
				delete cm.footerText;
				if (!x.additionalProperty) {
					colModel.push(cm);
					groupOptions.sortname = cm.name;
				} else {
					additionalProperties.push(cm.name);
				}
			}
			if (xlen < 2) {
				groupOptions.grouping = false; // no grouping is needed
			}
			groupingView.hideFirstGroupCol = true;

			// Fill hasGroupTotal and groupColumnsPerLevel arrays
			// The hasGroupTotal just shows whether one need create additional totals for every group.
			for (i = 0; i < ylen; i++) {
				y = yDimension[i];
				hasGroupTotal.push(y.totals || y.rowTotals || y.totalText || y.totalHeader ? true : false);
			}

			// fill other columns of colModel based on collected uniqueYData and aggregates options
			// the names of the first columns will be ""y""+i in case of one aggregate and
			// ""y""+i+""a""+k in case of multiple aggregates. The name of the first ""y""-column is ""y0"" or ""y0a0""
			// The next function build and insert item in colModel
			// colType: 0 - means standard column, 1 - total group, 2 - grand total
			previousY = yIndex.getItem(0);
			addColumnToColModel(0, ylen - 1, 0); // add standard column
			yIndexLength = yIndex.getIndexLength();
			for (iYData = 1; iYData < yIndexLength; iYData++) {
				itemYData = yIndex.getItem(iYData);
				/*
				 * find where (on which level) the itemYData have the differences to
				 * the previous y (previousY). If the level has (totals:true/rowTotals:true) in yDimension
				 * then one should insert new total columns for all levels starting with the highest one
				 * (yDimension[yDimension.length-1]) and till the current one.
				 */
				i = yIndex.getIndexOfDifferences(itemYData, previousY);
				for (k = headerLevels - 1; k >= i; k--) {
					if (hasGroupTotal[k]) {
						addColumnToColModel(1, k, iYData - 1); // add group total columns
					}
				}
				previousY = itemYData;
				addColumnToColModel(0, ylen - 1, iYData); // add standard column
			}
			// finalize of all totals
			for (i = headerLevels - 1; i >= 0; i--) {
				if (hasGroupTotal[i]) {
					addColumnToColModel(1, i, yIndexLength - 1); // add the last group total columns
				}
			}
			// add total columns calculated over all data of the row
			if (isRowTotal) {
				addColumnToColModel(2);
			}

			// ********************************
			// The step 3: build column headers
			// ********************************
			// initialize colHeaders
			previousY = yIndex.getItem(0);
			for (k = 0; k < headerLevels; k++) {
				colHeaders.push({
					useColSpanStyle: o.useColSpanStyle,
					groupHeaders: [{
						titleText: previousY[k],
						startColumnName: aggrlen === 1 ? ""y0"" : ""y0a0"",
						numberOfColumns: aggrlen
					}]
				});
			}
			for (iYData = 1; iYData < yIndexLength; iYData++) {
				itemYData = yIndex.getItem(iYData);
				i = yIndex.getIndexOfDifferences(itemYData, previousY);
				// We placed QNIQUE data in uniqueYData array.
				// So we always find a difference on one level

				addGroupTotalHeaders(iYData, i, previousY);
				// add column headers which corresponds the main data
				for (k = headerLevels - 1; k >= i; k--) {
					colHeaders[k].groupHeaders.push({
						titleText: itemYData[k],
						startColumnName: ""y"" + iYData + (aggrlen === 1 ? """" : ""a0""),
						numberOfColumns: aggrlen
					});
				}
				for (k = 0; k < i; k++) {
					groupHeaders = colHeaders[k].groupHeaders;
					groupHeaders[groupHeaders.length - 1].numberOfColumns += aggrlen;
				}
				previousY = itemYData;
			}
			addGroupTotalHeaders(yIndexLength, 0, previousY);

			// fill groupHeaders without taking in consideration group total columns
			if (isRowTotal) {
				for (i = 0; i < headerLevels; i++) {
					colHeaders[i].groupHeaders.push({
						titleText: (i < headerLevels - 1 ? """" : o.totalHeader || """"),
						startColumnName: ""t"" + (aggrlen === 1 ? """" : ""a0""),
						numberOfColumns: aggrlen
					});
				}
			}

			// *****************************
			// The step 4: fill data of grid
			// *****************************
			xIndexLength = xIndex.getIndexLength();
			for (iXData = 0; iXData < xIndexLength; iXData++) {
				itemXData = xIndex.getItem(iXData);
				pivotInfos = { iX: iXData, x: itemXData };
				outputItem = { pivotInfos: pivotInfos }; // item of output data
				// itemXData corresponds to the row of output data
				for (i = 0; i < xlen; i++) {
					// fill first columns of data
					outputItem[""x"" + i] = itemXData[i];
				}

				indexesOfDataWithTheSameXValues = xIndex.getIndexesOfSourceData(iXData);
				// The rows of input data with indexes from indexesOfDataWithTheSameXValues contains itemXData
				// Now we build columns of itemXData row
				if (isRowTotal) {
					for (k = 0; k < aggrlen; k++) {
						aggrContextTotalRows[k] = createTotalAggregation(k);
					}
				}
				previousY = null;
				initializeGroupTotals();
				for (iYData = 0; iYData < yIndexLength; iYData++) {
					itemYData = yIndex.getItem(iYData);
					indexesOfDataWithTheSameYValues = yIndex.getIndexesOfSourceData(iYData);
					// we calculate aggregate in every itemYData
					for (k = 0; k < aggrlen; k++) {
						if (previousY !== null) { // empty input data
							finalizeGroupTotals(iYData - 1, itemYData, previousY, k);
						}
						iRows = [];
						for (i = 0; i < indexesOfDataWithTheSameYValues.length; i++) {
							iRowsY = indexesOfDataWithTheSameYValues[i];
							if ($.inArray(iRowsY, indexesOfDataWithTheSameXValues) >= 0) {
								iRows.push(iRowsY);
							}
						}
						if (iRows.length > 0) {
							// iRows array have all indexes of input data which have both itemXData and itemYData
							// We need calculate aggregate agr over all the items
							rows = new Array(iRows.length);
							agr = aggregates[k];
							aggrContext = new Aggregation(agr.aggregator, self, options);
							for (iRow = 0; iRow < iRows.length; iRow++) {
								i = iRows[iRow];
								row = data[i];
								rows[iRow] = row;
								aggrContext.calc(row[agr.member], agr.member, row, i, data);
								if (isRowTotal) {
									aggrTotal = aggrContextTotalRows[k];
									aggrTotal.calc(row[agr.member], agr.member, row, i, data);
									gi = aggrTotal.groupInfo;
									if ($.inArray(i, gi.iYs) < 0) {
										gi.iYs.push(iYData);
										gi.ys.push(itemYData);
									}
									if ($.inArray(i, gi.iRows) < 0) {
										gi.iRows.push(i);
										gi.rows.push(row);
									}
								}
								calculateGroupTotals(itemYData, previousY, agr, k, row, i, iYData);
							}
							cmName = ""y"" + iYData + (aggrlen === 1 ? """" : ""a"" + k);
							aggrContext.getResult(outputItem, cmName);
							pivotInfos[cmName] = {
								colType: 0, // standard row
								iY: iYData,
								y: itemYData,
								iA: k,
								a: agr,
								iRows: iRows,
								rows: rows
							};
						}
					}
					previousY = itemYData;
				}
				if (previousY !== null) { // if non-empty input data
					for (k = 0; k < aggrlen; k++) {
						finalizeGroupTotals(yIndexLength - 1, previousY, previousY, k);
					}
				}
				if (isRowTotal) {
					for (k = 0; k < aggrlen; k++) {
						cmName = ""t"" + (aggrlen === 1 ? """" : ""a"" + k);
						aggrTotal = aggrContextTotalRows[k];
						aggrTotal.getResult(outputItem, cmName);
						gi = aggrTotal.groupInfo;
						pivotInfos[cmName] = {
							colType: 2, // row total
							iA: k,
							a: aggregates[k],
							iRows: gi.iRows,
							rows: gi.rows,
							iYs: gi.iYs,
							ys: gi.ys
						};
					}
				}
				outputItems.push(outputItem);
			}

			// *****************************
			// The step 5: fill total footer
			// *****************************
			if (o.footerTotals || o.colTotals) {
				nRows = outputItems.length;
				for (i = 0; i < xlen; i++) {
					summaries[""x"" + i] = xDimension[i].footerText || """";
				}
				for (i = xlen; i < colModel.length; i++) {
					cmName = colModel[i].name;
					aggrContext = new Aggregation(o.footerAggregator || ""sum"", self, options);
					for (iRow = 0; iRow < nRows; iRow++) {
						outputItem = outputItems[iRow];
						aggrContext.calc(outputItem[cmName], cmName, outputItem, iRow, outputItems);
					}
					aggrContext.getResult(summaries, cmName);
				}
			}

			// return the final result.
			options.colHeaders = colHeaders;
			return {
				colModel: colModel,
				additionalProperties: additionalProperties,
				options: options,
				rows: outputItems,
				groupOptions: groupOptions,
				groupHeaders: colHeaders,
				summary: summaries
			};
		},
		jqPivot: function (data, pivotOpt, gridOpt, ajaxOpt) {
			return this.each(function () {
				var $t = this, $self = $($t), $j = $.fn.jqGrid;

				function pivot() {
					var pivotGrid = $j.pivotSetup.call($self, data, pivotOpt),
						gHead = pivotGrid.groupHeaders,
						assocArraySize = function (obj) {
							// http://stackoverflow.com/a/6700/11236
							var size = 0, key;
							for (key in obj) {
								if (obj.hasOwnProperty(key)) {
									size++;
								}
							}
							return size;
						},
						footerrow = assocArraySize(pivotGrid.summary) > 0 ? true : false,
						groupingView = pivotGrid.groupOptions.groupingView,
						query = jgrid.from.call($t, pivotGrid.rows), i;
					if (pivotOpt.skipSortByX) {
						for (i = 0; i < groupingView.groupField.length; i++) {
							query.orderBy(groupingView.groupField[i],
								gridOpt != null && gridOpt.groupingView && gridOpt.groupingView.groupOrder != null && gridOpt.groupingView.groupOrder[i] === ""desc"" ? ""d"" : ""a"",
								""text"",
								"""");
						}
					}
					pivotOpt.data = data;
					$j.call($self, $.extend(true, {
						datastr: $.extend(query.select(), footerrow ? { userdata: pivotGrid.summary } : {}),
						datatype: ""jsonstring"",
						footerrow: footerrow,
						userDataOnFooter: footerrow,
						colModel: pivotGrid.colModel,
						additionalProperties: pivotGrid.additionalProperties,
						pivotOptions: pivotGrid.options,
						viewrecords: true,
						sortname: pivotOpt.xDimension[0].dataName // ?????
					}, pivotGrid.groupOptions, gridOpt || {}));
					if (gHead.length) {
						for (i = 0; i < gHead.length; i++) {
							// Multiple calls of setGroupHeaders for one grid are wrong,
							// but there are produces good results in case of usage
							// useColSpanStyle: false option. The rowspan values
							// needed be increased in case of usage useColSpanStyle: true
							if (gHead[i] && gHead[i].groupHeaders.length) {
								$j.setGroupHeaders.call($self, gHead[i]);
							}
						}
					}
					if (pivotOpt.frozenStaticCols) {
						$j.setFrozenColumns.call($self);
					}
				}

				if (typeof data === ""string"") {
					$.ajax($.extend({
						url: data,
						dataType: ""json"",
						success: function (data1) {
							data = jgrid.getAccessor(data1, ajaxOpt && ajaxOpt.reader ? ajaxOpt.reader : ""rows"");
							pivot();
						}
					}, ajaxOpt || {}));
				} else {
					pivot();
				}
			});
		}
	});
	// end module grid.pivot
}));
","/**
 * jqGrid pivot functions
 * Copyright (c) 2008-2014, Tony Tomov, tony@trirand.com, http://trirand.com/blog/
 * Copyright (c) 2014-2016, Oleg Kiriljuk, oleg.kiriljuk@ok-soft-gmbh.com
 * The modul is created initially by Tony Tomov and it's full rewritten
 * for free jqGrid: https://github.com/free-jqgrid/jqGrid by Oleg Kiriljuk
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
*/

/*jshint eqeqeq:false */
/*global jQuery, define */
/*jslint eqeq: true, plusplus: true, continue: true, white: true */
(function (factory) {
	""use strict"";
	if (typeof define === ""function"" && define.amd) {
		// AMD. Register as an anonymous module.
		define([""jquery"", ""./grid.grouping""], factory);
	} else if (typeof exports === ""object"") {
		// Node/CommonJS
		factory(require(""jquery""));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	""use strict"";
	var jgrid = $.jgrid;
	// begin module grid.pivot
	function Aggregation(aggregator, context, pivotOptions) {
		if (!(this instanceof Aggregation)) {
			return new Aggregation(aggregator);
		}
		//this.result = undefined;
		//this.count = undefined;
		this.aggregator = aggregator;
		this.finilized = false;
		this.context = context;
		this.pivotOptions = pivotOptions;
	}
	Aggregation.prototype.calc = function (v, fieldName, row, iRow, rows) {
		var self = this;
		if (v !== undefined) {
			self.result = self.result || 0; // change undefined to 0
			v = parseFloat(v);
			switch (self.aggregator) {
				case ""sum"":
					self.result += v;
					break;
				case ""count"":
					self.result++;
					break;
				case ""avg"":
					if (self.finilized) {
						self.count = self.count || 0; // change undefined to 0
						self.result = (self.result * self.count + v) / (self.count + 1);
						self.count++;
					} else {
						self.result += v;
						self.count = self.count || 0; // change undefined to 0
						self.count++;
					}
					break;
				case ""min"":
					self.result = Math.min(self.result, v);
					break;
				case ""max"":
					self.result = Math.max(self.result, v);
					break;
				default:
					if ($.isFunction(self.aggregator)) {
						self.result = self.aggregator.call(self.context, {
							previousResult: self.result,
							value: v,
							fieldName: fieldName,
							item: row,
							iItem: iRow,
							items: rows
						});
					}
					break;
			}
		}
	};
	Aggregation.prototype.getResult = function (obj, propName, forceSaving) {
		var self = this;
		if (self.result !== undefined || forceSaving) {
			if (forceSaving) {
				if (self.result !== undefined) {
					self.result = 0;
					self.count = 0;
				}
			}
			if (self.result !== undefined && !self.finilized && self.aggregator === ""avg"") {
				self.result = self.result / self.count;
				self.finilized = true;
			}
			obj[propName] = self.result;
		}
	};

	function ArrayOfFieldsets(trimByCollect, caseSensitive, skipSort, dimension, fieldName) {
		var iField, dimensionLength = dimension.length, dimensionItem, self = this,
			stringCompare = function (a, b) {
				var a1 = a, b1 = b;
				if (a1 == null) { a1 = """"; } // we will place undefined and null values as the lowest TOGETHER with """"
				if (b1 == null) { b1 = """"; }
				// be sure that we have no other input data (Number, Date and so on)
				a1 = String(a1);
				b1 = String(b1);
				if (!this.caseSensitive) {
					a1 = a1.toUpperCase();
					b1 = b1.toUpperCase();
				}
				if (a1 === b1) {
					if (a === b) {//typeof a === typeof b) {
						return 0;
					}
					// either a or b is undefined or null
					if (a === undefined) { return -1; } // make undefined less as all other
					if (b === undefined) { return 1; }
					if (a === null) { return -1; } // make null less as all other with the exception undefined
					if (b === null) { return 1; }
				}
				if (a1 < b1) {
					return -1;
				}
				return 1;
			},
			numberCompare = function (a, b) {
				a = Number(a);
				b = Number(b);
				if (a === b) {
					return 0;
				}
				if (a < b) {
					return -1;
				}
				return 1;
			},
			integerCompare = function (a, b) {
				a = Math.floor(Number(a));
				b = Math.floor(Number(b));
				if (a === b) {
					return 0;
				}
				if (a < b) {
					return -1;
				}
				return 1;
			};

		self.items = [];
		self.indexesOfSourceData = [];
		self.trimByCollect = trimByCollect;
		self.caseSensitive = caseSensitive;
		self.skipSort = skipSort;
		self.fieldLength = dimensionLength;
		self.fieldNames = new Array(dimensionLength);
		self.fieldSortDirection = new Array(dimensionLength);
		self.fieldCompare = new Array(dimensionLength); // 0 - number, 1 - integer, 2 - string, one can extend for Date and other
		for (iField = 0; iField < dimensionLength; iField++) {
			dimensionItem = dimension[iField];
			self.fieldNames[iField] = dimensionItem[fieldName || ""dataName""];
			switch (dimensionItem.sorttype) {
				case ""integer"":
				case ""int"":
					self.fieldCompare[iField] = integerCompare;
					break;
				case ""number"":
				case ""currency"":
				case ""float"":
					self.fieldCompare[iField] = numberCompare;
					break;
				default:
					self.fieldCompare[iField] = $.isFunction(dimensionItem.compare) ? dimensionItem.compare : stringCompare;
					break;
			}
			self.fieldSortDirection[iField] = dimensionItem.sortorder === ""desc"" ? -1 : 1;
		}
	}
	ArrayOfFieldsets.prototype.compareVectorsEx = function (vector1, vector2) {
		var self = this, fieldLength = self.fieldLength, iField, compareResult;
		for (iField = 0; iField < fieldLength; iField++) {
			compareResult = self.fieldCompare[iField](vector1[iField], vector2[iField]);
			if (compareResult !== 0) {
				return {
					index: iField,
					result: compareResult
				};
			}
		}
		return {
			index: -1,
			result: 0
		};
	};
	ArrayOfFieldsets.prototype.getIndexOfDifferences = function (vector1, vector2) {
		if (vector2 === null || vector1 === null) {
			return 0;
		}
		return this.compareVectorsEx(vector1, vector2).index;
	};
	ArrayOfFieldsets.prototype.compareVectors = function (vector1, vector2) {
		var compareRestlts = this.compareVectorsEx(vector1, vector2),
			sortDirection = compareRestlts.index >= 0 ? this.fieldSortDirection[compareRestlts.index] : 1;
		return sortDirection > 0 ? compareRestlts.result : -compareRestlts.result;
	};
	ArrayOfFieldsets.prototype.getItem = function (index) {
		return this.items[index];
	};
	ArrayOfFieldsets.prototype.getIndexLength = function () {
		return this.items.length;
	};
	ArrayOfFieldsets.prototype.getIndexesOfSourceData = function (index) {
		return this.indexesOfSourceData[index];
	};
	ArrayOfFieldsets.prototype.createDataIndex = function (data) {
		var self = this, iRow, nRows = data.length, fieldLength = self.fieldLength, values, v,
			fieldNames = self.fieldNames, indexesOfSourceData = self.indexesOfSourceData, iField, compareResult, i, item,
			items = self.items, iMin, iMax;

		for (iRow = 0; iRow < nRows; iRow++) {
			item = data[iRow];

			// build the set of fields with data of the current item
			values = new Array(fieldLength);
			for (iField = 0; iField < fieldLength; iField++) {
				v = item[fieldNames[iField]];
				if (v !== undefined) {
					if (typeof v === ""string"" && self.trimByCollect) {
						v = $.trim(v);
					}
					values[iField] = v;
				}
			}

			// compare values with items having index iMax and iMin
			// If we use skipSort:true option then we compare always
			// with iMax item only.
			iMin = 0;
			iMax = items.length - 1;
			if (iMax < 0) {
				items.push(values);
				indexesOfSourceData.push([iRow]);
				continue;
			}
			compareResult = self.compareVectors(values, items[iMax]);
			if (compareResult === 0) {
				indexesOfSourceData[iMax].push(iRow);
				continue;
			}
			if (compareResult === 1 || self.skipSort) {
				// in case of the empty array this.items or if the values is larger as the
				// the max (last) element of this.items: append values to the array this.items
				items.push(values);
				indexesOfSourceData.push([iRow]);
				continue;
			}
			compareResult = self.compareVectors(items[0], values);
			if (compareResult === 1) {
				// if the min (first) element values is larger as the values:
				// insert the values as the first element of the array this.items
				items.unshift(values);
				indexesOfSourceData.unshift([iRow]);
				continue;
			}
			if (compareResult === 0) {
				indexesOfSourceData[0].push(iRow);
				continue;
			}
			// we are sure that items[iMin] < values < items[iMax]
			while (true) {
				if (iMax - iMin < 2) {
					// no identical items are found we need to insert the item at i index
					items.splice(iMax, 0, values); // insert after iMin
					indexesOfSourceData.splice(iMax, 0, [iRow]);
					break;
				}
				i = Math.floor((iMin + iMax) / 2); // | 0 means Math.floor, but it's faster sometimes.
				compareResult = self.compareVectors(items[i], values);
				if (compareResult === 0) {
					indexesOfSourceData[i].push(iRow);
					break;
				}
				if (compareResult === 1) {
					iMax = i;
				} else {
					iMin = i;
				}
			}
		}
	};

	jgrid.extend({
		pivotSetup: function (data, options) {
			// data should come in json format
			// The function return the new colModel and the transformed data
			// again with group setup options which then will be passed to the grid
			var self = this[0], isArray = $.isArray, summaries = {},
				groupingView = {
					groupField: [],
					groupSummary: [],
					groupSummaryPos: []
				},
				groupOptions = {
					grouping: true,
					groupingView: groupingView
				},
				o = $.extend({
					totals: false, // replacement for rowTotals. totalText and totalHeader can be used additionally
					useColSpanStyle: false,
					trimByCollect: true,
					skipSortByX: false,
					skipSortByY: false,
					caseSensitive: false,
					footerTotals: false, // replacement colTotals. footerAggregator option and totalText properties of xDimension[i] can be used additionally
					groupSummary: true,
					groupSummaryPos: ""header"",
					frozenStaticCols: false,
					defaultFormatting: true,
					data: data
				}, options || {}),
				row, i, k, nRows = data.length, x, y, cm, iRow, cmName, iXData, itemXData, pivotInfos, rows,
				xDimension = o.xDimension, yDimension = o.yDimension, aggregates = o.aggregates, aggrContext,
				isRowTotal = o.totalText || o.totals || o.rowTotals || o.totalHeader, aggrTotal, gi,
				xlen = isArray(xDimension) ? xDimension.length : 0,
				ylen = isArray(yDimension) ? yDimension.length : 0,
				aggrlen = isArray(aggregates) ? aggregates.length : 0,
				headerLevels = ylen - (aggrlen === 1 ? 1 : 0),
				colHeaders = [], hasGroupTotal = [], colModel = [], outputItems = [],
				additionalProperties = [""pivotInfos""],
				aggrContextTotalRows = new Array(aggrlen), aggrContextGroupTotalRows = new Array(ylen),
				xIndexLength, indexesOfDataWithTheSameXValues, iYData, itemYData, indexesOfDataWithTheSameYValues,
				iRows, agr, outputItem, previousY, groupHeaders, iRowsY, xIndex, yIndex, yIndexLength,
				indexDataBy = function (dimension, skipSort, compareVectors) {
					var index = new ArrayOfFieldsets(o.trimByCollect, o.caseSensitive, skipSort, dimension);
					if ($.isFunction(compareVectors)) {
						index.compareVectorsEx = compareVectors;
					}
					index.createDataIndex(data);
					return index;
				},
				buildColModelItem = function (colType, agr1, iAggr, level, iyData) {
					var label, name, cmItem;
					switch (colType) {
						case 1: // total group
							label = yDimension[level].totalText || ""{0} {1} {2}"";
							name = ""y"" + iyData + ""t"" + level;
							break;
						case 2: // grand total
							label = o.totalText || ""{0}"";
							name = ""t"";
							break;
						//case 0: // standard column
						default:
							label = aggrlen > 1 ? agr1.label || ""{0}"" : yIndex.getItem(iyData)[level];
							name = ""y"" + iyData;
							break;
					}
					cmItem = $.extend({}, agr1, {
						name: name + (aggrlen > 1 ? ""a"" + iAggr : """"),
						label: $.isFunction(label) ?
									(label.call(self, colType === 2 ?
											{ aggregate: agr1, iAggregate: iAggr, pivotOptions: o } :
											{ yIndex: yIndex.getItem(iyData), aggregate: agr1, iAggregate: iAggr, yLevel: level, pivotOptions: o })) :
									(jgrid.template.apply(self, colType === 2 ?
											[label, agr1.aggregator, agr1.member, iAggr] :
											[label, agr1.aggregator, agr1.member, yIndex.getItem(iyData)[level], level]))
					});
					delete cmItem.member;
					delete cmItem.aggregator;
					return cmItem;
				},
				addColumnToColModel = function (colType, level, iyData) {
					var iAggr, aggregate;
					for (iAggr = 0; iAggr < aggrlen; iAggr++) {
						aggregate = aggregates[iAggr];
						if (aggregate.template === undefined && aggregate.formatter === undefined && o.defaultFormatting) {
							aggregate.template = aggregate.aggregator === ""count"" ? ""integer"" : ""number"";
						}
						colModel.push(buildColModelItem(colType, aggregate, iAggr, level, iyData));
					}
				},
				addGroupTotalHeaders = function (iyData, level, previousY1) {
					var iLevel, j, totalHeader, headerOnTop;
					for (iLevel = headerLevels - 1; iLevel >= level; iLevel--) {
						if (hasGroupTotal[iLevel]) {
							for (j = 0; j <= iLevel; j++) {
								groupHeaders = colHeaders[j].groupHeaders;
								groupHeaders[groupHeaders.length - 1].numberOfColumns += aggrlen;
							}
							y = yDimension[iLevel];
							totalHeader = y.totalHeader;
							headerOnTop = y.headerOnTop;
							for (j = iLevel + 1; j <= headerLevels - 1; j++) {
								colHeaders[j].groupHeaders.push({
									titleText: ((headerOnTop && j === iLevel + 1) || (!headerOnTop && j === headerLevels - 1)) ?
											($.isFunction(totalHeader) ?
													totalHeader.call(self, previousY1, iLevel) :
													jgrid.template.call(self, totalHeader || """", previousY1[iLevel], iLevel)) :
											"""",
									startColumnName: ""y"" + (iyData - 1) + ""t"" + iLevel + (aggrlen === 1 ? """" : ""a0""),
									numberOfColumns: aggrlen
								});
							}
						}
					}
				},
				createTotalAggregation = function (iAggr) {
					var aggrGroup = new Aggregation(aggregates[iAggr].aggregator === ""count"" ? ""sum"" : aggregates[iAggr].aggregator, self, options);
					aggrGroup.groupInfo = { iRows: [], rows: [], ys: [], iYs: [] };
					return aggrGroup;
				},
				initializeGroupTotals = function () {
					var iLevel, iAggr;
					for (iLevel = headerLevels - 1; iLevel >= 0; iLevel--) {
						if (hasGroupTotal[iLevel]) {
							if (aggrContextGroupTotalRows[iLevel] == null) {// first call
								aggrContextGroupTotalRows[iLevel] = new Array(aggrlen);
							}
							for (iAggr = 0; iAggr < aggrlen; iAggr++) {
								aggrContextGroupTotalRows[iLevel][iAggr] = createTotalAggregation(iAggr);
							}
						}
					}
				},
				finalizeGroupTotals = function (iyData, itemYData1, previousY1, iAggr) {
					var iLevel, level = yIndex.getIndexOfDifferences(itemYData1, previousY1), fieldName, aggrGroup;

					if (previousY1 !== null) {
						// test whether the group is finished and one need to get results
						level = Math.max(level, 0); // change -1 to 0 for the last call (itemYData === previousY)
						for (iLevel = headerLevels - 1; iLevel >= level; iLevel--) {
							fieldName = ""y"" + iyData + ""t"" + iLevel + (aggrlen > 1 ? ""a"" + iAggr : """");
							if (hasGroupTotal[iLevel] && outputItem[fieldName] === undefined) {
								aggrGroup = aggrContextGroupTotalRows[iLevel][iAggr];
								aggrGroup.getResult(outputItem, fieldName);
								outputItem.pivotInfos[fieldName] = {
									colType: 1,
									iA: iAggr,
									a: aggregates[iAggr],
									level: iLevel,
									iRows: aggrGroup.groupInfo.iRows,
									rows: aggrGroup.groupInfo.rows,
									ys: aggrGroup.groupInfo.ys,
									iYs: aggrGroup.groupInfo.iYs
								};
								if (itemYData1 !== previousY1) {
									aggrContextGroupTotalRows[iLevel][iAggr] = createTotalAggregation(iAggr);
								}
							}
						}
					}
				},
				calculateGroupTotals = function (itemYData1, previousY1, aggregate, iAggr, row1, iRow1, iyData) {
					// the method will be called at the first time with previousY === null in every output row
					// and finally with itemYData === previousY for getting results of all aggregation contexts
					var iLevel, aggrGroup, groupInfo;

					if (itemYData1 !== previousY1) { // not the last call in the row
						for (iLevel = headerLevels - 1; iLevel >= 0; iLevel--) {
							if (hasGroupTotal[iLevel]) {
								aggrGroup = aggrContextGroupTotalRows[iLevel][iAggr];
								aggrGroup.calc(row1[aggregate.member], aggregate.member, row1, iRow1, data);
								groupInfo = aggrGroup.groupInfo;
								if ($.inArray(iyData, groupInfo.iYs) < 0) {
									groupInfo.iYs.push(iyData);
									groupInfo.ys.push(itemYData1);
								}
								if ($.inArray(iRow1, groupInfo.iRows) < 0) {
									groupInfo.iRows.push(iRow1);
									groupInfo.rows.push(row1);
								}
							}
						}
					}
				};

			if (xlen === 0 || aggrlen === 0) {
				throw (""xDimension or aggregates options are not set!"");
			}

			// ****************************************************************
			// The step 1: scan input data and build the list of unique indexes
			// ****************************************************************
			xIndex = indexDataBy(xDimension, o.skipSortByX, o.compareVectorsByX);
			yIndex = indexDataBy(yDimension, o.skipSortByY, o.compareVectorsByY);

			// save to be used probably later
			options.xIndex = xIndex;
			options.yIndex = yIndex;

			// *******************************************
			// The step 2: build colModel and groupOptions
			// *******************************************
			// fill the first xlen columns of colModel and fill the groupOptions
			// the names of the first columns will be ""x""+i. The first column have the name ""x0"".
			for (i = 0; i < xlen; i++) {
				x = xDimension[i];
				cm = {
					name: ""x"" + i,
					label: x.label != null ?
								($.isFunction(x.label) ? x.label.call(self, x, i, o) : x.label) :
								x.dataName,
					frozen: o.frozenStaticCols
				};
				if (i < xlen - 1 && !x.skipGrouping && !x.additionalProperty) {
					// based on xDimension levels build grouping
					groupingView.groupField.push(cm.name);
					groupingView.groupSummary.push(o.groupSummary);
					groupingView.groupSummaryPos.push(o.groupSummaryPos);
				}
				cm = $.extend(cm, x);
				delete cm.dataName;
				delete cm.footerText;
				if (!x.additionalProperty) {
					colModel.push(cm);
					groupOptions.sortname = cm.name;
				} else {
					additionalProperties.push(cm.name);
				}
			}
			if (xlen < 2) {
				groupOptions.grouping = false; // no grouping is needed
			}
			groupingView.hideFirstGroupCol = true;

			// Fill hasGroupTotal and groupColumnsPerLevel arrays
			// The hasGroupTotal just shows whether one need create additional totals for every group.
			for (i = 0; i < ylen; i++) {
				y = yDimension[i];
				hasGroupTotal.push(y.totals || y.rowTotals || y.totalText || y.totalHeader ? true : false);
			}

			// fill other columns of colModel based on collected uniqueYData and aggregates options
			// the names of the first columns will be ""y""+i in case of one aggregate and
			// ""y""+i+""a""+k in case of multiple aggregates. The name of the first ""y""-column is ""y0"" or ""y0a0""
			// The next function build and insert item in colModel
			// colType: 0 - means standard column, 1 - total group, 2 - grand total
			previousY = yIndex.getItem(0);
			addColumnToColModel(0, ylen - 1, 0); // add standard column
			yIndexLength = yIndex.getIndexLength();
			for (iYData = 1; iYData < yIndexLength; iYData++) {
				itemYData = yIndex.getItem(iYData);
				/*
				 * find where (on which level) the itemYData have the differences to
				 * the previous y (previousY). If the level has (totals:true/rowTotals:true) in yDimension
				 * then one should insert new total columns for all levels starting with the highest one
				 * (yDimension[yDimension.length-1]) and till the current one.
				 */
				i = yIndex.getIndexOfDifferences(itemYData, previousY);
				for (k = headerLevels - 1; k >= i; k--) {
					if (hasGroupTotal[k]) {
						addColumnToColModel(1, k, iYData - 1); // add group total columns
					}
				}
				previousY = itemYData;
				addColumnToColModel(0, ylen - 1, iYData); // add standard column
			}
			// finalize of all totals
			for (i = headerLevels - 1; i >= 0; i--) {
				if (hasGroupTotal[i]) {
					addColumnToColModel(1, i, yIndexLength - 1); // add the last group total columns
				}
			}
			// add total columns calculated over all data of the row
			if (isRowTotal) {
				addColumnToColModel(2);
			}

			// ********************************
			// The step 3: build column headers
			// ********************************
			// initialize colHeaders
			previousY = yIndex.getItem(0);
			for (k = 0; k < headerLevels; k++) {
				colHeaders.push({
					useColSpanStyle: o.useColSpanStyle,
					groupHeaders: [{
						titleText: previousY[k],
						startColumnName: aggrlen === 1 ? ""y0"" : ""y0a0"",
						numberOfColumns: aggrlen
					}]
				});
			}
			for (iYData = 1; iYData < yIndexLength; iYData++) {
				itemYData = yIndex.getItem(iYData);
				i = yIndex.getIndexOfDifferences(itemYData, previousY);
				// We placed QNIQUE data in uniqueYData array.
				// So we always find a difference on one level

				addGroupTotalHeaders(iYData, i, previousY);
				// add column headers which corresponds the main data
				for (k = headerLevels - 1; k >= i; k--) {
					colHeaders[k].groupHeaders.push({
						titleText: itemYData[k],
						startColumnName: ""y"" + iYData + (aggrlen === 1 ? """" : ""a0""),
						numberOfColumns: aggrlen
					});
				}
				for (k = 0; k < i; k++) {
					groupHeaders = colHeaders[k].groupHeaders;
					groupHeaders[groupHeaders.length - 1].numberOfColumns += aggrlen;
				}
				previousY = itemYData;
			}
			addGroupTotalHeaders(yIndexLength, 0, previousY);

			// fill groupHeaders without taking in consideration group total columns
			if (isRowTotal) {
				for (i = 0; i < headerLevels; i++) {
					colHeaders[i].groupHeaders.push({
						titleText: (i < headerLevels - 1 ? """" : o.totalHeader || """"),
						startColumnName: ""t"" + (aggrlen === 1 ? """" : ""a0""),
						numberOfColumns: aggrlen
					});
				}
			}

			// *****************************
			// The step 4: fill data of grid
			// *****************************
			xIndexLength = xIndex.getIndexLength();
			for (iXData = 0; iXData < xIndexLength; iXData++) {
				itemXData = xIndex.getItem(iXData);
				pivotInfos = { iX: iXData, x: itemXData };
				outputItem = { pivotInfos: pivotInfos }; // item of output data
				// itemXData corresponds to the row of output data
				for (i = 0; i < xlen; i++) {
					// fill first columns of data
					outputItem[""x"" + i] = itemXData[i];
				}

				indexesOfDataWithTheSameXValues = xIndex.getIndexesOfSourceData(iXData);
				// The rows of input data with indexes from indexesOfDataWithTheSameXValues contains itemXData
				// Now we build columns of itemXData row
				if (isRowTotal) {
					for (k = 0; k < aggrlen; k++) {
						aggrContextTotalRows[k] = createTotalAggregation(k);
					}
				}
				previousY = null;
				initializeGroupTotals();
				for (iYData = 0; iYData < yIndexLength; iYData++) {
					itemYData = yIndex.getItem(iYData);
					indexesOfDataWithTheSameYValues = yIndex.getIndexesOfSourceData(iYData);
					// we calculate aggregate in every itemYData
					for (k = 0; k < aggrlen; k++) {
						if (previousY !== null) { // empty input data
							finalizeGroupTotals(iYData - 1, itemYData, previousY, k);
						}
						iRows = [];
						for (i = 0; i < indexesOfDataWithTheSameYValues.length; i++) {
							iRowsY = indexesOfDataWithTheSameYValues[i];
							if ($.inArray(iRowsY, indexesOfDataWithTheSameXValues) >= 0) {
								iRows.push(iRowsY);
							}
						}
						if (iRows.length > 0) {
							// iRows array have all indexes of input data which have both itemXData and itemYData
							// We need calculate aggregate agr over all the items
							rows = new Array(iRows.length);
							agr = aggregates[k];
							aggrContext = new Aggregation(agr.aggregator, self, options);
							for (iRow = 0; iRow < iRows.length; iRow++) {
								i = iRows[iRow];
								row = data[i];
								rows[iRow] = row;
								aggrContext.calc(row[agr.member], agr.member, row, i, data);
								if (isRowTotal) {
									aggrTotal = aggrContextTotalRows[k];
									aggrTotal.calc(row[agr.member], agr.member, row, i, data);
									gi = aggrTotal.groupInfo;
									if ($.inArray(i, gi.iYs) < 0) {
										gi.iYs.push(iYData);
										gi.ys.push(itemYData);
									}
									if ($.inArray(i, gi.iRows) < 0) {
										gi.iRows.push(i);
										gi.rows.push(row);
									}
								}
								calculateGroupTotals(itemYData, previousY, agr, k, row, i, iYData);
							}
							cmName = ""y"" + iYData + (aggrlen === 1 ? """" : ""a"" + k);
							aggrContext.getResult(outputItem, cmName);
							pivotInfos[cmName] = {
								colType: 0, // standard row
								iY: iYData,
								y: itemYData,
								iA: k,
								a: agr,
								iRows: iRows,
								rows: rows
							};
						}
					}
					previousY = itemYData;
				}
				if (previousY !== null) { // if non-empty input data
					for (k = 0; k < aggrlen; k++) {
						finalizeGroupTotals(yIndexLength - 1, previousY, previousY, k);
					}
				}
				if (isRowTotal) {
					for (k = 0; k < aggrlen; k++) {
						cmName = ""t"" + (aggrlen === 1 ? """" : ""a"" + k);
						aggrTotal = aggrContextTotalRows[k];
						aggrTotal.getResult(outputItem, cmName);
						gi = aggrTotal.groupInfo;
						pivotInfos[cmName] = {
							colType: 2, // row total
							iA: k,
							a: aggregates[k],
							iRows: gi.iRows,
							rows: gi.rows,
							iYs: gi.iYs,
							ys: gi.ys
						};
					}
				}
				outputItems.push(outputItem);
			}

			// *****************************
			// The step 5: fill total footer
			// *****************************
			if (o.footerTotals || o.colTotals) {
				nRows = outputItems.length;
				for (i = 0; i < xlen; i++) {
					summaries[""x"" + i] = xDimension[i].footerText || """";
				}
				for (i = xlen; i < colModel.length; i++) {
					cmName = colModel[i].name;
					aggrContext = new Aggregation(o.footerAggregator || ""sum"", self, options);
					for (iRow = 0; iRow < nRows; iRow++) {
						outputItem = outputItems[iRow];
						aggrContext.calc(outputItem[cmName], cmName, outputItem, iRow, outputItems);
					}
					aggrContext.getResult(summaries, cmName);
				}
			}

			// return the final result.
			options.colHeaders = colHeaders;
			return {
				colModel: colModel,
				additionalProperties: additionalProperties,
				options: options,
				rows: outputItems,
				groupOptions: groupOptions,
				groupHeaders: colHeaders,
				summary: summaries
			};
		},
		jqPivot: function (data, pivotOpt, gridOpt, ajaxOpt) {
			return this.each(function () {
				var $t = this, $self = $($t), $j = $.fn.jqGrid;

				function pivot() {
					var pivotGrid = $j.pivotSetup.call($self, data, pivotOpt),
						gHead = pivotGrid.groupHeaders,
						assocArraySize = function (obj) {
							// http://stackoverflow.com/a/6700/11236
							var size = 0, key;
							for (key in obj) {
								if (obj.hasOwnProperty(key)) {
									size++;
								}
							}
							return size;
						},
						footerrow = assocArraySize(pivotGrid.summary) > 0 ? true : false,
						groupingView = pivotGrid.groupOptions.groupingView,
						query = jgrid.from.call($t, pivotGrid.rows), i;
					if (pivotOpt.skipSortByX) {
						for (i = 0; i < groupingView.groupField.length; i++) {
							query.orderBy(groupingView.groupField[i],
								gridOpt != null && gridOpt.groupingView && gridOpt.groupingView.groupOrder != null && gridOpt.groupingView.groupOrder[i] === ""desc"" ? ""d"" : ""a"",
								""text"",
								"""");
						}
					}
					pivotOpt.data = data;
					$j.call($self, $.extend(true, {
						datastr: $.extend(query.select(), footerrow ? { userdata: pivotGrid.summary } : {}),
						datatype: ""jsonstring"",
						footerrow: footerrow,
						userDataOnFooter: footerrow,
						colModel: pivotGrid.colModel,
						additionalProperties: pivotGrid.additionalProperties,
						pivotOptions: pivotGrid.options,
						viewrecords: true,
						sortname: pivotOpt.xDimension[0].dataName // ?????
					}, pivotGrid.groupOptions, gridOpt || {}));
					if (gHead.length) {
						for (i = 0; i < gHead.length; i++) {
							// Multiple calls of setGroupHeaders for one grid are wrong,
							// but there are produces good results in case of usage
							// useColSpanStyle: false option. The rowspan values
							// needed be increased in case of usage useColSpanStyle: true
							if (gHead[i] && gHead[i].groupHeaders.length) {
								$j.setGroupHeaders.call($self, gHead[i]);
							}
						}
					}
					if (pivotOpt.frozenStaticCols) {
						$j.setFrozenColumns.call($self);
					}
				}

				if (typeof data === ""string"") {
					$.ajax($.extend({
						url: data,
						dataType: ""json"",
						success: function (data1) {
							data = jgrid.getAccessor(data1, ajaxOpt && ajaxOpt.reader ? ajaxOpt.reader : ""rows"");
							pivot();
						}
					}, ajaxOpt || {}));
				} else {
					pivot();
				}
			});
		}
	});
	// end module grid.pivot
}));
",TRUE,,0
1,InitialSO.csv1.txt,InitialGit.csv1.txt,3,"Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

// Get the size of an object
var size = Object.size(myArray);
 ","Object.keys() var size = Object.keys(myObj).length;
 Object.keys() Object.keys Object.getOwnPropertyNames Object.getOwnPropertySymbols var person = {
  [Symbol('name')]: 'John Doe',
  [Symbol('age')]: 33,
  ""occupation"": ""Programmer""
};

const propOwn = Object.getOwnPropertyNames(person);
console.log(propOwn.length); // 1

let propSymb = Object.getOwnPropertySymbols(person);
console.log(propSymb.length); // 2 Object.size = function(obj) {
  var size = 0,
    key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }
  return size;
};

// Get the size of an object
const myObj = {}
var size = Object.size(myObj); ",FALSE,"/*jshint eqeqeq:false */
/*global jQuery, define */
(function( factory ) {
	""use strict"";
	if ( typeof define === ""function"" && define.amd ) {
		// AMD. Register as an anonymous module.
		define([
			""jquery"",
			""./grid.base"",
			""./grid.grouping""
		], factory );
	} else {
		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {
""use strict"";
// To optimize the search we need custom array filter
// This code is taken from
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
//module begin
function _pivotfilter (fn, context) {
	/*jshint validthis: true */
	var i,
		value,
		result = [],
		length;
		
	if (!this || typeof fn !== 'function' || (fn instanceof RegExp)) {
		throw new TypeError();
	}

	length = this.length;

	for (i = 0; i < length; i++) {
		if (this.hasOwnProperty(i)) {
			value = this[i];
			if (fn.call(context, value, i, this)) {
				result.push(value);
				// We need break in order to cancel loop 
				// in case the row is found
				break;
			}
		}
	}
	return result;
}
$.assocArraySize = function(obj) {
    // http://stackoverflow.com/a/6700/11236
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
        	size++;
        }
    }
    return size;
};

$.jgrid.extend({
	pivotSetup : function( data, options ){
		// data should come in json format
		// The function return the new colModel and the transformed data
		// again with group setup options which then will be passed to the grid
		var columns =[],
		pivotrows =[],
		summaries = [],
		member=[],
		labels=[],
		groupOptions = {
			grouping : true,
			groupingView :  {
				groupField : [],
				groupSummary: [],
				groupSummaryPos:[]
			}
		},
		headers = [],
		o = $.extend ( {
			rowTotals : false,
			rowTotalsText : 'Total',
			// summary columns
			colTotals : false,
			groupSummary : true,
			groupSummaryPos :  'header',
			frozenStaticCols : false
		}, options || {});
		this.each(function(){

			var 
				row,
				rowindex,
				i,
				
				rowlen = data.length,
				xlen, ylen, aggrlen,
				tmp,
				newObj,
				r=0;
			// utility funcs
			/* 
			 * Filter the data to a given criteria. Return the firt occurance
			 */
			function find(ar, fun, extra) {
				var res;
				res = _pivotfilter.call(ar, fun, extra);
				return res.length > 0 ? res[0] : null;
			}
			/*
			 * Check if the grouped row column exist (See find)
			 * If the row is not find in pivot rows retun null,
			 * otherviese the column
			 */
			function findGroup(item, index) {
				/*jshint validthis: true */
				var j = 0, ret = true, i;
				for(i in item) {
					if( item.hasOwnProperty(i) ) {
						if(item[i] != this[j]) {
							ret =  false;
							break;
						}
						j++;
						if(j>=this.length) {
							break;
						}
					}
				}
				if(ret) {
					rowindex =  index;
				}
				return ret;
			}
			/*
			 * Perform calculations of the pivot values.
			 */
			function calculation(oper, v, field, rc, _cnt)  {
				var ret;
				switch (oper) {
					case  ""sum"" : 
						ret = parseFloat(v||0) + parseFloat((rc[field]||0));
						break;
					case ""count"" :
						if(v==="""" || v == null) {
							v=0;
						}
						if(rc.hasOwnProperty(field)) {
							ret = v+1;
						} else {
							ret = 0;
						}
						break;
					case ""min"" : 
						if(v==="""" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret =Math.min(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
					case ""max"" : 
						if(v==="""" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret = Math.max(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
					case ""avg"" : //avg grouping
						 
						ret = (parseFloat(v||0) * (_cnt -1) + parseFloat(rc[field]||0) ) /_cnt;
						 
						break;	
				}
				return ret;
			}
			/*
			 * The function agragates the values of the pivot grid.
			 * Return the current row with pivot summary values
			 */
			function agregateFunc ( row, aggr, value, curr) {
				// default is sum
				var arrln = aggr.length, i, label, j, jv, mainval="""",swapvals=[];
				if($.isArray(value)) {
					jv = value.length;
					swapvals = value;
				} else {
					jv = 1;
					swapvals[0]=value;
				}
				member = [];
				labels = [];
				member.root = 0;
				if(! !!curr._count ){
					curr._count = 1;
				}else{
					curr._count ++;
				}
				for(j=0;j<jv;j++) {
					var  tmpmember = [], vl;
					for(i=0; i < arrln; i++) {
						if(value == null) {
							label = $.trim(aggr[i].member)+""_""+aggr[i].aggregator;
							vl = label;
							swapvals[0]= aggr[i].label || (aggr[i].aggregator+ "" "" +$.trim(aggr[i].member));
						} else {
							vl = value[j].replace(/\s+/g, '');
							try {
								label = (arrln === 1 ? mainval + vl : mainval + vl+""_""+aggr[i].aggregator+""_"" + String(i));
							} catch(e) {}
							swapvals[j] = value[j];
						}
						//if(j<=1 && vl !==  '_r_Totals' && mainval === """") { // this does not fix full the problem
							//mainval = vl;
						//}
						label = !isNaN(parseInt(label,10)) ? label + "" "" : label;
						curr[label] =  tmpmember[label] = calculation( aggr[i].aggregator, curr[label], aggr[i].member, row, curr._count);
					}
					mainval += value[j].replace(/\s+/g, '');
					//vl = !isNaN(parseInt(vl,10)) ? vl + "" "" : vl;
					member[label] = tmpmember;
					labels[label] = swapvals[j];
				}
				return curr;
			}
			// Making the row totals without to add in yDimension
			if(o.rowTotals && o.yDimension.length > 0) {
				var dn = o.yDimension[0].dataName;
				o.yDimension.splice(0,0,{dataName:dn});
				o.yDimension[0].converter =  function(){ return '_r_Totals'; };
			}
			// build initial columns (colModel) from xDimension
			xlen = $.isArray(o.xDimension) ? o.xDimension.length : 0;
			ylen = o.yDimension.length;
			aggrlen  = $.isArray(o.aggregates) ? o.aggregates.length : 0;
			if(xlen === 0 || aggrlen === 0) {
				throw(""xDimension or aggregates optiona are not set!"");
			}
			var colc;
			for(i = 0; i< xlen; i++) {
				colc = {name:o.xDimension[i].dataName, frozen: o.frozenStaticCols};
				if(o.xDimension[i].isGroupField == null) {
					o.xDimension[i].isGroupField =  true;
				}
				colc = $.extend(true, colc, o.xDimension[i]);
				columns.push( colc );
			}
			var groupfields = xlen - 1, tree={};
			//tree = { text: 'root', leaf: false, children: [] };
			//loop over alll the source data
			while( r < rowlen ) {
				row = data[r];
				var xValue = [];
				var yValue = []; 
				tmp = {};
				i = 0;
				// build the data from xDimension
				do {
					xValue[i]  = $.trim(row[o.xDimension[i].dataName]);
					tmp[o.xDimension[i].dataName] = xValue[i];
					i++;
				} while( i < xlen );
				
				var k = 0;
				rowindex = -1;
				// check to see if the row is in our new pivotrow set
				newObj = find(pivotrows, findGroup, xValue);
				if(!newObj) {
					// if the row is not in our set
					k = 0;
					// if yDimension is set
					if(ylen>=1) {
						// build the cols set in yDimension
						for(k=0;k<ylen;k++) {
							yValue[k] = $.trim(row[o.yDimension[k].dataName]);
							// Check to see if we have user defined conditions
							if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
								yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
							}
						}
						// make the colums based on aggregates definition 
						// and return the members for late calculation
						tmp = agregateFunc( row, o.aggregates, yValue, tmp );
					} else  if( ylen === 0 ) {
						// if not set use direct the aggregates 
						tmp = agregateFunc( row, o.aggregates, null, tmp );
					}
					// add the result in pivot rows
					pivotrows.push( tmp );
				} else {
					// the pivot exists
					if( rowindex >= 0) {
						k = 0;
						// make the recalculations 
						if(ylen>=1) {
							for(k=0;k<ylen;k++) {
								yValue[k] = $.trim(row[o.yDimension[k].dataName]);
								if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
									yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
								}
							}
							newObj = agregateFunc( row, o.aggregates, yValue, newObj );
						} else  if( ylen === 0 ) {
							newObj = agregateFunc( row, o.aggregates, null, newObj );
						}
						// update the row
						pivotrows[rowindex] = newObj;
					}
				}
				var kj=0, current = null,existing = null, kk;
				// Build a JSON tree from the member (see aggregateFunc) 
				// to make later the columns 
				// 
				for (kk in member) {
					if(member.hasOwnProperty( kk )) {
						if(kj === 0) {
							if (!tree.children||tree.children === undefined){
								tree = { text: kk, level : 0, children: [], label: kk  };
							}
							current = tree.children;
						} else {
							existing = null;
							for (i=0; i < current.length; i++) {
								if (current[i].text === kk) {
								//current[i].fields=member[kk];
									existing = current[i];
									break;
								}
							}
							if (existing) {
								current = existing.children;
							} else {
								current.push({ children: [], text: kk, level: kj,  fields: member[kk], label: labels[kk] });
								current = current[current.length - 1].children;
							}
						}
						kj++;
					}
				}
				r++;
			}
			var  lastval=[], initColLen = columns.length, swaplen = initColLen;
			if(ylen>0) {
				headers[ylen-1] = {	useColSpanStyle: false,	groupHeaders: []};
			}
			/*
			 * Recursive function which uses the tree to build the 
			 * columns from the pivot values and set the group Headers
			 */
			function list(items) {
				var l, j, key, k, col;
				for (key in items) {	 // iterate
					if (items.hasOwnProperty(key)) {
					// write amount of spaces according to level
					// and write name and newline
						if(typeof items[key] !== ""object"") {
							// If not a object build the header of the appropriate level
							if( key === 'level') {
								if(lastval[items.level] === undefined) {
									lastval[items.level] ='';
									if(items.level>0 && items.text.indexOf('_r_Totals') === -1) {
										headers[items.level-1] = {
											useColSpanStyle: false,
											groupHeaders: []
										};
									}
								}
								if(lastval[items.level] !== items.text && items.children.length && items.text.indexOf('_r_Totals') === -1 ) {
									if(items.level>0) {
										headers[items.level-1].groupHeaders.push({
											titleText: items.label,
											numberOfColumns : 0
										});
										var collen = headers[items.level-1].groupHeaders.length-1,
										colpos = collen === 0 ? swaplen : initColLen;//+aggrlen;
										if(items.level-1=== (o.rowTotals ? 1 : 0)) {
											if(collen>0) {
												var l1=0;
												for(var kk=0; kk<collen; kk++) { 
													l1 += headers[items.level-1].groupHeaders[kk].numberOfColumns;
												}
												if(l1) {
													colpos = l1  + xlen;
												}
											}
										}
										if(columns[colpos]) {
											headers[items.level-1].groupHeaders[collen].startColumnName = columns[colpos].name;
											headers[items.level-1].groupHeaders[collen].numberOfColumns = columns.length - colpos;
										}
										initColLen = columns.length;
									}
								}
								lastval[items.level] = items.text;
							}
							// This is in case when the member contain more than one summary item
							if(items.level === ylen  && key==='level' && ylen >0) {
								if( aggrlen > 1){
									var ll=1;
									for( l in items.fields) {
										if(items.fields.hasOwnProperty(l)) {
											if(ll===1) {
												headers[ylen-1].groupHeaders.push({startColumnName: l, numberOfColumns: 1, titleText: items.label || items.text});
											}
											ll++;
										}
									}
									headers[ylen-1].groupHeaders[headers[ylen-1].groupHeaders.length-1].numberOfColumns = ll-1;
								} else {
									headers.splice(ylen-1,1);
								}
							}
						}
						// if object, call recursively
						if (items[key] != null && typeof items[key] === ""object"") {
							list(items[key]);
						}
						// Finally build the columns
						if( key === 'level') {
							if( items.level > 0 &&  (items.level === (ylen===0?items.level:ylen) || lastval[items.level].indexOf('_r_Totals') !== -1 ) ){
								j=0;
								for(l in items.fields) {
									if(items.fields.hasOwnProperty( l ) ) {
										col = {};
										for(k in o.aggregates[j]) {
											if(o.aggregates[j].hasOwnProperty(k)) {
												switch( k ) {
													case 'member':
													case 'label':
													case 'aggregator':
														break;
													default:
														col[k] = o.aggregates[j][k];
												}
											}
										}	
										if(aggrlen > 1) {
											col.name = l;
											col.label = o.aggregates[j].label || items.label;
										} else {
											col.name = items.text;
											col.label = items.text==='_r_Totals' ? o.rowTotalsText : items.label;
										}
										columns.push (col);
										j++;
									}
								}
							}
						}
					}
				}
			}

			list( tree );
			var nm;
			// loop again trougth the pivot rows in order to build grand total 
			if(o.colTotals) {
				var plen = pivotrows.length;
				while(plen--) {
					for(i=xlen;i<columns.length;i++) {
						nm = columns[i].name;
						if(!summaries[nm]) {
							summaries[nm] = parseFloat(pivotrows[plen][nm] || 0);
						} else {
							summaries[nm] += parseFloat(pivotrows[plen][nm] || 0);
						}
					}
				}
			}
			// based on xDimension  levels build grouping 
			if( groupfields > 0) {
				for(i=0;i<groupfields;i++) {
					if(columns[i].isGroupField) {
						groupOptions.groupingView.groupField.push(columns[i].name);
						groupOptions.groupingView.groupSummary.push(o.groupSummary);
						groupOptions.groupingView.groupSummaryPos.push(o.groupSummaryPos);
					}
				}
			} else {
				// no grouping is needed
				groupOptions.grouping = false;
			}
			groupOptions.sortname = columns[groupfields].name;
			groupOptions.groupingView.hideFirstGroupCol = true;
		});
		// return the final result.
		return { ""colModel"" : columns, ""rows"": pivotrows, ""groupOptions"" : groupOptions, ""groupHeaders"" :  headers, summary : summaries };
	},
	jqPivot : function( data, pivotOpt, gridOpt, ajaxOpt) {
		return this.each(function(){
			var $t = this;

			function pivot( data) {
				var pivotGrid = jQuery($t).jqGrid('pivotSetup',data, pivotOpt),
				footerrow = $.assocArraySize(pivotGrid.summary) > 0 ? true : false,
				query= $.jgrid.from.call($t, pivotGrid.rows), i, so, st, len;
				if(pivotOpt.ignoreCase) {
					query = query.ignoreCase();
				}
				for(i=0; i< pivotGrid.groupOptions.groupingView.groupField.length; i++) {
					so = pivotOpt.xDimension[i].sortorder ? pivotOpt.xDimension[i].sortorder : 'asc';
					st = pivotOpt.xDimension[i].sorttype ? pivotOpt.xDimension[i].sorttype : 'text';
					query.orderBy(pivotGrid.groupOptions.groupingView.groupField[i], so, st, '', st);
				}
				len = pivotOpt.xDimension.length;
				if(pivotGrid.groupOptions.sortname && len) {
					so = pivotOpt.xDimension[len-1].sortorder ? pivotOpt.xDimension[len-1].sortorder : 'asc';
					st = pivotOpt.xDimension[len-1].sorttype ? pivotOpt.xDimension[len-1].sorttype : 'text';
					query.orderBy(pivotGrid.groupOptions.sortname, so, st, '', st);					
				}
				jQuery($t).jqGrid($.extend(true, {
					datastr: $.extend(query.select(),footerrow ? {userdata:pivotGrid.summary} : {}),
					datatype: ""jsonstring"",
					footerrow : footerrow,
					userDataOnFooter: footerrow,
					colModel: pivotGrid.colModel,
					viewrecords: true,
					sortname: pivotOpt.xDimension[0].dataName // ?????
				}, pivotGrid.groupOptions, gridOpt || {}));
				var gHead = pivotGrid.groupHeaders;
				if(gHead.length) {
					for( i = 0;i < gHead.length ; i++) {
						if(gHead[i] && gHead[i].groupHeaders.length) {
							jQuery($t).jqGrid('setGroupHeaders',gHead[i]);
						}
					}
				}
				if(pivotOpt.frozenStaticCols) {
					jQuery($t).jqGrid(""setFrozenColumns"");
				}
			}

			if(typeof data === ""string"") {
				$.ajax($.extend({
					url : data,
					dataType: 'json',
					success : function(response) {
						pivot($.jgrid.getAccessor(response, ajaxOpt && ajaxOpt.reader ? ajaxOpt.reader: 'rows') );
					}
				}, ajaxOpt || {}) );
			} else {
				pivot( data );
			}
		});
	}
});
//module end
}));
","/*jshint eqeqeq:false */
/*global jQuery, define */
(function( factory ) {
	""use strict"";
	if ( typeof define === ""function"" && define.amd ) {
		// AMD. Register as an anonymous module.
		define([
			""jquery"",
			""./grid.base"",
			""./grid.grouping""
		], factory );
	} else {
		// Browser globals
		factory( jQuery );
	}
}(function( $ ) {
""use strict"";
// To optimize the search we need custom array filter
// This code is taken from
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
//module begin
function _pivotfilter (fn, context) {
	/*jshint validthis: true */
	var i,
		value,
		result = [],
		length;
		
	if (!this || typeof fn !== 'function' || (fn instanceof RegExp)) {
		throw new TypeError();
	}

	length = this.length;

	for (i = 0; i < length; i++) {
		if (this.hasOwnProperty(i)) {
			value = this[i];
			if (fn.call(context, value, i, this)) {
				result.push(value);
				// We need break in order to cancel loop 
				// in case the row is found
				break;
			}
		}
	}
	return result;
}
$.assocArraySize = function(obj) {
    // http://stackoverflow.com/a/6700/11236
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
        	size++;
        }
    }
    return size;
};

$.jgrid.extend({
	pivotSetup : function( data, options ){
		// data should come in json format
		// The function return the new colModel and the transformed data
		// again with group setup options which then will be passed to the grid
		var columns =[],
		pivotrows =[],
		summaries = [],
		member=[],
		labels=[],
		groupOptions = {
			grouping : true,
			groupingView :  {
				groupField : [],
				groupSummary: [],
				groupSummaryPos:[]
			}
		},
		headers = [],
		o = $.extend ( {
			rowTotals : false,
			rowTotalsText : 'Total',
			// summary columns
			colTotals : false,
			groupSummary : true,
			groupSummaryPos :  'header',
			frozenStaticCols : false
		}, options || {});
		this.each(function(){

			var 
				row,
				rowindex,
				i,
				
				rowlen = data.length,
				xlen, ylen, aggrlen,
				tmp,
				newObj,
				r=0;
			// utility funcs
			/* 
			 * Filter the data to a given criteria. Return the firt occurance
			 */
			function find(ar, fun, extra) {
				var res;
				res = _pivotfilter.call(ar, fun, extra);
				return res.length > 0 ? res[0] : null;
			}
			/*
			 * Check if the grouped row column exist (See find)
			 * If the row is not find in pivot rows retun null,
			 * otherviese the column
			 */
			function findGroup(item, index) {
				/*jshint validthis: true */
				var j = 0, ret = true, i;
				for(i in item) {
					if( item.hasOwnProperty(i) ) {
						if(item[i] != this[j]) {
							ret =  false;
							break;
						}
						j++;
						if(j>=this.length) {
							break;
						}
					}
				}
				if(ret) {
					rowindex =  index;
				}
				return ret;
			}
			/*
			 * Perform calculations of the pivot values.
			 */
			function calculation(oper, v, field, rc, _cnt)  {
				var ret;
				switch (oper) {
					case  ""sum"" : 
						ret = parseFloat(v||0) + parseFloat((rc[field]||0));
						break;
					case ""count"" :
						if(v==="""" || v == null) {
							v=0;
						}
						if(rc.hasOwnProperty(field)) {
							ret = v+1;
						} else {
							ret = 0;
						}
						break;
					case ""min"" : 
						if(v==="""" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret =Math.min(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
					case ""max"" : 
						if(v==="""" || v == null) {
							ret = parseFloat(rc[field]||0);
						} else {
							ret = Math.max(parseFloat(v),parseFloat(rc[field]||0));
						}
						break;
					case ""avg"" : //avg grouping
						 
						ret = (parseFloat(v||0) * (_cnt -1) + parseFloat(rc[field]||0) ) /_cnt;
						 
						break;	
				}
				return ret;
			}
			/*
			 * The function agragates the values of the pivot grid.
			 * Return the current row with pivot summary values
			 */
			function agregateFunc ( row, aggr, value, curr) {
				// default is sum
				var arrln = aggr.length, i, label, j, jv, mainval="""",swapvals=[];
				if($.isArray(value)) {
					jv = value.length;
					swapvals = value;
				} else {
					jv = 1;
					swapvals[0]=value;
				}
				member = [];
				labels = [];
				member.root = 0;
				if(! !!curr._count ){
					curr._count = 1;
				}else{
					curr._count ++;
				}
				for(j=0;j<jv;j++) {
					var  tmpmember = [], vl;
					for(i=0; i < arrln; i++) {
						if(value == null) {
							label = $.trim(aggr[i].member)+""_""+aggr[i].aggregator;
							vl = label;
							swapvals[0]= aggr[i].label || (aggr[i].aggregator+ "" "" +$.trim(aggr[i].member));
						} else {
							vl = value[j].replace(/\s+/g, '');
							try {
								label = (arrln === 1 ? mainval + vl : mainval + vl+""_""+aggr[i].aggregator+""_"" + String(i));
							} catch(e) {}
							swapvals[j] = value[j];
						}
						//if(j<=1 && vl !==  '_r_Totals' && mainval === """") { // this does not fix full the problem
							//mainval = vl;
						//}
						label = !isNaN(parseInt(label,10)) ? label + "" "" : label;
						curr[label] =  tmpmember[label] = calculation( aggr[i].aggregator, curr[label], aggr[i].member, row, curr._count);
					}
					mainval += value[j].replace(/\s+/g, '');
					//vl = !isNaN(parseInt(vl,10)) ? vl + "" "" : vl;
					member[label] = tmpmember;
					labels[label] = swapvals[j];
				}
				return curr;
			}
			// Making the row totals without to add in yDimension
			if(o.rowTotals && o.yDimension.length > 0) {
				var dn = o.yDimension[0].dataName;
				o.yDimension.splice(0,0,{dataName:dn});
				o.yDimension[0].converter =  function(){ return '_r_Totals'; };
			}
			// build initial columns (colModel) from xDimension
			xlen = $.isArray(o.xDimension) ? o.xDimension.length : 0;
			ylen = o.yDimension.length;
			aggrlen  = $.isArray(o.aggregates) ? o.aggregates.length : 0;
			if(xlen === 0 || aggrlen === 0) {
				throw(""xDimension or aggregates optiona are not set!"");
			}
			var colc;
			for(i = 0; i< xlen; i++) {
				colc = {name:o.xDimension[i].dataName, frozen: o.frozenStaticCols};
				if(o.xDimension[i].isGroupField == null) {
					o.xDimension[i].isGroupField =  true;
				}
				colc = $.extend(true, colc, o.xDimension[i]);
				columns.push( colc );
			}
			var groupfields = xlen - 1, tree={};
			//tree = { text: 'root', leaf: false, children: [] };
			//loop over alll the source data
			while( r < rowlen ) {
				row = data[r];
				var xValue = [];
				var yValue = []; 
				tmp = {};
				i = 0;
				// build the data from xDimension
				do {
					xValue[i]  = $.trim(row[o.xDimension[i].dataName]);
					tmp[o.xDimension[i].dataName] = xValue[i];
					i++;
				} while( i < xlen );
				
				var k = 0;
				rowindex = -1;
				// check to see if the row is in our new pivotrow set
				newObj = find(pivotrows, findGroup, xValue);
				if(!newObj) {
					// if the row is not in our set
					k = 0;
					// if yDimension is set
					if(ylen>=1) {
						// build the cols set in yDimension
						for(k=0;k<ylen;k++) {
							yValue[k] = $.trim(row[o.yDimension[k].dataName]);
							// Check to see if we have user defined conditions
							if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
								yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
							}
						}
						// make the colums based on aggregates definition 
						// and return the members for late calculation
						tmp = agregateFunc( row, o.aggregates, yValue, tmp );
					} else  if( ylen === 0 ) {
						// if not set use direct the aggregates 
						tmp = agregateFunc( row, o.aggregates, null, tmp );
					}
					// add the result in pivot rows
					pivotrows.push( tmp );
				} else {
					// the pivot exists
					if( rowindex >= 0) {
						k = 0;
						// make the recalculations 
						if(ylen>=1) {
							for(k=0;k<ylen;k++) {
								yValue[k] = $.trim(row[o.yDimension[k].dataName]);
								if(o.yDimension[k].converter && $.isFunction(o.yDimension[k].converter)) {
									yValue[k] = o.yDimension[k].converter.call(this, yValue[k], xValue, yValue);
								}
							}
							newObj = agregateFunc( row, o.aggregates, yValue, newObj );
						} else  if( ylen === 0 ) {
							newObj = agregateFunc( row, o.aggregates, null, newObj );
						}
						// update the row
						pivotrows[rowindex] = newObj;
					}
				}
				var kj=0, current = null,existing = null, kk;
				// Build a JSON tree from the member (see aggregateFunc) 
				// to make later the columns 
				// 
				for (kk in member) {
					if(member.hasOwnProperty( kk )) {
						if(kj === 0) {
							if (!tree.children||tree.children === undefined){
								tree = { text: kk, level : 0, children: [], label: kk  };
							}
							current = tree.children;
						} else {
							existing = null;
							for (i=0; i < current.length; i++) {
								if (current[i].text === kk) {
								//current[i].fields=member[kk];
									existing = current[i];
									break;
								}
							}
							if (existing) {
								current = existing.children;
							} else {
								current.push({ children: [], text: kk, level: kj,  fields: member[kk], label: labels[kk] });
								current = current[current.length - 1].children;
							}
						}
						kj++;
					}
				}
				r++;
			}
			var  lastval=[], initColLen = columns.length, swaplen = initColLen;
			if(ylen>0) {
				headers[ylen-1] = {	useColSpanStyle: false,	groupHeaders: []};
			}
			/*
			 * Recursive function which uses the tree to build the 
			 * columns from the pivot values and set the group Headers
			 */
			function list(items) {
				var l, j, key, k, col;
				for (key in items) {	 // iterate
					if (items.hasOwnProperty(key)) {
					// write amount of spaces according to level
					// and write name and newline
						if(typeof items[key] !== ""object"") {
							// If not a object build the header of the appropriate level
							if( key === 'level') {
								if(lastval[items.level] === undefined) {
									lastval[items.level] ='';
									if(items.level>0 && items.text.indexOf('_r_Totals') === -1) {
										headers[items.level-1] = {
											useColSpanStyle: false,
											groupHeaders: []
										};
									}
								}
								if(lastval[items.level] !== items.text && items.children.length && items.text.indexOf('_r_Totals') === -1 ) {
									if(items.level>0) {
										headers[items.level-1].groupHeaders.push({
											titleText: items.label,
											numberOfColumns : 0
										});
										var collen = headers[items.level-1].groupHeaders.length-1,
										colpos = collen === 0 ? swaplen : initColLen;//+aggrlen;
										if(items.level-1=== (o.rowTotals ? 1 : 0)) {
											if(collen>0) {
												var l1=0;
												for(var kk=0; kk<collen; kk++) { 
													l1 += headers[items.level-1].groupHeaders[kk].numberOfColumns;
												}
												if(l1) {
													colpos = l1  + xlen;
												}
											}
										}
										if(columns[colpos]) {
											headers[items.level-1].groupHeaders[collen].startColumnName = columns[colpos].name;
											headers[items.level-1].groupHeaders[collen].numberOfColumns = columns.length - colpos;
										}
										initColLen = columns.length;
									}
								}
								lastval[items.level] = items.text;
							}
							// This is in case when the member contain more than one summary item
							if(items.level === ylen  && key==='level' && ylen >0) {
								if( aggrlen > 1){
									var ll=1;
									for( l in items.fields) {
										if(items.fields.hasOwnProperty(l)) {
											if(ll===1) {
												headers[ylen-1].groupHeaders.push({startColumnName: l, numberOfColumns: 1, titleText: items.label || items.text});
											}
											ll++;
										}
									}
									headers[ylen-1].groupHeaders[headers[ylen-1].groupHeaders.length-1].numberOfColumns = ll-1;
								} else {
									headers.splice(ylen-1,1);
								}
							}
						}
						// if object, call recursively
						if (items[key] != null && typeof items[key] === ""object"") {
							list(items[key]);
						}
						// Finally build the columns
						if( key === 'level') {
							if( items.level > 0 &&  (items.level === (ylen===0?items.level:ylen) || lastval[items.level].indexOf('_r_Totals') !== -1 ) ){
								j=0;
								for(l in items.fields) {
									if(items.fields.hasOwnProperty( l ) ) {
										col = {};
										for(k in o.aggregates[j]) {
											if(o.aggregates[j].hasOwnProperty(k)) {
												switch( k ) {
													case 'member':
													case 'label':
													case 'aggregator':
														break;
													default:
														col[k] = o.aggregates[j][k];
												}
											}
										}	
										if(aggrlen > 1) {
											col.name = l;
											col.label = o.aggregates[j].label || items.label;
										} else {
											col.name = items.text;
											col.label = items.text==='_r_Totals' ? o.rowTotalsText : items.label;
										}
										columns.push (col);
										j++;
									}
								}
							}
						}
					}
				}
			}

			list( tree );
			var nm;
			// loop again trougth the pivot rows in order to build grand total 
			if(o.colTotals) {
				var plen = pivotrows.length;
				while(plen--) {
					for(i=xlen;i<columns.length;i++) {
						nm = columns[i].name;
						if(!summaries[nm]) {
							summaries[nm] = parseFloat(pivotrows[plen][nm] || 0);
						} else {
							summaries[nm] += parseFloat(pivotrows[plen][nm] || 0);
						}
					}
				}
			}
			// based on xDimension  levels build grouping 
			if( groupfields > 0) {
				for(i=0;i<groupfields;i++) {
					if(columns[i].isGroupField) {
						groupOptions.groupingView.groupField.push(columns[i].name);
						groupOptions.groupingView.groupSummary.push(o.groupSummary);
						groupOptions.groupingView.groupSummaryPos.push(o.groupSummaryPos);
					}
				}
			} else {
				// no grouping is needed
				groupOptions.grouping = false;
			}
			groupOptions.sortname = columns[groupfields].name;
			groupOptions.groupingView.hideFirstGroupCol = true;
		});
		// return the final result.
		return { ""colModel"" : columns, ""rows"": pivotrows, ""groupOptions"" : groupOptions, ""groupHeaders"" :  headers, summary : summaries };
	},
	jqPivot : function( data, pivotOpt, gridOpt, ajaxOpt) {
		return this.each(function(){
			var $t = this;

			function pivot( data) {
				var pivotGrid = jQuery($t).jqGrid('pivotSetup',data, pivotOpt),
				footerrow = $.assocArraySize(pivotGrid.summary) > 0 ? true : false,
				query= $.jgrid.from.call($t, pivotGrid.rows), i, so, st, len;
				if(pivotOpt.ignoreCase) {
					query = query.ignoreCase();
				}
				for(i=0; i< pivotGrid.groupOptions.groupingView.groupField.length; i++) {
					so = pivotOpt.xDimension[i].sortorder ? pivotOpt.xDimension[i].sortorder : 'asc';
					st = pivotOpt.xDimension[i].sorttype ? pivotOpt.xDimension[i].sorttype : 'text';
					query.orderBy(pivotGrid.groupOptions.groupingView.groupField[i], so, st, '', st);
				}
				len = pivotOpt.xDimension.length;
				if(pivotGrid.groupOptions.sortname && len) {
					so = pivotOpt.xDimension[len-1].sortorder ? pivotOpt.xDimension[len-1].sortorder : 'asc';
					st = pivotOpt.xDimension[len-1].sorttype ? pivotOpt.xDimension[len-1].sorttype : 'text';
					query.orderBy(pivotGrid.groupOptions.sortname, so, st, '', st);					
				}
				jQuery($t).jqGrid($.extend(true, {
					datastr: $.extend(query.select(),footerrow ? {userdata:pivotGrid.summary} : {}),
					datatype: ""jsonstring"",
					footerrow : footerrow,
					userDataOnFooter: footerrow,
					colModel: pivotGrid.colModel,
					viewrecords: true,
					sortname: pivotOpt.xDimension[0].dataName // ?????
				}, pivotGrid.groupOptions, gridOpt || {}));
				var gHead = pivotGrid.groupHeaders;
				if(gHead.length) {
					for( i = 0;i < gHead.length ; i++) {
						if(gHead[i] && gHead[i].groupHeaders.length) {
							jQuery($t).jqGrid('setGroupHeaders',gHead[i]);
						}
					}
				}
				if(pivotOpt.frozenStaticCols) {
					jQuery($t).jqGrid(""setFrozenColumns"");
				}
			}

			if(typeof data === ""string"") {
				$.ajax($.extend({
					url : data,
					dataType: 'json',
					success : function(response) {
						pivot($.jgrid.getAccessor(response, ajaxOpt && ajaxOpt.reader ? ajaxOpt.reader: 'rows') );
					}
				}, ajaxOpt || {}) );
			} else {
				pivot( data );
			}
		});
	}
});
//module end
}));
",TRUE,,1
29,InitialSO.csv29.txt,InitialGit.csv29.txt,14,"/**
 * Determines if a form is dirty by comparing the current value of each element
 * with its default value.
 *
 * @param {Form} form the form to be checked.
 * @return {Boolean} <code>true</code> if the form is dirty, <code>false</code>
 *                   otherwise.
 */
function formIsDirty(form) {
  for (var i = 0; i < form.elements.length; i++) {
    var element = form.elements[i];
    var type = element.type;
    if (type == ""checkbox"" || type == ""radio"") {
      if (element.checked != element.defaultChecked) {
        return true;
      }
    }
    else if (type == ""hidden"" || type == ""password"" ||
             type == ""text"" || type == ""textarea"") {
      if (element.value != element.defaultValue) {
        return true;
      }
    }
    else if (type == ""select-one"" || type == ""select-multiple"") {
      for (var j = 0; j < element.options.length; j++) {
        if (element.options[j].selected !=
            element.options[j].defaultSelected) {
          return true;
        }
      }
    }
  }
  return false;
}
 window.onbeforeunload = function(e) {
  e = e || window.event;  
  if (formIsDirty(document.forms[""someForm""])) {
    // For IE and Firefox
    if (e) {
      e.returnValue = ""You have unsaved changes."";
    }
    // For Safari
    return ""You have unsaved changes."";
  }
};
 var confirmExitIfModified = (function() {
  function formIsDirty(form) {
    // ...as above
  }
    
  return function(form, message) {
    window.onbeforeunload = function(e) {
      e = e || window.event;
      if (formIsDirty(document.forms[form])) {
        // For IE and Firefox
        if (e) {
          e.returnValue = message;
        }
        // For Safari
        return message;
      }
    };
  };
})();

confirmExitIfModified(""someForm"", ""You have unsaved changes."");
 beforeunload LIBRARY_OF_CHOICE ","/**
 * Determines if a form is dirty by comparing the current value of each element
 * with its default value.
 *
 * @param {Form} form the form to be checked.
 * @return {Boolean} <code>true</code> if the form is dirty, <code>false</code>
 *                   otherwise.
 */
function formIsDirty(form) {
  for (var i = 0; i < form.elements.length; i++) {
    var element = form.elements[i];
    var type = element.type;
    if (type == ""checkbox"" || type == ""radio"") {
      if (element.checked != element.defaultChecked) {
        return true;
      }
    }
    else if (type == ""hidden"" || type == ""password"" ||
             type == ""text"" || type == ""textarea"") {
      if (element.value != element.defaultValue) {
        return true;
      }
    }
    else if (type == ""select-one"" || type == ""select-multiple"") {
      for (var j = 0; j < element.options.length; j++) {
        if (element.options[j].selected !=
            element.options[j].defaultSelected) {
          return true;
        }
      }
    }
  }
  return false;
}
 window.onbeforeunload = function(e) {
  e = e || window.event;  
  if (formIsDirty(document.forms[""someForm""])) {
    // For IE and Firefox
    if (e) {
      e.returnValue = ""You have unsaved changes."";
    }
    // For Safari
    return ""You have unsaved changes."";
  }
};
 var confirmExitIfModified = (function() {
  function formIsDirty(form) {
    // ...as above
  }

  return function(form, message) {
    window.onbeforeunload = function(e) {
      e = e || window.event;
      if (formIsDirty(document.forms[form])) {
        // For IE and Firefox
        if (e) {
          e.returnValue = message;
        }
        // For Safari
        return message;
      }
    };
  };
})();

confirmExitIfModified(""someForm"", ""You have unsaved changes."");
 beforeunload LIBRARY_OF_CHOICE ",FALSE,"/**
 * Determines if a form is dirty by comparing the current value of each element
 * with its default value.
 *
 * @param {Form} form the form to be checked.
 * @return {Boolean} <code>true</code> if the form is dirty, <code>false</code>
 *                   otherwise.
 *
 * Taken from here: http://stackoverflow.com/a/155812/641263
 */

var confirmExitIfModified = (function () {

    function formIsDirty(form) {
        for (var i = 0; i < form.elements.length; i++) {
            var element = form.elements[i];
            var type = element.type;
            if (type == ""checkbox"" || type == ""radio"") {
                if (element.checked != element.defaultChecked) {
                    return true;
                }
            }
            else if (type == ""hidden"" || type == ""password"" ||
                type == ""text"" || type == ""textarea"") {
                var cls = element.getAttribute('class');
                if (element.value != element.defaultValue &&
                    // Fix for select2 multiple
                    cls.indexOf('select2') == -1 &&
                    // Skip elements with ignore-changes class
                    cls.indexOf('ignore-changes') == -1
                    ) {
                    return true;
                }
            }
            else if (type == ""select-one"" || type == ""select-multiple"") {
                for (var j = 0; j < element.options.length; j++) {
                    if (element.options[j].selected !=
                        element.options[j].defaultSelected) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    var submit = false;
    return function (form_id, message) {
        var form = document.forms[form_id]
        if (form) {
            form.onsubmit = function (e) {
                e = e || window.event;
                submit = true
            };
        }
        window.onbeforeunload = function (e) {
            e = e || window.event;
            if (!submit && formIsDirty(form)) {
                // For IE and Firefox
                if (e) {
                    e.returnValue = message;
                }
                // For Safari
                return message;
            }
        };
    };
})();
","/**
 * Determines if a form is dirty by comparing the current value of each element
 * with its default value.
 *
 * @param {Form} form the form to be checked.
 * @return {Boolean} <code>true</code> if the form is dirty, <code>false</code>
 *                   otherwise.
 *
 * Taken from here: http://stackoverflow.com/a/155812/641263
 */

var confirmExitIfModified = (function () {

    function formIsDirty(form) {
        for (var i = 0; i < form.elements.length; i++) {
            var element = form.elements[i];
            var type = element.type;
            if (type == ""checkbox"" || type == ""radio"") {
                if (element.checked != element.defaultChecked) {
                    return true;
                }
            }
            else if (type == ""hidden"" || type == ""password"" ||
                type == ""text"" || type == ""textarea"") {
                var cls = element.getAttribute('class');
                if (element.value != element.defaultValue &&
                    // Fix for select2 multiple
                    cls.indexOf('select2') == -1 &&
                    // Skip elements with ignore-changes class
                    cls.indexOf('ignore-changes') == -1
                    ) {
                    return true;
                }
            }
            else if (type == ""select-one"" || type == ""select-multiple"") {
                for (var j = 0; j < element.options.length; j++) {
                    if (element.options[j].selected !=
                        element.options[j].defaultSelected) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    var submit = false;
    return function (form_id, message) {
        var form = document.forms[form_id]
        if (form) {
            form.onsubmit = function (e) {
                e = e || window.event;
                submit = true
            };
        }
        window.onbeforeunload = function (e) {
            e = e || window.event;
            if (!submit && formIsDirty(form)) {
                // For IE and Firefox
                if (e) {
                    e.returnValue = message;
                }
                // For Safari
                return message;
            }
        };
    };
})();
",TRUE,,29
43,InitialSO.csv43.txt,InitialGit.csv43.txt,10,"function getCaret(node) {
  if (node.selectionStart) {
    return node.selectionStart;
  } else if (!document.selection) {
    return 0;
  }

  var c = ""\001"",
      sel = document.selection.createRange(),
      dul = sel.duplicate(),
      len = 0;

  dul.moveToElementText(node);
  sel.text = c;
  len = dul.text.indexOf(c);
  sel.moveStart('character',-1);
  sel.text = """";
  return len;
}
 function getCaret(el) { 
  if (el.selectionStart) { 
    return el.selectionStart; 
  } else if (document.selection) { 
    el.focus(); 
 
    var r = document.selection.createRange(); 
    if (r == null) { 
      return 0; 
    } 
 
    var re = el.createTextRange(), 
        rc = re.duplicate(); 
    re.moveToBookmark(r.getBookmark()); 
    rc.setEndPoint('EndToStart', re); 
 
    return rc.text.length; 
  }  
  return 0; 
}
 ","function getCaret(node) {
  if (node.selectionStart) {
    return node.selectionStart;
  } else if (!document.selection) {
    return 0;
  }

  var c = ""\001"",
      sel = document.selection.createRange(),
      dul = sel.duplicate(),
      len = 0;

  dul.moveToElementText(node);
  sel.text = c;
  len = dul.text.indexOf(c);
  sel.moveStart('character',-1);
  sel.text = """";
  return len;
}
 function getCaret(el) { 
  if (el.selectionStart) { 
    return el.selectionStart; 
  } else if (document.selection) { 
    el.focus(); 

    var r = document.selection.createRange(); 
    if (r == null) { 
      return 0; 
    } 

    var re = el.createTextRange(), 
        rc = re.duplicate(); 
    re.moveToBookmark(r.getBookmark()); 
    rc.setEndPoint('EndToStart', re); 

    return rc.text.length; 
  }  
  return 0; 
}
 ",FALSE,"/**
 * A directive to enable tagging auto-complete on an input or textarea.
 *
 * For documentation, see the README.md file in this directory
 *
 * Created by Michael on 27/03/14.
 * Copyright Michael Bromley 2014
 * Available under the MIT license.
 */
angular.module('angularUtils')

.directive('dirTagbox', function($compile) {

        /**
         * function taken from http://stackoverflow.com/a/263796/772859
         * @param el
         * @returns {*}
         */
        function getCaret(el) {
            if (el.selectionStart) {
                return el.selectionStart;
            } else if (document.selection) {
                el.focus();

                var r = document.selection.createRange();
                if (r === null) {
                    return 0;
                }

                var re = el.createTextRange(),
                    rc = re.duplicate();
                re.moveToBookmark(r.getBookmark());
                rc.setEndPoint('EndToStart', re);

                return rc.text.length;
            }
            return 0;
        }

        return {
            restrict: 'A',
            scope: {
                tags: '=dirTagbox'
            },
            link: function(scope, element, attrs) {

                var TOKEN = attrs.dirTagtoken !== undefined ? attrs.dirTagtoken : '';

                function insertSelectedTag(selectedTag) {
                    var inputVal = input.val();
                    var output = inputVal.substring(0, scope.candidate.start) + TOKEN + selectedTag + inputVal.substring(scope.candidate.end);

                    scope.$parent.$apply(function() {
                        scope.$parent[attrs.ngModel] = output;
                        input.val(output);
                    });
                }

                // create the suggestions div
                var suggestions = angular.element(
                    '<div class=""suggestions-container"" ng-show=""0 < filteredTags.length"">' +
                        '<div class=""suggestion"" ng-class=""{selected: $index == selectedIndex}"" ng-repeat=""tag in filteredTags = (tags | startsWith : candidateHashtag)"">' + TOKEN + '{{ tag }}</div>' +
                        '</div>');
                suggestions.css({
                    'position': 'absolute',
                    'width': element[0].offsetWidth + 'px',
                    'left': element[0].offsetLeft + 'px',
                    'max-height': '200px',
                    'overflow': 'auto',
                    'z-index': 100
                });
                element.after(suggestions);
                $compile(suggestions)(scope);

                scope.candidateHashtag = ""?"";
                scope.candidate = {
                    start: 0,
                    end: 0
                };
                scope.selectedIndex = null;
                scope.filteredTags = [];

                var input = element;
                // ensure the element is a textarea
                if (input[0].nodeName !== 'TEXTAREA' && input[0].nodeName !== 'INPUT') {
                    return;
                }

                suggestions.on('click', function(e) {
                    var selectedTag = e.target.innerHTML.substring(1);
                    insertSelectedTag(selectedTag);
                    suggestions.addClass('ng-hide');
                });

                suggestions.on('mouseover', function() {
                    scope.$apply(function() {
                        scope.selectedIndex = null;
                    });
                });

                input.on('keyup', function() {
                    // is the caret inside a hashtag?
                    var candidateChanged = false;
                    var currentCaretIndex = getCaret(input[0]);
                    var text = input.val();
                    var regexp = new RegExp(TOKEN + ""[a-zA-Z0-9_]+"",""g"");
                    var match;
                    while ((match = regexp.exec(text)) != null) {
                        var startOfHashtag = match.index;
                        var endOfHashtag = startOfHashtag + match[0].length;

                        if (startOfHashtag <= currentCaretIndex && currentCaretIndex <= endOfHashtag) {
                            candidateChanged =  match[0].substring(TOKEN.length);
                            scope.candidate.start = startOfHashtag;
                            scope.candidate.end = endOfHashtag;
                        }
                    }
                    scope.$apply(function() {
                        scope.candidateHashtag = candidateChanged ? candidateChanged : ""?"";
                    });
                });

                input.on('keydown', function(e) {
                    var listLength = scope.filteredTags.length;
                    if (0 < listLength) {
                        var currentIndex;
                        var nextIndex = null;

                        if (e.keyCode === 40) {
                            // down arrow pressed
                            e.preventDefault();
                            currentIndex = scope.selectedIndex === null ? -1 : parseInt(scope.selectedIndex, 10);
                            nextIndex = currentIndex === listLength - 1 ? 0 : currentIndex + 1;
                        } else if (e.keyCode === 38) {
                            // up arrow pressed
                            e.preventDefault();
                            currentIndex = scope.selectedIndex === null ? 0 : parseInt(scope.selectedIndex, 10);
                            nextIndex = currentIndex === 0 ? listLength - 1 : currentIndex - 1;
                        } else if (e.keyCode === 13) {
                            // enter key pressed
                            e.preventDefault();
                            var selectedTag = scope.filteredTags[scope.selectedIndex];
                            insertSelectedTag(selectedTag);
                        }

                        scope.$apply(function() {
                            scope.selectedIndex = nextIndex;
                        });
                    }
                });
            }
        };
    });
","/**
 * Version 0.1.3
 *
 * A directive to enable tagging auto-complete on an input or textarea.
 *
 * For documentation, see the README.md file in this directory
 *
 * Created by Michael on 27/03/14.
 * Copyright Michael Bromley 2014
 * Available under the MIT license.
 */

(function() {

    angular.module('angularUtils.directives.dirTagBox', [])

        .directive('dirTagbox', function dirTagbox($compile, $parse) {
            return {
                restrict: 'A',
                scope: {
                    tags: '=dirTagbox',
                    callback: '&dirOnTagSelect'
                },
                link: function dirTagboxLinkingFn(scope, element, attrs) {

                    var TOKEN = attrs.dirTagtoken !== undefined ? attrs.dirTagtoken : '';

                    var input = element;
                    var isValidInputType = (input[0].nodeName === 'INPUT' && (input[0].type === 'text' || input[0].type === 'search' || input[0].type === 'email'));
                    if (input[0].nodeName !== 'TEXTAREA' && !isValidInputType) {
                        return;
                    }

                    // create wrapper div
                    var wrapper = angular.element('<div class=""dir-tagbox-wrapper"" style=""position: relative; display: inline-block""></div>');
                    input.wrap(wrapper);

                    // create the suggestions div
                    var suggestions = makeSuggestionsBox();
                    input.parent().append(suggestions);

                    scope.candidateHashtag = ""?"";
                    scope.candidate = {
                        start: 0,
                        end: 0
                    };
                    scope.selectedIndex = null;
                    scope.filteredTags = [];
                    scope.isFocussed = ('autofocus' in input[0]);
                    var mouseIsOverSuggestions = false;

                    suggestions.on('click', function(e) {
                        var selectedTag = e.target.innerHTML.substring(TOKEN.length);
                        insertSelectedTag(selectedTag);
                        input[0].focus();
                        scope.$apply(function() {
                            scope.candidateHashtag = ""?"";
                        });
                    });

                    suggestions.on('mouseover', function() {
                        mouseIsOverSuggestions = true;
                        scope.$apply(function() {
                            scope.selectedIndex = null;
                        });
                    });
                    suggestions.on('mouseout', function() {
                        mouseIsOverSuggestions = false;
                    });

                    input.on('focus', function() {
                        scope.$apply(function() {
                            scope.isFocussed = true;
                        });
                    });

                    input.on('blur', function() {
                        if (!mouseIsOverSuggestions) {
                            scope.$apply(function() {
                                scope.isFocussed = false;
                            });
                        }
                    });

                    input.on('keyup', function() {
                        // is the caret inside a hashtag?
                        var candidateChanged = false;
                        var currentCaretIndex = getCaret(input[0]);
                        var text = input.val();
                        var regexp;
                        if (TOKEN !== '') {
                            regexp = new RegExp('\\B' + TOKEN + '\\w+', 'g');
                        } else {
                            regexp = new RegExp('\\b\\w+', 'g');
                        }
                        var match;
                        while ((match = regexp.exec(text)) !== null) {
                            var startOfHashtag = match.index;
                            var endOfHashtag = startOfHashtag + match[0].length;

                            if (startOfHashtag <= currentCaretIndex && currentCaretIndex <= endOfHashtag) {
                                candidateChanged =  match[0].substring(TOKEN.length);
                                scope.candidate.start = startOfHashtag;
                                scope.candidate.end = endOfHashtag;
                            }
                        }
                        scope.$apply(function() {
                            scope.candidateHashtag = candidateChanged ? candidateChanged : ""?"";
                        });
                    });

                    input.on('keydown', function(e) {
                        var listLength = scope.filteredTags.length;
                        if (0 < listLength) {
                            var currentIndex;
                            var nextIndex = null;

                            if (e.keyCode === 40) {
                                // down arrow pressed
                                e.preventDefault();
                                currentIndex = scope.selectedIndex === null ? -1 : parseInt(scope.selectedIndex, 10);
                                nextIndex = currentIndex === listLength - 1 ? 0 : currentIndex + 1;
                            } else if (e.keyCode === 38) {
                                // up arrow pressed
                                e.preventDefault();
                                currentIndex = scope.selectedIndex === null ? 0 : parseInt(scope.selectedIndex, 10);
                                nextIndex = currentIndex === 0 ? listLength - 1 : currentIndex - 1;
                            } else if (e.keyCode === 13) {
                                // enter key pressed
                                e.preventDefault();
                                var selectedTag = scope.filteredTags[scope.selectedIndex];
                                insertSelectedTag(selectedTag);
                            }

                            scope.$apply(function() {
                                scope.selectedIndex = nextIndex;
                            });
                        }
                    });

                    function makeSuggestionsBox() {
                        var suggestions =angular.element(
                            '<div class=""suggestions-container"" ng-show=""isFocussed && 0 < filteredTags.length"" tabindex=""-1"">' +
                                '<div class=""suggestion"" ng-class=""{selected: $index == selectedIndex}"" ng-repeat=""tag in filteredTags = (tags | startsWith : candidateHashtag)"">' + TOKEN + '{{ tag }}</div>' +
                                '</div>');
                        suggestions.css({
                            'position': 'absolute',
                            'width': input[0].offsetWidth + 'px',
                            'left': input[0].offsetLeft + 'px',
                            'max-height': '200px',
                            'overflow': 'auto',
                            'z-index': 100
                        });
                        $compile(suggestions)(scope);
                        return suggestions;
                    }

                    function insertSelectedTag(selectedTag) {
                        var output,
                            inputVal = input.val();

                        if (typeof selectedTag === 'undefined') {
                            output = inputVal;
                        } else {
                            output = inputVal.substring(0, scope.candidate.start) + TOKEN + selectedTag + inputVal.substring(scope.candidate.end);
                        }

                        scope.$parent.$apply(function() {
                            if (attrs.ngModel) {
                                var setter = $parse(attrs.ngModel).assign;
                                setter(scope.$parent, output);
                            }
                            input.val(output);
                        });

                        if(scope.callback) {
                            scope.callback();
                        }
                    }

                    /**
                     * function taken from http://stackoverflow.com/a/263796/772859
                     * @param el
                     * @returns {*}
                     */
                    function getCaret(el) {
                        if (el.selectionStart) {
                            return el.selectionStart;
                        } else if (document.selection) {
                            el.focus();

                            var r = document.selection.createRange();
                            if (r === null) {
                                return 0;
                            }

                            var re = el.createTextRange(),
                                rc = re.duplicate();
                            re.moveToBookmark(r.getBookmark());
                            rc.setEndPoint('EndToStart', re);

                            return rc.text.length;
                        }
                        return 0;
                    }
                }
            };
        })

    /**
     * Note - this filter is included since the default Angular `filter` filter will match a string that appears anywhere in the target string, but typically in a tag autocomplete, we only care about
     * matching the start of the string.
     */
        .filter('startsWith', function() {
            return function(array, search) {
                var matches = [];
                for(var i = 0; i < array.length; i++) {
                    if (array[i].toLowerCase().indexOf(search.toLowerCase()) === 0 &&
                        search.length < array[i].length) {
                        matches.push(array[i]);
                    }
                }
                return matches;
            };
        });

})();",FALSE,,43
53,InitialSO.csv53.txt,InitialGit.csv53.txt,5,"def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ[""PATH""].split(os.pathsep):
            path = path.strip('""')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None
 ","def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ[""PATH""].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None
 path.strip('""') ",FALSE,"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import shutil
import subprocess
import sys


def exit_from_command_with_retcode(cmd, retcode):
    print(""[error] running"", ' '.join(cmd), ""; received return code"", retcode)
    sys.exit(int(os.environ.get(""CURRENT_BLOCK"", 255)))


def rm_r(path):
    """"""
    Given an arbitrary path, properly remove it with the correct Python construct if it exists.
    From: http://stackoverflow.com/a/9559881
    """"""

    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)


def run_cmd(cmd):
    """"""
    Given a command as a list of arguments will attempt to execute the command
    and, on failure, print an error message and exit.
    """"""

    if not isinstance(cmd, list):
        cmd = cmd.split()
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        exit_from_command_with_retcode(e.cmd, e.returncode)


def is_exe(path):
    """"""
    Check if a given path is an executable file.
    From: http://stackoverflow.com/a/377028
    """"""

    return os.path.isfile(path) and os.access(path, os.X_OK)


def which(program):
    """"""
    Find and return the given program by its absolute path or 'None' if the program cannot be found.
    From: http://stackoverflow.com/a/377028
    """"""

    fpath = os.path.split(program)[0]

    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ.get(""PATH"").split(os.pathsep):
            path = path.strip('""')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None
","#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import print_function
import os
import shutil
import subprocess
import sys

subprocess_check_output = subprocess.check_output
subprocess_check_call = subprocess.check_call


def exit_from_command_with_retcode(cmd, retcode):
    if retcode < 0:
        print(""[error] running"", ' '.join(cmd), ""; process was terminated by signal"", -retcode)
    else:
        print(""[error] running"", ' '.join(cmd), ""; received return code"", retcode)
    sys.exit(int(os.environ.get(""CURRENT_BLOCK"", 255)))


def rm_r(path):
    """"""
    Given an arbitrary path, properly remove it with the correct Python construct if it exists.
    From: http://stackoverflow.com/a/9559881
    """"""

    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)


def run_cmd(cmd, return_output=False):
    """"""
    Given a command as a list of arguments will attempt to execute the command
    and, on failure, print an error message and exit.
    """"""

    if not isinstance(cmd, list):
        cmd = cmd.split()
    try:
        if return_output:
            return subprocess_check_output(cmd)
        else:
            return subprocess_check_call(cmd)
    except subprocess.CalledProcessError as e:
        exit_from_command_with_retcode(e.cmd, e.returncode)


def is_exe(path):
    """"""
    Check if a given path is an executable file.
    From: http://stackoverflow.com/a/377028
    """"""

    return os.path.isfile(path) and os.access(path, os.X_OK)


def which(program):
    """"""
    Find and return the given program by its absolute path or 'None' if the program cannot be found.
    From: http://stackoverflow.com/a/377028
    """"""

    fpath = os.path.split(program)[0]

    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ.get(""PATH"").split(os.pathsep):
            path = path.strip('""')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None
",FALSE,,53
859,InitialSO.csv859.txt,InitialGit.csv859.txt,6,"mkdir -p import errno    
import os


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise
 os.makedirs exist_ok mkdir -p mode OSError pathlib.Path.mkdir import pathlib

pathlib.Path(""/tmp/path/to/desired/directory"").mkdir(parents=True, exist_ok=True)
 exist_ok ","pathlib.Path.mkdir import pathlib
pathlib.Path(""/tmp/path/to/desired/directory"").mkdir(parents=True, exist_ok=True)
 exist_ok os.makedirs exist_ok True mkdir -p mode OSError import os
os.makedirs(""/tmp/path/to/desired/directory"", exist_ok=True)
 os.makedirs import errno    
import os

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python ≥ 2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        # possibly handle other errno cases here, otherwise finally:
        else:
            raise
 ",FALSE,"from SPARQLWrapper import SPARQLWrapper, JSON
import rdflib
import csv
from pymantic import sparql
import os, os.path
import errno
# Taken from http://stackoverflow.com/a/600612/119527
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def safe_open_w(path):
    ''' Open ""path"" for writing, creating any parent directories as needed.
    '''
    mkdir_p(os.path.dirname(path))
    return open(path, 'w')

def getIncludedFromExcluded(to_exclude,endpoint):
	server = sparql.SPARQLServer(endpoint)
	result = server.query('select distinct ?p where {?s ?p ?o}')
	to_include = [b['p']['value'] for b in result['results']['bindings']]
	for element in to_exclude:
		to_include.remove(element)
	to_include = [(p,'') for p in to_include]
	return to_include


def joinPairs(folder):
	# with open('outputs/train_test_sets/train_set.tsv') as training:
	# 		training_reader = csv.DictReader(training, dialect=""excel-tab"")
	# 		rdf= '''<?xml version=""1.0"" encoding=""utf-8"" ?>
	# <rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	#          xmlns:ns0=""http://bio2rdf.org/pharmgkb_vocabulary:"">
	# '''
	# 		for pair in training_reader:
	# 			label = 'positive' if pair['association']=='associated' else 'negative'
	# 			rdf +='''
	#   <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	#     <ns0:train_set>'''+label+'''</ns0:train_set>
	#     <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	#     <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	#   </rdf:Description>
	# '''
	# 		with safe_open_w('outputs/'+folder+'/pairs.rdf') as out:
	# 			out.write(rdf)
	with open('outputs/train_test_sets/test_set.tsv') as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf= '''<?xml version=""1.0"" encoding=""utf-8"" ?>
	<rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	         xmlns:ns0=""http://bio2rdf.org/pharmgkb_vocabulary:"">
	'''
			for pair in training_reader:
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:test_set>unknown</ns0:test_set>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
			with safe_open_w('outputs/'+folder+'/pairs.rdf') as out:
				out.write(rdf)
	for x in range(10):		
		with open('outputs/train_test_sets/train_subset_{0}.tsv'.format(x)) as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf = ''
			for pair in training_reader:
				label = 'positive' if pair['association']=='associated' else 'negative'
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:train_subset_{0}>'''.format(x)+label+'''</ns0:train_subset_{0}>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''.format(x)+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
			with open('outputs/'+folder+'/pairs.rdf','a') as out:
				out.write(rdf)
	with open('outputs/train_test_sets/train_subset_final.tsv') as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf = ''
			for pair in training_reader:
				label = 'positive' if pair['association']=='associated' else 'negative'
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:train_subset_final>'''+label+'''</ns0:train_subset_final>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
	  		rdf +='''
	</rdf:RDF>'''
			with open('outputs/'+folder+'/pairs.rdf','a') as out:
				out.write(rdf)


def createUndirectedSubgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o . ?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o . ?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/undirected_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/undirected_subgraph/undirected_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')


def createDirectedSubgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/directed_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/directed_subgraph/directed_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

def createUndirectedFullgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o . ?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o . ?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/undirected_fullgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/undirected_fullgraph/undirected_fullgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p[0]+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')


def createDirectedFullgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/directed_fullgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/directed_fullgraph/directed_fullgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p[0]+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

def createCustomSubgraph(to_include, to_inverse, endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		if p in to_inverse:
			try:
				wrapper.setQuery('construct {?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
				result = wrapper.query()._convertN3()
			except Exception as ex:
				print ex.msg
				exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
				wrapper.setQuery('construct {?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
				result = wrapper.query()._convertN3()
		else:
			try:
				wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
				result = wrapper.query()._convertN3()
			except Exception as ex:
				print ex.msg
				exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
				wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
				result = wrapper.query()._convertN3()

		with safe_open_w('outputs/custom_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/custom_subgraph/custom_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

# def createDirectedFullgraph():
# 	fullgraph = rdflib.Graph()
# 	with open('outputs/training_pairs.tsv') as training:
# 		training_reader = csv.DictReader(training, dialect=""excel-tab"")
# 		index = 0
# 		for pair in training_reader:
# 			label = 'positive' if pair['association']=='associated' else 'negative'
# 			sparql = SPARQLWrapper(""http://localhost:9999/blazegraph/sparql"")
# 			sparql.setQuery('''
# PREFIX gas: <http://www.bigdata.com/rdf/gas#>
# construct { <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:association> ""'''+label+'''"" .
# 			<http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:gene> <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''>.
# 			<http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:drug> <http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''>.
# 			?out ?p ?o }
# {
#   {SERVICE gas:service {
#      gas:program gas:gasClass ""com.bigdata.rdf.graph.analytics.BFS"" .
#      gas:program gas:in <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''> . # one or more times, specifies the initial frontier.
#      gas:program gas:out ?out . # exactly once - will be bound to the visited vertices.
#      gas:program gas:out1 ?depth . # exactly once - will be bound to the depth of the visited vertices.
#      gas:program gas:out2 ?predecessor . # exactly once - will be bound to the predecessor.
#      gas:program gas:maxIterations '''+'{0}'.format(17)+''' . # optional limit on breadth first expansion.
#   }
#   ?out ?p ?o} union {SERVICE gas:service {
#      gas:program gas:gasClass ""com.bigdata.rdf.graph.analytics.BFS"" .
#      gas:program gas:in <http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''> . # one or more times, specifies the initial frontier.
#      gas:program gas:out ?out . # exactly once - will be bound to the visited vertices.
#      gas:program gas:out1 ?depth . # exactly once - will be bound to the depth of the visited vertices.
#      gas:program gas:out2 ?predecessor . # exactly once - will be bound to the predecessor.
#      gas:program gas:maxIterations '''+'{0}'.format(17)+''' . # optional limit on breadth first expansion.
#   }
#   ?out ?p ?o}
# }
# ''')
# 			index +=1
# 			print 'Querying '+pair['gene']+'_'+pair['drug']+', index :'+str(index)
# 			pair_data = sparql.query()._convertN3()
# 			fullgraph.parse(data=pair_data)
# 	print 'Serializing...'
# 	graphfilename = ""outputs/directed_fullgraph.rdf""
# 	fullgraph.serialize(destination=graphfilename)


to_include = [
('http://bio2rdf.org/pharmgkb_vocabulary:x-ncbigene','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:assertion','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Phenotype','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-medgen','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-sequence_ontology','') ,
('http://semanticscience.org/resource/SIO_000062','') ,
('http://semanticscience.org/resource/SIO_000095','') ,
('http://semanticscience.org/resource/SIO_000008','') ,
('http://biodb.jp/mappings/medispan_to_sider','') ,
('http://biodb.jp/mappings/clinvar_to_medispan','') ,
('http://biodb.jp/mappings/clinvar_to_sider','') ,
('http://bio2rdf.org/sider_vocabulary:side-effect','') ,
('http://bio2rdf.org/sider_vocabulary:indication','') ,
('http://orpailleur.fr/medispan/side_effect','') ,
('http://orpailleur.fr/medispan/indication','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-flat-compound-id','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-stereo-compound-id','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-umls','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/drugbank_vocabulary:target','') ,
('http://bio2rdf.org/drugbank_vocabulary:carrier','') ,
('http://bio2rdf.org/drugbank_vocabulary:enzyme','') ,
('http://bio2rdf.org/drugbank_vocabulary:transporter','') ,
('http://bio2rdf.org/drugbank_vocabulary:action','') ,
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:category','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-drugbank','') ,
('http://bio2rdf.org/bio2rdf_vocabulary:x-identifiers.org','?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://semanticscience.org/resource/SIO_000001','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://www.w3.org/2004/02/skos/core#exactMatch','?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> . filter ( regex(str(?o),""http://bio2rdf.org/medgen:"") || regex(str(?o),""http://orpailleur.fr/medispan/"") || regex(str(?o),""http://bio2rdf.org/umls:"") )') ,
]

to_keep = [
('http://bio2rdf.org/pharmgkb_vocabulary:x-ncbigene','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:assertion','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Phenotype','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-medgen','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-sequence_ontology','') ,
('http://semanticscience.org/resource/SIO_000062','') ,
('http://semanticscience.org/resource/SIO_000095','') ,
('http://semanticscience.org/resource/SIO_000008','') ,
('http://biodb.jp/mappings/medispan_to_sider','') ,
('http://biodb.jp/mappings/clinvar_to_medispan','') ,
('http://biodb.jp/mappings/clinvar_to_sider','') ,
('http://bio2rdf.org/sider_vocabulary:side-effect','') ,
('http://bio2rdf.org/sider_vocabulary:indication','') ,
('http://orpailleur.fr/medispan/side_effect','') ,
('http://orpailleur.fr/medispan/indication','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-flat-compound-id','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-stereo-compound-id','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-umls','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/drugbank_vocabulary:target','') ,
('http://bio2rdf.org/drugbank_vocabulary:carrier','') ,
('http://bio2rdf.org/drugbank_vocabulary:enzyme','') ,
('http://bio2rdf.org/drugbank_vocabulary:transporter','') ,
('http://bio2rdf.org/drugbank_vocabulary:action','') ,
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:category','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-drugbank','') ,
('http://bio2rdf.org/bio2rdf_vocabulary:x-identifiers.org','?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> .') ,
('http://semanticscience.org/resource/SIO_000001','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://www.w3.org/2004/02/skos/core#exactMatch','?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> . filter ( regex(str(?o),""http://bio2rdf.org/medgen:"") || regex(str(?o),""http://orpailleur.fr/medispan/"") || regex(str(?o),""http://bio2rdf.org/umls:"") )') ,
]

to_inverse = [
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
]


#createUndirectedSubgraph(to_include,'http://localhost:9999/blazegraph/sparql')
#joinPairs('undirected_subgraph')
#createDirectedSubgraph(to_include,'http://localhost:9999/blazegraph/sparql')
#joinPairs('directed_subgraph')
createCustomSubgraph(to_keep,to_inverse,'http://localhost:9999/blazegraph/sparql')
joinPairs('custom_subgraph')

#all_uris = getIncludedFromExcluded([],'http://localhost:9999/blazegraph/sparql')
# createUndirectedFullgraph(all_uris,'http://localhost:9999/blazegraph/sparql')
# joinPairs('undirected_fullgraph')
# createDirectedFullgraph(all_uris,'http://localhost:9999/blazegraph/sparql')
# joinPairs('directed_fullgraph')


# NOTE : to compress output folder, you can use lrztar, example : lrztar -z directed_subgraph/","from SPARQLWrapper import SPARQLWrapper, JSON
import rdflib
import csv
from pymantic import sparql
import os, os.path
import errno
# Taken from http://stackoverflow.com/a/600612/119527
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def safe_open_w(path):
    ''' Open ""path"" for writing, creating any parent directories as needed.
    '''
    mkdir_p(os.path.dirname(path))
    return open(path, 'w')

def getIncludedFromExcluded(to_exclude,endpoint):
	server = sparql.SPARQLServer(endpoint)
	result = server.query('select distinct ?p where {?s ?p ?o}')
	to_include = [b['p']['value'] for b in result['results']['bindings']]
	for element in to_exclude:
		to_include.remove(element)
	to_include = [(p,'') for p in to_include]
	return to_include


def joinPairs(folder):
	# with open('outputs/train_test_sets/train_set.tsv') as training:
	# 		training_reader = csv.DictReader(training, dialect=""excel-tab"")
	# 		rdf= '''<?xml version=""1.0"" encoding=""utf-8"" ?>
	# <rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	#          xmlns:ns0=""http://bio2rdf.org/pharmgkb_vocabulary:"">
	# '''
	# 		for pair in training_reader:
	# 			label = 'positive' if pair['association']=='associated' else 'negative'
	# 			rdf +='''
	#   <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	#     <ns0:train_set>'''+label+'''</ns0:train_set>
	#     <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	#     <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	#   </rdf:Description>
	# '''
	# 		with safe_open_w('outputs/'+folder+'/pairs.rdf') as out:
	# 			out.write(rdf)
	with open('outputs/train_test_sets/test_set.tsv') as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf= '''<?xml version=""1.0"" encoding=""utf-8"" ?>
	<rdf:RDF xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
	         xmlns:ns0=""http://bio2rdf.org/pharmgkb_vocabulary:"">
	'''
			for pair in training_reader:
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:test_set>unknown</ns0:test_set>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
			with safe_open_w('outputs/'+folder+'/pairs.rdf') as out:
				out.write(rdf)
	for x in range(10):		
		with open('outputs/train_test_sets/train_subset_{0}.tsv'.format(x)) as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf = ''
			for pair in training_reader:
				label = 'positive' if pair['association']=='associated' else 'negative'
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:train_subset_{0}>'''.format(x)+label+'''</ns0:train_subset_{0}>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''.format(x)+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
			with open('outputs/'+folder+'/pairs.rdf','a') as out:
				out.write(rdf)
	with open('outputs/train_test_sets/train_subset_final.tsv') as training:
			training_reader = csv.DictReader(training, dialect=""excel-tab"")
			rdf = ''
			for pair in training_reader:
				label = 'positive' if pair['association']=='associated' else 'negative'
				rdf +='''
	  <rdf:Description rdf:about=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''"">
	    <ns0:train_subset_final>'''+label+'''</ns0:train_subset_final>
	    <ns0:gene rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''""/>
	    <ns0:drug rdf:resource=""http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''""/>
	  </rdf:Description>
	'''
	  		rdf +='''
	</rdf:RDF>'''
			with open('outputs/'+folder+'/pairs.rdf','a') as out:
				out.write(rdf)


def createUndirectedSubgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o . ?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o . ?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/undirected_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/undirected_subgraph/undirected_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')


def createDirectedSubgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/directed_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/directed_subgraph/directed_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

def createUndirectedFullgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o . ?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o . ?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/undirected_fullgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/undirected_fullgraph/undirected_fullgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p[0]+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')


def createDirectedFullgraph(to_include,endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		try:
			wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
			result = wrapper.query()._convertN3()
		except Exception as ex:
			print ex.msg
			exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
			wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
			result = wrapper.query()._convertN3()
		
		with safe_open_w('outputs/directed_fullgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/directed_fullgraph/directed_fullgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p[0]+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

def createCustomSubgraph(to_include, to_inverse, endpoint):
	print 'number of included predicates: ', len(to_include)
	exceptions = {}
	wrapper = SPARQLWrapper(endpoint)

	for i,p in enumerate(to_include):
		print i, 'querying : '+p[0].encode('utf-8')
		inverse = p[0]+'_inverse'
		if p in to_inverse:
			try:
				wrapper.setQuery('construct {?o <'+inverse+'> ?s} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
				result = wrapper.query()._convertN3()
			except Exception as ex:
				print ex.msg
				exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
				wrapper.setQuery('construct {?o <http://bio2rdf.org/predicate_number_'+str(i)+'_inverse> ?s} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
				result = wrapper.query()._convertN3()
		else:
			try:
				wrapper.setQuery('construct {?s <'+p[0]+'> ?o .} WHERE {?s <'+p[0]+'> ?o .'+p[1]+'}')
				result = wrapper.query()._convertN3()
			except Exception as ex:
				print ex.msg
				exceptions[p]='http://bio2rdf.org/predicate_number_'+str(i)
				wrapper.setQuery('construct {?s <http://bio2rdf.org/predicate_number_'+str(i)+'> ?o .} WHERE {?s <'+p[0]+'> ?o . '+p[1]+'}')
				result = wrapper.query()._convertN3()

		with safe_open_w('outputs/custom_subgraph/{0}.rdf'.format(i)) as out:
			out.write(result)
	with safe_open_w('outputs/custom_subgraph/custom_subgraph.log') as out:
		out.write('**** Exceptions ****\n\n')
		for key in exceptions:
			out.write(p+' --> '+exceptions[key]+'\n')
		out.write('**** Included predicates ****\n\n')
		for i,p in enumerate(to_include):
			out.write(str(i)+'\t'+p[0].encode('utf-8')+'\t'+p[1].encode('utf-8')+'\n')

# def createDirectedFullgraph():
# 	fullgraph = rdflib.Graph()
# 	with open('outputs/training_pairs.tsv') as training:
# 		training_reader = csv.DictReader(training, dialect=""excel-tab"")
# 		index = 0
# 		for pair in training_reader:
# 			label = 'positive' if pair['association']=='associated' else 'negative'
# 			sparql = SPARQLWrapper(""http://localhost:9999/blazegraph/sparql"")
# 			sparql.setQuery('''
# PREFIX gas: <http://www.bigdata.com/rdf/gas#>
# construct { <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:association> ""'''+label+'''"" .
# 			<http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:gene> <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''>.
# 			<http://bio2rdf.org/pharmgkb:'''+pair['gene']+'_'+pair['drug']+'''> <http://bio2rdf.org/pharmgkb_vocabulary:drug> <http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''>.
# 			?out ?p ?o }
# {
#   {SERVICE gas:service {
#      gas:program gas:gasClass ""com.bigdata.rdf.graph.analytics.BFS"" .
#      gas:program gas:in <http://bio2rdf.org/pharmgkb:'''+pair['gene']+'''> . # one or more times, specifies the initial frontier.
#      gas:program gas:out ?out . # exactly once - will be bound to the visited vertices.
#      gas:program gas:out1 ?depth . # exactly once - will be bound to the depth of the visited vertices.
#      gas:program gas:out2 ?predecessor . # exactly once - will be bound to the predecessor.
#      gas:program gas:maxIterations '''+'{0}'.format(17)+''' . # optional limit on breadth first expansion.
#   }
#   ?out ?p ?o} union {SERVICE gas:service {
#      gas:program gas:gasClass ""com.bigdata.rdf.graph.analytics.BFS"" .
#      gas:program gas:in <http://bio2rdf.org/pharmgkb:'''+pair['drug']+'''> . # one or more times, specifies the initial frontier.
#      gas:program gas:out ?out . # exactly once - will be bound to the visited vertices.
#      gas:program gas:out1 ?depth . # exactly once - will be bound to the depth of the visited vertices.
#      gas:program gas:out2 ?predecessor . # exactly once - will be bound to the predecessor.
#      gas:program gas:maxIterations '''+'{0}'.format(17)+''' . # optional limit on breadth first expansion.
#   }
#   ?out ?p ?o}
# }
# ''')
# 			index +=1
# 			print 'Querying '+pair['gene']+'_'+pair['drug']+', index :'+str(index)
# 			pair_data = sparql.query()._convertN3()
# 			fullgraph.parse(data=pair_data)
# 	print 'Serializing...'
# 	graphfilename = ""outputs/directed_fullgraph.rdf""
# 	fullgraph.serialize(destination=graphfilename)


to_include = [
('http://bio2rdf.org/pharmgkb_vocabulary:x-ncbigene','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:assertion','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Phenotype','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-medgen','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-sequence_ontology','') ,
('http://semanticscience.org/resource/SIO_000062','') ,
('http://semanticscience.org/resource/SIO_000095','') ,
('http://semanticscience.org/resource/SIO_000008','') ,
('http://biodb.jp/mappings/medispan_to_sider','') ,
('http://biodb.jp/mappings/clinvar_to_medispan','') ,
('http://biodb.jp/mappings/clinvar_to_sider','') ,
('http://bio2rdf.org/sider_vocabulary:side-effect','') ,
('http://bio2rdf.org/sider_vocabulary:indication','') ,
('http://orpailleur.fr/medispan/side_effect','') ,
('http://orpailleur.fr/medispan/indication','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-flat-compound-id','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-stereo-compound-id','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-umls','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/drugbank_vocabulary:target','') ,
('http://bio2rdf.org/drugbank_vocabulary:carrier','') ,
('http://bio2rdf.org/drugbank_vocabulary:enzyme','') ,
('http://bio2rdf.org/drugbank_vocabulary:transporter','') ,
('http://bio2rdf.org/drugbank_vocabulary:action','') ,
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:category','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-drugbank','') ,
('http://bio2rdf.org/bio2rdf_vocabulary:x-identifiers.org','?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://semanticscience.org/resource/SIO_000001','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://www.w3.org/2004/02/skos/core#exactMatch','?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> . filter ( regex(str(?o),""http://bio2rdf.org/medgen:"") || regex(str(?o),""http://orpailleur.fr/medispan/"") || regex(str(?o),""http://bio2rdf.org/umls:"") )') ,
]

to_keep = [
('http://bio2rdf.org/pharmgkb_vocabulary:x-ncbigene','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:assertion','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Phenotype','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-medgen','') ,
('http://bio2rdf.org/clinvar_vocabulary:x-sequence_ontology','') ,
('http://semanticscience.org/resource/SIO_000062','') ,
('http://semanticscience.org/resource/SIO_000095','') ,
('http://semanticscience.org/resource/SIO_000008','') ,
('http://biodb.jp/mappings/medispan_to_sider','') ,
('http://biodb.jp/mappings/clinvar_to_medispan','') ,
('http://biodb.jp/mappings/clinvar_to_sider','') ,
('http://bio2rdf.org/sider_vocabulary:side-effect','') ,
('http://bio2rdf.org/sider_vocabulary:indication','') ,
('http://orpailleur.fr/medispan/side_effect','') ,
('http://orpailleur.fr/medispan/indication','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-flat-compound-id','') ,
('http://bio2rdf.org/sider_vocabulary:pubchem-stereo-compound-id','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-umls','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-pubchemcompound','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-uniprot','') ,
('http://bio2rdf.org/drugbank_vocabulary:target','') ,
('http://bio2rdf.org/drugbank_vocabulary:carrier','') ,
('http://bio2rdf.org/drugbank_vocabulary:enzyme','') ,
('http://bio2rdf.org/drugbank_vocabulary:transporter','') ,
('http://bio2rdf.org/drugbank_vocabulary:action','') ,
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-atc','') ,
('http://bio2rdf.org/drugbank_vocabulary:category','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://bio2rdf.org/pharmgkb_vocabulary:x-drugbank','') ,
('http://bio2rdf.org/bio2rdf_vocabulary:x-identifiers.org','?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> .') ,
('http://semanticscience.org/resource/SIO_000001','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> .') ,
('http://www.w3.org/2004/02/skos/core#exactMatch','?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C7057> . filter ( regex(str(?o),""http://bio2rdf.org/medgen:"") || regex(str(?o),""http://orpailleur.fr/medispan/"") || regex(str(?o),""http://bio2rdf.org/umls:"") )') ,
]

to_inverse = [
('http://bio2rdf.org/drugbank_vocabulary:drug','') ,
('http://bio2rdf.org/drugbank_vocabulary:x-pharmgkb','') ,
('http://biodb.jp/mappings/medispan_to_umls','') ,
('http://semanticscience.org/resource/SIO_000628','?s <http://semanticscience.org/resource/SIO_000253>/<http://purl.org/ontology/wi/core#evidence> <http://rdf.disgenet.org/v3.0.0/void/source_evidence_curated> . ?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#C16612> .') ,
('http://bio2rdf.org/clinvar_vocabulary:x-gene','') ,
('http://bio2rdf.org/clinvar_vocabulary:Variant_Gene','') ,
]


#createUndirectedSubgraph(to_include,'http://localhost:9999/blazegraph/sparql')
#joinPairs('undirected_subgraph')
#createDirectedSubgraph(to_include,'http://localhost:9999/blazegraph/sparql')
#joinPairs('directed_subgraph')
createCustomSubgraph(to_keep,to_inverse,'http://localhost:9999/blazegraph/sparql')
joinPairs('custom_subgraph')

#all_uris = getIncludedFromExcluded([],'http://localhost:9999/blazegraph/sparql')
# createUndirectedFullgraph(all_uris,'http://localhost:9999/blazegraph/sparql')
# joinPairs('undirected_fullgraph')
# createDirectedFullgraph(all_uris,'http://localhost:9999/blazegraph/sparql')
# joinPairs('directed_fullgraph')


# NOTE : to compress output folder, you can use lrztar, example : lrztar -z directed_subgraph/",TRUE,,859
860,InitialSO.csv860.txt,InitialGit.csv860.txt,25,"#!/usr/bin/env python
from optparse import OptionParser, Option, IndentedHelpFormatter

class PosOptionParser(OptionParser):
    def format_help(self, formatter=None):
        class Positional(object):
            def __init__(self, args):
                self.option_groups = []
                self.option_list = args

        positional = Positional(self.positional)
        formatter = IndentedHelpFormatter()
        formatter.store_option_strings(positional)
        output = ['\n', formatter.format_heading(""Positional Arguments"")]
        formatter.indent()
        pos_help = [formatter.format_option(opt) for opt in self.positional]
        pos_help = [line.replace('--','') for line in pos_help]
        output += pos_help
        return OptionParser.format_help(self, formatter) + ''.join(output)

    def add_positional_argument(self, option):
        try:
            args = self.positional
        except AttributeError:
            args = []
        args.append(option)
        self.positional = args

    def set_out(self, out):
        self.out = out
def main():
    usage = ""usage: %prog [options] bar baz""
    parser = PosOptionParser(usage)
    parser.add_option('-f', '--foo', dest='foo',
                      help='Enable foo')
    parser.add_positional_argument(Option('--bar', action='store_true',
                                   help='The bar positional argument'))
    parser.add_positional_argument(Option('--baz', action='store_true',
                                   help='The baz positional argument'))
    (options, args) = parser.parse_args()
    if len(args) != 2:
        parser.error(""incorrect number of arguments"")
    pass

if __name__ == '__main__':
    main()
 Usage: test.py [options] bar baz

  Options:
    -h, --help         show this help message and exit
    -f FOO, --foo=FOO  Enable foo

Positional Arguments:
  bar  The bar positional argument
  baz  The baz positional argument
 ","#!/usr/bin/env python
from optparse import OptionParser, Option, IndentedHelpFormatter

class PosOptionParser(OptionParser):
    def format_help(self, formatter=None):
        class Positional(object):
            def __init__(self, args):
                self.option_groups = []
                self.option_list = args

        positional = Positional(self.positional)
        formatter = IndentedHelpFormatter()
        formatter.store_option_strings(positional)
        output = ['\n', formatter.format_heading(""Positional Arguments"")]
        formatter.indent()
        pos_help = [formatter.format_option(opt) for opt in self.positional]
        pos_help = [line.replace('--','') for line in pos_help]
        output += pos_help
        return OptionParser.format_help(self, formatter) + ''.join(output)

    def add_positional_argument(self, option):
        try:
            args = self.positional
        except AttributeError:
            args = []
        args.append(option)
        self.positional = args

    def set_out(self, out):
        self.out = out
def main():
    usage = ""usage: %prog [options] bar baz""
    parser = PosOptionParser(usage)
    parser.add_option('-f', '--foo', dest='foo',
                      help='Enable foo')
    parser.add_positional_argument(Option('--bar', action='store_true',
                                   help='The bar positional argument'))
    parser.add_positional_argument(Option('--baz', action='store_true',
                                   help='The baz positional argument'))
    (options, args) = parser.parse_args()
    if len(args) != 2:
        parser.error(""incorrect number of arguments"")
    pass

if __name__ == '__main__':
    main()
 Usage: test.py [options] bar baz

  Options:
    -h, --help         show this help message and exit
    -f FOO, --foo=FOO  Enable foo

Positional Arguments:
  bar  The bar positional argument
  baz  The baz positional argument
 ",TRUE,""""""" PosOptionParser class gotten from Douglas Mayle at StackOverflow:
http://stackoverflow.com/a/664614/1980416 

Used for positional argument support similar to argparse (for Python 2.6 compatibility)
""""""

from optparse import OptionParser, Option, IndentedHelpFormatter

class PosOptionParser(OptionParser):
    def format_help(self, formatter=None):
        class Positional(object):
            def __init__(self, args):
                self.option_groups = []
                self.option_list = args

        positional = Positional(self.positional)
        formatter = IndentedHelpFormatter()
        formatter.store_option_strings(positional)
        output = ['\n', formatter.format_heading(""Positional Arguments"")]
        formatter.indent()
        pos_help = [formatter.format_option(opt) for opt in self.positional]
        pos_help = [line.replace('--','') for line in pos_help]
        output += pos_help
        return OptionParser.format_help(self, formatter) + ''.join(output)

    def add_positional_argument(self, option):
        try:
            args = self.positional
        except AttributeError:
            args = []
        args.append(option)
        self.positional = args

    def set_out(self, out):
        self.out = out
",""""""" PosOptionParser class gotten from Douglas Mayle at StackOverflow:
http://stackoverflow.com/a/664614/1980416 

Used for positional argument support similar to argparse (for Python 2.6 compatibility)
""""""

from optparse import OptionParser, Option, IndentedHelpFormatter

class PosOptionParser(OptionParser):
    def format_help(self, formatter=None):
        class Positional(object):
            def __init__(self, args):
                self.option_groups = []
                self.option_list = args

        positional = Positional(self.positional)
        formatter = IndentedHelpFormatter()
        formatter.store_option_strings(positional)
        output = ['\n', formatter.format_heading(""Positional Arguments"")]
        formatter.indent()
        pos_help = [formatter.format_option(opt) for opt in self.positional]
        pos_help = [line.replace('--','') for line in pos_help]
        output += pos_help
        return OptionParser.format_help(self, formatter) + ''.join(output)

    def add_positional_argument(self, option):
        try:
            args = self.positional
        except AttributeError:
            args = []
        args.append(option)
        self.positional = args

    def set_out(self, out):
        self.out = out
",TRUE,,860
861,InitialSO.csv861.txt,InitialGit.csv861.txt,18,"function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
 function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cylicGraph[""right""] = cylicGraph;
 ","clone Object.prototype Object.prototype hasOwnProperty prototype __proto__ __proto__ Object {} Object hasOwnProperty constructor Date function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Executes function after 5 seconds. */
setTimeout(function(){
    var d2 = clone(d1);
    alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
}, 5000);
 d1 d2 Date setTime Date Object Array Date String Number Boolean Object Array function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cyclicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cyclicGraph[""right""] = cyclicGraph;
 ",FALSE,"module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}","module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}",TRUE,,861
862,InitialSO.csv862.txt,InitialGit.csv862.txt,7,"function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
 function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        var copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        var copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        var copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cylicGraph[""right""] = cylicGraph;
 ","clone Object.prototype Object.prototype hasOwnProperty prototype __proto__ __proto__ Object {} Object hasOwnProperty constructor Date function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Executes function after 5 seconds. */
setTimeout(function(){
    var d2 = clone(d1);
    alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
}, 5000);
 d1 d2 Date setTime Date Object Array Date String Number Boolean Object Array function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cyclicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cyclicGraph[""right""] = cyclicGraph;
 ",FALSE,"module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}","module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}",TRUE,,862
863,InitialSO.csv863.txt,InitialGit.csv863.txt,18,"function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
 function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cylicGraph[""right""] = cylicGraph;
 ","clone Object.prototype Object.prototype hasOwnProperty prototype __proto__ __proto__ Object {} Object hasOwnProperty constructor Date function clone(obj) {
    if (null == obj || ""object"" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

var d1 = new Date();

/* Executes function after 5 seconds. */
setTimeout(function(){
    var d2 = clone(d1);
    alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());
}, 5000);
 d1 d2 Date setTime Date Object Array Date String Number Boolean Object Array function clone(obj) {
    var copy;

    // Handle the 3 simple types, and null or undefined
    if (null == obj || ""object"" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error(""Unable to copy obj! Its type isn't supported."");
}
 // This would be cloneable:
var tree = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""right"" : null,
    ""data""  : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cyclicGraph = {
    ""left""  : { ""left"" : null, ""right"" : null, ""data"" : 3 },
    ""data""  : 8
};
cyclicGraph[""right""] = cyclicGraph;
 ",FALSE,"module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty && obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}","module.exports = clone;

// via http://stackoverflow.com/a/728694/22617
function clone(obj) {
  // Handle the 3 simple types, and null or undefined
  if (null === obj || ""object"" !== typeof obj) {
    return obj;
  }

  var copy;

  // Handle Date
  if (obj instanceof Date) {
    copy = new Date();
    copy.setTime(obj.getTime());
    return copy;
  }

  // Handle Array
  if (obj instanceof Array) {
    copy = [];
    for (var i = 0, len = obj.length; i < len; i++) {
      copy[i] = clone(obj[i]);
    }
    return copy;
  }

  // Handle Object
  if (obj instanceof Object) {
    copy = {};
    for (var attr in obj) {
      if (obj.hasOwnProperty && obj.hasOwnProperty(attr)) {
        copy[attr] = clone(obj[attr]);
      }
    }
    return copy;
  }

  throw new Error('Unable to copy obj! Its type isn\'t supported.');
}",TRUE,,863
871,InitialSO.csv871.txt,InitialGit.csv871.txt,5,"function startsWith($haystack,$needle,$case=true)
{
    if ($case)
        return strpos($haystack, $needle, 0) === 0;

    return stripos($haystack, $needle, 0) === 0;
}

function endsWith($haystack,$needle,$case=true)
{
    $expectedPosition = strlen($haystack) - strlen($needle);

    if ($case)
        return strrpos($haystack, $needle, 0) === $expectedPosition;

    return strripos($haystack, $needle, 0) === $expectedPosition;
}
 ","strlen calculations string allocations (substr) 'strpos' 'stripos' $needle $haystack function startsWith($haystack,$needle,$case=true)
{
    if ($case)
        return strpos($haystack, $needle, 0) === 0;

    return stripos($haystack, $needle, 0) === 0;
}

function endsWith($haystack,$needle,$case=true)
{
    $expectedPosition = strlen($haystack) - strlen($needle);

    if ($case)
        return strrpos($haystack, $needle, 0) === $expectedPosition;

    return strripos($haystack, $needle, 0) === $expectedPosition;
}
 ",FALSE,"<?php
/**
 * PHP YAML FrontMatter Class
 * An easy to use class for handling YAML frontmatter in PHP.
 *
 * @author Blaxus
 * @package YAML-FrontMatter
 * @license http://unlicense.org UnLicense
 * @link https://github.com/Blaxus
 */
class FrontMatter
{
    /**
     * All the parameters.
     * @param array $data metadata & content
     */
    private $data;

    /**
     * Constructor method, checks a file and then puts the contents into custom strings for usage
     * @param string $file The input file
     */
    public function __construct($file)
    {
        $file = (file_exists($file)) ? $this->Read($file) : str_replace(array(""\r\n"", ""\r"", ""\n""), ""\n"", $file);
        $this->yaml_separator = ""---\n"";
        $fm = $this->FrontMatter($file);

        foreach($fm as $key => $value)
        {
            $this->data[$key] = $value;
        }
    }

    /**
     * fetch method returns the value of a given key
     * @return string $value The value for a given key
     */
    public function fetch($key)
    {
        return $this->data[$key];
    }

    /**
     * keyExists method Checks to see if a key exists
     * @return bool
     */
    public function keyExists($key)
    {
        #return (isset($this->data[$key])) ? true : false; # Isset Version
        return array_key_exists($key, $this->data); # array_key_exists version
    }

    /**
     * fetchKeys method returns an array of all meta data without the content
     * @return [array] collection of all meta keys provided to FrontMatter
     */
    public function fetchKeys()
    {
        # Cache the keys so we don't edit the native object data
        $keys = $this->data;

        # Remove $data[content] from the keys so we only have the meta data
        array_pop($keys);

        return $keys;
    }

    /**
     * FrontMatter method, rturns all the variables from a YAML Frontmatter input
     * @param string $input The input string
     * @return array $final returns all variables in an array
     */
    function FrontMatter($input)
    {
        if (!$this->startsWith($input, $this->yaml_separator))
        {
            # No front matter
            # Store Content in Final array
            $final['content'] = $input;
            # Return Final array
            return $final;
        }

        # Explode Seperators. At most, make three pieces out of the input file
        $document = explode($this->yaml_separator,$input, 3);

        switch( sizeof($document) )
        {
            case 0:
            case 1:
                // Empty document
                $front_matter = """";
                $content = """";
                break;
            case 2:
                # Only front matter given
                $front_matter = $document[1];
                $content = """";
                break;
            default:
                # Normal document
                $front_matter = $document[1];
                $content = $document[2];
        }

        # Split lines in front matter to get variables
        $final = yaml_parse($front_matter);

        # Store Content in Final array
        $final['content'] = $content;

        # Return Final array
        return $final;
    }

    /**
     * A convenience wrapper around strpos to check the start of a string
     * From http://stackoverflow.com/a/860509/270334
     * @return boolean $startswithneedle string starts with $needle
     */
    private function startsWith($haystack,$needle,$case=true)
    {
        if($case)
            return strpos($haystack, $needle, 0) === 0;
        return stripos($haystack, $needle, 0) === 0;
    }

    /**
     * Read Method, Read file and returns it's contents
     * @return string $data returned data
     */
    protected function Read($file)
    {
        # Open File
        $fh = fopen($file, 'r');

        $fileSize = filesize($file);

        if(!empty($fileSize))
        {
            # Read Data
            $data = fread($fh, $fileSize);

            # Fix Data Stream to be the exact same format as PHP's strings
            $data = str_replace(array(""\r\n"", ""\r"", ""\n""), ""\n"", $data);
        }
        else
        {
            $data = '';
        }

        # Close File
        fclose($fh);

        # Return Data
        return $data;
    }
}","<?php
/**
 * PHP YAML FrontMatter Class
 * An easy to use class for handling YAML frontmatter in PHP.
 *
 * @author Blaxus
 * @package YAML-FrontMatter
 * @license http://unlicense.org UnLicense
 * @link https://github.com/Blaxus
 */
class FrontMatter
{
    /**
     * All the parameters.
     * @param array $data metadata & content
     */
    private $data;

    /**
     * Constructor method, checks a file and then puts the contents into custom strings for usage
     * @param string $file The input file
     */
    public function __construct($file)
    {
        $file = (file_exists($file)) ? $this->Read($file) : str_replace(array(""\r\n"", ""\r"", ""\n""), ""\n"", $file);
        $this->yaml_separator = ""---\n"";
        $fm = $this->FrontMatter($file);

        foreach($fm as $key => $value)
        {
            $this->data[$key] = $value;
        }
    }

    /**
     * fetch method returns the value of a given key
     * @return string $value The value for a given key
     */
    public function fetch($key)
    {
        return $this->data[$key];
    }

    /**
     * keyExists method Checks to see if a key exists
     * @return bool
     */
    public function keyExists($key)
    {
        #return (isset($this->data[$key])) ? true : false; # Isset Version
        return array_key_exists($key, $this->data); # array_key_exists version
    }

    /**
     * fetchKeys method returns an array of all meta data without the content
     * @return [array] collection of all meta keys provided to FrontMatter
     */
    public function fetchKeys()
    {
        # Cache the keys so we don't edit the native object data
        $keys = $this->data;

        # Remove $data[content] from the keys so we only have the meta data
        array_pop($keys);

        return $keys;
    }

    /**
     * FrontMatter method, rturns all the variables from a YAML Frontmatter input
     * @param string $input The input string
     * @return array $final returns all variables in an array
     */
    function FrontMatter($input)
    {
        if (!$this->startsWith($input, $this->yaml_separator))
        {
            # No front matter
            # Store Content in Final array
            $final['content'] = $input;
            # Return Final array
            return $final;
        }

        # Explode Seperators. At most, make three pieces out of the input file
        $document = explode($this->yaml_separator,$input, 3);

        switch( sizeof($document) )
        {
            case 0:
            case 1:
                // Empty document
                $front_matter = """";
                $content = """";
                break;
            case 2:
                # Only front matter given
                $front_matter = $document[1];
                $content = """";
                break;
            default:
                # Normal document
                $front_matter = $document[1];
                $content = $document[2];
        }

        # Split lines in front matter to get variables
        $final = yaml_parse($front_matter);

        # Store Content in Final array
        $final['content'] = $content;

        # Return Final array
        return $final;
    }

    /**
     * A convenience wrapper around strpos to check the start of a string
     * From http://stackoverflow.com/a/860509/270334
     * @return boolean $startswithneedle string starts with $needle
     */
    private function startsWith($haystack,$needle,$case=true)
    {
        if($case)
            return strpos($haystack, $needle, 0) === 0;
        return stripos($haystack, $needle, 0) === 0;
    }

    /**
     * Read Method, Read file and returns it's contents
     * @return string $data returned data
     */
    protected function Read($file)
    {
        # Open File
        $fh = fopen($file, 'r');

        $fileSize = filesize($file);

        if(!empty($fileSize))
        {
            # Read Data
            $data = fread($fh, $fileSize);

            # Fix Data Stream to be the exact same format as PHP's strings
            $data = str_replace(array(""\r\n"", ""\r"", ""\n""), ""\n"", $data);
        }
        else
        {
            $data = '';
        }

        # Close File
        fclose($fh);

        # Return Data
        return $data;
    }
}",TRUE,,871
873,InitialSO.csv873.txt,InitialGit.csv873.txt,4,"root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ","root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ",TRUE,"// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// ""License""); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../lib/promise');


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.catch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer();

  result.promise.catch(function(e) {
    if (e instanceof promise.CancellationError) {
      server.close();
    }
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;
","// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// ""License""); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../lib/promise');


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.catch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer();

  result.promise.catch(function(e) {
    if (e instanceof promise.CancellationError) {
      server.close();
    }
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;
",TRUE,,873
874,InitialSO.csv874.txt,InitialGit.csv874.txt,4,"root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ","root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ",TRUE,"// Copyright 2013 Selenium committers
// Copyright 2013 Software Freedom Conservancy
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested epheremal port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.addErrback(function() {
    DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.resolve(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.resolve(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.resolve(true);
    });
  });

  return result.promise;
};


/**
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.resolve(port);
        } else {
          findPort();
        }
      });
    }
  });
};


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;","// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// ""License""); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;",FALSE,,874
877,InitialSO.csv877.txt,InitialGit.csv877.txt,4,"root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ","root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ",TRUE,"// Copyright 2013 Selenium committers
// Copyright 2013 Software Freedom Conservancy
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;","// Copyright 2013 Selenium committers
// Copyright 2013 Software Freedom Conservancy
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;",TRUE,,877
879,InitialSO.csv879.txt,InitialGit.csv879.txt,4,"root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ","root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ",TRUE,"// Copyright 2013 Selenium committers
// Copyright 2013 Software Freedom Conservancy
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;","// Copyright 2013 Selenium committers
// Copyright 2013 Software Freedom Conservancy
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../index').promise;


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {webdriver.promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {webdriver.promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!webdriver.promise.Promise<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!webdriver.promise.Promise<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer(function() {
    server.cancel();
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!webdriver.promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;",TRUE,,879
880,InitialSO.csv880.txt,InitialGit.csv880.txt,4,"root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ","root linux$ cat /proc/sys/net/ipv4/ip_local_port_range 
32768   61000

solaris$ /usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port
32768

65535

macosx$ sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last
net.inet.ip.portrange.first: 49152
net.inet.ip.portrange.last: 65535

vista> netsh int ipv4 show dynamicport tcp
Protocol tcp Dynamic Port Range
---------------------------------
Start Port : 49152
Number of Ports : 16384 
 ",TRUE,"// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// ""License""); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../lib/promise');


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer();

  result.promise.thenCatch(function(e) {
    if (e instanceof promise.CancellationError) {
      server.close();
    }
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;
","// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// ""License""); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

'use strict';

var exec = require('child_process').exec,
    fs = require('fs'),
    net = require('net');

var promise = require('../lib/promise');


/**
 * The IANA suggested ephemeral port range.
 * @type {{min: number, max: number}}
 * @const
 * @see http://en.wikipedia.org/wiki/Ephemeral_ports
 */
var DEFAULT_IANA_RANGE = {min: 49152, max: 65535};


/**
 * The epheremal port range for the current system. Lazily computed on first
 * access.
 * @type {promise.Promise.<{min: number, max: number}>}
 */
var systemRange = null;


/**
 * Computes the ephemeral port range for the current system. This is based on
 * http://stackoverflow.com/a/924337.
 * @return {promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve to the ephemeral port range of the current system.
 */
function findSystemPortRange() {
  if (systemRange) {
    return systemRange;
  }
  var range = process.platform === 'win32' ?
      findWindowsPortRange() : findUnixPortRange();
  return systemRange = range.thenCatch(function() {
    return DEFAULT_IANA_RANGE;
  });
}


/**
 * Executes a command and returns its output if it succeeds.
 * @param {string} cmd The command to execute.
 * @return {!promise.Promise.<string>} A promise that will resolve
 *     with the command's stdout data.
 */
function execute(cmd) {
  var result = promise.defer();
  exec(cmd, function(err, stdout) {
    if (err) {
      result.reject(err);
    } else {
      result.fulfill(stdout);
    }
  });
  return result.promise;
}


/**
 * Computes the ephemeral port range for a Unix-like system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findUnixPortRange() {
  var cmd;
  if (process.platform === 'sunos') {
    cmd =
        '/usr/sbin/ndd /dev/tcp tcp_smallest_anon_port tcp_largest_anon_port';
  } else if (fs.existsSync('/proc/sys/net/ipv4/ip_local_port_range')) {
    // Linux
    cmd = 'cat /proc/sys/net/ipv4/ip_local_port_range';
  } else {
    cmd = 'sysctl net.inet.ip.portrange.first net.inet.ip.portrange.last' +
        ' | sed -e ""s/.*:\\s*//""';
  }

  return execute(cmd).then(function(stdout) {
    if (!stdout || !stdout.length) return DEFAULT_IANA_RANGE;
    var range = stdout.trim().split(/\s+/).map(Number);
    if (range.some(isNaN)) return DEFAULT_IANA_RANGE;
    return {min: range[0], max: range[1]};
  });
}


/**
 * Computes the ephemeral port range for a Windows system.
 * @return {!promise.Promise.<{min: number, max: number}>} A promise
 *     that will resolve with the ephemeral port range on the current system.
 */
function findWindowsPortRange() {
  var deferredRange = promise.defer();
  // First, check if we're running on XP.  If this initial command fails,
  // we just fallback on the default IANA range.
  return execute('cmd.exe /c ver').then(function(stdout) {
    if (/Windows XP/.test(stdout)) {
      // TODO: Try to read these values from the registry.
      return {min: 1025, max: 5000};
    } else {
      return execute('netsh int ipv4 show dynamicport tcp').
          then(function(stdout) {
            /* > netsh int ipv4 show dynamicport tcp
              Protocol tcp Dynamic Port Range
              ---------------------------------
              Start Port : 49152
              Number of Ports : 16384
             */
            var range = stdout.split(/\n/).filter(function(line) {
              return /.*:\s*\d+/.test(line);
            }).map(function(line) {
              return Number(line.split(/:\s*/)[1]);
            });

            return {
              min: range[0],
              max: range[0] + range[1]
            };
          });
    }
  });
}


/**
 * Tests if a port is free.
 * @param {number} port The port to test.
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<boolean>} A promise that will resolve
 *     with whether the port is free.
 */
function isFree(port, opt_host) {
  var result = promise.defer();

  result.promise.thenCatch(function(e) {
    if (e instanceof promise.CancellationError) {
      server.close();
    }
  });

  var server = net.createServer().on('error', function(e) {
    if (e.code === 'EADDRINUSE') {
      result.fulfill(false);
    } else {
      result.reject(e);
    }
  });

  server.listen(port, opt_host, function() {
    server.close(function() {
      result.fulfill(true);
    });
  });

  return result.promise;
}


/**
 * @param {string=} opt_host The bound host to test the {@code port} against.
 *     Defaults to {@code INADDR_ANY}.
 * @return {!promise.Promise.<number>} A promise that will resolve
 *     to a free port. If a port cannot be found, the promise will be
 *     rejected.
 */
function findFreePort(opt_host) {
  return findSystemPortRange().then(function(range) {
    var attempts = 0;
    var deferredPort = promise.defer();
    findPort();
    return deferredPort.promise;

    function findPort() {
      attempts += 1;
      if (attempts > 10) {
        deferredPort.reject(Error('Unable to find a free port'));
      }

      var port = Math.floor(
          Math.random() * (range.max - range.min) + range.min);
      isFree(port, opt_host).then(function(isFree) {
        if (isFree) {
          deferredPort.fulfill(port);
        } else {
          findPort();
        }
      });
    }
  });
}


// PUBLIC API


exports.findFreePort = findFreePort;
exports.isFree = isFree;
",TRUE,,880
882,InitialSO.csv882.txt,InitialGit.csv882.txt,3,"function SelectText(element) {
    var text = document.getElementById(element);
    if ($.browser.msie) {
        var range = document.body.createTextRange();
        range.moveToElementText(text);
        range.select();
    } else if ($.browser.mozilla || $.browser.opera) {
        var selection = window.getSelection();
        var range = document.createRange();
        range.selectNodeContents(text);
        selection.removeAllRanges();
        selection.addRange(range);
    } else if ($.browser.safari) {
        var selection = window.getSelection();
        selection.setBaseAndExtent(text, 0, text, 1);
    }
}
 function selectText(element) {
    var doc = document;
    var text = doc.getElementById(element);    

    if (doc.body.createTextRange) { // ms
        var range = doc.body.createTextRange();
        range.moveToElementText(text);
        range.select();
    } else if (window.getSelection) { // moz, opera, webkit
        var selection = window.getSelection();            
        var range = doc.createRange();
        range.selectNodeContents(text);
        selection.removeAllRanges();
        selection.addRange(range);
    }
}
 setBaseAndExtent() ","function selectText(node) {
    node = document.getElementById(node);

    if (document.body.createTextRange) {
        const range = document.body.createTextRange();
        range.moveToElementText(node);
        range.select();
    } else if (window.getSelection) {
        const selection = window.getSelection();
        const range = document.createRange();
        range.selectNodeContents(node);
        selection.removeAllRanges();
        selection.addRange(range);
    } else {
        console.warn(""Could not select text in node: Unsupported browser."");
    }
}

const clickable = document.querySelector('.click-me');
clickable.addEventListener('click', () => selectText('target')); <div id=""target""><p>Some text goes here!</p><p>Moar text!</p></div>
<p class=""click-me"">Click me!</p> function SelectText(element) {
    var text = document.getElementById(element);
    if ($.browser.msie) {
        var range = document.body.createTextRange();
        range.moveToElementText(text);
        range.select();
    } else if ($.browser.mozilla || $.browser.opera) {
        var selection = window.getSelection();
        var range = document.createRange();
        range.selectNodeContents(text);
        selection.removeAllRanges();
        selection.addRange(range);
    } else if ($.browser.safari) {
        var selection = window.getSelection();
        selection.setBaseAndExtent(text, 0, text, 1);
    }
}
 ",FALSE,"$(function(){
  
  var template = 
    '<div class=""showpanel"">'+
      '<button class=""button showload"">file</button>'+
      '<button class=""button showsource"">source</button>'+
      '<button class=""button showlibrary"">module</button>'+
    '</div>'+
    '<div class=""panel"">'+
      '<div class=""choosepanel"">'+
        '<button class=""button showload"">file</button>'+
        '<button class=""button showsource"">source</button>'+
        '<button class=""button showlibrary"">module</button>'+
        '<button class=""button close"">close</button>'+
      '</div>'+
      '<div class=""load"">'+
        '<div class=""controls"">'+
          '<form class=""loadfromgist"">'+
            '<input class=""loadfromgistinput"" name=""loadfromgistinput"" placeholder=""load app from gist url"" type=""text"" />'+
            '<button class=""loadfromgistsubmit"" type=""submit"">load</button>'+
          '</form>'+
        '</div>'+
        '<div class=""listing"">'+
          '<button class=""button newblank"" title=""new blank app"">new</button>'+
          '<div class=""currentapp"">'+
          '</div>'+
          '<div class=""localapps"">'+
            '<h1>Saved Apps</h1>'+
          '</div>'+
          '<div class=""examples"">'+
            '<h1>Examples</h1>'+
          '</div>'+
        '</div>'+
      '</div>'+
      '<div class=""source"">'+
        '<div class=""sourceedit"">'+
          '<textarea />'+
        '</div>'+
        '<div class=""controls"">'+
          '<button class=""button sourcerefresh"" title=""refresh the source code"">refresh</button>'+
          '<button class=""button sourcecompress"" title=""refresh and compress the source code into one line"">compress</button>'+
          '<button class=""button sourceapply"" title=""reloads the app"">apply changes</button>'+
        '</div>'+
      '</div>'+
      '<div class=""library"">'+
        '<div class=""controls"">'+
          '<form class=""addbyurl"">'+
            '<input class=""addbyurlinput"" name=""addbyurlinput"" placeholder=""search or url"" type=""text"" />'+
            '<button class=""addbyurlsubmit"" type=""submit"">load</button>'+
          '</form>'+
        '</div>'+
        '<div class=""listing"">'+
        '</div>'+
      '</div>'+
    '</div>';

  var currentTemplate = 
    '<h1>Current App</h1>'+
    '<div class=""info"">'+
      '<h2 title=""url, click to edit"" class=""seturl editable""></h2>' +
      '<p title=""title, click to edit"" class=""settitle editable""></p>' +
      '<p title=""description, click to edit"" class=""setdescription editable""></p>' +
    '</div>'+
    '<div class=""savecontrols"">'+
      '<button class=""savelocal"">save local</button>'+
      '<button class=""savegist"">save public</button>'+
      '<button class=""deletelocal"">delete</button>'+
    '</div>'+
    '<div class=""permalink"" title=""last publicly saved version"">'+
    '</div>';
  
  var IframeworkView = Backbone.View.extend({
    tagName: ""div"",
    className: ""app"",
    template: _.template(template),
    currentTemplate: _.template(currentTemplate),
    frameCount: 0, // HACK to not use same name in Firefox
    events: {
      ""click .close"" :         ""closePanels"",
      ""click .showload"" :      ""showLoad"",
      ""click .showsource"" :    ""showSource"",
      ""click .showlibrary"":    ""showLibrary"",
      ""click .sourcerefresh"":  ""sourceRefresh"",
      ""click .sourcecompress"": ""sourceCompress"",
      ""click .sourceapply"":    ""sourceApply"",
      ""submit .addbyurl"":      ""addByUrl"",
      ""submit .loadfromgist"":  ""loadFromGist"",
      ""click .savelocal"":      ""saveLocal"",
      ""click .savegist"":       ""saveGist"",
      ""click .deletelocal"":    ""deleteLocal"",
      ""click .newblank"":       ""newBlank"",
      // ""click .saveaslocal"": ""saveAsLocal"",
      ""blur .settitle"":        ""setTitle"",
      ""blur .setdescription"":  ""setDescription"",
      ""blur .seturl"":          ""setUrl""
    },
    initialize: function () {
      this.render();
      $('body').append(this.el);
      
      // Hide panels
      this.$("".panel .source"").hide();
      this.$("".panel .library"").hide();

      // Panel buttons
      this.$("".close"")
        .button({ icons: { primary: 'ui-icon-close' }, text: false });
      this.$("".showsource"")
        .button({ icons: { primary: 'ui-icon-gear' } });
      this.$("".showload"")
        .button({ icons: { primary: 'ui-icon-folder-open' } });
      this.$("".showlibrary"")
        .button({ icons: { primary: 'ui-icon-plus' } });
      this.$("".sourcerefresh"")
        .button({ icons: { primary: 'ui-icon-arrowrefresh-1-s' } });
      this.$("".sourcecompress"")
        .button({ icons: { primary: 'ui-icon-suitcase' } });
      this.$("".sourceapply"")
        .button({ icons: { primary: 'ui-icon-check' } });
      this.$("".addbyurlsubmit"")
        .button({ icons: { primary: 'ui-icon-check' } });
      this.$("".loadfromgistsubmit"")
        .button({ icons: { primary: 'ui-icon-check' } });
      this.$("".newblank"")
        .button({ icons: { primary: 'ui-icon-document' } });

    },
    allLoaded: function () {
      this.loadLocalApps();
    },
    render: function () {
      this.$el.html(this.template());
      return this;
    },
    shownGraph: null,
    // Thanks http://www.madebypi.co.uk/labs/colorutils/examples.html :: red.equal(7, true);
    wireColors: [""#FF9292"", ""#00C2EE"", ""#DCA761"", ""#8BB0FF"", ""#96BD6D"", ""#E797D7"", ""#29C6AD""],
    wireColorIndex: 0,
    selectedPort: null,
    getWireColor: function () {
      var color = this.wireColors[this.wireColorIndex];
      this.wireColorIndex++;
      if (this.wireColorIndex > this.wireColors.length-1) {
        this.wireColorIndex = 0;
      }
      return color;
    },
    loadGraph: function (graph) {
      if (this.shownGraph && this.shownGraph.view) {
        this.shownGraph.view.$el.remove();
        this.shownGraph.view = null;
        this.shownGraph = null;
      }
      this.wireColorIndex = 0;
      this.shownGraph = new Iframework.Graph(graph);
      if (graph[""info""][""title""]) {
        document.title = ""Meemoo: ""+graph[""info""][""title""];
      }
      this.closePanels();

      this.updateCurrentInfo();
    },
    gotMessage: function (e) {
      if (Iframework.shownGraph) {
        var node = Iframework.shownGraph.get(""nodes"").get(e.data.nodeid);
        if (node) {
          for (var name in e.data) {
            if (e.data.hasOwnProperty(name)) {
              var info = e.data[name];
              switch (name) {
                case ""info"":
                  node.infoLoaded(info);
                  break;
                case ""addInput"":
                  node.addInput(info);
                  break;
                case ""addOutput"":
                  node.addOutput(info);
                  break;
                case ""stateReady"":
                  node.stateReady();
                  break;
                default:
                  break;
              }
            }
          }
        }
      }
    },
    maskFrames: function () {
      $("".module"").each(function(){
        $(this).append(
          $('<div class=""iframemask"" />')
        );
      });
    },
    unmaskFrames: function () {
      $("".iframemask"").remove();
    },
    Library: null,
    addModulesToLibrary: function () {
      // This should fire after all nodes ins/outs are loaded
      if (!this.Library) {
        this.Library = new Iframework.Modules();
      }
      this.shownGraph.get(""nodes"").each(function(node){
        var module = this.Library.findOrAdd(node);
      }, this);
    },
    loadLibrary: function (library) {
      this.Library = new Iframework.Modules();

      var autocompleteData = [];

      var accordion = $(""<div></div>"");

      for (var category in library) {
        if (!library.hasOwnProperty(category)){continue;}
        var section = $('<div class=""library-section""></div>');

        // section title
        section.append( $('<h3><a href=""#"">'+category+""</a></h3>"") );

        // section items
        var sectionDiv = $(""<div></div>"");
        var modules = library[category];
        for (var i = 0; i<modules.length; i++) {
          var module = new Iframework.Module(modules[i]);
          this.Library.add(module);

          module.initializeView();
          sectionDiv.append(module.view.$el);

          var autocompleteDataItem = {
            value: module.get(""src""),
            label: module.get(""info"").title + "" by "" + module.get(""info"").author + "" - "" + module.get(""info"").description + "" "" + module.get(""src""),
            title: module.get(""info"").title,
            desc: module.get(""info"").description
          };
          autocompleteData.push(autocompleteDataItem);
        }
        section.append( sectionDiv );
        accordion.append( section );
      }

      this.$('.panel .library .listing').append(accordion);
      accordion.children("".library-section"")
        .accordion({
          animated: false,
          header: ""h3"",
          autoHeight: false,
          collapsible: true,
          create: function(event) {
            // start closed
            $(event.target).accordion( ""activate"", false );
          }
        });

      this.$('.addbyurlinput')
        .autocomplete({
          minLength: 1,
          source: autocompleteData
        })
        .data( ""autocomplete"" )._renderItem = function( ul, item ) {
          return $( ""<li></li>"" )
            .data( ""item.autocomplete"", item )
            .append( '<a title=""'+item.value+'""><span class=""autocomplete-title"">' + item.title + '</span><br /><span class=""autocomplete-desc"">' + item.desc + ""</span></a>"" )
            .appendTo( ul );
        };
    },
    _exampleGraphs: [],
    _loadedExample: null,
    loadExampleApps: function (examples) {
      this._exampleGraphs = this._exampleGraphs.concat(examples);

      // Make example links:
      var exampleLinks = """";
      for (var i=0; i<examples.length; i++) {
        var url = examples[i][""info""][""url""];
        if (url) {
          exampleLinks += '<a href=""#example/'+url+'"" title=""'+examples[i][""info""][""title""]+"": ""+examples[i][""info""][""description""]+'"">'+url+'</a> <br />';
        }
      }
      this.$("".panel .load .examples"").append(exampleLinks);

      // None shown
      if (!this.shownGraph){
        if (this._loadedExample) {
          // Router tried to load this already, try again
          this.loadExample(this._loadedExample);
        } else if (!this._loadedLocal) {
          // Load first example
          Iframework.loadGraph(this._exampleGraphs[0]);
        }
      }
    },
    loadExample: function (url) {
      this._loadedExample = url;
      for (var i=0; i<this._exampleGraphs.length; i++) {
        if (this._exampleGraphs[i][""info""][""url""] === url) {
          // reset localStorage version
          this._loadedLocalApp = null;
          // load graph
          this.loadGraph(this._exampleGraphs[i]);
          return true;
        }
      }
    },
    closePanels: function() {
      this.$("".showpanel"").show();
      this.$("".panel"").hide();
      this.$("".graph"").css(""right"", ""0px"");

      this.$("".panel .load"").hide();
      this.$("".panel .library"").hide();
      this.$("".panel .source"").hide();
    },
    showpanel: function() {
      this.$("".panel .load"").hide();
      this.$("".panel .library"").hide();
      this.$("".panel .source"").hide();

      this.$("".showpanel"").hide();
      this.$("".panel"").show();
      this.$("".graph"").css(""right"", ""350px"");
    },
    showLoad: function() {
      this.showpanel();
      this.$("".panel .load"").show();
    },
    showSource: function() {
      this.showpanel();
      this.$("".panel .source"").show();
      this.sourceRefresh();
    },
    showLibrary: function() {
      this.showpanel();
      this.$("".panel .library"").show();
    },
    sourceRefresh: function() {
      this.$("".panel .source textarea"")
        .val( JSON.stringify(Iframework.shownGraph, null, ""  "") );
    },
    sourceCompress: function() {
      this.$("".panel .source textarea"")
        .val( JSON.stringify(Iframework.shownGraph, null, """") );
    },
    sourceApply: function() {
      var newGraph = JSON.parse( $("".panel .sourceedit textarea"").val() );
      this.loadGraph(newGraph);
      this.showSource();
    },
    addByUrl: function() {
      $("".addbyurlinput"").blur();
      var url = this.$("".addbyurlinput"").val();
      if (url !== """") {
        this.shownGraph.addNode( new Iframework.NodeBoxIframe({""src"": url}) );
        this.$("".addbyurlinput"")
          .val("""")
          .attr(""placeholder"", ""loading..."");
        window.setTimeout(function(){
          this.$("".addbyurlinput"")
            .attr(""placeholder"", ""search or url"");
        },1000);
      }
      return false;
    },
    loadFromGist: function () {
      var gistid = this.loadFromGistId( this.$("".loadfromgistinput"").val() );
      if ( gistid ) {
        $("".loadfromgistinput"").blur();

        if (this.router) {
          this.router.navigate(""gist/""+gistid);
        }

        // Input placeholder
        this.$("".loadfromgistinput"")
          .val("""")
          .attr(""placeholder"", ""loading..."");
        window.setTimeout(function(){
          this.$("".loadfromgistinput"")
            .attr(""placeholder"", ""load app from gist url"");
        }, 1500);

      }

      return false;
    },
    loadFromGistId: function (gistid) {
      // ""https://gist.github.com/2439102"" or just ""2439102""
      var split = gistid.split(""/""); // [""https:"", """", ""gist.github.com"", ""2439102""]
      if (split.length > 3 && split[2] === ""gist.github.com"") {
        gistid = split[3];
      }
      gistid = parseInt(gistid, 10);
      if (gistid !== gistid) {
        // NaN
        return false;
      }

      // Load gist to json to app
      $.ajax({
        url: 'https://api.github.com/gists/'+gistid,
        type: 'GET',
        dataType: 'jsonp'
      })
      .success( function(gistdata) {
        var graphs = [];
        for (var file in gistdata.data.files) {
          if (gistdata.data.files.hasOwnProperty(file)) {
            var graph = JSON.parse(gistdata.data.files[file].content);
            if (graph) {
              var gisturl = gistdata.data.html_url;
              // Insert a reference to the parent
              if (!graph.info.parents || !graph.info.parents.push) {
                graph.info.parents = [];
              }
              // Only if this gist url isn't already in graph's parents
              if (graph.info.parents.indexOf(gisturl) === -1) {
                graph.info.parents.push(gisturl);
              }
              graphs.push(graph);
            }
          }
        }
        if (graphs.length > 0) {
          // reset localStorage version
          this._loadedLocalApp = null;
          // load graph
          Iframework.loadGraph(graphs[0]);
          Iframework.closePanels();
        }
      })
      .error( function(e) {
        console.warn(""gist load error"", e);
      });

      return gistid;
    },
    saveGist: function () {
      // Save app to gist
      var graph = this.shownGraph.toJSON();
      var data = {
        ""description"": ""meemoo app: ""+graph[""info""][""title""],
        ""public"": true
      };
      data[""files""] = {};
      var filename = graph[""info""][""url""]+"".json"";
      data[""files""][filename] = {
        ""content"": JSON.stringify(graph, null, ""  "")
      };
      console.log(JSON.stringify(data));
      $.ajax({
        url: 'https://api.github.com/gists',
        type: 'POST',
        dataType: 'json',
        data: JSON.stringify(data)
      })
      .success( function(e) {
        // Save gist url to graph's info.parents
        var info = Iframework.shownGraph.get(""info"");
        if (!info.hasOwnProperty(""parents"") || !info.parents.push) {
          graph.info.parents = [];
        }
        graph.info.parents.push(e.html_url);
        // Save local with new gist reference
        Iframework.saveLocal();
        // Show permalink
        Iframework.$("".permalink"").text(""http://meemoo.org/iframework/#gist/""+e.id);
      })
      .error( function(e) {
        console.warn(""gist save error"", e);
      });
    },
    loadLocalApps: function () {
      // Load apps from local storage
      this._localApps = new Iframework.LocalApps();
      this._localApps.fetch({
        success: function(e) {
          Iframework._localApps.each(function(app){
            app.initializeView();
          });
          // None shown
          if (!Iframework.shownGraph){
            if (Iframework._loadedLocal) {
              // Router tried to load this already, try again
              Iframework.loadLocal(Iframework._loadedLocal);
            }
          }
        },
        error: function (e) {
          console.warn(""error loading local apps"");
        }
      });
    },
    _loadedLocal: null,
    _loadedLocalApp: null,
    loadLocal: function (url) {
      this._loadedLocal = url;
      if (this._localApps) {
        var app = this._localApps.getByUrl(url);
        if (app) {
          app.load();
          return true;
        }
        else {
          // Didn't find matching url
          console.warn(""Didn't find local app with matching url."");
          return false;
        }
      } else {
        // Local apps not loaded yet
        return false;
      }
    },
    setKey: function (current) {
      var key = window.prompt(""Enter a url key"", current);
      if (key) {
        key = this.encodeKey(key);
        this.shownGraph.setInfo(""url"", key);
      }
    },
    encodeKey: function (key) {
      key = key.toLowerCase().replace(/ /g, ""-"");
      key = encodeURIComponent(key);
      return key;
    },
    saveLocal: function () {

      if (!this.shownGraph.get(""info"")){
        this.shownGraph.set({
          info: {}
        });
      }
      while (!this.shownGraph.get(""info"").hasOwnProperty(""url"") || this.shownGraph.get(""info"")[""url""]==="""") {
        var keysuggestion;
        if (this.shownGraph.get(""info"").hasOwnProperty(""title"") && this.shownGraph.get(""info"")[""title""]!=="""") {
          keysuggestion = this.shownGraph.get(""info"")[""title""];
        } else {
          keysuggestion = ""app-"" + new Date().getTime();
        }
        this.setKey(keysuggestion);
      }
      var currentAppGraph = JSON.parse(JSON.stringify(this.shownGraph));
      var key = currentAppGraph[""info""][""url""];
      var app;
      if (this._loadedLocalApp) {
        if (this._localApps.getByUrl(key) && this._localApps.getByUrl(key) !== this._loadedLocalApp) {
          if (window.confirm(""\""""+key+""\"" already exists as a local app. Do you want to replace it?"")) {
            app = this._localApps.updateOrCreate(currentAppGraph);
          } else {
            return false;
          }
        } else {
          // New name
          app = this._loadedLocalApp;
          app.save({graph:currentAppGraph});
          app.trigger(""change"");
        }
      } else {
        // Overwrite?
        if (this._localApps.getByUrl(key) && !window.confirm(""\""""+key+""\"" already exists as a local app. Do you want to replace it?"")) {
          return false;
        }
        app = this._localApps.updateOrCreate(currentAppGraph);
      }

      this._loadedLocalApp = app;

      // URL hash
      Iframework.router.navigate(""local/""+key);
      return app;
    },
    deleteLocal: function () {
      if (this._loadedLocalApp) {
        this._loadedLocalApp.destroy();
        this._loadedLocalApp = null;
      }
    },
    setTitle: function () {
      var input = this.$("".currentapp .info .settitle"").text();
      if (input !== this.shownGraph.get(""info"")[""title""]) {
        this.shownGraph.setInfo(""title"", input);
      }
    },
    setDescription: function () {
      var input = this.$("".currentapp .info .setdescription"").text();
      if (input !== this.shownGraph.get(""info"")[""description""]) {
        this.shownGraph.setInfo(""description"", input);
      }
    },
    setUrl: function () {
      var input = this.$("".currentapp .info .seturl"").text();
      input = this.encodeKey(input);
      if (input !== this.shownGraph.get(""info"")[""url""]) {
        this.shownGraph.setInfo(""url"", input);
      }
    },
    updateCurrentInfo: function () {
      var graph = this.shownGraph.toJSON();
      this.$("".currentapp"")
        .html( this.currentTemplate(graph) );
      this.$("".currentapp .savelocal"")
        .button({ icons: { primary: 'ui-icon-disk' } });
      this.$("".currentapp .savegist"")
        .button({ icons: { primary: 'ui-icon-link' } });
      this.$("".currentapp .deletelocal"")
        .button({ icons: { primary: 'ui-icon-trash' }, text: false });

      this.$("".currentapp .seturl"")
        .text(decodeURIComponent(graph[""info""][""url""]));
      this.$("".currentapp .settitle"")
        .text(graph[""info""][""title""]);
      this.$("".currentapp .setdescription"")
        .text(graph[""info""][""description""]);

      this.$("".editable"")
        .attr(""contenteditable"", ""true"");

      if (graph.info.hasOwnProperty(""parents"")) {
        var parents = graph.info.parents;
        if (parents.length > 0) {
          var last = parents[parents.length-1];
          var split = last.split(""/"");
          if (split.length > 0) {
            var id = split[split.length-1];
            var gisturl = ""http://meemoo.org/iframework/#gist/""+id;
            var gisturlE = encodeURIComponent(gisturl);
            var titleE = encodeURIComponent(graph[""info""][""title""]);

            var gistUrlSelect = $('<span />')
              .text(gisturl)
              .click(function(e){
                // Click-to-select from http://stackoverflow.com/a/987376/592125
                var range;
                if (document.body.createTextRange) { // ms
                  range = document.body.createTextRange();
                  range.moveToElementText(e.target);
                  range.select();
                } else if (window.getSelection) {
                  var selection = window.getSelection();
                  range = document.createRange();
                  range.selectNodeContents(e.target);
                  selection.removeAllRanges();
                  selection.addRange(range);
                }
              });

            var fbLink = $('<a title=""share on facebook"" target=""_blank"" class=""share"">fb</a>')
              .attr(""href"", 'https://www.facebook.com/sharer.php?u='+gisturlE+'&t='+titleE);
            var tweet = gisturl + "" "" + graph[""info""][""title""] + "" #meemoo "" + graph[""info""][""description""];
            // url is shortened, so can be longer than 140
            if (tweet.length >= 158) {
              tweet = tweet.substr(0,155) + ""..."";
            }
            var twitterLink = $('<a title=""post to twitter"" target=""_blank"" class=""share"">tw</a>')
              .attr(""href"", 'https://twitter.com/intent/tweet?text='+encodeURIComponent(tweet));

            this.$("".currentapp .permalink"")
              .empty()
              .append(gistUrlSelect).append("" "")
              .append(fbLink).append("" "")
              .append(twitterLink);
          }
        }
      }

      if (this._loadedLocalApp) {
        this.$("".currentapp .deletelocal"").show();
      } else  {
        this.$("".currentapp .deletelocal"").hide();
      }
    },
    newBlank: function () {
      // HACK maybe a better way to load a blank graph with defaults?
      this.loadGraph({""info"":{""author"":""meemoo"",""title"":""Untitled"",""description"":""Meemoo app description"",""parents"":[],""url"":""""},""nodes"":[],""edges"":[]});
      // reset localStorage version
      this._loadedLocalApp = null;

      this.showLibrary();

      // URL hash
      Iframework.router.navigate(""new"");
    }

  });

  // Start app
  window.Iframework = new IframeworkView();
  
  // Listen for /info messages from nodes
  window.addEventListener(""message"", Iframework.gotMessage, false);

});
","$(function(){
  
  var template = 
    '<div class=""showpanel"">'+
      '<button class=""button show-load icon-folder-open"">app</button>'+
    '</div>'+
    '<div class=""panel"">'+
      '<div class=""choosepanel"">'+
        '<button class=""button show-load icon-folder-open"">app</button>'+
        '<button class=""button close icon-cancel"" title=""close menu""></button>'+
      '</div>'+
      '<div class=""menu menu-load"">'+
        '<div class=""controls"">'+
          '<form class=""loadfromgist"">'+
            '<input class=""loadfromgistinput"" name=""loadfromgistinput"" placeholder=""load app from gist url"" type=""text"" />'+
            '<button class=""loadfromgistsubmit icon-ok"" type=""submit"">load</button>'+
          '</form>'+
        '</div>'+
        '<div class=""listing"">'+
          '<button class=""button newblank icon-doc"" title=""new blank app"">new</button>'+
          '<div class=""currentapp"">'+
          '</div>'+
          '<div class=""localapps"">'+
            '<h1>Saved Apps</h1>'+
          '</div>'+
          '<div class=""examples"">'+
            '<h1>Examples</h1>'+
          '</div>'+
        '</div>'+
      '</div>'+
    '</div>';

  var currentTemplate = 
    '<h1>Current App</h1>'+
    '<div class=""info"">'+
      '<h2 title=""url, click to edit"" class=""seturl editable""></h2>' +
      '<p title=""title, click to edit"" class=""settitle editable""></p>' +
      '<p title=""description, click to edit"" class=""setdescription editable""></p>' +
    '</div>'+
    '<div class=""savecontrols"">'+
      '<button class=""savelocal icon-install"">save local</button>'+
      '<button class=""forklocal icon-split"" title=""save as... copy app and save under a new name"">fork</button>'+
      '<button class=""savegist icon-globe-1"" title=""save app to gist.github.com anonymously"">save public</button>'+
      '<button class=""deletelocal icon-trash"" title=""delete local app""></button>'+
    '</div>'+
    '<div class=""permalink"" title=""last publicly saved version"">'+
    '</div>';

  // requestAnimationFrame shim from http://paulirish.com/2011/requestanimationframe-for-smart-animating/
  window.requestAnimationFrame = (function(){
    return  window.requestAnimationFrame || 
      window.webkitRequestAnimationFrame || 
      window.mozRequestAnimationFrame    || 
      window.oRequestAnimationFrame      || 
      window.msRequestAnimationFrame     || 
      function( callback ){
        window.setTimeout(callback, 1000 / 60);
      };
  }());    
  
  var IframeworkView = Backbone.View.extend({
    tagName: ""div"",
    className: ""app"",
    template: _.template(template),
    currentTemplate: _.template(currentTemplate),
    frameCount: 0, // HACK to not use same name in Firefox
    NativeNodes: {},
    plugins: {},
    events: {
      ""click .close"" :         ""closePanels"",
      ""click .show-load"" :      ""showLoad"",

      ""click .newblank"":       ""newBlank"",

      ""submit .loadfromgist"":  ""loadFromGist"",
      ""click .savegist"":       ""saveGist"",
      ""click .savelocal"":      ""saveLocal"",
      ""click .forklocal"":      ""forkLocal"",
      ""click .deletelocal"":    ""deleteLocal"",

      ""blur .settitle"":        ""setTitle"",
      ""blur .setdescription"":  ""setDescription"",
      ""blur .seturl"":          ""setUrl""
    },
    initialize: function () {
      this.render();
      $('body').prepend(this.el);
      
      // Hide panels
      this.closePanels();

      // After all of the .js is loaded, this.allLoaded will be triggered to finish the init
      this.once(""allLoaded"", this.loadLocalApps, this);
    },
    allLoaded: function () {
      this.trigger(""allLoaded"");

      // Start animation loop
      window.requestAnimationFrame( this.renderAnimationFrame.bind(this) );
    },
    render: function () {
      this.$el.html(this.template());
      return this;
    },
    renderAnimationFrame: function (timestamp) {
      // Safari doesn't pass timestamp
      timestamp = timestamp !== undefined ? timestamp : Date.now();
      // Queue next frame
      window.requestAnimationFrame( this.renderAnimationFrame.bind(this) );
      // Hit graph, which hits nodes
      if (this.graph && this.graph.view) {
        this.graph.view.renderAnimationFrame(timestamp);
      }
    },
    graph: null,
    shownGraph: null,
    // Thanks http://www.madebypi.co.uk/labs/colorutils/examples.html :: red.equal(7, true);
    wireColors: [""#FF9292"", ""#00C2EE"", ""#DCA761"", ""#8BB0FF"", ""#96BD6D"", ""#E797D7"", ""#29C6AD""],
    wireColorIndex: 0,
    selectedPort: null,
    getWireColor: function () {
      var color = this.wireColors[this.wireColorIndex];
      this.wireColorIndex++;
      if (this.wireColorIndex > this.wireColors.length-1) {
        this.wireColorIndex = 0;
      }
      return color;
    },
    addMenu: function(name, html, icon){
      var self = this;

      var menu = $('<div class=""menu menu-'+name+'""></div>')
        .append(html)
        .hide();
      this.$("".panel"").append(menu);

      var showButton = $('<button class=""button show-'+name+'"">'+name+'</button>')
        .click( function(){
          self.showPanel(name);
          // menu.show();
        });
      if (icon) {
        showButton.addClass(icon);
      }
      this.$("".showpanel"").append(showButton);
      this.$("".choosepanel > .close"").before(showButton.clone(true));
    },
    addMenuSection: function(name, html, parentMenu){
      var title = $(""<h1>"").text(name);
      this.$("".menu-""+parentMenu+"" .listing"").append(title, html);
    },
    loadGraph: function (graph) {
      // Load a new parent graph

      if (this.graph) {
        this.graph.remove();
        this.graph = null;
      }
      this.wireColorIndex = 0;
      this.graph = new Iframework.Graph(graph);
      if (graph[""info""] && graph[""info""][""title""]) {
        document.title = ""Meemoo: ""+graph[""info""][""title""];
      }

      this.updateCurrentInfo();

      this.shownGraph = this.graph;

      return this.graph;
    },
    showGraph: function (graph) {
      // Show a child graph / subgraph / macro
      if (this.shownGraph && this.shownGraph.view) {
        this.shownGraph.view.$el.hide();
      }
      if (!graph.view) {
        graph.initializeView();
      }
      this.shownGraph = graph;
      this.shownGraph.view.$el.show();
      // Rerender edges once
      if (!this.shownGraph.view.unhidden) {
        this.shownGraph.view.unhidden = true;
        this.shownGraph.view.rerenderEdges();
      }
    },
    gotMessage: function (e) {
      if (Iframework.graph) {
        var node = Iframework.graph.get(""nodes"").get(e.data.nodeid);
        // TODO: iframes in subgraphs?
        if (node) {
          for (var name in e.data) {
            if (e.data.hasOwnProperty(name)) {
              var info = e.data[name];
              switch (name) {
                case ""message"":
                  node.sendFromFrame(info);
                  break;
                case ""info"":
                  node.infoLoaded(info);
                  break;
                case ""addInput"":
                  node.addInput(info);
                  break;
                case ""addOutput"":
                  node.addOutput(info);
                  break;
                case ""stateReady"":
                  node.iframeLoaded();
                  break;
                case ""set"":
                  node.setValues(info);
                  break;
                default:
                  break;
              }
            }
          }
        }
      }
    },
    _exampleGraphs: [],
    _loadedExample: null,
    loadExampleApps: function (examples) {
      this._exampleGraphs = this._exampleGraphs.concat(examples);

      // Make example links:
      var exampleLinks = """";
      for (var i=0; i<examples.length; i++) {
        var url = examples[i][""info""][""url""];
        if (url) {
          exampleLinks += '<a href=""#example/'+url+'"" title=""'+examples[i][""info""][""title""]+"": ""+examples[i][""info""][""description""]+'"">'+url+'</a> <br />';
        }
      }
      this.$("".menu-load .examples"").append(exampleLinks);

      // None shown
      if (!this.graph){
        if (this._loadedExample) {
          // Router tried to load this already, try again
          this.loadExample(this._loadedExample);
        } else if (!this._loadedLocal && !this._loadedLocal && !this._loadedGist) {
          // Load first example
          // Iframework.loadGraph(this._exampleGraphs[0]);
          // Load new graph
          this.newBlank();
        }
      }
    },
    loadExample: function (url) {
      this._loadedExample = url;
      for (var i=0; i<this._exampleGraphs.length; i++) {
        if (this._exampleGraphs[i][""info""][""url""] === url) {
          // reset localStorage version
          this._loadedLocalApp = null;
          // load graph
          this.loadGraph(this._exampleGraphs[i]);
          this.analyze(""load"", ""example"", url);
          return true;
        }
      }
    },
    closePanels: function() {
      this.$("".showpanel"").show();
      this.$("".panel"").hide();
      this.$("".graph"").css(""right"", ""0px"");

      this.$("".menu"").hide();
    },
    showPanel: function( menu ) {
      this.$("".menu"").hide();

      this.$("".showpanel"").hide();
      this.$("".panel"").show();
      this.$("".graph"").css(""right"", ""350px"");

      if (menu) {
        if ( this.$("".menu-""+menu).length > 0 ) {
          this.$("".menu-""+menu).show();
          this.trigger(""showmenu:""+menu);
        } else {
          // HACK for when menu plugin isn't added yet
          var self = this;
          _.delay(function(){
            self.$("".menu-""+menu).show();
            self.trigger(""showmenu:""+menu);
          }, 1000);
        }
      }
    },
    showLoad: function() {
      this.showPanel();
      this.$("".menu-load"").show();
    },
    loadFromGist: function () {
      var gistid = this.loadFromGistId( this.$("".loadfromgistinput"").val() );
      if ( gistid ) {
        $("".loadfromgistinput"").blur();

        if (this.router) {
          this.router.navigate(""gist/""+gistid);
        }

        // Input placeholder
        this.$("".loadfromgistinput"")
          .val("""")
          .attr(""placeholder"", ""loading..."");
        window.setTimeout(function(){
          this.$("".loadfromgistinput"")
            .attr(""placeholder"", ""load app from gist url"");
        }, 1500);
      }
      return false;
    },
    loadFromGistId: function (gistid) {
      this._loadedGist = gistid;
      // ""https://gist.github.com/2439102"" or just ""2439102""
      var split = gistid.split(""/""); // [""https:"", """", ""gist.github.com"", ""2439102""]
      if (split.length > 3 && split[2] === ""gist.github.com"") {
        gistid = split[split.length-1];
      }

      // Load gist to json to app
      $.ajax({
        url: 'https://api.github.com/gists/'+gistid,
        type: 'GET',
        dataType: 'jsonp'
      })
      .success( function(gistdata) {
        var graphs = [];
        for (var file in gistdata.data.files) {
          if (gistdata.data.files.hasOwnProperty(file)) {
            var graph = JSON.parse(gistdata.data.files[file].content);
            if (graph) {
              var gisturl = gistdata.data.html_url;
              // Insert a reference to the parent
              if (!graph.info.parents || !graph.info.parents.push) {
                graph.info.parents = [];
              }
              // Only if this gist url isn't already in graph's parents
              if (graph.info.parents.indexOf(gisturl) === -1) {
                graph.info.parents.push(gisturl);
              }
              graphs.push(graph);
            }
          }
        }
        if (graphs.length > 0) {
          // reset localStorage version
          // FIXME
          // Iframework._loadedLocalApp = null;
          // load graph
          Iframework.loadGraph(graphs[0]);
          Iframework.closePanels();
        }
      })
      .error( function(e) {
        console.warn(""gist load error"", e);
      });

      this.analyze(""load"", ""gist"", gistid);

      return gistid;
    },
    saveGist: function () {
      // Save app to gist
      var graph = this.graph.toJSON();
      var data = {
        ""description"": ""meemoo app: ""+graph[""info""][""title""],
        ""public"": true
      };
      data[""files""] = {};
      var filename = graph[""info""][""url""]+"".json"";
      data[""files""][filename] = {
        ""content"": JSON.stringify(graph, null, ""  "")
      };

      // Button
      this.$("".savegist"")
        .prop('disabled', true)
        .text(""saving..."");

      $.ajax({
        url: 'https://api.github.com/gists',
        type: 'POST',
        dataType: 'json',
        data: JSON.stringify(data)
      })
      .success(function(e){
        // Save gist url to graph's info.parents
        var info = Iframework.graph.get(""info"");
        if (!info.hasOwnProperty(""parents"") || !info.parents.push) {
          graph.info.parents = [];
        }
        graph.info.parents.push(e.html_url);
        // Save local with new gist reference
        Iframework.saveLocal();
        // Show new permalink
        Iframework.updateCurrentInfo();

        Iframework.analyze(""save"", ""gist"", e.id);
      })
      .error(function(e){
        var description = ""meemoo app: "" + Iframework.graph.toJSON()[""info""][""title""];
        Iframework.$("".permalink"").html('api is down (;_;) copy your app source code to <a href=""https://gist.github.com/?description='+encodeURIComponent(description)+'"" target=""_blank"">gist.github.com</a>');
        console.warn(""gist save error"", e);
      })
      .complete(function(e){
        // Button
        this.$("".savegist"")
          .prop('disabled', false)
          .text(""save public"");
      });
    },
    loadLocalApps: function () {
      // Load apps from local storage
      this._localApps = new Iframework.LocalApps();
      this._localApps.fetch({
        success: function(e) {
          Iframework._localApps.each(function(app){
            app.initializeView();
          });
          // None shown
          if (!Iframework.graph){
            if (Iframework._loadedLocal) {
              // Router tried to load this already, try again
              Iframework.loadLocal(Iframework._loadedLocal);
            }
          }
        },
        error: function (e) {
          console.warn(""error loading local apps"");
        }
      });
    },
    _loadedLocal: null,
    _loadedLocalApp: null,
    loadLocal: function (url) {
      this._loadedLocal = url;
      if (this._localApps) {
        var app = this._localApps.getByUrl(url);
        if (app) {
          app.load();
          return true;
        }
        else {
          // Didn't find matching url
          console.warn(""Didn't find local app with matching url."");
          this.newBlank();
          return false;
        }
      } else {
        // Local apps not loaded yet
        return false;
      }
    },
    setKey: function (current) {
      var key = window.prompt(""Enter a url key"", current);
      if (key) {
        key = this.encodeKey(key);
        this.graph.setInfo(""url"", key);
      }
      return key;
    },
    encodeKey: function (key) {
      key = key.toLowerCase().replace(/ /g, ""-"");
      key = encodeURIComponent(key);
      return key;
    },
    saveLocal: function () {
      if (!this.graph.get(""info"")){
        this.graph.set({
          info: {}
        });
      }
      while (!this.graph.get(""info"").hasOwnProperty(""url"") || this.graph.get(""info"")[""url""]==="""") {
        var keysuggestion;
        if (this.graph.get(""info"").hasOwnProperty(""title"") && this.graph.get(""info"")[""title""]!=="""") {
          keysuggestion = this.graph.get(""info"")[""title""];
        } else {
          keysuggestion = ""app-"" + new Date().getTime();
        }
        if(!this.setKey(keysuggestion)){
          // cancel
          return false;
        }
      }
      var currentAppGraph = JSON.parse(JSON.stringify(this.graph));
      var key = currentAppGraph[""info""][""url""];
      var app;
      if (this._loadedLocalApp) {
        if (this._localApps.getByUrl(key) && this._localApps.getByUrl(key) !== this._loadedLocalApp) {
          if (window.confirm(""\""""+key+""\"" already exists as a local app. Do you want to replace it?"")) {
            app = this._localApps.updateOrCreate(currentAppGraph);
          } else {
            return false;
          }
        } else {
          // New name
          app = this._loadedLocalApp;
          app.save({graph:currentAppGraph});
          app.trigger(""change"");
        }
      } else {
        // Overwrite?
        if (this._localApps.getByUrl(key) && !window.confirm(""\""""+key+""\"" already exists as a local app. Do you want to replace it?"")) {
          return false;
        }
        app = this._localApps.updateOrCreate(currentAppGraph);
      }

      this._loadedLocalApp = app;

      this.analyze(""save"", ""local"", ""x"");

      // To show when url changes
      this.updateCurrentInfo();

      // URL hash
      Iframework.router.navigate(""local/""+key);
      return app;
    },
    forkLocal: function(){
      // This makes it save the app as a new local app
      this._loadedLocalApp = null;
      // Suggested name
      var url = this.graph.get(""info"")[""url""]+""-copy"";
      this.setKey(url);
      // Do the overwrite checks and save
      this.saveLocal();
    },
    deleteLocal: function () {
      if (this._loadedLocalApp) {
        this._loadedLocalApp.destroy();
        this._loadedLocalApp = null;
      }
    },
    setTitle: function () {
      var input = this.$("".currentapp .info .settitle"").text();
      if (input !== this.graph.get(""info"")[""title""]) {
        this.graph.setInfo(""title"", input);
      }
    },
    setDescription: function () {
      var input = this.$("".currentapp .info .setdescription"").text();
      if (input !== this.graph.get(""info"")[""description""]) {
        this.graph.setInfo(""description"", input);
      }
    },
    setUrl: function () {
      var input = this.$("".currentapp .info .seturl"").text();
      input = this.encodeKey(input);
      if (input !== this.graph.get(""info"")[""url""]) {
        this.graph.setInfo(""url"", input);
      }
    },
    updateCurrentInfo: function () {
      var graph = this.graph.toJSON();
      this.$("".currentapp"")
        .html( this.currentTemplate(graph) );

      this.$("".currentapp .seturl"")
        .text(decodeURIComponent(graph[""info""][""url""]));
      this.$("".currentapp .settitle"")
        .text(graph[""info""][""title""]);
      this.$("".currentapp .setdescription"")
        .text(graph[""info""][""description""]);

      this.$("".editable"")
        .attr(""contenteditable"", ""true"");

      if (graph.info.hasOwnProperty(""parents"")) {
        var parents = graph.info.parents;
        if (parents.length > 0) {
          var last = parents[parents.length-1];
          var split = last.split(""/"");
          if (split.length > 0) {
            var id = split[split.length-1];
            var gisturl = ""http://meemoo.org/iframework/#gist/""+id;
            var gisturlE = encodeURIComponent(gisturl);
            var titleE = encodeURIComponent(graph[""info""][""title""]);

            var gistUrlSelect = $('<span />')
              .text(gisturl)
              .click(function(e){
                // Click-to-select from http://stackoverflow.com/a/987376/592125
                var range;
                if (document.body.createTextRange) { // ms
                  range = document.body.createTextRange();
                  range.moveToElementText(e.target);
                  range.select();
                } else if (window.getSelection) {
                  var selection = window.getSelection();
                  range = document.createRange();
                  range.selectNodeContents(e.target);
                  selection.removeAllRanges();
                  selection.addRange(range);
                }
              });

            var gistLink = $('<a title=""your saved gist"" target=""_blank"" class=""share icon-github""></a>')
              .attr(""href"", last);
            var fbLink = $('<a title=""share on facebook"" target=""_blank"" class=""share icon-facebook-rect""></a>')
              .attr(""href"", 'https://www.facebook.com/sharer.php?u='+gisturlE+'&t='+titleE);
            var tweet = "" "" + graph[""info""][""title""] + "" #meemoo "" + graph[""info""][""description""];
            // url is shortened to 20
            if (tweet.length >= 120) {
              tweet = tweet.substr(0,115) + ""..."";
            }
            tweet = gisturl + tweet;
            var twitterLink = $('<a title=""post to twitter"" target=""_blank"" class=""share icon-twitter-bird""></a>')
              .attr(""href"", 'https://twitter.com/intent/tweet?text='+encodeURIComponent(tweet));

            this.$("".currentapp .permalink"")
              .empty()
              .append(gistUrlSelect).append("" "")
              .append(gistLink)
              .append(fbLink)
              .append(twitterLink);
          }
        }
      }

      if (this._loadedLocalApp) {
        this.$("".currentapp .deletelocal"").show();
      } else  {
        this.$("".currentapp .deletelocal"").hide();
      }
    },
    newBlank: function () {
      // HACK maybe a better way to load a blank graph with defaults?
      this.loadGraph({""info"":{""author"":""meemoo"",""title"":""Untitled"",""description"":""Meemoo app description"",""parents"":[],""url"":""""},""nodes"":[],""edges"":[]});
      // reset localStorage version
      this._loadedLocalApp = null;

      this.showPanel(""library"");

      // URL hash
      Iframework.router.navigate(""new"");
    },
    analyze: function (group, type, id) {
      // Google analytics
      // _gaq.push(['_trackEvent', group, type, id]);
    }

  });

  // Start app
  window.Iframework = new IframeworkView();
  
  // Listen for /info messages from nodes
  window.addEventListener(""message"", Iframework.gotMessage, false);

});
",FALSE,,886
886,InitialSO.csv886.txt,InitialGit.csv886.txt,6,"class MockLoggingHandler(logging.Handler):
    """"""Mock logging handler to check for expected logs.""""""
    
    def __init__(self, *args, **kwargs):
        self.reset()
        logging.Handler.__init__(self, *args, **kwargs)

    def emit(self, record):
        self.messages[record.levelname.lower()].append(record.getMessage())
    
    def reset(self):
        self.messages = {
            'debug': [],
            'info': [],
            'warning': [],
            'error': [],
            'critical': [],
        }
 ","class MockLoggingHandler(logging.Handler):
    """"""Mock logging handler to check for expected logs.""""""

    def __init__(self, *args, **kwargs):
        self.reset()
        logging.Handler.__init__(self, *args, **kwargs)

    def emit(self, record):
        self.messages[record.levelname.lower()].append(record.getMessage())

    def reset(self):
        self.messages = {
            'debug': [],
            'info': [],
            'warning': [],
            'error': [],
            'critical': [],
        }
 ",FALSE,"try:
    import unittest2 as unittest
except ImportError:
    import unittest

import logging
from collections import defaultdict

from iscool_e.pynba.log import logger
from iscool_e.pynba.collector import DataCollector
from iscool_e.pynba.reporter import Reporter

class MockLoggingHandler(logging.Handler):
    """"""Mock logging handler to check for expected logs.
    <http://stackoverflow.com/a/1049375>
    <http://www.domenkozar.com/category/mock/>
    """"""

    def __init__(self, *args, **kwargs):
        self.reset()
        logging.Handler.__init__(self, *args, **kwargs)

    def emit(self, record):
        self.messages[record.levelname.lower()].append(record.getMessage())

    def reset(self):
        self.messages = defaultdict(list)


class LogTestCase(unittest.TestCase):
    handler = MockLoggingHandler()

    def setUp(self):
        logger.addHandler(self.handler)

    def tearDown(self):
        logger.removeHandler(self.handler)
        self.handler.reset()

    def test_simple(self):
        logger.debug('foo')
        logger.info('bar')
        logger.warning('baz')
        logger.error('qux')
        logger.critical('trololo')

        assert self.handler.messages == {
            'debug': ['foo'], 
            'info': ['bar'], 
            'warning': ['baz'], 
            'critical': ['trololo'], 
            'error': ['qux']
            }

    def test_collector(self):
        DataCollector().flush()
        assert self.handler.messages == {
            'debug': ['flush']
        }

    def test_reporter(self):
        Reporter.prepare('servername', 'hostname', 'scriptname', 0.0, [])
        assert self.handler.messages == {
            'debug': ['prepare protobuff']
        }
","import unittest
import logging
from collections import defaultdict

from pynba.core import logger
from pynba.core import DataCollector
from pynba.core import Reporter


class MockLoggingHandler(logging.Handler):
    """"""Mock logging handler to check for expected logs.

    <http://stackoverflow.com/a/1049375>
    <http://www.domenkozar.com/category/mock/>
    """"""

    def __init__(self, *args, **kwargs):
        self.messages = defaultdict(list)
        logging.Handler.__init__(self, *args, **kwargs)

    def emit(self, record):
        self.messages[record.levelname.lower()].append(record.getMessage())
        # raise Exception(dict(self.messages))

    def reset(self):
        self.messages.clear()


class LogTestCase(unittest.TestCase):
    handler = MockLoggingHandler(level=logging.DEBUG)
    level = None

    def setUp(self):
        self.level = logger.getEffectiveLevel()
        logger.setLevel(logging.DEBUG)
        logger.addHandler(self.handler)

    def tearDown(self):
        logger.setLevel(self.level)
        logger.removeHandler(self.handler)
        self.handler.reset()

    def test_simple(self):
        logger.debug('foo')
        logger.info('bar')
        logger.warning('baz')
        logger.error('qux')
        logger.critical('trololo')

        assert self.handler.messages == {
            'debug': ['foo'],
            'info': ['bar'],
            'warning': ['baz'],
            'critical': ['trololo'],
            'error': ['qux']
            }

    def test_collector(self):
        DataCollector().flush()
        assert self.handler.messages == {
            'debug': ['flush']
        }

    def test_reporter(self):
        Reporter.prepare('servername', 'hostname', 'scriptname', 0.0, [])
        assert self.handler.messages == {
            'debug': ['prepare protobuff']
        }
",FALSE,,3747
3746,InitialSO.csv3746.txt,InitialGit.csv3746.txt,12,"serializeArray $.fn.serializeObject = function()
{
    var o = {};
    var a = this.serializeArray();
    $.each(a, function() {
        if (o[this.name] !== undefined) {
            if (!o[this.name].push) {
                o[this.name] = [o[this.name]];
            }
            o[this.name].push(this.value || '');
        } else {
            o[this.name] = this.value || '';
        }
    });
    return o;
};
 ","function objectifyForm(formArray) {
    //serialize data function
    var returnArray = {};
    for (var i = 0; i < formArray.length; i++){
        returnArray[formArray[i]['name']] = formArray[i]['value'];
    }
    return returnArray;
}
 ",FALSE,"/**
 * This file is part of the FOSCommentBundle package.
 *
 * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 * To use this reference javascript, you must also have jQuery installed. If
 * you want to embed comments cross-domain, then easyXDM CORS is also required.
 *
 * @todo: expand this explanation (also in the docs)
 *
 * Then a comment thread can be embedded on any page:
 *
 * <div id=""fos_comment_thread"">#comments</div>
 * <script type=""text/javascript"">
 *     // Set the thread_id if you want comments to be loaded via ajax (url to thread comments api)
 *     var fos_comment_thread_id = 'a_unique_identifier_for_the_thread';
 *     var fos_comment_thread_api_base_url = 'http://example.org/api/threads';
 *
 *     // Optionally set the cors url if you want cross-domain AJAX (also needs easyXDM)
 *     var fos_comment_remote_cors_url = 'http://example.org/cors/index.html';
 *
 *     // Optionally set a custom callback function to update the comment count elements
 *     var fos_comment_thread_comment_count_callback = function(elem, threadObject){}
 *
 *     // Optionally set a different element than div#fos_comment_thread as container
 *     var fos_comment_thread_container = $('#other_element');
 *
 * (function() {
 *     var fos_comment_script = document.createElement('script');
 *     fos_comment_script.async = true;
 *     fos_comment_script.src = 'http://example.org/path/to/this/file.js';
 *     fos_comment_script.type = 'text/javascript';
 *
 *     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(fos_comment_script);
 * })();
 * </script>
 */

(function(window, $, easyXDM){
    ""use strict"";
    var FOS_COMMENT = {
        /**
         * Shorcut post method.
         *
         * @param string url The url of the page to post.
         * @param object data The data to be posted.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        post: function(url, data, success, error, complete) {
            // Wrap the error callback to match return data between jQuery and easyXDM
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.responseText, response.status);
                }
            };
            var wrappedCompleteCallback = function(response){
                if('undefined' !== typeof complete) {
                    complete(response.responseText, response.status);
                }
            };
            $.post(url, data, success).error(wrappedErrorCallback).complete(wrappedCompleteCallback);
        },

        /**
         * Shorcut get method.
         *
         * @param string url The url of the page to get.
         * @param object data The query data.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        get: function(url, data, success, error) {
            // Wrap the error callback to match return data between jQuery and easyXDM
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.responseText, response.status);
                }
            };
            $.get(url, data, success).error(wrappedErrorCallback);
        },

        /**
         * Gets the comments of a thread and places them in the thread holder.
         *
         * @param string identifier Unique identifier url for the thread comments.
         * @param string url Optional url for the thread. Defaults to current location.
         */
        getThreadComments: function(identifier, permalink) {
            var event = jQuery.Event('fos_comment_before_load_thread');

            event.identifier = identifier;
            event.params = {
                permalink: encodeURIComponent(permalink || window.location.href)
            };

            FOS_COMMENT.thread_container.trigger(event);
            FOS_COMMENT.get(
                FOS_COMMENT.base_url  + '/' + encodeURIComponent(event.identifier) + '/comments',
                event.params,
                // success
                function(data) {
                    FOS_COMMENT.thread_container.html(data);
                    FOS_COMMENT.thread_container.attr('data-thread', event.identifier);
                    FOS_COMMENT.thread_container.trigger('fos_comment_load_thread', event.identifier);
                }
            );
        },

        /**
         * Initialize the event listeners.
         */
        initializeListeners: function() {
            FOS_COMMENT.thread_container.on('submit',
                'form.fos_comment_comment_new_form',
                function(e) {
                    var that = $(this);
                    var serializedData = FOS_COMMENT.serializeObject(this);

                    e.preventDefault();

                    var event = $.Event('fos_comment_submitting_form');
                    that.trigger(event);

                    if (event.isDefaultPrevented()) {
                        return;
                    }

                    FOS_COMMENT.post(
                        this.action,
                        serializedData,
                        // success
                        function(data, statusCode) {
                            FOS_COMMENT.appendComment(data, that);
                            that.trigger('fos_comment_new_comment', data);
                        },
                        // error
                        function(data, statusCode) {
                            var parent = that.parent();
                            parent.after(data);
                            parent.remove();
                        },
                        // complete
                        function(data, statusCode) {
                            that.trigger('fos_comment_submitted_form', statusCode);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_reply_show_form',
                function(e) {
                    var form_data = $(this).data();
                    var that = $(this);

                    if(that.closest('.fos_comment_comment_reply').hasClass('fos_comment_replying')) {
                        return that;
                    }

                    FOS_COMMENT.get(
                        form_data.url,
                        {parentId: form_data.parentId},
                        function(data) {
                            that.closest('.fos_comment_comment_reply').addClass('fos_comment_replying');
                            that.after(data);
                            that.trigger('fos_comment_show_form', data);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_reply_cancel',
                function(e) {
                    var form_holder = $(this).closest('.fos_comment_comment_form_holder');

                    var event = $.Event('fos_comment_cancel_form');
                    form_holder.trigger(event);

                    if (event.isDefaultPrevented()) {
                        return;
                    }

                    form_holder.closest('.fos_comment_comment_reply').removeClass('fos_comment_replying');
                    form_holder.remove();
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_edit_show_form',
                function(e) {
                    var form_data = $(this).data();
                    var that = $(this);

                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            var commentBody = $(form_data.container);

                            // save the old comment for the cancel function
                            commentBody.data('original', commentBody.html());

                            // show the edit form
                            commentBody.html(data);

                            that.trigger('fos_comment_show_edit_form', data);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('submit',
                'form.fos_comment_comment_edit_form',
                function(e) {
                    var that = $(this);

                    FOS_COMMENT.post(
                        this.action,
                        FOS_COMMENT.serializeObject(this),
                        // success
                        function(data) {
                            FOS_COMMENT.editComment(data);
                            that.trigger('fos_comment_edit_comment', data);
                        },

                        // error
                        function(data, statusCode) {
                            var parent = that.parent();
                            parent.after(data);
                            parent.remove();
                        }
                    );

                    e.preventDefault();
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_edit_cancel',
                function(e) {
                    FOS_COMMENT.cancelEditComment($(this).parents('.fos_comment_comment_body'));
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_vote',
                function(e) {
                    var that = $(this);
                    var form_data = that.data();

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];
                            var form_data = $(form).data();

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    $('#' + form_data.scoreHolder).html(data);
                                    that.trigger('fos_comment_vote_comment', data, form);
                                }
                            );
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_remove',
                function(e) {
                    var form_data = $(this).data();

                    var event = $.Event('fos_comment_removing_comment');
                    $(this).trigger(event);

                    if (event.isDefaultPrevented()) {
                        return
                    }

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    var commentHtml = $($.trim(data));

                                    var originalComment = $('#' + commentHtml.attr('id'));

                                    originalComment.replaceWith(commentHtml);
                                }
                            );
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_thread_commentable_action',
                function(e) {
                    var form_data = $(this).data();

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    var form = $($.trim(data)).children('form')[0];
                                    var threadId = $(form).data().fosCommentThreadId;

                                    // reload the intire thread
                                    FOS_COMMENT.getThreadComments(threadId);
                                }
                            );
                        }
                    );
                }
            );
        },

        appendComment: function(commentHtml, form) {
            var form_data = form.data();

            if('' != form_data.parent) {
                var form_parent = form.closest('.fos_comment_comment_form_holder');

                // reply button holder
                var reply_button_holder = form.closest('.fos_comment_comment_reply');

                var comment_element = form.closest('.fos_comment_comment_show')
                    .children('.fos_comment_comment_replies');

                reply_button_holder.removeClass('fos_comment_replying');

                comment_element.prepend(commentHtml);
                comment_element.trigger('fos_comment_add_comment', commentHtml);

                // Remove the form
                form_parent.remove();
            } else {
                // Insert the comment
                form.after(commentHtml);
                form.trigger('fos_comment_add_comment', commentHtml);

                // ""reset"" the form
                form = $(form[0]);
                form[0].reset();
                form.children('.fos_comment_form_errors').remove();
            }
        },

        editComment: function(commentHtml) {
            var commentHtml = $($.trim(commentHtml));
            var originalCommentBody = $('#' + commentHtml.attr('id')).children('.fos_comment_comment_body');

            originalCommentBody.html(commentHtml.children('.fos_comment_comment_body').html());
        },

        cancelEditComment: function(commentBody) {
            commentBody.html(commentBody.data('original'));
        },

        /**
         * easyXdm doesn't seem to pick up 'normal' serialized forms yet in the
         * data property, so use this for now.
         * http://stackoverflow.com/questions/1184624/serialize-form-to-json-with-jquery#1186309
         */
        serializeObject: function(obj)
        {
            var o = {};
            var a = $(obj).serializeArray();
            $.each(a, function() {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        },

        loadCommentCounts: function()
        {
            var threadIds = [];
            var commentCountElements = $('span.fos-comment-count');

            commentCountElements.each(function(i, elem){
                var threadId = $(elem).data('fosCommentThreadId');
                if(threadId) {
                    threadIds.push(threadId);
                }
            });

            FOS_COMMENT.get(
                FOS_COMMENT.base_url + '.json',
                {ids: threadIds},
                function(data) {
                    // easyXdm doesn't always serialize
                    if (typeof data != ""object"") {
                        data = jQuery.parseJSON(data);
                    }

                    var threadData = {};

                    for (var i in data.threads) {
                        threadData[data.threads[i].id] = data.threads[i];
                    }

                    $.each(commentCountElements, function(){
                        var threadId = $(this).data('fosCommentThreadId');
                        if(threadId) {
                            FOS_COMMENT.setCommentCount(this, threadData[threadId]);
                        }
                    });
                }
            );

        },

        setCommentCount: function(elem, threadObject) {
            if (threadObject == undefined) {
                elem.innerHTML = '0';

                return;
            }

            elem.innerHTML = threadObject.num_comments;
        }
    };

    // Check if a thread container was configured. If not, use default.
    FOS_COMMENT.thread_container = window.fos_comment_thread_container || $('#fos_comment_thread');

    // AJAX via easyXDM if this is configured
    if(typeof window.fos_comment_remote_cors_url != ""undefined"") {
        /**
         * easyXDM instance to use
         */
        FOS_COMMENT.easyXDM = easyXDM.noConflict('FOS_COMMENT');

        /**
         * Shorcut request method.
         *
         * @param string method The request method to use.
         * @param string url The url of the page to request.
         * @param object data The data parameters.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        FOS_COMMENT.request = function(method, url, data, success, error) {
            // wrap the callbacks to match the callback parameters of jQuery
            var wrappedSuccessCallback = function(response){
                if('undefined' !== typeof success) {
                    success(response.data, response.status);
                }
            };
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.data.data, response.data.status);
                }
            };

            // todo: is there a better way to do this?
            FOS_COMMENT.xhr.request({
                    url: url,
                    method: method,
                    data: data
            }, wrappedSuccessCallback, wrappedErrorCallback);
        };

        FOS_COMMENT.post = function(url, data, success, error) {
            this.request('POST', url, data, success, error);
        };

        FOS_COMMENT.get= function(url, data, success, error) {
            // make data serialization equals to that of jquery
            var params = jQuery.param(data);
            url += '' != params ? '?' + params : '';

            this.request('GET', url, undefined, success, error);
        };

        /* Initialize xhr object to do cross-domain requests. */
        FOS_COMMENT.xhr = new FOS_COMMENT.easyXDM.Rpc({
                remote: window.fos_comment_remote_cors_url
        }, {
            remote: {
                request: {} // request is exposed by /cors/
            }
        });
    }

    // set the appropriate base url
    FOS_COMMENT.base_url = window.fos_comment_thread_api_base_url;

    // Load the comment if there is a thread id defined.
    if(typeof window.fos_comment_thread_id != ""undefined"") {
        // get the thread comments and init listeners
        FOS_COMMENT.getThreadComments(window.fos_comment_thread_id);
    }

    if(typeof window.fos_comment_thread_comment_count_callback != ""undefined"") {
        FOS_COMMENT.setCommentCount = window.fos_comment_thread_comment_count_callback;
    }

    if($('span.fos-comment-count').length > 0) {
        FOS_COMMENT.loadCommentCounts();
    }

    FOS_COMMENT.initializeListeners();

    window.fos = window.fos || {};
    window.fos.Comment = FOS_COMMENT;
})(window, window.jQuery, window.easyXDM);
","/**
 * This file is part of the FOSCommentBundle package.
 *
 * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 * To use this reference javascript, you must also have jQuery installed. If
 * you want to embed comments cross-domain, then easyXDM CORS is also required.
 *
 * @todo: expand this explanation (also in the docs)
 *
 * Then a comment thread can be embedded on any page:
 *
 * <div id=""fos_comment_thread"">#comments</div>
 * <script type=""text/javascript"">
 *     // Set the thread_id if you want comments to be loaded via ajax (url to thread comments api)
 *     var fos_comment_thread_id = 'a_unique_identifier_for_the_thread';
 *     var fos_comment_thread_api_base_url = 'http://example.org/api/threads';
 *
 *     // Optionally set the cors url if you want cross-domain AJAX (also needs easyXDM)
 *     var fos_comment_remote_cors_url = 'http://example.org/cors/index.html';
 *
 *     // Optionally set a custom callback function to update the comment count elements
 *     var fos_comment_thread_comment_count_callback = function(elem, threadObject){}
 *
 *     // Optionally set a different element than div#fos_comment_thread as container
 *     var fos_comment_thread_container = $('#other_element');
 *
 * (function() {
 *     var fos_comment_script = document.createElement('script');
 *     fos_comment_script.async = true;
 *     fos_comment_script.src = 'http://example.org/path/to/this/file.js';
 *     fos_comment_script.type = 'text/javascript';
 *
 *     (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(fos_comment_script);
 * })();
 * </script>
 */

(function(window, $, easyXDM){
    ""use strict"";
    var FOS_COMMENT = {
        /**
         * Shorcut post method.
         *
         * @param string url The url of the page to post.
         * @param object data The data to be posted.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        post: function(url, data, success, error, complete) {
            // Wrap the error callback to match return data between jQuery and easyXDM
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.responseText, response.status);
                }
            };
            var wrappedCompleteCallback = function(response){
                if('undefined' !== typeof complete) {
                    complete(response.responseText, response.status);
                }
            };
            $.post(url, data, success).error(wrappedErrorCallback).complete(wrappedCompleteCallback);
        },

        /**
         * Shorcut get method.
         *
         * @param string url The url of the page to get.
         * @param object data The query data.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        get: function(url, data, success, error) {
            // Wrap the error callback to match return data between jQuery and easyXDM
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.responseText, response.status);
                }
            };
            $.get(url, data, success).error(wrappedErrorCallback);
        },

        /**
         * Gets the comments of a thread and places them in the thread holder.
         *
         * @param string identifier Unique identifier url for the thread comments.
         * @param string url Optional url for the thread. Defaults to current location.
         */
        getThreadComments: function(identifier, permalink) {
            var event = jQuery.Event('fos_comment_before_load_thread');

            event.identifier = identifier;
            event.params = {
                permalink: encodeURIComponent(permalink || window.location.href)
            };

            FOS_COMMENT.thread_container.trigger(event);
            FOS_COMMENT.get(
                FOS_COMMENT.base_url  + '/' + encodeURIComponent(event.identifier) + '/comments',
                event.params,
                // success
                function(data) {
                    FOS_COMMENT.thread_container.html(data);
                    FOS_COMMENT.thread_container.attr('data-thread', event.identifier);
                    FOS_COMMENT.thread_container.trigger('fos_comment_load_thread', event.identifier);
                }
            );
        },

        /**
         * Initialize the event listeners.
         */
        initializeListeners: function() {
            FOS_COMMENT.thread_container.on('submit',
                'form.fos_comment_comment_new_form',
                function(e) {
                    var that = $(this);
                    var serializedData = FOS_COMMENT.serializeObject(this);

                    e.preventDefault();

                    var event = $.Event('fos_comment_submitting_form');
                    that.trigger(event);

                    if (event.isDefaultPrevented()) {
                        return;
                    }

                    FOS_COMMENT.post(
                        this.action,
                        serializedData,
                        // success
                        function(data, statusCode) {
                            FOS_COMMENT.appendComment(data, that);
                            that.trigger('fos_comment_new_comment', data);
                        },
                        // error
                        function(data, statusCode) {
                            var parent = that.parent();
                            parent.after(data);
                            parent.remove();
                        },
                        // complete
                        function(data, statusCode) {
                            that.trigger('fos_comment_submitted_form', statusCode);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_reply_show_form',
                function(e) {
                    var form_data = $(this).data();
                    var that = $(this);

                    if(that.closest('.fos_comment_comment_reply').hasClass('fos_comment_replying')) {
                        return that;
                    }

                    FOS_COMMENT.get(
                        form_data.url,
                        {parentId: form_data.parentId},
                        function(data) {
                            that.closest('.fos_comment_comment_reply').addClass('fos_comment_replying');
                            that.after(data);
                            that.trigger('fos_comment_show_form', data);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_reply_cancel',
                function(e) {
                    var form_holder = $(this).closest('.fos_comment_comment_form_holder');

                    var event = $.Event('fos_comment_cancel_form');
                    form_holder.trigger(event);

                    if (event.isDefaultPrevented()) {
                        return;
                    }

                    form_holder.closest('.fos_comment_comment_reply').removeClass('fos_comment_replying');
                    form_holder.remove();
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_edit_show_form',
                function(e) {
                    var form_data = $(this).data();
                    var that = $(this);

                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            var commentBody = $(form_data.container);

                            // save the old comment for the cancel function
                            commentBody.data('original', commentBody.html());

                            // show the edit form
                            commentBody.html(data);

                            that.trigger('fos_comment_show_edit_form', data);
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('submit',
                'form.fos_comment_comment_edit_form',
                function(e) {
                    var that = $(this);

                    FOS_COMMENT.post(
                        this.action,
                        FOS_COMMENT.serializeObject(this),
                        // success
                        function(data) {
                            FOS_COMMENT.editComment(data);
                            that.trigger('fos_comment_edit_comment', data);
                        },

                        // error
                        function(data, statusCode) {
                            var parent = that.parent();
                            parent.after(data);
                            parent.remove();
                        }
                    );

                    e.preventDefault();
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_edit_cancel',
                function(e) {
                    FOS_COMMENT.cancelEditComment($(this).parents('.fos_comment_comment_body'));
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_vote',
                function(e) {
                    var that = $(this);
                    var form_data = that.data();

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];
                            var form_data = $(form).data();

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    $('#' + form_data.scoreHolder).html(data);
                                    that.trigger('fos_comment_vote_comment', data, form);
                                }
                            );
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_comment_remove',
                function(e) {
                    var form_data = $(this).data();

                    var event = $.Event('fos_comment_removing_comment');
                    $(this).trigger(event);

                    if (event.isDefaultPrevented()) {
                        return
                    }

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    var commentHtml = $($.trim(data));

                                    var originalComment = $('#' + commentHtml.attr('id'));

                                    originalComment.replaceWith(commentHtml);
                                }
                            );
                        }
                    );
                }
            );

            FOS_COMMENT.thread_container.on('click',
                '.fos_comment_thread_commentable_action',
                function(e) {
                    var form_data = $(this).data();

                    // Get the form
                    FOS_COMMENT.get(
                        form_data.url,
                        {},
                        function(data) {
                            // Post it
                            var form = $($.trim(data)).children('form')[0];

                            FOS_COMMENT.post(
                                form.action,
                                FOS_COMMENT.serializeObject(form),
                                function(data) {
                                    var form = $($.trim(data)).children('form')[0];
                                    var threadId = $(form).data().fosCommentThreadId;

                                    // reload the intire thread
                                    FOS_COMMENT.getThreadComments(threadId);
                                }
                            );
                        }
                    );
                }
            );
        },

        appendComment: function(commentHtml, form) {
            var form_data = form.data();

            if('' != form_data.parent) {
                var form_parent = form.closest('.fos_comment_comment_form_holder');

                // reply button holder
                var reply_button_holder = form.closest('.fos_comment_comment_reply');

                var comment_element = form.closest('.fos_comment_comment_show')
                    .children('.fos_comment_comment_replies');

                reply_button_holder.removeClass('fos_comment_replying');

                comment_element.prepend(commentHtml);
                comment_element.trigger('fos_comment_add_comment', commentHtml);

                // Remove the form
                form_parent.remove();
            } else {
                // Insert the comment
                form.after(commentHtml);
                form.trigger('fos_comment_add_comment', commentHtml);

                // ""reset"" the form
                form = $(form[0]);
                form[0].reset();
                form.children('.fos_comment_form_errors').remove();
            }
        },

        editComment: function(commentHtml) {
            var commentHtml = $($.trim(commentHtml));
            var originalCommentBody = $('#' + commentHtml.attr('id')).children('.fos_comment_comment_body');

            originalCommentBody.html(commentHtml.children('.fos_comment_comment_body').html());
        },

        cancelEditComment: function(commentBody) {
            commentBody.html(commentBody.data('original'));
        },

        /**
         * easyXdm doesn't seem to pick up 'normal' serialized forms yet in the
         * data property, so use this for now.
         * http://stackoverflow.com/questions/1184624/serialize-form-to-json-with-jquery#1186309
         */
        serializeObject: function(obj)
        {
            var o = {};
            var a = $(obj).serializeArray();
            $.each(a, function() {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        },

        loadCommentCounts: function()
        {
            var threadIds = [];
            var commentCountElements = $('span.fos-comment-count');

            commentCountElements.each(function(i, elem){
                var threadId = $(elem).data('fosCommentThreadId');
                if(threadId) {
                    threadIds.push(threadId);
                }
            });

            FOS_COMMENT.get(
                FOS_COMMENT.base_url + '.json',
                {ids: threadIds},
                function(data) {
                    // easyXdm doesn't always serialize
                    if (typeof data != ""object"") {
                        data = jQuery.parseJSON(data);
                    }

                    var threadData = {};

                    for (var i in data.threads) {
                        threadData[data.threads[i].id] = data.threads[i];
                    }

                    $.each(commentCountElements, function(){
                        var threadId = $(this).data('fosCommentThreadId');
                        if(threadId) {
                            FOS_COMMENT.setCommentCount(this, threadData[threadId]);
                        }
                    });
                }
            );

        },

        setCommentCount: function(elem, threadObject) {
            if (threadObject == undefined) {
                elem.innerHTML = '0';

                return;
            }

            elem.innerHTML = threadObject.num_comments;
        }
    };

    // Check if a thread container was configured. If not, use default.
    FOS_COMMENT.thread_container = window.fos_comment_thread_container || $('#fos_comment_thread');

    // AJAX via easyXDM if this is configured
    if(typeof window.fos_comment_remote_cors_url != ""undefined"") {
        /**
         * easyXDM instance to use
         */
        FOS_COMMENT.easyXDM = easyXDM.noConflict('FOS_COMMENT');

        /**
         * Shorcut request method.
         *
         * @param string method The request method to use.
         * @param string url The url of the page to request.
         * @param object data The data parameters.
         * @param function success Optional callback function to use in case of succes.
         * @param function error Optional callback function to use in case of error.
         */
        FOS_COMMENT.request = function(method, url, data, success, error) {
            // wrap the callbacks to match the callback parameters of jQuery
            var wrappedSuccessCallback = function(response){
                if('undefined' !== typeof success) {
                    success(response.data, response.status);
                }
            };
            var wrappedErrorCallback = function(response){
                if('undefined' !== typeof error) {
                    error(response.data.data, response.data.status);
                }
            };

            // todo: is there a better way to do this?
            FOS_COMMENT.xhr.request({
                    url: url,
                    method: method,
                    data: data
            }, wrappedSuccessCallback, wrappedErrorCallback);
        };

        FOS_COMMENT.post = function(url, data, success, error) {
            this.request('POST', url, data, success, error);
        };

        FOS_COMMENT.get= function(url, data, success, error) {
            // make data serialization equals to that of jquery
            var params = jQuery.param(data);
            url += '' != params ? '?' + params : '';

            this.request('GET', url, undefined, success, error);
        };

        /* Initialize xhr object to do cross-domain requests. */
        FOS_COMMENT.xhr = new FOS_COMMENT.easyXDM.Rpc({
                remote: window.fos_comment_remote_cors_url
        }, {
            remote: {
                request: {} // request is exposed by /cors/
            }
        });
    }

    // set the appropriate base url
    FOS_COMMENT.base_url = window.fos_comment_thread_api_base_url;

    // Load the comment if there is a thread id defined.
    if(typeof window.fos_comment_thread_id != ""undefined"") {
        // get the thread comments and init listeners
        FOS_COMMENT.getThreadComments(window.fos_comment_thread_id);
    }

    if(typeof window.fos_comment_thread_comment_count_callback != ""undefined"") {
        FOS_COMMENT.setCommentCount = window.fos_comment_thread_comment_count_callback;
    }

    if($('span.fos-comment-count').length > 0) {
        FOS_COMMENT.loadCommentCounts();
    }

    FOS_COMMENT.initializeListeners();

    window.fos = window.fos || {};
    window.fos.Comment = FOS_COMMENT;
})(window, window.jQuery, window.easyXDM);
",TRUE,,3748
3747,InitialSO.csv3747.txt,InitialGit.csv3747.txt,5,"import re

def _callback(matches):
    id = matches.group(1)
    try:
        return unichr(int(id))
    except:
        return id

def decode_unicode_references(data):
    return re.sub(""&#(\d+)(;|(?=\s))"", _callback, data)

data = ""U.S. Adviser&#8217;s Blunt Memo on Iraq: Time &#8216;to Go Home&#8217;""
print decode_unicode_references(data)
 ","import re

def _callback(matches):
    id = matches.group(1)
    try:
        return unichr(int(id))
    except:
        return id

def decode_unicode_references(data):
    return re.sub(""&#(\d+)(;|(?=\s))"", _callback, data)

data = ""U.S. Adviser&#8217;s Blunt Memo on Iraq: Time &#8216;to Go Home&#8217;""
print decode_unicode_references(data)
 ",TRUE,"'''
    common XBMC Module
    Copyright (C) 2011 t0mm0

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import cgi
import re
import os
try:
   import cPickle as pickle
except:
   import pickle
import unicodedata
import urllib
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
    
class Addon:
    '''
    This class provides a lot of code that is used across many XBMC addons
    in the hope that it will simplify some of the common tasks an addon needs
    to perform.
    
    Mostly this is achieved by providing a wrapper around commonly used parts
    of :mod:`xbmc`, :mod:`xbmcaddon`, :mod:`xbmcgui` and :mod:`xbmcplugin`. 
    
    You probably want to have exactly one instance of this class in your addon
    which you can call from anywhere in your code.
    
    Example::
        
        import sys
        from t0mm0.common.addon import Addon
        addon = Addon('my.plugin.id', argv=sys.argv)
    '''
    
        
    def __init__(self, addon_id, argv=None):
        '''        
        Args:
            addon_id (str): Your addon's id (eg. 'plugin.video.t0mm0.test').
            
        Kwargs:
            argv (list): List of arguments passed to your addon if applicable
            (eg. sys.argv).
        '''
        self.addon = xbmcaddon.Addon(id=addon_id)
        if argv:
            self.url = argv[0]
            self.handle = int(argv[1])
            self.queries = self.parse_query(argv[2][1:])
        

    def get_author(self):
        '''Returns the addon author as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('author')
            

    def get_changelog(self):    
        '''Returns the addon changelog.'''
        return self.addon.getAddonInfo('changelog')
            

    def get_description(self):
        '''Returns the addon description as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('description')
            

    def get_disclaimer(self):    
        '''Returns the addon disclaimer as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('disclaimer')
            

    def get_fanart(self):
        '''Returns the full path to the addon fanart.'''
        return self.addon.getAddonInfo('fanart')
            

    def get_icon(self):
        '''Returns the full path to the addon icon.'''
        return self.addon.getAddonInfo('icon')
            

    def get_id(self):
        '''Returns the addon id as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('id')
            

    def get_name(self):    
        '''Returns the addon name as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('name')
            

    def get_path(self):
        '''Returns the full path to the addon directory.'''
        return self.addon.getAddonInfo('path')
            

    def get_profile(self):    
        '''
        Returns the full path to the addon profile directory 
        (useful for storing files needed by the addon such as cookies).
        '''
        return xbmc.translatePath(self.addon.getAddonInfo('profile'))
            

    def get_stars(self):    
        '''Returns the number of stars for this addon.'''
        return self.addon.getAddonInfo('stars')
            

    def get_summary(self):    
        '''Returns the addon summary as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('summary')
            

    def get_type(self): 
        '''
        Returns the addon summary as defined in ``addon.xml`` 
        (eg. xbmc.python.pluginsource).
        '''   
        return self.addon.getAddonInfo('type')
            

    def get_version(self):    
        '''Returns the addon version as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('version')
            

    def get_setting(self, setting):
        '''
        Returns an addon setting. Settings must be defined in your addon's
        ``resources/settings.xml`` file.
        
        Args:
            setting (str): Name of the setting to be retrieved.
            
        Returns:
            str containing the requested setting.
        '''
        return self.addon.getSetting(setting)


    def set_setting(self, setting, value):
        '''
        Sets an addon setting. Settings must be defined in your addon's
        ``resources/settings.xml`` file.
        
        Args:
            setting (str): Name of the setting to be retrieved.
            value (str): Value of the setting
            
        '''
        self.addon.setSetting(id=setting, value=value)


    def get_string(self, string_id):
        '''
        Returns a localized string. Strings must be defined in your addon's
        ``resources/language/[lang_name]/strings.xml`` file.
        
        Args:
            string_id (int): id of the translated string to retrieve.
            
        Returns:
            str containing the localized requested string.
        '''
        return self.addon.getLocalizedString(string_id)   


    def parse_query(self, query, defaults={'mode': 'main'}):
        '''
        Parse a query string as used in a URL or passed to your addon by XBMC.
        
        Example:
         
        >>> addon.parse_query('name=test&type=basic')
        {'mode': 'main', 'name': 'test', 'type': 'basic'} 
            
        Args:
            query (str): A query string.
            
        Kwargs:
            defaults (dict): A dictionary containing key/value pairs parsed 
            from the query string. If a key is repeated in the query string
            its value will be a list containing all of that keys values.  
        '''
        queries = cgi.parse_qs(query)
        q = defaults
        for key, value in queries.items():
            if len(value) == 1:
                q[key] = value[0]
            else:
                q[key] = value
        return q


    def build_plugin_url(self, queries):
        '''
        Returns a ``plugin://`` URL which can be used to call the addon with 
        the specified queries.
        
        Example:
        
        >>> addon.build_plugin_url({'name': 'test', 'type': 'basic'})
        'plugin://your.plugin.id/?name=test&type=basic'
        
        
        Args:
            queries (dict): A dctionary of keys/values to be added to the 
            ``plugin://`` URL.
            
        R*etuns:
            A string containing a fully formed ``plugin://`` URL.
        '''
        out_dict = {}
        for k, v in queries.iteritems():
            if isinstance(v, unicode):
                v = v.encode('utf8')
            elif isinstance(v, str):
                # Must be encoded in UTF-8
                v.decode('utf8')
            out_dict[k] = v
        return self.url + '?' + urllib.urlencode(out_dict)


    def log(self, msg, level=xbmc.LOGNOTICE):
        '''
        Writes a string to the XBMC log file. The addon name is inserted into 
        the beginning of the message automatically to help you find relevent 
        messages in the log file.
        
        The available log levels are defined in the :mod:`xbmc` module and are
        currently as follows::
        
            xbmc.LOGDEBUG = 0
            xbmc.LOGERROR = 4
            xbmc.LOGFATAL = 6
            xbmc.LOGINFO = 1
            xbmc.LOGNONE = 7
            xbmc.LOGNOTICE = 2
            xbmc.LOGSEVERE = 5
            xbmc.LOGWARNING = 3
        
        Args:
            msg (str or unicode): The message to be written to the log file.
        
        Kwargs:
            level (int): The XBMC log level to write at.
        '''
        #msg = unicodedata.normalize('NFKD', unicode(msg)).encode('ascii',
        #                                                         'ignore')
        xbmc.log('%s: %s' % (self.get_name(), msg), level)
        

    def log_error(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGERROR`` error level. Use when something has gone wrong in
        your addon code. This will show up in the log prefixed with 'ERROR:'
        whether you have debugging switched on or not.
        '''
        self.log(msg, xbmc.LOGERROR)    
        

    def log_debug(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGDEBUG`` error level. Use this when you want to print out lots 
        of detailed information that is only usefull for debugging. This will 
        show up in the log only when debugging is enabled in the XBMC settings,
        and will be prefixed with 'DEBUG:'.
        '''
        self.log(msg, xbmc.LOGDEBUG)    


    def log_notice(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGNOTICE`` error level. Use for general log messages. This will
        show up in the log prefixed with 'NOTICE:' whether you have debugging 
        switched on or not.
        '''
        self.log(msg, xbmc.LOGNOTICE)    


    def show_ok_dialog(self, msg, title=None, is_error=False):
        '''
        Display an XBMC dialog with a message and a single 'OK' button. The 
        message is also written to the XBMC log file at the appropriate log
        level.
        
        .. warning::
            
            Don't forget that `msg` must be a list of strings and not just a 
            string even if you only want to display a single line!
        
        Example::
        
            addon.show_ok_dialog(['My message'], 'My Addon')
        
        Args:
            msg (list of strings): The message to be displayed in the dialog. 
            Only the first 3 list items will be displayed.
            
        Kwargs:
            title (str): String to be displayed as the title of the dialog box.
            Defaults to the addon name.
            
            is_error (bool): If ``True``, the log message will be written at 
            the ERROR log level, otherwise NOTICE will be used.
        '''
        if not title:
            title = self.get_name()
        log_msg = ' '.join(msg)
        
        while len(msg) < 3:
            msg.append('')
        
        if is_error:
            self.log_error(log_msg)
        else:
            self.log_notice(log_msg)
        
        xbmcgui.Dialog().ok(title, msg[0], msg[1], msg[2])


    def show_error_dialog(self, msg):
        '''
        Convenience method to show an XBMC dialog box with a single OK button
        and also write the message to the log file at the ERROR log level.
        
        The title of the dialog will be the addon's name with the prefix 
        'Error: '.
        
        .. warning::
            
            Don't forget that `msg` must be a list of strings and not just a 
            string even if you only want to display a single line!

        Args:
            msg (list of strings): The message to be displayed in the dialog. 
            Only the first 3 list items will be displayed.
        '''
        self.show_ok_dialog(msg, 'Error: %s' % self.get_name(), True)


    def show_small_popup(self, title='', msg='', delay=5000, image=''):
        '''
        Displays a small popup box in the lower right corner. The default delay 
        is 5 seconds.

        Code inspired by anarchintosh and daledude's Icefilms addon.

        Example::

            import os
            logo = os.path.join(addon.get_path(), 'art','logo.jpg')
            addon.show_small_popup('MyAddonName','Is now loaded enjoy', 5000, logo)

        Kwargs:
            title (str): title to be displayed at the top of the box
            
            msg (str): Main message body
            
            delay (int): delay in milliseconds until it disapears
            
            image (str): Path to the image you want to display
        '''
        xbmc.executebuiltin('XBMC.Notification(""%s"",""%s"",%d,""%s"")' %
                            (title, msg, delay, image))


    def show_countdown(self, time_to_wait, title='', text=''):
        '''
        Show a countdown dialog with a progress bar for XBMC while delaying 
        execution. Necessary for some filehosters eg. megaupload
        
        The original version of this code came from Anarchintosh.
        
        Args:
            time_to_wait (int): number of seconds to pause for.
            
        Kwargs:
            title (str): Displayed in the title of the countdown dialog. Default
            is blank.
                         
            text (str): A line of text to be displayed in the dialog. Default
            is blank.
            
        Returns: 
            ``True`` if countdown is allowed to complete, ``False`` if the 
            user cancelled the countdown.
        '''
        
        dialog = xbmcgui.DialogProgress()
        ret = dialog.create(title)

        self.log_notice('waiting %d secs' % time_to_wait)
        
        secs = 0
        increment = 100 / time_to_wait

        cancelled = False
        while secs <= time_to_wait:

            if (dialog.iscanceled()):
                cancelled = True
                break

            if secs != 0: 
                xbmc.sleep(1000)

            secs_left = time_to_wait - secs
            if secs_left == 0: 
                percent = 100
            else: 
                percent = increment * secs
            
            remaining_display = ('Wait %d seconds for the ' +
                    'video stream to activate...') % secs_left
            dialog.update(percent, text, remaining_display)

            secs += 1

        if cancelled == True:     
            self.log_notice('countdown cancelled')
            return False
        else:
            self.log_debug('countdown finished waiting')
            return True        


    def show_settings(self):
        '''Shows the settings dialog for this addon.'''
        self.addon.openSettings()


    def resolve_url(self, stream_url):
        '''
        Tell XBMC that you have resolved a URL (or not!).
        
        This method should be called as follows:
        
        #. The user selects a list item that has previously had ``isPlayable``
           set (this is true for items added with :meth:`add_item`, 
           :meth:`add_music_item` or :meth:`add_music_item`)
        #. Your code resolves the item requested by the user to a media URL
        #. Your addon calls this method with the resolved URL
        
        Args:
            stream_url (str or ``False``): If a string, tell XBMC that the 
            media URL ha been successfully resolved to stream_url. If ``False`` 
            or an empty string tell XBMC the resolving failed and pop up an 
            error messsage.
        '''
        if stream_url:
            self.log_debug('resolved to: %s' % stream_url)
            xbmcplugin.setResolvedUrl(self.handle, True, 
                                      xbmcgui.ListItem(path=stream_url))
        else:
            self.show_error_dialog(['sorry, failed to resolve URL :('])
            xbmcplugin.setResolvedUrl(self.handle, False, xbmcgui.ListItem())

    
    def get_playlist(self, pl_type, new=False):
        '''
        Return a :class:`xbmc.Playlist` object of the specified type.
        
        The available playlist types are defined in the :mod:`xbmc` module and 
        are currently as follows::
        
            xbmc.PLAYLIST_MUSIC = 0
            xbmc.PLAYLIST_VIDEO = 1
            
        .. seealso::
            
            :meth:`get_music_playlist`, :meth:`get_video_playlist`
            
        Args:
            pl_type (int): The type of playlist to get.
            
            new (bool): If ``False`` (default), get the current 
            :class:`xbmc.Playlist` object of the type specified. If ``True`` 
            then return a new blank :class:`xbmc.Playlist`.

        Returns:
            A :class:`xbmc.Playlist` object.
        '''
        pl = xbmc.PlayList(pl_type)
        if new:
            pl.clear()
        return pl
    
    
    def get_music_playlist(self, new=False):
        '''
        Convenience method to return a music :class:`xbmc.Playlist` object.
        
        .. seealso::
        
            :meth:`get_playlist`
        
        Kwargs:
            new (bool): If ``False`` (default), get the current music 
            :class:`xbmc.Playlist` object. If ``True`` then return a new blank
            music :class:`xbmc.Playlist`.
        Returns:
            A :class:`xbmc.Playlist` object.
       '''
        self.get_playlist(xbmc.PLAYLIST_MUSIC, new)
    

    def get_video_playlist(self, new=False):
        '''
        Convenience method to return a video :class:`xbmc.Playlist` object.
        
        .. seealso::
        
            :meth:`get_playlist`
        
        Kwargs:
            new (bool): If ``False`` (default), get the current video 
            :class:`xbmc.Playlist` object. If ``True`` then return a new blank
            video :class:`xbmc.Playlist`.
            
        Returns:
            A :class:`xbmc.Playlist` object.
        '''
        self.get_playlist(xbmc.PLAYLIST_VIDEO, new)


    def add_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False, img='',
                 fanart='', resolved=False, total_items=0, playlist=False, item_type='video', 
                 is_folder=False):
        '''
        Adds an item to the list of entries to be displayed in XBMC or to a 
        playlist.
        
        Use this method when you want users to be able to select this item to
        start playback of a media file. ``queries`` is a dict that will be sent 
        back to the addon when this item is selected::
        
            add_item({'host': 'youtube.com', 'media_id': 'ABC123XYZ'}, 
                     {'title': 'A youtube vid'})
                     
        will add a link to::
        
            plugin://your.plugin.id/?host=youtube.com&media_id=ABC123XYZ
        
        .. seealso::
        
            :meth:`add_music_item`, :meth:`add_video_item`, 
            :meth:`add_directory`
            
        Args:
            queries (dict): A set of keys/values to be sent to the addon when 
            the user selects this item.
            
            infolabels (dict): A dictionary of information about this media 
            (see the `XBMC Wiki InfoLabels entry 
            <http://wiki.xbmc.org/?title=InfoLabels>`_).
            
        Kwargs:
            
            properties (dict): A dictionary of properties that can be set on a list item
            (see the `XBMC Wiki InfoLabels entry and locate Property() elements
            <http://wiki.xbmc.org/?title=InfoLabels>`_).
            
            contextmenu_items (list): A list of contextmenu items
            
            context_replace (bool): To replace the xbmc default contextmenu items
                    
            img (str): A URL to an image file to be used as an icon for this
            entry.
            
            fanart (str): A URL to a fanart image for this entry.
            
            resolved (str): If not empty, ``queries`` will be ignored and 
            instead the added item will be the exact contentes of ``resolved``.
            
            total_items (int): Total number of items to be added in this list.
            If supplied it enables XBMC to show a progress bar as the list of
            items is being built.
            
            playlist (playlist object): If ``False`` (default), the item will 
            be added to the list of entries to be displayed in this directory. 
            If a playlist object is passed (see :meth:`get_playlist`) then 
            the item will be added to the playlist instead
    
            item_type (str): The type of item to add (eg. 'music', 'video' or
            'pictures')
        '''
        infolabels = self.unescape_dict(infolabels)
        if not resolved:
            if not is_folder:
                queries['play'] = 'True'
            play = self.build_plugin_url(queries)
        else: 
            play = resolved
        listitem = xbmcgui.ListItem(infolabels['title'], iconImage=img, 
                                    thumbnailImage=img)
        listitem.setInfo(item_type, infolabels)
        listitem.setProperty('IsPlayable', 'true')
        listitem.setProperty('fanart_image', fanart)
        
        if properties:
            for prop in properties.items():
                listitem.setProperty(prop[0], prop[1])

        if contextmenu_items:
            listitem.addContextMenuItems(contextmenu_items, replaceItems=context_replace)        
        if playlist is not False:
            self.log_debug('adding item: %s - %s to playlist' % \
                                                    (infolabels['title'], play))
            playlist.add(play, listitem)
        else:
            self.log_debug('adding item: %s - %s' % (infolabels['title'], play))
            xbmcplugin.addDirectoryItem(self.handle, play, listitem, 
                                        isFolder=is_folder, 
                                        totalItems=total_items)


    def add_video_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                       img='', fanart='', resolved=False, total_items=0, playlist=False):
        '''
        Convenience method to add a video item to the directory list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, context_replace, img, fanart,
                      resolved, total_items, playlist, item_type='video')


    def add_music_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                        img='', fanart='', resolved=False, total_items=0, playlist=False):
        '''
        Convenience method to add a music item to the directory list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, img, context_replace, fanart,
                      resolved, total_items, playlist, item_type='music')


    def add_directory(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                       img='', fanart='', total_items=0, is_folder=True):
        '''
        Convenience method to add a directory to the display list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, context_replace, img, fanart,
                      total_items=total_items, resolved=self.build_plugin_url(queries), 
                      is_folder=is_folder)

    def end_of_directory(self):
        '''Tell XBMC that we have finished adding items to this directory.'''
        xbmcplugin.endOfDirectory(self.handle)
        

    def _decode_callback(self, matches):
        '''Callback method used by :meth:`decode`.'''
        id = matches.group(1)
        try:
            return unichr(int(id))
        except:
            return id


    def decode(self, data):
        '''
        Regular expression to convert entities such as ``&#044`` to the correct
        characters. It is called by :meth:`unescape` and so it is not required
        to call it directly.
        
        This method was found `on the web <http://stackoverflow.com/questions/1208916/decoding-html-entities-with-python/1208931#1208931>`_
        
        Args:
            data (str): String to be cleaned.
            
        Returns:
            Cleaned string.
        '''
        return re.sub(""&#(\d+)(;|(?=\s))"", self._decode_callback, data).strip()


    def unescape(self, text):
        '''
        Decodes HTML entities in a string.
        
        You can add more entities to the ``rep`` dictionary.
        
        Args:
            text (str): String to be cleaned.
            
        Returns:
            Cleaned string.
        '''
        try:
            text = self.decode(text)
            rep = {'&lt;': '<',
                   '&gt;': '>',
                   '&quot': '""',
                   '&rsquo;': '\'',
                   '&acute;': '\'',
                   }
            for s, r in rep.items():
                text = text.replace(s, r)
            # this has to be last:
            text = text.replace(""&amp;"", ""&"")
        
        #we don't want to fiddle with non-string types
        except TypeError:
            pass

        return text
        

    def unescape_dict(self, d):
        '''
        Calls :meth:`unescape` on all values in a dictionary.
        
        Args:
            d (dict): A dictionary containing string values
            
        Returns:
            A dictionary with HTML entities removed from the values.
        '''
        out = {}
        for key, value in d.items():
            out[key] = self.unescape(value)
        return out
    
    def save_data(self, filename, data):
        '''
        Saves the data structure using pickle. If the addon data path does 
        not exist it will be automatically created. This save function has
        the same restrictions as the pickle module.
        
        Args:
            filename (string): name of the file you want to save data to. This 
            file will be saved in your addon's profile directory.
            
            data (data object/string): you want to save.
            
        Returns:
            True on success
            False on failure
        '''
        profile_path = self.get_profile()
        try:
            os.makedirs(profile_path)
        except:
            pass
        save_path = os.path.join(profile_path, filename)
        try:
            pickle.dump(data, open(save_path, 'wb'))
            return True
        except pickle.PickleError:
            return False
        
    def load_data(self,filename):
        '''
        Load the data that was saved with save_data() and returns the
        data structure.
        
        Args:
            filename (string): Name of the file you want to load data from. This
            file will be loaded from your addons profile directory.
            
        Returns:
            Data stucture on success
            False on failure
        '''
        profile_path = self.get_profile()
        load_path = os.path.join(profile_path, filename)
        print profile_path
        if not os.path.isfile(load_path):
            self.log_debug('%s does not exist' % load_path)
            return False
        try:
            data = pickle.load(open(load_path))
        except:
            return False
        return data
            
        

","'''
    common XBMC Module
    Copyright (C) 2011 t0mm0

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import cgi
import re
import os
try:
   import cPickle as pickle
except:
   import pickle
import unicodedata
import urllib
import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
    
class Addon:
    '''
    This class provides a lot of code that is used across many XBMC addons
    in the hope that it will simplify some of the common tasks an addon needs
    to perform.
    
    Mostly this is achieved by providing a wrapper around commonly used parts
    of :mod:`xbmc`, :mod:`xbmcaddon`, :mod:`xbmcgui` and :mod:`xbmcplugin`. 
    
    You probably want to have exactly one instance of this class in your addon
    which you can call from anywhere in your code.
    
    Example::
        
        import sys
        from t0mm0.common.addon import Addon
        addon = Addon('my.plugin.id', argv=sys.argv)
    '''
    
        
    def __init__(self, addon_id, argv=None):
        '''        
        Args:
            addon_id (str): Your addon's id (eg. 'plugin.video.t0mm0.test').
            
        Kwargs:
            argv (list): List of arguments passed to your addon if applicable
            (eg. sys.argv).
        '''
        self.addon = xbmcaddon.Addon(id=addon_id)
        if argv:
            self.url = argv[0]
            self.handle = int(argv[1])
            self.queries = self.parse_query(argv[2][1:])
        

    def get_author(self):
        '''Returns the addon author as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('author')
            

    def get_changelog(self):    
        '''Returns the addon changelog.'''
        return self.addon.getAddonInfo('changelog')
            

    def get_description(self):
        '''Returns the addon description as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('description')
            

    def get_disclaimer(self):    
        '''Returns the addon disclaimer as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('disclaimer')
            

    def get_fanart(self):
        '''Returns the full path to the addon fanart.'''
        return self.addon.getAddonInfo('fanart')
            

    def get_icon(self):
        '''Returns the full path to the addon icon.'''
        return self.addon.getAddonInfo('icon')
            

    def get_id(self):
        '''Returns the addon id as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('id')
            

    def get_name(self):    
        '''Returns the addon name as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('name')
            

    def get_path(self):
        '''Returns the full path to the addon directory.'''
        return self.addon.getAddonInfo('path')
            

    def get_profile(self):    
        '''
        Returns the full path to the addon profile directory 
        (useful for storing files needed by the addon such as cookies).
        '''
        return xbmc.translatePath(self.addon.getAddonInfo('profile'))
            

    def get_stars(self):    
        '''Returns the number of stars for this addon.'''
        return self.addon.getAddonInfo('stars')
            

    def get_summary(self):    
        '''Returns the addon summary as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('summary')
            

    def get_type(self): 
        '''
        Returns the addon summary as defined in ``addon.xml`` 
        (eg. xbmc.python.pluginsource).
        '''   
        return self.addon.getAddonInfo('type')
            

    def get_version(self):    
        '''Returns the addon version as defined in ``addon.xml``.'''
        return self.addon.getAddonInfo('version')
            

    def get_setting(self, setting):
        '''
        Returns an addon setting. Settings must be defined in your addon's
        ``resources/settings.xml`` file.
        
        Args:
            setting (str): Name of the setting to be retrieved.
            
        Returns:
            str containing the requested setting.
        '''
        return self.addon.getSetting(setting)


    def set_setting(self, setting, value):
        '''
        Sets an addon setting. Settings must be defined in your addon's
        ``resources/settings.xml`` file.
        
        Args:
            setting (str): Name of the setting to be retrieved.
            value (str): Value of the setting
            
        '''
        self.addon.setSetting(id=setting, value=value)


    def get_string(self, string_id):
        '''
        Returns a localized string. Strings must be defined in your addon's
        ``resources/language/[lang_name]/strings.xml`` file.
        
        Args:
            string_id (int): id of the translated string to retrieve.
            
        Returns:
            str containing the localized requested string.
        '''
        return self.addon.getLocalizedString(string_id)   


    def parse_query(self, query, defaults={'mode': 'main'}):
        '''
        Parse a query string as used in a URL or passed to your addon by XBMC.
        
        Example:
         
        >>> addon.parse_query('name=test&type=basic')
        {'mode': 'main', 'name': 'test', 'type': 'basic'} 
            
        Args:
            query (str): A query string.
            
        Kwargs:
            defaults (dict): A dictionary containing key/value pairs parsed 
            from the query string. If a key is repeated in the query string
            its value will be a list containing all of that keys values.  
        '''
        queries = cgi.parse_qs(query)
        q = defaults
        for key, value in queries.items():
            if len(value) == 1:
                q[key] = value[0]
            else:
                q[key] = value
        return q


    def build_plugin_url(self, queries):
        '''
        Returns a ``plugin://`` URL which can be used to call the addon with 
        the specified queries.
        
        Example:
        
        >>> addon.build_plugin_url({'name': 'test', 'type': 'basic'})
        'plugin://your.plugin.id/?name=test&type=basic'
        
        
        Args:
            queries (dict): A dctionary of keys/values to be added to the 
            ``plugin://`` URL.
            
        R*etuns:
            A string containing a fully formed ``plugin://`` URL.
        '''
        out_dict = {}
        for k, v in queries.iteritems():
            if isinstance(v, unicode):
                v = v.encode('utf8')
            elif isinstance(v, str):
                # Must be encoded in UTF-8
                v.decode('utf8')
            out_dict[k] = v
        return self.url + '?' + urllib.urlencode(out_dict)


    def log(self, msg, level=xbmc.LOGNOTICE):
        '''
        Writes a string to the XBMC log file. The addon name is inserted into 
        the beginning of the message automatically to help you find relevent 
        messages in the log file.
        
        The available log levels are defined in the :mod:`xbmc` module and are
        currently as follows::
        
            xbmc.LOGDEBUG = 0
            xbmc.LOGERROR = 4
            xbmc.LOGFATAL = 6
            xbmc.LOGINFO = 1
            xbmc.LOGNONE = 7
            xbmc.LOGNOTICE = 2
            xbmc.LOGSEVERE = 5
            xbmc.LOGWARNING = 3
        
        Args:
            msg (str or unicode): The message to be written to the log file.
        
        Kwargs:
            level (int): The XBMC log level to write at.
        '''
        #msg = unicodedata.normalize('NFKD', unicode(msg)).encode('ascii',
        #                                                         'ignore')
        xbmc.log('%s: %s' % (self.get_name(), msg), level)
        

    def log_error(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGERROR`` error level. Use when something has gone wrong in
        your addon code. This will show up in the log prefixed with 'ERROR:'
        whether you have debugging switched on or not.
        '''
        self.log(msg, xbmc.LOGERROR)    
        

    def log_debug(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGDEBUG`` error level. Use this when you want to print out lots 
        of detailed information that is only usefull for debugging. This will 
        show up in the log only when debugging is enabled in the XBMC settings,
        and will be prefixed with 'DEBUG:'.
        '''
        self.log(msg, xbmc.LOGDEBUG)    


    def log_notice(self, msg):
        '''
        Convenience method to write to the XBMC log file at the 
        ``xbmc.LOGNOTICE`` error level. Use for general log messages. This will
        show up in the log prefixed with 'NOTICE:' whether you have debugging 
        switched on or not.
        '''
        self.log(msg, xbmc.LOGNOTICE)    


    def show_ok_dialog(self, msg, title=None, is_error=False):
        '''
        Display an XBMC dialog with a message and a single 'OK' button. The 
        message is also written to the XBMC log file at the appropriate log
        level.
        
        .. warning::
            
            Don't forget that `msg` must be a list of strings and not just a 
            string even if you only want to display a single line!
        
        Example::
        
            addon.show_ok_dialog(['My message'], 'My Addon')
        
        Args:
            msg (list of strings): The message to be displayed in the dialog. 
            Only the first 3 list items will be displayed.
            
        Kwargs:
            title (str): String to be displayed as the title of the dialog box.
            Defaults to the addon name.
            
            is_error (bool): If ``True``, the log message will be written at 
            the ERROR log level, otherwise NOTICE will be used.
        '''
        if not title:
            title = self.get_name()
        log_msg = ' '.join(msg)
        
        while len(msg) < 3:
            msg.append('')
        
        if is_error:
            self.log_error(log_msg)
        else:
            self.log_notice(log_msg)
        
        xbmcgui.Dialog().ok(title, msg[0], msg[1], msg[2])


    def show_error_dialog(self, msg):
        '''
        Convenience method to show an XBMC dialog box with a single OK button
        and also write the message to the log file at the ERROR log level.
        
        The title of the dialog will be the addon's name with the prefix 
        'Error: '.
        
        .. warning::
            
            Don't forget that `msg` must be a list of strings and not just a 
            string even if you only want to display a single line!

        Args:
            msg (list of strings): The message to be displayed in the dialog. 
            Only the first 3 list items will be displayed.
        '''
        self.show_ok_dialog(msg, 'Error: %s' % self.get_name(), True)


    def show_small_popup(self, title='', msg='', delay=5000, image=''):
        '''
        Displays a small popup box in the lower right corner. The default delay 
        is 5 seconds.

        Code inspired by anarchintosh and daledude's Icefilms addon.

        Example::

            import os
            logo = os.path.join(addon.get_path(), 'art','logo.jpg')
            addon.show_small_popup('MyAddonName','Is now loaded enjoy', 5000, logo)

        Kwargs:
            title (str): title to be displayed at the top of the box
            
            msg (str): Main message body
            
            delay (int): delay in milliseconds until it disapears
            
            image (str): Path to the image you want to display
        '''
        xbmc.executebuiltin('XBMC.Notification(""%s"",""%s"",%d,""%s"")' %
                            (title, msg, delay, image))


    def show_countdown(self, time_to_wait, title='', text=''):
        '''
        Show a countdown dialog with a progress bar for XBMC while delaying 
        execution. Necessary for some filehosters eg. megaupload
        
        The original version of this code came from Anarchintosh.
        
        Args:
            time_to_wait (int): number of seconds to pause for.
            
        Kwargs:
            title (str): Displayed in the title of the countdown dialog. Default
            is blank.
                         
            text (str): A line of text to be displayed in the dialog. Default
            is blank.
            
        Returns: 
            ``True`` if countdown is allowed to complete, ``False`` if the 
            user cancelled the countdown.
        '''
        
        dialog = xbmcgui.DialogProgress()
        ret = dialog.create(title)

        self.log_notice('waiting %d secs' % time_to_wait)
        
        secs = 0
        increment = 100 / time_to_wait

        cancelled = False
        while secs <= time_to_wait:

            if (dialog.iscanceled()):
                cancelled = True
                break

            if secs != 0: 
                xbmc.sleep(1000)

            secs_left = time_to_wait - secs
            if secs_left == 0: 
                percent = 100
            else: 
                percent = increment * secs
            
            remaining_display = ('Wait %d seconds for the ' +
                    'video stream to activate...') % secs_left
            dialog.update(percent, text, remaining_display)

            secs += 1

        if cancelled == True:     
            self.log_notice('countdown cancelled')
            return False
        else:
            self.log_debug('countdown finished waiting')
            return True        


    def show_settings(self):
        '''Shows the settings dialog for this addon.'''
        self.addon.openSettings()


    def resolve_url(self, stream_url):
        '''
        Tell XBMC that you have resolved a URL (or not!).
        
        This method should be called as follows:
        
        #. The user selects a list item that has previously had ``isPlayable``
           set (this is true for items added with :meth:`add_item`, 
           :meth:`add_music_item` or :meth:`add_music_item`)
        #. Your code resolves the item requested by the user to a media URL
        #. Your addon calls this method with the resolved URL
        
        Args:
            stream_url (str or ``False``): If a string, tell XBMC that the 
            media URL ha been successfully resolved to stream_url. If ``False`` 
            or an empty string tell XBMC the resolving failed and pop up an 
            error messsage.
        '''
        if stream_url:
            self.log_debug('resolved to: %s' % stream_url)
            xbmcplugin.setResolvedUrl(self.handle, True, 
                                      xbmcgui.ListItem(path=stream_url))
        else:
            self.show_error_dialog(['sorry, failed to resolve URL :('])
            xbmcplugin.setResolvedUrl(self.handle, False, xbmcgui.ListItem())

    
    def get_playlist(self, pl_type, new=False):
        '''
        Return a :class:`xbmc.Playlist` object of the specified type.
        
        The available playlist types are defined in the :mod:`xbmc` module and 
        are currently as follows::
        
            xbmc.PLAYLIST_MUSIC = 0
            xbmc.PLAYLIST_VIDEO = 1
            
        .. seealso::
            
            :meth:`get_music_playlist`, :meth:`get_video_playlist`
            
        Args:
            pl_type (int): The type of playlist to get.
            
            new (bool): If ``False`` (default), get the current 
            :class:`xbmc.Playlist` object of the type specified. If ``True`` 
            then return a new blank :class:`xbmc.Playlist`.

        Returns:
            A :class:`xbmc.Playlist` object.
        '''
        pl = xbmc.PlayList(pl_type)
        if new:
            pl.clear()
        return pl
    
    
    def get_music_playlist(self, new=False):
        '''
        Convenience method to return a music :class:`xbmc.Playlist` object.
        
        .. seealso::
        
            :meth:`get_playlist`
        
        Kwargs:
            new (bool): If ``False`` (default), get the current music 
            :class:`xbmc.Playlist` object. If ``True`` then return a new blank
            music :class:`xbmc.Playlist`.
        Returns:
            A :class:`xbmc.Playlist` object.
       '''
        self.get_playlist(xbmc.PLAYLIST_MUSIC, new)
    

    def get_video_playlist(self, new=False):
        '''
        Convenience method to return a video :class:`xbmc.Playlist` object.
        
        .. seealso::
        
            :meth:`get_playlist`
        
        Kwargs:
            new (bool): If ``False`` (default), get the current video 
            :class:`xbmc.Playlist` object. If ``True`` then return a new blank
            video :class:`xbmc.Playlist`.
            
        Returns:
            A :class:`xbmc.Playlist` object.
        '''
        self.get_playlist(xbmc.PLAYLIST_VIDEO, new)


    def add_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False, img='',
                 fanart='', resolved=False, total_items=0, playlist=False, item_type='video', 
                 is_folder=False):
        '''
        Adds an item to the list of entries to be displayed in XBMC or to a 
        playlist.
        
        Use this method when you want users to be able to select this item to
        start playback of a media file. ``queries`` is a dict that will be sent 
        back to the addon when this item is selected::
        
            add_item({'host': 'youtube.com', 'media_id': 'ABC123XYZ'}, 
                     {'title': 'A youtube vid'})
                     
        will add a link to::
        
            plugin://your.plugin.id/?host=youtube.com&media_id=ABC123XYZ
        
        .. seealso::
        
            :meth:`add_music_item`, :meth:`add_video_item`, 
            :meth:`add_directory`
            
        Args:
            queries (dict): A set of keys/values to be sent to the addon when 
            the user selects this item.
            
            infolabels (dict): A dictionary of information about this media 
            (see the `XBMC Wiki InfoLabels entry 
            <http://wiki.xbmc.org/?title=InfoLabels>`_).
            
        Kwargs:
            
            properties (dict): A dictionary of properties that can be set on a list item
            (see the `XBMC Wiki InfoLabels entry and locate Property() elements
            <http://wiki.xbmc.org/?title=InfoLabels>`_).
            
            contextmenu_items (list): A list of contextmenu items
            
            context_replace (bool): To replace the xbmc default contextmenu items
                    
            img (str): A URL to an image file to be used as an icon for this
            entry.
            
            fanart (str): A URL to a fanart image for this entry.
            
            resolved (str): If not empty, ``queries`` will be ignored and 
            instead the added item will be the exact contentes of ``resolved``.
            
            total_items (int): Total number of items to be added in this list.
            If supplied it enables XBMC to show a progress bar as the list of
            items is being built.
            
            playlist (playlist object): If ``False`` (default), the item will 
            be added to the list of entries to be displayed in this directory. 
            If a playlist object is passed (see :meth:`get_playlist`) then 
            the item will be added to the playlist instead
    
            item_type (str): The type of item to add (eg. 'music', 'video' or
            'pictures')
        '''
        infolabels = self.unescape_dict(infolabels)
        if not resolved:
            if not is_folder:
                queries['play'] = 'True'
            play = self.build_plugin_url(queries)
        else: 
            play = resolved
        listitem = xbmcgui.ListItem(infolabels['title'], iconImage=img, 
                                    thumbnailImage=img)
        listitem.setInfo(item_type, infolabels)
        listitem.setProperty('IsPlayable', 'true')
        listitem.setProperty('fanart_image', fanart)
        
        if properties:
            for prop in properties.items():
                listitem.setProperty(prop[0], prop[1])

        if contextmenu_items:
            listitem.addContextMenuItems(contextmenu_items, replaceItems=context_replace)        
        if playlist is not False:
            self.log_debug('adding item: %s - %s to playlist' % \
                                                    (infolabels['title'], play))
            playlist.add(play, listitem)
        else:
            self.log_debug('adding item: %s - %s' % (infolabels['title'], play))
            xbmcplugin.addDirectoryItem(self.handle, play, listitem, 
                                        isFolder=is_folder, 
                                        totalItems=total_items)


    def add_video_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                       img='', fanart='', resolved=False, total_items=0, playlist=False):
        '''
        Convenience method to add a video item to the directory list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, context_replace, img, fanart,
                      resolved, total_items, playlist, item_type='video')


    def add_music_item(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                        img='', fanart='', resolved=False, total_items=0, playlist=False):
        '''
        Convenience method to add a music item to the directory list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, img, context_replace, fanart,
                      resolved, total_items, playlist, item_type='music')


    def add_directory(self, queries, infolabels, properties=None, contextmenu_items='', context_replace=False,
                       img='', fanart='', total_items=0, is_folder=True):
        '''
        Convenience method to add a directory to the display list or a 
        playlist.
        
        See :meth:`add_item` for full infomation
        '''
        self.add_item(queries, infolabels, properties, contextmenu_items, context_replace, img, fanart,
                      total_items=total_items, resolved=self.build_plugin_url(queries), 
                      is_folder=is_folder)

    def end_of_directory(self):
        '''Tell XBMC that we have finished adding items to this directory.'''
        xbmcplugin.endOfDirectory(self.handle)
        

    def _decode_callback(self, matches):
        '''Callback method used by :meth:`decode`.'''
        id = matches.group(1)
        try:
            return unichr(int(id))
        except:
            return id


    def decode(self, data):
        '''
        Regular expression to convert entities such as ``&#044`` to the correct
        characters. It is called by :meth:`unescape` and so it is not required
        to call it directly.
        
        This method was found `on the web <http://stackoverflow.com/questions/1208916/decoding-html-entities-with-python/1208931#1208931>`_
        
        Args:
            data (str): String to be cleaned.
            
        Returns:
            Cleaned string.
        '''
        return re.sub(""&#(\d+)(;|(?=\s))"", self._decode_callback, data).strip()


    def unescape(self, text):
        '''
        Decodes HTML entities in a string.
        
        You can add more entities to the ``rep`` dictionary.
        
        Args:
            text (str): String to be cleaned.
            
        Returns:
            Cleaned string.
        '''
        try:
            text = self.decode(text)
            rep = {'&lt;': '<',
                   '&gt;': '>',
                   '&quot': '""',
                   '&rsquo;': '\'',
                   '&acute;': '\'',
                   }
            for s, r in rep.items():
                text = text.replace(s, r)
            # this has to be last:
            text = text.replace(""&amp;"", ""&"")
        
        #we don't want to fiddle with non-string types
        except TypeError:
            pass

        return text
        

    def unescape_dict(self, d):
        '''
        Calls :meth:`unescape` on all values in a dictionary.
        
        Args:
            d (dict): A dictionary containing string values
            
        Returns:
            A dictionary with HTML entities removed from the values.
        '''
        out = {}
        for key, value in d.items():
            out[key] = self.unescape(value)
        return out
    
    def save_data(self, filename, data):
        '''
        Saves the data structure using pickle. If the addon data path does 
        not exist it will be automatically created. This save function has
        the same restrictions as the pickle module.
        
        Args:
            filename (string): name of the file you want to save data to. This 
            file will be saved in your addon's profile directory.
            
            data (data object/string): you want to save.
            
        Returns:
            True on success
            False on failure
        '''
        profile_path = self.get_profile()
        try:
            os.makedirs(profile_path)
        except:
            pass
        save_path = os.path.join(profile_path, filename)
        try:
            pickle.dump(data, open(save_path, 'wb'))
            return True
        except pickle.PickleError:
            return False
        
    def load_data(self,filename):
        '''
        Load the data that was saved with save_data() and returns the
        data structure.
        
        Args:
            filename (string): Name of the file you want to load data from. This
            file will be loaded from your addons profile directory.
            
        Returns:
            Data stucture on success
            False on failure
        '''
        profile_path = self.get_profile()
        load_path = os.path.join(profile_path, filename)
        print profile_path
        if not os.path.isfile(load_path):
            self.log_debug('%s does not exist' % load_path)
            return False
        try:
            data = pickle.load(open(load_path))
        except:
            return False
        return data
            
        

",TRUE,,3750
3748,InitialSO.csv3748.txt,InitialGit.csv3748.txt,3,"def page_query(q):
    offset = 0
    while True:
        r = False
        for elem in q.limit(1000).offset(offset):
           r = True
           yield elem
        offset += 1000
        if not r:
            break

for item in page_query(Session.query(Picture)):
    print item
 ","def page_query(q):
    offset = 0
    while True:
        r = False
        for elem in q.limit(1000).offset(offset):
           r = True
           yield elem
        offset += 1000
        if not r:
            break

for item in page_query(Session.query(Picture)):
    print item
 ",TRUE,"""""""calculate receivedrecentdate for threads

Revision ID: 691fa97024d
Revises: 2758cefad87d
Create Date: 2015-07-20 23:47:41.297327

""""""

# revision identifiers, used by Alembic.
revision = '691fa97024d'
down_revision = '2758cefad87d'


# solution from http://stackoverflow.com/a/1217947
def page_query(q):
    CHUNK_SIZE = 500
    offset = 0
    while True:
        r = False
        for elem in q.limit(CHUNK_SIZE).offset(offset):
            r = True
            yield elem
        offset += CHUNK_SIZE
        if not r:
            break


def upgrade():
    from inbox.models import Message, Thread
    from inbox.models.session import session_scope
    from sqlalchemy import desc
    from sqlalchemy.sql import not_

    with session_scope(versioned=False) as db_session:
        for thread in page_query(db_session.query(Thread)):
            last_message = db_session.query(Message). \
                    filter(Message.thread_id == thread.id,
                           not_(Message.categories.any(name=""sent""))). \
                    order_by(desc(Message.received_date)).first()
            if last_message:
                thread.receivedrecentdate = last_message.received_date

    db_session.commit()


def downgrade():
    pass
","""""""calculate receivedrecentdate for threads

Revision ID: 691fa97024d
Revises: 2758cefad87d
Create Date: 2015-07-20 23:47:41.297327

""""""

# revision identifiers, used by Alembic.
revision = '691fa97024d'
down_revision = '2758cefad87d'


# solution from http://stackoverflow.com/a/1217947
def page_query(q):
    CHUNK_SIZE = 500
    offset = 0
    while True:
        r = False
        for elem in q.limit(CHUNK_SIZE).offset(offset):
            r = True
            yield elem
        offset += CHUNK_SIZE
        if not r:
            break


def upgrade():
    from inbox.models import Message, Thread
    from inbox.models.session import session_scope
    from sqlalchemy import desc
    from sqlalchemy.sql import not_

    with session_scope(versioned=False) as db_session:
        for thread in page_query(db_session.query(Thread)):
            last_message = db_session.query(Message). \
                    filter(Message.thread_id == thread.id,
                           not_(Message.categories.any(name=""sent""))). \
                    order_by(desc(Message.received_date)).first()
            if last_message:
                thread.receivedrecentdate = last_message.received_date

    db_session.commit()


def downgrade():
    pass
",TRUE,,3754
3750,InitialSO.csv3750.txt,InitialGit.csv3750.txt,4,"function write_ini_file($assoc_arr, $path, $has_sections=FALSE) { 
    $content = """"; 
    if ($has_sections) { 
        foreach ($assoc_arr as $key=>$elem) { 
            $content .= ""["".$key.""]\n""; 
            foreach ($elem as $key2=>$elem2) { 
                if(is_array($elem2)) 
                { 
                    for($i=0;$i<count($elem2);$i++) 
                    { 
                        $content .= $key2.""[] = \"""".$elem2[$i].""\""\n""; 
                    } 
                } 
                else if($elem2=="""") $content .= $key2."" = \n""; 
                else $content .= $key2."" = \"""".$elem2.""\""\n""; 
            } 
        } 
    } 
    else { 
        foreach ($assoc_arr as $key=>$elem) { 
            if(is_array($elem)) 
            { 
                for($i=0;$i<count($elem);$i++) 
                { 
                    $content .= $key2.""[] = \"""".$elem[$i].""\""\n""; 
                } 
            } 
            else if($elem=="""") $content .= $key2."" = \n""; 
            else $content .= $key2."" = \"""".$elem.""\""\n""; 
        } 
    } 

    if (!$handle = fopen($path, 'w')) { 
        return false; 
    } 
    if (!fwrite($handle, $content)) { 
        return false; 
    } 
    fclose($handle); 
    return true; 
}
 $sampleData = array(
                'first' => array(
                    'first-1' => 1,
                    'first-2' => 2,
                    'first-3' => 3,
                    'first-4' => 4,
                    'first-5' => 5,
                ),
                'second' => array(
                    'second-1' => 1,
                    'second-2' => 2,
                    'second-3' => 3,
                    'second-4' => 4,
                    'second-5' => 5,
                ));
write_ini_file($sampleData, './data.ini', true);
 ","function write_ini_file($assoc_arr, $path, $has_sections=FALSE) { 
    $content = """"; 
    if ($has_sections) { 
        foreach ($assoc_arr as $key=>$elem) { 
            $content .= ""["".$key.""]\n""; 
            foreach ($elem as $key2=>$elem2) { 
                if(is_array($elem2)) 
                { 
                    for($i=0;$i<count($elem2);$i++) 
                    { 
                        $content .= $key2.""[] = \"""".$elem2[$i].""\""\n""; 
                    } 
                } 
                else if($elem2=="""") $content .= $key2."" = \n""; 
                else $content .= $key2."" = \"""".$elem2.""\""\n""; 
            } 
        } 
    } 
    else { 
        foreach ($assoc_arr as $key=>$elem) { 
            if(is_array($elem)) 
            { 
                for($i=0;$i<count($elem);$i++) 
                { 
                    $content .= $key.""[] = \"""".$elem[$i].""\""\n""; 
                } 
            } 
            else if($elem=="""") $content .= $key."" = \n""; 
            else $content .= $key."" = \"""".$elem.""\""\n""; 
        } 
    } 

    if (!$handle = fopen($path, 'w')) { 
        return false; 
    }

    $success = fwrite($handle, $content);
    fclose($handle); 

    return $success; 
}
 $sampleData = array(
                'first' => array(
                    'first-1' => 1,
                    'first-2' => 2,
                    'first-3' => 3,
                    'first-4' => 4,
                    'first-5' => 5,
                ),
                'second' => array(
                    'second-1' => 1,
                    'second-2' => 2,
                    'second-3' => 3,
                    'second-4' => 4,
                    'second-5' => 5,
                ));
write_ini_file($sampleData, './data.ini', true);
 ",FALSE,"<?php
class Utility
{
  private static $isMobile;

  public static function callApis($apisToCall)
  {
    $params = array();
    if(!empty($apisToCall))
    {
      foreach($apisToCall as $name => $api)
      {
        $apiParts = explode(' ', $api);
        $apiMethod = strtoupper($apiParts[0]);
        $apiMethod = $apiMethod == 'GET' ? EpiRoute::httpGet : EpiRoute::httpPost;
        $apiUrlParts = parse_url($apiParts[1]);
        $apiParams = array();
        if(isset($apiUrlParts['query']))
          parse_str($apiUrlParts['query'], $apiParams);

        $response = getApi()->invoke($apiUrlParts['path'], $apiMethod, array(""_{$apiMethod}"" => $apiParams));
        $params[$name] = $response['result'];

      }
    }
    return $params;
  }

  public static function decrypt($string, $secret = null, $salt = null)
  {
    if($secret === null)
      $secret = getConfig()->get('secrets')->secret;

    if($salt === null)
      $salt = self::getBaseDir();

    $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
    $key = md5(sprintf('%s~%s', $salt, $secret));

    $string = base64_decode($string);
    $decryptedString = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $string, MCRYPT_MODE_ECB, $iv));
    return $decryptedString;
  }

  public static function diagnosticLine($status, $message)
  {
    $label = $status ? 'success' : 'failure';
    return array('status' => $status, 'label' => $label, 'message' => $message);
  }

  public static function encrypt($string, $secret = null, $salt = null)
  {
    if($secret === null)
      $secret = getConfig()->get('secrets')->secret;

    if($salt === null)
      $salt = self::getBaseDir();

    $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
    $key = md5(sprintf('%s~%s', $salt, $secret));

    $encryptedString = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $string, MCRYPT_MODE_ECB, $iv);
    return base64_encode($encryptedString);
  }

  public static function getBaseDir()
  {
    return dirname(dirname(dirname(__FILE__)));
  }

  public static function getLicenses($selected = null)
  {
    static $licenses;
    if(!$licenses)
    {
      $licenses = array(
        '' => array('name' => 'All Rights Reserved', 'description' => ''),
        'CC BY' => array('name' => 'Attribution', 'description' => ''),
        'CC BY-SA' => array('name' => 'Attribution-ShareAlike', 'description' => ''),
        'CC BY-ND' => array('name' => 'Attribution-NoDerivs', 'description' => ''),
        'CC BY-NC' => array('name' => 'Attribution-NonCommercial', 'description' => ''),
        'CC BY-NC-SA' => array('name' => 'Attribution-NonCommercial-ShareAlike', 'description' => ''),
        'CC BY-NC-ND' => array('name' => 'Attribution-NonCommercial-NoDerivs', 'description' => '')
      );
    }

    foreach($licenses as $key => $value)
      $licenses[$key]['selected'] = ($key == $selected);

    if($selected === null)
      $licenses['']['selected'] = true;

    return $licenses;
  }

  public static function dateLong($ts, $write = true)
  {
    return self::returnValue(date('l, F jS, Y \a\t g:ia', $ts), $write);
  }

  // http://stackoverflow.com/a/1268642
  public static function generateIniString($array, $hasSections = false)
  {
    $retval = ''; 
    if($hasSections)
    { 
      foreach ($array as $key=>$elem)
      { 
        $retval .= ""\n[{$key}]\n""; 
        if(is_array($elem))
        {
          foreach ($elem as $key2=>$elem2)
          { 
            if(is_array($elem2)) 
            { 
              for($i=0;$i<count($elem2);$i++) 
              { 
                $retval .= $key2.""[] = \"""".$elem2[$i].""\""\n""; 
              } 
            } 
            else if($elem2=="""") $retval .= $key2."" = \n""; 
            else $retval .= $key2."" = \"""".$elem2.""\""\n""; 
          } 
        }
      } 
    } 
    else
    { 
      foreach ($array as $key=>$elem)
      { 
        if(is_array($elem)) 
        { 
          for($i=0;$i<count($elem);$i++) 
          { 
            $retval .= $key.""[] = \"""".$elem[$i].""\""\n""; 
          } 
        } 
        else if($elem=="""") $retval .= $key."" = \n"";
        else $retval .= $key."" = \"""".$elem.""\""\n""; 
      } 
    } 

    return $retval;
  }

  public static function getEmailHandle($email, $write = true)
  {
    return self::returnValue(substr($email, 0, strpos($email, '@')), $write);
  }

  public static function getPaginationParams($currentPage, $totalPages, $pagesToDisplay)
  {
    $start = 1;
    $end = $pagesToDisplay;
    if($currentPage > ($pagesToDisplay / 2) && $totalPages > $pagesToDisplay)
      $start = floor($currentPage - ($pagesToDisplay / 2));

    if($totalPages <= $pagesToDisplay)
      $end = $totalPages;
    else
      $end = min($totalPages, ($start+$pagesToDisplay));

    return range($start, $end);
  }

  public static function getProtocol($write = true)
  {
    $protocol = $_SERVER['SERVER_PORT'] != '443' ? 'http' : 'https';
    return self::returnValue($protocol, $write);
  }

  public static function isActiveTab($label)
  {
    if(!isset($_GET['__route__']))
      return $label == 'home';

    $route = $_GET['__route__'];
    switch($label)
    {
      case 'home':
        if(preg_match('#^/$#', $route))
          return true;
        return false;
        break;
      case 'photo':
      case 'photos':
        if(!empty($route) && preg_match('#^/photo#', $route) && !preg_match('#^/photos/upload#', $route))
          return true;
        return false;
        break;
      case 'tags':
        if(!empty($route) && preg_match('#^/tags/list#', $route))
          return true;
        return false;
        break;
      case 'upload':
        if(!empty($route) && preg_match('#^/photos/upload#', $route))
          return true;
        return false;
        break;
    }
  }

  public static function isMobile()
  {
    if(self::$isMobile !== null)
      return self::$isMobile;

    $detect = new Mobile_Detect();
    self::$isMobile = $detect->isMobile();
    return self::$isMobile;
  }

  public static function getTemplate($template)
  {
    if(!self::isMobile())
      return $template;

    $mobileTemplate = str_replace('.php', '-mobile.php', $template);
    if(!file_exists($mobileTemplate) && !getTheme()->fileExists($mobileTemplate))
      return $template;

    return $mobileTemplate;
  }

  public static function licenseLong($key, $write = true)
  {
    $licenses = self::getLicenses();
    // default it to the key, if the key doesn't exist then assume it's custom
    $license = $key;
    if(isset($licenses[$key]))
    {
      $license = sprintf('%s (%s)', $key, $licenses[$key]['name']);
    }

    return self::returnValue($license, $write);
  }

  public static function permissionAsText($permission, $write = true)
  {
    return self::returnValue(($permission ? 'public' : 'private'), $write);
  }

  public static function plural($int, $word = null, $write = true)
  {
    $word = self::safe($word, false);
    if(empty($word))
      return self::returnValue(($int > 1 ? 's' : ''), $write);
    else
      return self::returnValue(($int > 1 ? ""{$word}s"" : $word), $write);
  }

  public static function returnValue($value, $write = true)
  {
    if($write)
      echo $value;
    else
      return $value;
  }

  public static function safe($string, $write = true)
  {
    return self::returnValue(htmlspecialchars($string), $write);
  }

  public static function staticMapUrl($latitude, $longitude, $zoom, $size, $type = 'roadmap', $write = true)
  {
    //http://maps.googleapis.com/maps/api/staticmap?center=Brooklyn+Bridge,New+York,NY&zoom=14&size=512x512&maptype=roadmap&markers=color:blue%7Clabel:S%7C40.702147,-74.015794&markers=color:green%7Clabel:G%7C40.711614,-74.012318&markers=color:red%7Ccolor:red%7Clabel:C%7C40.718217,-73.998284&sensor=false
    return self::returnValue(""http://maps.googleapis.com/maps/api/staticmap?center={$latitude},{$longitude}&zoom={$zoom}&size={$size}&maptype={$type}&markers=color:gray%7C{$latitude},{$longitude}&sensor=false"", $write);
  }

  public static function timeAsText($time, $prefix = null, $suffix = null, $write = true)
  {
    if(empty($time))
      return self::returnValue('', $write);

    $seconds = intval(time() - $time);
    $hours = intval($seconds / 3600);
    if($hours < 0)
      return self::returnValue('--', $write);
    elseif($hours < 1)
      return self::returnValue(""{$prefix} a few minutes ago {$suffix}"", $write);
    elseif($hours < 24)
      return self::returnValue(""{$prefix} {$hours} "" . self::plural($hours, 'hour', false) . "" ago {$suffix}"", $write);

    $days = intval(round($seconds / 86400));
    if($days <= 7)
      return self::returnValue(""{$prefix} {$days} "" . self::plural($days, 'day', false) . "" ago {$suffix}"", $write);

    $weeks = intval(round($days / 7));
    if($weeks <= 4)
      return self::returnValue(""{$prefix} {$weeks} "" . self::plural($weeks, 'week', false) . "" ago {$suffix}"", $write);

    $months = intval(round($days / 30));
    if($months < 12)
      return self::returnValue(""{$prefix} {$months} "" . self::plural($months, 'month', false) . "" ago {$suffix}"", $write);

    $years = intval(round($days / 365));
    return self::returnValue(""{$prefix} {$years} "" . self::plural($years, 'year', false) . "" ago {$suffix}"", $write);
  }

  /**
   * Safe equivalent of getallheaders() the work more often.
   */
  public static function getAllHeaders()
  {
    // fetch values from header
    // See issue 171: getallheaders() might not be available on FastCGI or non-Apache.
    if(function_exists('getallheaders'))
    {
      $headers = getallheaders();
    }
    else
    {
      $headers = array();
      // solution suggested by http://us.php.net/manual/en/function.apache-request-headers.php#70810
      foreach ($_SERVER as $name => $value)
      {
        if (substr($name, 0, 5) == 'HTTP_')
        {
          $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
        }
      }
    }
    return $headers;
  }
}
","<?php
class Utility
{
  private $isMobile, $licenses;

  public function __construct() { }

  public function callApis($apisToCall, $apiObj = null)
  {
    if($apiObj === null)
      $apiObj = getApi();

    $params = array();
    if(!empty($apisToCall))
    {
      foreach($apisToCall as $name => $api)
      {
        $apiParts = explode(' ', $api);
        $apiMethod = strtoupper($apiParts[0]);
        $apiMethod = $apiMethod == 'GET' ? EpiRoute::httpGet : EpiRoute::httpPost;
        $apiUrlParts = parse_url($apiParts[1]);
        $apiParams = array();
        if(isset($apiUrlParts['query']))
          parse_str($apiUrlParts['query'], $apiParams);

        $response = $apiObj->invoke($apiUrlParts['path'], $apiMethod, array(""_{$apiMethod}"" => $apiParams));
        $params[$name] = $response['result'];

      }
    }
    return $params;
  }

  // http://en.wikipedia.org/wiki/Decimal_degrees
  public function decreaseGeolocationPrecision($value)
  {
    return round($value);
  }

  public function decrypt($string, $secret = null, $salt = null)
  {
    if($secret === null)
      $secret = getConfig()->get('secrets')->secret;

    if($salt === null)
      $salt = $this->getBaseDir();

    $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
    $key = md5(sprintf('%s~%s', $salt, $secret));

    $string = base64_decode($string);
    $decryptedString = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $string, MCRYPT_MODE_ECB, $iv));
    return $decryptedString;
  }

  public function diagnosticLine($status, $message)
  {
    $status = (bool)$status;
    $label = $status ? 'success' : 'failure';
    return array('status' => $status, 'label' => $label, 'message' => $message);
  }

  public function enableBetaFeatures()
  {
    $config = getConfig()->get();
    return $config->site->enableBetaFeatures === '1';
  }

  public function encrypt($string, $secret = null, $salt = null)
  {
    if($secret === null)
      $secret = getConfig()->get('secrets')->secret;

    if($salt === null)
      $salt = $this->getBaseDir();

    $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND);
    $key = md5(sprintf('%s~%s', $salt, $secret));

    $encryptedString = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $string, MCRYPT_MODE_ECB, $iv);
    return base64_encode($encryptedString);
  }

  public function getAbsoluteUrl($path = '/', $write = true)
  {
    return $this->returnValue(sprintf('%s://%s%s', $this->getProtocol(false), $this->getHost(false), $path), $write);
  }

  public function getBaseDir()
  {
    return dirname(dirname(dirname(__FILE__)));
  }

  public function getConfigFile($new = false)
  {
    $configFile = sprintf('%s/userdata/configs/%s.ini', $this->getBaseDir(), $this->getHost($new));
    if(!getConfig()->exists($configFile))
      return false;
    return $configFile;
  }

  public function getHost($new = false)
  {
    if($new === false)
      return $_SERVER['HTTP_HOST'];

    $config = getConfig()->get();
    return str_replace($config->site->baseHost, $config->site->rewriteHost, $_SERVER['HTTP_HOST']);
  }

  public function getJSAssetsUrl($write = true)
  {
    $configObj = getConfig()->get();
    $themeObj = getTheme();
    $pipelineObj = getAssetPipeline(true)->setMode(AssetPipeline::combined);

    $assets = file($path = sprintf('%s/configs/js-assets.txt', dirname(dirname(__DIR__))));

    foreach($assets as $asset)
      $pipelineObj->addJs($themeObj->asset('javascript', trim($asset), false));


    $url = sprintf('%s%s', $this->safe($configObj->site->cdnPrefix, false), $pipelineObj->getUrl(AssetPipeline::js, $configObj->site->mediaVersion, false));
    return $this->returnValue($url, $write);
  }

  public function getLicenses($selected = null)
  {
    if(!$this->licenses)
    {
      $this->licenses = array(
        '' => array('name' => 'All Rights Reserved', 'description' => ''),
        'CC BY' => array('name' => 'Attribution', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by/3.0'),
        'CC BY-SA' => array('name' => 'Attribution-ShareAlike', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by-sa/3.0'),
        'CC BY-ND' => array('name' => 'Attribution-NoDerivs', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by-nd/3.0'),
        'CC BY-NC' => array('name' => 'Attribution-NonCommercial', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by-nc/3.0' ),
        'CC BY-NC-SA' => array('name' => 'Attribution-NonCommercial-ShareAlike', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by-nc-sa/3.0'),
        'CC BY-NC-ND' => array('name' => 'Attribution-NonCommercial-NoDerivs', 'description' => '', 'link' => 'http://creativecommons.org/licenses/by-nc-nd/3.0')
      );
    }

    foreach($this->licenses as $key => $value)
      $this->licenses[$key]['selected'] = ($key == $selected);

    if($selected === null)
      $this->licenses['']['selected'] = true;

    return $this->licenses;
  }

  public function getPath()
  {
    return $_SERVER['REQUEST_URI'];
  }

  public function dateLong($ts, $write = true)
  {
    if(empty($ts))
      return 'Unknown';
    return $this->returnValue(date('l, F jS, Y \a\t g:ia', $ts), $write);
  }

  // http://stackoverflow.com/a/1268642
  public function generateIniString($array, $hasSections = false)
  {
    $retval = ''; 
    if($hasSections)
    { 
      foreach ($array as $key=>$elem)
      { 
        $retval .= ""\n[{$key}]\n""; 
        if(is_array($elem))
        {
          foreach ($elem as $key2=>$elem2)
          { 
            if(is_array($elem2)) 
            { 
              for($i=0;$i<count($elem2);$i++) 
              { 
                $retval .= $key2.""[] = \"""".$elem2[$i].""\""\n""; 
              } 
            } 
            else if($elem2=="""") $retval .= $key2."" = \n""; 
            else $retval .= $key2."" = \"""".$elem2.""\""\n""; 
          } 
        }
      } 
    } 
    else
    { 
      foreach ($array as $key=>$elem)
      { 
        if(is_array($elem)) 
        { 
          for($i=0;$i<count($elem);$i++) 
          { 
            $retval .= $key.""[] = \"""".$elem[$i].""\""\n""; 
          } 
        } 
        else if($elem=="""") $retval .= $key."" = \n"";
        else $retval .= $key."" = \"""".$elem.""\""\n""; 
      } 
    } 

    return trim($retval);
  }

  public function getEmailHandle($email, $write = true)
  {
    return $this->returnValue(substr($email, 0, strpos($email, '@')), $write);
  }

  public function getPaginationParams($currentPage, $totalPages, $pagesToDisplay)
  {
    $start = 1;
    $end = $pagesToDisplay;
    if($currentPage > ($pagesToDisplay / 2) && $totalPages > $pagesToDisplay)
      $start = floor($currentPage - ($pagesToDisplay / 2));

    if($totalPages <= $pagesToDisplay)
      $end = $totalPages;
    else
      $end = min($totalPages, ($start+$pagesToDisplay));

    return range($start, $end);
  }

  public function getPaginationUrl($url, $page, $appendTo, $write = true)
  {
    // strip existing page parameter in the following order
    // replace /page-N in the path with ''
    // replace page=N& in qs with ''
    // replace &page=N in qs with ''
    // replace ?page=N in qs with '?'
    $url = preg_replace(array('/\/page-[0-9]+/', '/page=[0-9]+\&/', '/\&page=[0-9]+/', '/\?page=[0-9]+/'), array('', '', '', '?'), $url);
    $url = preg_replace('/\?$/', '', str_replace($appendTo, sprintf('%s/page-%s', $appendTo, $page), $url));
    return $this->returnValue($url, $write);
  }

  public function getProtocol($write = true)
  {
    $protocol = 'http';

    // If any of these match then we should use https
    if(isset($_SERVER['HTTPS']) && strncasecmp('on', $_SERVER['HTTPS'], 2) === 0)
      $protocol = 'https';

    //  It's possible that HTTPS is NULL in the case of SSL being terminated higher up the chain
    if(isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && strncasecmp('https', $_SERVER['HTTP_X_FORWARDED_PROTO'], 5) === 0)
      $protocol = 'https';

    return $this->returnValue($protocol, $write);
  }

  public function getSortByParams($part, $val, $current = null, $write = true)
  {
    if($current == null)
    {
      if(isset($_GET['sortBy']))
        $current = $_GET['sortBy'];
      else
        return null;
    }

    $sortParts = (array)explode(',', $current);
    if(count($sortParts) != 2)
      return null;

    if($part == 'by')
      $sortParts[0] = $val;
    elseif($part == 'sort')
      $sortParts[1] = $val;

    return $this->returnValue(implode(',', $sortParts), $write);
  }

  /*public function getSortParts($sortBy)
  {
    explode(',', $sortBy);
    $parts = $this->getSortByParams(null, null);
    return (array)explode(',', $parts);
  }*/

  public function isActiveTab($label)
  {
    if(!isset($_GET['__route__']))
      return $label == 'home';

    $route = $_GET['__route__'];
    switch($label)
    {
      case 'album':
      case 'albums':
        if(!empty($route) && preg_match('#^/album#', $route))
          return true;
        break;
      case 'home':
        if(preg_match('#^/$#', $route))
          return true;
        return false;
        break;
      case 'photo':
        if(!empty($route) && (preg_match('#^/photo/#', $route) || preg_match('#^/p/.+#', $route)))
          return true;
        return false;
        break;
      case 'photos':
        if(!empty($route) && (preg_match('#^/photos/#', $route) && !preg_match('#^/photos/upload#', $route)))
          return true;
        return false;
        break;
      case 'photos-album':
        if(!empty($route) && (preg_match('#^/photos/#', $route) && preg_match('#album-[0-9a-z]+#', $route)))
          return true;
        return false;
        break;
      case 'tags':
        if(!empty($route) && preg_match('#^/tags/list#', $route))
          return true;
        return false;
        break;
      case 'upload':
        if(!empty($route) && preg_match('#^/photos/upload#', $route))
          return true;
        return false;
        break;
      case 'manage':
        if(!empty($route) && preg_match('#^/manage#', $route))
          return true;
        return false;
        break;
    }
  }

  public function isMobile()
  {
    if($this->isMobile !== null)
      return $this->isMobile;

    $detect = new Mobile_Detect();
    $this->isMobile = $detect->isMobile();
    return $this->isMobile;
  }


  public function isValidMimeType($filename)
  {
    $type = get_mime_type($filename);
    if(preg_match('/jpg|jpeg|gif|png|tif|tiff$/', $type))
      return true;
    return false;
  }

  public function getTemplate($template)
  {
    if(!$this->isMobile())
      return $template;

    $mobileTemplate = str_replace('.php', '-mobile.php', $template);
    if(!file_exists($mobileTemplate) && !getTheme()->fileExists($mobileTemplate))
      return $template;

    return $mobileTemplate;
  }

  public function licenseLong($key, $write = true)
  {
    $licenses = $this->getLicenses();
    // default it to the key, if the key doesn't exist then assume it's custom
    $license = $key;
    if(isset($licenses[$key]))
      $license = sprintf('%s (%s)', $key, $licenses[$key]['name']);

    return $this->returnValue($license, $write);
  }

  public function licenseName($key, $write = true)
  {
    $licenses = $this->getLicenses();
    // default it to the key, if the key doesn't exist then assume it's custom
    $license = $key;
    if(isset($licenses[$key]))
      $license = $licenses[$key]['name'];

    return $this->returnValue($license, $write);
  }

  public function licenseLink($key, $write = true)
  {
    $licenses = $this->getLicenses();
    $link = '';
    if(isset($licenses[$key]) && isset($licenses[$key]['link']))
      $link = $licenses[$key]['link'];
    return $this->returnValue($link, $write);
  }

  public function permissionAsText($permission, $write = true)
  {
    return $this->returnValue(($permission ? 'public' : 'private'), $write);
  }

  public function plural($int, $word = null, $write = true)
  {
    $word = $this->safe($word, false);
    if(empty($word))
      return $this->returnValue(($int != 1 ? 's' : ''), $write);
    else
      return $this->returnValue(($int != 1 ? ""{$word}s"" : $word), $write);
  }

  public function selectPlural($int, $singularForm, $pluralForm, $write = true)
  {
    $singularForm = $this->safe($singularForm, false);
    $pluralForm = $this->safe($pluralForm, false);
    return $this->returnValue(($int != 1 ? $pluralForm : $singularForm), $write);
  }

  public function posessive($noun, $write = true)
  {
    if(substr($noun, -1) === 's')
      $val = sprintf('%s', $noun);
    else
      $val = sprintf(""%s's"", $noun);

    return $this->returnValue($val, $write);
  }

  public function returnValue($value, $write = true)
  {
    if($write)
      echo $value;
    else
      return $value;
  }

  public function safe($string/*[, $allowedTags], $write = true*/)
  {
    $argCnt = func_num_args();
    if($argCnt === 1)
      return $this->returnValue(htmlspecialchars($string), true);

    $args = func_get_args();
    if(gettype($args[1]) == 'string')
    {
      $write = $argCnt == 3 ? $args[2] : true;
      return $this->returnValue(strip_tags($string, $args[1]), $write);
    }
    else
    {
      $write = $argCnt == 2 ? $args[1] : true;
      return $this->returnValue(htmlspecialchars($string), $write);
    }
  }

  public function mapLinkUrl($latitude, $longitude, $zoom, $write = true)
  {
    return $this->returnValue(getMap()->linkUrl($latitude, $longitude, $zoom), $write);
  }

  public function staticMapUrl($latitude, $longitude, $zoom, $size, $type = 'roadmap', $write = true)
  {
    return $this->returnValue(getMap()->staticMap($latitude, $longitude, $zoom, $size, $type), $write);
  }

  public function timeAsText($time, $prefix = null, $suffix = null, $write = true)
  {
    if(empty($time))
      return $this->returnValue('', $write);

    $seconds = intval(time() - $time);
    $hours = intval($seconds / 3600);
    if($hours < 0)
      return $this->returnValue('--', $write);
    elseif($hours < 1)
      return $this->returnValue(""{$prefix} a few minutes ago {$suffix}"", $write);
    elseif($hours < 24)
      return $this->returnValue(""{$prefix} {$hours} "" . $this->plural($hours, 'hour', false) . "" ago {$suffix}"", $write);

    $days = intval(round($seconds / 86400));
    if($days <= 7)
      return $this->returnValue(""{$prefix} {$days} "" . $this->plural($days, 'day', false) . "" ago {$suffix}"", $write);

    $weeks = intval(round($days / 7));
    if($weeks <= 4)
      return $this->returnValue(""{$prefix} {$weeks} "" . $this->plural($weeks, 'week', false) . "" ago {$suffix}"", $write);

    $months = intval(round($days / 30));
    if($months < 12)
      return $this->returnValue(""{$prefix} {$months} "" . $this->plural($months, 'month', false) . "" ago {$suffix}"", $write);

    $years = intval(round($days / 365));
    return $this->returnValue(""{$prefix} {$years} "" . $this->plural($years, 'year', false) . "" ago {$suffix}"", $write);
  }

  /**
   * Safe equivalent of getallheaders() the work more often.
   */
  public function getAllHeaders()
  {
    // fetch values from header
    // See issue 171: getallheaders() might not be available on FastCGI or non-Apache.
    if(function_exists('getallheaders'))
    {
      $headers = getallheaders();
    }
    else
    {
      $headers = array();
      // solution suggested by http://us.php.net/manual/en/function.apache-request-headers.php#70810
      foreach ($_SERVER as $name => $value)
      {
        if (substr($name, 0, 5) == 'HTTP_')
        {
          $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
        }
      }
    }
    return $headers;
  }
}
",FALSE,,3764
3754,InitialSO.csv3754.txt,InitialGit.csv3754.txt,4,"final View parent = (View) delegate.getParent();
parent.post( new Runnable() {
    // Post in the parent's message queue to make sure the parent
    // lays out its children before we call getHitRect()
    public void run() {
        final Rect r = new Rect();
        delegate.getHitRect(r);
        r.top -= 4;
        r.bottom += 4;
        parent.setTouchDelegate( new TouchDelegate( r , delegate));
    }
});
 ","final View parent = (View) delegate.getParent();
parent.post( new Runnable() {
    // Post in the parent's message queue to make sure the parent
    // lays out its children before we call getHitRect()
    public void run() {
        final Rect r = new Rect();
        delegate.getHitRect(r);
        r.top -= 4;
        r.bottom += 4;
        parent.setTouchDelegate( new TouchDelegate( r , delegate));
    }
});
 ",TRUE,"/*
 * Copyright 2012 Kevin Sawicki <kevinsawicki@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.kevinsawicki.wishlist;

import static android.view.View.GONE;
import static android.view.View.INVISIBLE;
import static android.view.View.VISIBLE;

import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.TouchDelegate;
import android.view.View;

/**
 * Utilities for working with the {@link View} class
 */
public class ViewUtils {

  /**
   * Set visibility of given view to be gone or visible
   * <p>
   * This method has no effect if the view visibility is currently invisible
   *
   * @param view
   * @param gone
   * @return view
   */
  public static <V extends View> V setGone(final V view, final boolean gone) {
    if (view != null)
      if (gone) {
        if (GONE != view.getVisibility())
          view.setVisibility(GONE);
      } else {
        if (VISIBLE != view.getVisibility())
          view.setVisibility(VISIBLE);
      }
    return view;
  }

  /**
   * Set visibility of given view to be invisible or visible
   * <p>
   * This method has no effect if the view visibility is currently gone
   *
   * @param view
   * @param invisible
   * @return view
   */
  public static <V extends View> V setInvisible(final V view,
      final boolean invisible) {
    if (view != null)
      if (invisible) {
        if (INVISIBLE != view.getVisibility())
          view.setVisibility(INVISIBLE);
      } else {
        if (VISIBLE != view.getVisibility())
          view.setVisibility(VISIBLE);
      }
    return view;
  }

  /**
   * Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
   * Source: http://stackoverflow.com/a/1343796/5210
   * @param amount The amount of dp's to be added to all four sides of the view hit purposes.
   * @param delegate The view that needs to have its hit rect increased.
   */
  public static void increaseHitRectBy(final int amount, final View delegate) {
    increaseHitRectBy(amount, amount, amount, amount, delegate);
  }

  /**
   * Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
   * Source: http://stackoverflow.com/a/1343796/5210
   * @param top The amount of dp's to be added to the top for hit purposes.
   * @param left The amount of dp's to be added to the left for hit purposes.
   * @param bottom The amount of dp's to be added to the bottom for hit purposes.
   * @param right The amount of dp's to be added to the right for hit purposes.
   * @param delegate The view that needs to have its hit rect increased.
   */
  public static void increaseHitRectBy(final int top, final int left, final int bottom, final int right, final View delegate) {
    final View parent = (View) delegate.getParent();
    if (parent != null && delegate.getContext() != null) {
      parent.post(new Runnable() {
        // Post in the parent's message queue to make sure the parent
        // lays out its children before we call getHitRect()
        public void run() {
          final float densityDpi = delegate.getContext().getResources().getDisplayMetrics().densityDpi;
          final Rect r = new Rect();
          delegate.getHitRect(r);
          r.top -= transformToDensityPixel(top, densityDpi);
          r.left -= transformToDensityPixel(left, densityDpi);
          r.bottom += transformToDensityPixel(bottom, densityDpi);
          r.right += transformToDensityPixel(right, densityDpi);
          parent.setTouchDelegate(new TouchDelegate(r, delegate));
        }
      });
    }
  }

  public static int transformToDensityPixel(int regularPixel, DisplayMetrics displayMetrics) {
      return transformToDensityPixel(regularPixel, displayMetrics.densityDpi);
  }

  public static int transformToDensityPixel(int regularPixel, float densityDpi) {
      return (int) (regularPixel * densityDpi);
  }

  private ViewUtils() {

  }
}
","/*
 * Copyright 2012 Kevin Sawicki <kevinsawicki@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.github.kevinsawicki.wishlist;

import static android.view.View.GONE;
import static android.view.View.INVISIBLE;
import static android.view.View.VISIBLE;

import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.TouchDelegate;
import android.view.View;

/**
 * Utilities for working with the {@link View} class
 */
public class ViewUtils {

  /**
   * Set visibility of given view to be gone or visible
   * <p>
   * This method has no effect if the view visibility is currently invisible
   *
   * @param view
   * @param gone
   * @return view
   */
  public static <V extends View> V setGone(final V view, final boolean gone) {
    if (view != null)
      if (gone) {
        if (GONE != view.getVisibility())
          view.setVisibility(GONE);
      } else {
        if (VISIBLE != view.getVisibility())
          view.setVisibility(VISIBLE);
      }
    return view;
  }

  /**
   * Set visibility of given view to be invisible or visible
   * <p>
   * This method has no effect if the view visibility is currently gone
   *
   * @param view
   * @param invisible
   * @return view
   */
  public static <V extends View> V setInvisible(final V view,
      final boolean invisible) {
    if (view != null)
      if (invisible) {
        if (INVISIBLE != view.getVisibility())
          view.setVisibility(INVISIBLE);
      } else {
        if (VISIBLE != view.getVisibility())
          view.setVisibility(VISIBLE);
      }
    return view;
  }

  /**
   * Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
   * Source: http://stackoverflow.com/a/1343796/5210
   * @param amount The amount of dp's to be added to all four sides of the view hit purposes.
   * @param delegate The view that needs to have its hit rect increased.
   */
  public static void increaseHitRectBy(final int amount, final View delegate) {
    increaseHitRectBy(amount, amount, amount, amount, delegate);
  }

  /**
   * Increases the hit rect of a view. This should be used when an icon is small and cannot be easily tapped on.
   * Source: http://stackoverflow.com/a/1343796/5210
   * @param top The amount of dp's to be added to the top for hit purposes.
   * @param left The amount of dp's to be added to the left for hit purposes.
   * @param bottom The amount of dp's to be added to the bottom for hit purposes.
   * @param right The amount of dp's to be added to the right for hit purposes.
   * @param delegate The view that needs to have its hit rect increased.
   */
  public static void increaseHitRectBy(final int top, final int left, final int bottom, final int right, final View delegate) {
    final View parent = (View) delegate.getParent();
    if (parent != null && delegate.getContext() != null) {
      parent.post(new Runnable() {
        // Post in the parent's message queue to make sure the parent
        // lays out its children before we call getHitRect()
        public void run() {
          final float densityDpi = delegate.getContext().getResources().getDisplayMetrics().densityDpi;
          final Rect r = new Rect();
          delegate.getHitRect(r);
          r.top -= transformToDensityPixel(top, densityDpi);
          r.left -= transformToDensityPixel(left, densityDpi);
          r.bottom += transformToDensityPixel(bottom, densityDpi);
          r.right += transformToDensityPixel(right, densityDpi);
          parent.setTouchDelegate(new TouchDelegate(r, delegate));
        }
      });
    }
  }

  public static int transformToDensityPixel(int regularPixel, DisplayMetrics displayMetrics) {
      return transformToDensityPixel(regularPixel, displayMetrics.densityDpi);
  }

  public static int transformToDensityPixel(int regularPixel, float densityDpi) {
      return (int) (regularPixel * densityDpi);
  }

  private ViewUtils() {

  }
}
",TRUE,,3771
3764,InitialSO.csv3764.txt,InitialGit.csv3764.txt,3,"import re

def mycmp(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(""."")]
    return cmp(normalize(version1), normalize(version2))
 ","import re

def mycmp(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(""."")]
    return cmp(normalize(version1), normalize(version2))
 assert mycmp(""1"", ""1"") == 0
assert mycmp(""2.1"", ""2.2"") < 0
assert mycmp(""3.0.4.10"", ""3.0.4.2"") > 0
assert mycmp(""4.08"", ""4.08.01"") < 0
assert mycmp(""3.2.1.9.8144"", ""3.2"") > 0
assert mycmp(""3.2"", ""3.2.1.9.8144"") < 0
assert mycmp(""1.2"", ""2.1"") < 0
assert mycmp(""2.1"", ""1.2"") > 0
assert mycmp(""5.6.7"", ""5.6.7"") == 0
assert mycmp(""1.01.1"", ""1.1.1"") == 0
assert mycmp(""1.1.1"", ""1.01.1"") == 0
assert mycmp(""1"", ""1.0"") == 0
assert mycmp(""1.0"", ""1"") == 0
assert mycmp(""1.0"", ""1.0.1"") < 0
assert mycmp(""1.0.1"", ""1.0"") > 0
assert mycmp(""1.0.2.0"", ""1.0.2"") == 0
 ",FALSE,"
# if we got here then someone tried to import pysqlite.dbapi2
# this will only be allowed if the script is greater that version 1.0

import warnings
import re

# Credit gnud on stackoverflow:
#  see http://stackoverflow.com/questions/1714027/version-number-comparison/1714190#1714190
def xbmcVerCmp(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(""."")]
    return cmp(normalize(version1), normalize(version2))

# Not sure why this might fail but ....
try:
    import __main__
    xbmcapiversion = __main__.__xbmcapiversion__
except:
    xbmcapiversion = ""1.0""
    warnings.warn(""For some reason the module '"" + str(__name__) + ""' couldn't get access to '__main__'. This may prevent certain backward compatility modes from operating correctly."")

# if the xbmcapiversion is either not set (because trying to get it failed or 
#  the script was invoked in an odd manner from xbmc) ...
if (xbmcVerCmp(xbmcapiversion,""1.0"") <= 0):
    # then import sqlite3 in place of dbapi2
    try:
        import sqlite3 as dbapi2
    except Exception, e:
        warnings.warn(""Unable to import sqlite3. This probably means you're on a version of python prior to 2.5 and trying to run an old script."")
        raise e

    # ask politely :)
    warnings.warn(""DeprecationWarning: the pysqlite2 module is deprecated; please change your script to use sqlite3."")
else:
    raise DeprecationWarning(""You cannot use pysqlite2 while depending on version "" + str(xbmcapiversion) + "" of the xbmc.python api. Please use sqlite3 instead."")

","
# if we got here then someone tried to import pysqlite.dbapi2
# this will only be allowed if the script is greater that version 1.0

import warnings
import re

# Credit gnud on stackoverflow:
#  see http://stackoverflow.com/questions/1714027/version-number-comparison/1714190#1714190
def xbmcVerCmp(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(""."")]
    return cmp(normalize(version1), normalize(version2))

# Not sure why this might fail but ....
try:
    import __main__
    xbmcapiversion = __main__.__xbmcapiversion__
except:
    xbmcapiversion = ""1.0""
    warnings.warn(""For some reason the module '"" + str(__name__) + ""' couldn't get access to '__main__'. This may prevent certain backward compatility modes from operating correctly."")

# if the xbmcapiversion is either not set (because trying to get it failed or 
#  the script was invoked in an odd manner from xbmc) ...
if (xbmcVerCmp(xbmcapiversion,""1.0"") <= 0):
    # then import sqlite3 in place of dbapi2
    try:
        import sqlite3 as dbapi2
    except Exception, e:
        warnings.warn(""Unable to import sqlite3. This probably means you're on a version of python prior to 2.5 and trying to run an old script."")
        raise e

    # ask politely :)
    warnings.warn(""DeprecationWarning: the pysqlite2 module is deprecated; please change your script to use sqlite3."")
else:
    raise DeprecationWarning(""You cannot use pysqlite2 while depending on version "" + str(xbmcapiversion) + "" of the xbmc.python api. Please use sqlite3 instead."")

",TRUE,,3772
3771,InitialSO.csv3771.txt,InitialGit.csv3771.txt,8,"import java.util.*;
import java.util.regex.*;

class FindUrls
{
    public static List<String> extractUrls(String input) {
        List<String> result = new ArrayList<String>();

        Pattern pattern = Pattern.compile(
            ""\\b(((ht|f)tp(s?)\\:\\/\\/|~\\/|\\/)|www.)"" + 
            ""(\\w+:\\w+@)?(([-\\w]+\\.)+(com|org|net|gov"" + 
            ""|mil|biz|info|mobi|name|aero|jobs|museum"" + 
            ""|travel|[a-z]{2}))(:[\\d]{1,5})?"" + 
            ""(((\\/([-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?"" + 
            ""((\\?([-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" + 
            ""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)"" + 
            ""(&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" + 
            ""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*"" + 
            ""(#([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)?\\b"");

        Matcher matcher = pattern.matcher(input);
        while (matcher.find()) {
            result.add(matcher.group());
        }

        return result;
    }
}
 ","import java.util.*;
import java.util.regex.*;

class FindUrls
{
    public static List<String> extractUrls(String input) {
        List<String> result = new ArrayList<String>();

        Pattern pattern = Pattern.compile(
            ""\\b(((ht|f)tp(s?)\\:\\/\\/|~\\/|\\/)|www.)"" + 
            ""(\\w+:\\w+@)?(([-\\w]+\\.)+(com|org|net|gov"" + 
            ""|mil|biz|info|mobi|name|aero|jobs|museum"" + 
            ""|travel|[a-z]{2}))(:[\\d]{1,5})?"" + 
            ""(((\\/([-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?"" + 
            ""((\\?([-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" + 
            ""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)"" + 
            ""(&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" + 
            ""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*"" + 
            ""(#([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)?\\b"");

        Matcher matcher = pattern.matcher(input);
        while (matcher.find()) {
            result.add(matcher.group());
        }

        return result;
    }
}
 ",TRUE,"package com.wellsandwhistles.android.redditsp.common;

/** This file was either copied or modified from https://github.com/QuantumBadger/RedReader
 * under the Free Software Foundation General Public License version 3*/

import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import android.os.Parcelable;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.text.ClipboardManager;
import android.util.Log;
import com.wellsandwhistles.android.redditsp.R;
import com.wellsandwhistles.android.redditsp.activities.*;
import com.wellsandwhistles.android.redditsp.cache.CacheRequest;
import com.wellsandwhistles.android.redditsp.fragments.UserProfileDialog;
import com.wellsandwhistles.android.redditsp.image.*;
import com.wellsandwhistles.android.redditsp.reddit.things.RedditPost;
import com.wellsandwhistles.android.redditsp.reddit.url.RedditURLParser;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LinkHandler {

	public static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());

	public static final Pattern
			youtubeDotComPattern = Pattern.compile(""^https?://[\\.\\w]*youtube\\.\\w+/.*""),
			youtuDotBePattern = Pattern.compile(""^https?://[\\.\\w]*youtu\\.be/([A-Za-z0-9\\-_]+)(\\?.*|).*""),
			vimeoPattern = Pattern.compile(""^https?://[\\.\\w]*vimeo\\.\\w+/.*""),
			googlePlayPattern = Pattern.compile(""^https?://[\\.\\w]*play\\.google\\.\\w+/.*"");

	public enum LinkAction {
		SHARE(R.string.action_share),
		COPY_URL(R.string.action_copy_link),
		SHARE_IMAGE(R.string.action_share_image),
		SAVE_IMAGE(R.string.action_save),
		EXTERNAL(R.string.action_external);

		public final int descriptionResId;

		LinkAction(final int descriptionResId){
			this.descriptionResId = descriptionResId;
		}
	}
	public static void onLinkClicked(AppCompatActivity activity, String url) {
		onLinkClicked(activity, url, false);
	}

	public static void onLinkClicked(AppCompatActivity activity, String url, boolean forceNoImage) {
		onLinkClicked(activity, url, forceNoImage, null);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post) {

		onLinkClicked(activity, url, forceNoImage, post, null, 0);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post,
			final ImgurAPI.AlbumInfo albumInfo,
			final int albumImageIndex) {
		onLinkClicked(activity, url, forceNoImage, post, albumInfo, albumImageIndex, false);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post,
			final ImgurAPI.AlbumInfo albumInfo,
			final int albumImageIndex,
			final boolean fromExternalIntent) {

		final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(activity);

		//todo change this
		if(url.startsWith(""rr://"")) {

			final Uri rrUri = Uri.parse(url);

			if(rrUri.getAuthority().equals(""msg"")) {
				new Handler().post(new Runnable() {
					@Override
					public void run() {
						final AlertDialog.Builder builder = new AlertDialog.Builder(activity);
						builder.setTitle(rrUri.getQueryParameter(""title""));
						builder.setMessage(rrUri.getQueryParameter(""message""));
						AlertDialog alert = builder.create();
						alert.show();
					}
				});

				return;
			}
		}

		if(url.startsWith(""r/"") || url.startsWith(""u/"")) {
			url = ""/"" + url;
		}

		if(url.startsWith(""/"")) {
			url = ""https://reddit.com"" + url;
		}

		if(!url.contains(""://"")) {
			url = ""http://"" + url;
		}

		if(!forceNoImage && isProbablyAnImage(url)) {
			final Intent intent = new Intent(activity, ImageViewActivity.class);
			intent.setData(Uri.parse(url));
			intent.putExtra(""post"", post);

			if(albumInfo != null) {
				intent.putExtra(""album"", albumInfo.id);
				intent.putExtra(""albumImageIndex"", albumImageIndex);
			}

			activity.startActivity(intent);
			return;
		}

		if(!forceNoImage && imgurAlbumPattern.matcher(url).matches()) {

			//todo delete albumview
			final PrefsUtility.AlbumViewMode albumViewMode
					= PrefsUtility.pref_behaviour_albumview_mode();

			switch(albumViewMode) {

				case INTERNAL_LIST: {
					final Intent intent = new Intent(activity, AlbumListingActivity.class);
					intent.setData(Uri.parse(url));
					intent.putExtra(""post"", post);
					activity.startActivity(intent);
					return;
				}

				case INTERNAL_BROWSER: {
					final Intent intent = new Intent(activity, WebViewActivity.class);
					intent.putExtra(""url"", url);
					intent.putExtra(""post"", post);
					activity.startActivity(intent);
					return;
				}

				case EXTERNAL_BROWSER: {
					openWebBrowser(activity, Uri.parse(url), fromExternalIntent);
					return;
				}
			}
		}

		final RedditURLParser.RedditURL redditURL = RedditURLParser.parse(Uri.parse(url));
		if(redditURL != null) {

			switch(redditURL.pathType()) {

				case RedditURLParser.SUBREDDIT_POST_LISTING_URL:
				case RedditURLParser.MULTIREDDIT_POST_LISTING_URL:
				case RedditURLParser.USER_POST_LISTING_URL:
				case RedditURLParser.UNKNOWN_POST_LISTING_URL: {
					final Intent intent = new Intent(activity, PostListingActivity.class);
					intent.setData(redditURL.generateJsonUri());
					activity.startActivityForResult(intent, 1);
					return;
				}

				case RedditURLParser.POST_COMMENT_LISTING_URL:
				case RedditURLParser.USER_COMMENT_LISTING_URL: {
					final Intent intent = new Intent(activity, CommentListingActivity.class);
					intent.setData(redditURL.generateJsonUri());
					activity.startActivityForResult(intent, 1);
					return;
				}

				case RedditURLParser.USER_PROFILE_URL: {
					UserProfileDialog.newInstance(redditURL.asUserProfileURL().username).show(activity.getSupportFragmentManager(), null);
					return;
				}
			}
		}

		// Use a browser

		if(!PrefsUtility.pref_behaviour_useinternalbrowser(activity, sharedPreferences)) {
			if(openWebBrowser(activity, Uri.parse(url), fromExternalIntent)) {
				return;
			}
		}

		if(youtubeDotComPattern.matcher(url).matches()
				|| vimeoPattern.matcher(url).matches()
				|| googlePlayPattern.matcher(url).matches()) {
			if(openWebBrowser(activity, Uri.parse(url), fromExternalIntent)) {
				return;
			}
		}

		final Matcher youtuDotBeMatcher = youtuDotBePattern.matcher(url);

		if(youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
			final String youtuBeUrl = ""http://youtube.com/watch?v="" + youtuDotBeMatcher.group(1)
					+ (youtuDotBeMatcher.group(2).length() > 0 ? ""&"" + youtuDotBeMatcher.group(2).substring(1) : """");
			if(openWebBrowser(activity, Uri.parse(youtuBeUrl), fromExternalIntent)) {
				return;
			}
		}

		final Intent intent = new Intent(activity, WebViewActivity.class);
		intent.putExtra(""url"", url);
		intent.putExtra(""post"", post);
		activity.startActivity(intent);
	}

	public static void onLinkLongClicked(AppCompatActivity activity, String uri){
		onLinkLongClicked(activity, uri, false);
	}

	public static void onLinkLongClicked(final AppCompatActivity activity,
	                                        final String uri,
	                                        final boolean forceNoImage) {
		if (uri == null){
			return;
		}

		final EnumSet<LinkHandler.LinkAction> itemPref = PrefsUtility.pref_menus_link_context_items(activity, PreferenceManager.getDefaultSharedPreferences(activity));

		if (itemPref.isEmpty()) {
			return;
		}

		final ArrayList<LinkMenuItem> menu = new ArrayList<>();

		if (itemPref.contains(LinkAction.COPY_URL)) {
			menu.add(new LinkMenuItem(activity, R.string.action_copy_link, LinkAction.COPY_URL));
		}
		if (itemPref.contains(LinkAction.EXTERNAL)) {
			menu.add(new LinkMenuItem(activity, R.string.action_external, LinkAction.EXTERNAL));
		}
		if (itemPref.contains(LinkAction.SAVE_IMAGE) && isProbablyAnImage(uri) && !forceNoImage) {
			menu.add(new LinkMenuItem(activity, R.string.action_save_image, LinkAction.SAVE_IMAGE));
		}
		if (itemPref.contains(LinkAction.SHARE)) {
			menu.add(new LinkMenuItem(activity, R.string.action_share, LinkAction.SHARE));
		}
		if (itemPref.contains(LinkAction.SHARE_IMAGE) && isProbablyAnImage(uri) && !forceNoImage) {
			menu.add(new LinkMenuItem(activity, R.string.action_share_image, LinkAction.SHARE_IMAGE));
		}
		final String[] menuText = new String[menu.size()];

		for (int i = 0; i < menuText.length; i++) {
			menuText[i] = menu.get(i).title;
		}

		final AlertDialog.Builder builder = new AlertDialog.Builder(activity);

		builder.setItems(menuText, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				onActionMenuItemSelected(uri, activity, menu.get(which).action);
			}
		});

		//builder.setNeutralButton(R.string.dialog_cancel, null);

		final AlertDialog alert = builder.create();
		alert.setCanceledOnTouchOutside(true);
		alert.show();
	}

	public static void onActionMenuItemSelected(String uri, AppCompatActivity activity, LinkAction action){
		switch (action){
			case SHARE:
				final Intent mailer = new Intent(Intent.ACTION_SEND);
				mailer.setType(""text/plain"");
				mailer.putExtra(Intent.EXTRA_TEXT, uri);
				activity.startActivity(Intent.createChooser(mailer, activity.getString(R.string.action_share)));
				break;
			case COPY_URL:
				ClipboardManager manager = (ClipboardManager) activity.getSystemService(Context.CLIPBOARD_SERVICE);
				manager.setText(uri);
				break;

			case EXTERNAL:
				final Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(Uri.parse(uri));
				activity.startActivity(intent);
				break;
			case SHARE_IMAGE:
				((BaseActivity)activity).requestPermissionWithCallback(Manifest.permission.WRITE_EXTERNAL_STORAGE, new ShareImageCallback(activity, uri));
				break;
			case SAVE_IMAGE:
				((BaseActivity)activity).requestPermissionWithCallback(Manifest.permission.WRITE_EXTERNAL_STORAGE, new SaveImageCallback(activity, uri));
				break;
		}
	}
	public static boolean openWebBrowser(AppCompatActivity activity, Uri uri, final boolean fromExternalIntent) {

		if(!fromExternalIntent) {
			try {
				final Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(uri);
				activity.startActivity(intent);
				return true;

			} catch(Exception e) {
				General.quickToast(activity, ""Failed to open url \"""" + uri.toString() + ""\"" in external browser"");
			}

		} else {

			// We want to make sure we don't just pass this back to ourselves

			final Intent baseIntent = new Intent(Intent.ACTION_VIEW);
			baseIntent.setData(uri);

			final ArrayList<Intent> targetIntents = new ArrayList<>();

			for (final ResolveInfo info : activity.getPackageManager().queryIntentActivities(baseIntent, 0)) {

				final String packageName = info.activityInfo.packageName;
				Log.i(""RRDEBUG"", ""Considering "" + packageName);

				if (packageName != null && !packageName.startsWith(""com.wellsandwhistles.android.redditsp"")) {
					final Intent intent = new Intent(Intent.ACTION_VIEW);
					intent.setData(uri);
					intent.setPackage(packageName);
					targetIntents.add(intent);
				}
			}

			if(!targetIntents.isEmpty()) {

				final Intent chooserIntent = Intent.createChooser(
						targetIntents.remove(0),
						activity.getString(R.string.open_with));

				if(!targetIntents.isEmpty()) {
					chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, targetIntents.toArray(new Parcelable[]{}));
				}
				activity.startActivity(chooserIntent);

				return true;
			}
		}

		return false;
	}

	public static final Pattern imgurPattern = Pattern.compile("".*[^A-Za-z]imgur\\.com/(\\w+).*""),
			imgurAlbumPattern = Pattern.compile("".*[^A-Za-z]imgur\\.com/(a|gallery)/(\\w+).*""),
			qkmePattern1 = Pattern.compile("".*[^A-Za-z]qkme\\.me/(\\w+).*""),
			qkmePattern2 = Pattern.compile("".*[^A-Za-z]quickmeme\\.com/meme/(\\w+).*""),
			lvmePattern = Pattern.compile("".*[^A-Za-z]livememe\\.com/(\\w+).*""),
			gfycatPattern = Pattern.compile("".*[^A-Za-z]gfycat\\.com/(\\w+).*""),
			streamablePattern = Pattern.compile("".*[^A-Za-z]streamable\\.com/(\\w+).*""),
			reddituploadsPattern = Pattern.compile("".*[^A-Za-z]i\\.reddituploads\\.com/(\\w+).*""),
			imgflipPattern = Pattern.compile("".*[^A-Za-z]imgflip\\.com/i/(\\w+).*""),
			makeamemePattern = Pattern.compile("".*[^A-Za-z]makeameme\\.org/meme/([\\w\\-]+).*"");

	public static boolean isProbablyAnImage(final String url) {

		{
			final Matcher matchImgur = imgurPattern.matcher(url);

			if(matchImgur.find()) {
				final String imgId = matchImgur.group(1);
				if(imgId.length() > 2 && !imgId.startsWith(""gallery"")) {
					return true;
				}
			}
		}

		{
			final Matcher matchGfycat = gfycatPattern.matcher(url);

			if(matchGfycat.find()) {
				final String imgId = matchGfycat.group(1);
				if(imgId.length() > 5) {
					return true;
				}
			}
		}

		{
			final Matcher matchStreamable = streamablePattern.matcher(url);

			if(matchStreamable.find()) {
				final String imgId = matchStreamable.group(1);
				if(imgId.length() > 2) {
					return true;
				}
			}
		}

		{
			final Matcher matchRedditUploads = reddituploadsPattern.matcher(url);

			if(matchRedditUploads.find()) {
				final String imgId = matchRedditUploads.group(1);
				if(imgId.length() > 10) {
					return true;
				}
			}
		}

		{
			final Matcher matchImgflip = imgflipPattern.matcher(url);

			if(matchImgflip.find()) {
				final String imgId = matchImgflip.group(1);
				if(imgId.length() > 3) {
					return true;
				}
			}
		}

		{
			final Matcher matchMakeameme = makeamemePattern.matcher(url);

			if(matchMakeameme.find()) {
				final String imgId = matchMakeameme.group(1);
				if(imgId.length() > 3) {
					return true;
				}
			}
		}

		return getImageUrlPatternMatch(url) != null;
	}

	private static abstract class ImageInfoRetryListener implements GetImageInfoListener {

		private final GetImageInfoListener mListener;

		private ImageInfoRetryListener(final GetImageInfoListener listener) {
			mListener = listener;
		}

		@Override
		public abstract void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage);

		@Override
		public void onSuccess(final ImageInfo info) {
			mListener.onSuccess(info);
		}

		@Override
		public void onNotAnImage() {
			mListener.onNotAnImage();
		}
	}

	public static void getImgurImageInfo(
			final Context context,
			final String imgId,
			final int priority,
			final int listId,
			final boolean returnUrlOnFailure,
			final GetImageInfoListener listener) {

		Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v3 with auth"");

		ImgurAPIV3.getImageInfo(context, imgId, priority, listId, true, new ImageInfoRetryListener(listener) {
			@Override
			public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

				Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v3 without auth"");

				ImgurAPIV3.getImageInfo(context, imgId, priority, listId, false, new ImageInfoRetryListener(listener) {
					@Override
					public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

						Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v2"");

						ImgurAPI.getImageInfo(context, imgId, priority, listId, new ImageInfoRetryListener(listener) {
							@Override
							public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

								Log.i(""getImgurImageInfo"", ""All API requests failed!"");

								if(returnUrlOnFailure) {
									listener.onSuccess(new ImageInfo(""https://i.imgur.com/"" + imgId + "".jpg"", null));

								} else {
									listener.onFailure(type, t, status, readableMessage);
								}
							}
						});
					}
				});
			}
		});
	}

	private static abstract class AlbumInfoRetryListener implements GetAlbumInfoListener {

		private final GetAlbumInfoListener mListener;

		private AlbumInfoRetryListener(final GetAlbumInfoListener listener) {
			mListener = listener;
		}

		@Override
		public abstract void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage);

		@Override
		public void onSuccess(final ImgurAPI.AlbumInfo info) {
			mListener.onSuccess(info);
		}
	}

	public static void getImgurAlbumInfo(
			final Context context,
			final String albumId,
			final int priority,
			final int listId,
			final GetAlbumInfoListener listener) {

		Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v3 with auth"");

		ImgurAPIV3.getAlbumInfo(context, albumId, priority, listId, true, new AlbumInfoRetryListener(listener) {
			@Override
			public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

				Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v3 without auth"");

				ImgurAPIV3.getAlbumInfo(context, albumId, priority, listId, false, new AlbumInfoRetryListener(listener) {
					@Override
					public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

						Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v2"");

						ImgurAPI.getAlbumInfo(context, albumId, priority, listId, new AlbumInfoRetryListener(listener) {
							@Override
							public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

								Log.i(""getImgurImageInfo"", ""All API requests failed!"");
								listener.onFailure(type, t, status, readableMessage);
							}
						});

					}
				});
			}
		});
	}

	public static void getImageInfo(
			final Context context,
			final String url,
			final int priority,
			final int listId,
			final GetImageInfoListener listener) {

		{
			final Matcher matchImgur = imgurPattern.matcher(url);

			if(matchImgur.find()) {
				final String imgId = matchImgur.group(1);
				if(imgId.length() > 2 && !imgId.startsWith(""gallery"")) {
					getImgurImageInfo(context, imgId, priority, listId, true, listener);
					return;
				}
			}
		}

		{
			final Matcher matchGfycat = gfycatPattern.matcher(url);

			if(matchGfycat.find()) {
				final String imgId = matchGfycat.group(1);
				if(imgId.length() > 5) {
					GfycatAPI.getImageInfo(context, imgId, priority, listId, listener);
					return;
				}
			}
		}

		{
			final Matcher matchStreamable = streamablePattern.matcher(url);

			if(matchStreamable.find()) {
				final String imgId = matchStreamable.group(1);
				if(imgId.length() > 2) {
					StreamableAPI.getImageInfo(context, imgId, priority, listId, listener);
					return;
				}
			}
		}

		{
			final Matcher matchRedditUploads = reddituploadsPattern.matcher(url);

			if(matchRedditUploads.find()) {
				final String imgId = matchRedditUploads.group(1);
				if(imgId.length() > 10) {
					listener.onSuccess(new ImageInfo(url, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		{
			final Matcher matchImgflip = imgflipPattern.matcher(url);

			if(matchImgflip.find()) {
				final String imgId = matchImgflip.group(1);
				if(imgId.length() > 3) {
					final String imageUrl = ""https://i.imgflip.com/"" + imgId + "".jpg"";
					listener.onSuccess(new ImageInfo(imageUrl, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		{
			final Matcher matchMakeameme = makeamemePattern.matcher(url);

			if(matchMakeameme.find()) {
				final String imgId = matchMakeameme.group(1);
				if(imgId.length() > 3) {
					final String imageUrl = ""https://media.makeameme.org/created/"" + imgId + "".jpg"";
					listener.onSuccess(new ImageInfo(imageUrl, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		final ImageInfo imageUrlPatternMatch = getImageUrlPatternMatch(url);

		if(imageUrlPatternMatch != null) {
			listener.onSuccess(imageUrlPatternMatch);
		} else {
			listener.onNotAnImage();
		}
	}

	private static ImageInfo getImageUrlPatternMatch(final String url) {

		final String urlLower = General.asciiLowercase(url);

		final String[] imageExtensions = {"".jpg"", "".jpeg"", "".png""};

		final String[] videoExtensions = {"".webm"", "".mp4"", "".h264"", "".gifv"", "".mkv"", "".3gp""};


		for(final String ext: imageExtensions) {
			if(urlLower.endsWith(ext)) {
				return new ImageInfo(url, ImageInfo.MediaType.IMAGE);
			}
		}

		for(final String ext: videoExtensions) {
			if(urlLower.endsWith(ext)) {
				return new ImageInfo(url, ImageInfo.MediaType.VIDEO);
			}
		}

		if(urlLower.endsWith("".gif"")) {
			return new ImageInfo(url, ImageInfo.MediaType.GIF);
		}


		if(url.contains(""?"")) {

			final String urlBeforeQ = urlLower.split(""\\?"")[0];

			for(final String ext: imageExtensions) {
				if(urlBeforeQ.endsWith(ext)) {
					return new ImageInfo(url, ImageInfo.MediaType.IMAGE);
				}
			}

			for(final String ext: videoExtensions) {
				if(urlBeforeQ.endsWith(ext)) {
					return new ImageInfo(url, ImageInfo.MediaType.VIDEO);
				}
			}

			if(urlBeforeQ.endsWith("".gif"")) {
				return new ImageInfo(url, ImageInfo.MediaType.GIF);
			}
		}

		final Matcher matchQkme1 = qkmePattern1.matcher(url);

		if(matchQkme1.find()) {
			final String imgId = matchQkme1.group(1);
			if(imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://i.qkme.me/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		final Matcher matchQkme2 = qkmePattern2.matcher(url);

		if(matchQkme2.find()) {
			final String imgId = matchQkme2.group(1);
			if (imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://i.qkme.me/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		final Matcher matchLvme = lvmePattern.matcher(url);

		if(matchLvme.find()) {
			final String imgId = matchLvme.group(1);
			if (imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://www.livememe.com/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		return null;

	}

	public static LinkedHashSet<String> computeAllLinks(final String text) {

		final LinkedHashSet<String> result = new LinkedHashSet<>();

		// From http://stackoverflow.com/a/1806161/1526861
		// TODO may not handle .co.uk, similar (but should handle .co/.us/.it/etc fine)
		final Pattern urlPattern = Pattern.compile(""\\b((((ht|f)tp(s?)\\:\\/\\/|~\\/|\\/)|www.)"" +
				""(\\w+:\\w+@)?(([-\\w]+\\.)+(com|org|net|gov"" +
				""|mil|biz|info|mobi|name|aero|jobs|museum"" +
				""|travel|[a-z]{2}))(:[\\d]{1,5})?"" +
				""(((\\/([-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?"" +
				""((\\?([-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" +
				""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)"" +
				""(&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" +
				""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*"" +
				""(#([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)?)\\b"");

		final Matcher urlMatcher = urlPattern.matcher(text);

		while(urlMatcher.find()) {
			result.add(urlMatcher.group(1));
		}

		final Matcher subredditMatcher = Pattern.compile(""(?<!\\w)(/?[ru]/\\w+)\\b"").matcher(text);

		while(subredditMatcher.find()) {
			result.add(subredditMatcher.group(1));
		}

		return result;
	}
	private static class LinkMenuItem {
		public final String title;
		public final LinkAction action;

		private LinkMenuItem(Context context, int titleRes, LinkAction action) {
			this.title = context.getString(titleRes);
			this.action = action;
		}
	}
}
","package com.wellsandwhistles.android.redditsp.common;

/** This file was either copied or modified from https://github.com/QuantumBadger/RedReader
 * under the Free Software Foundation General Public License version 3*/

import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import android.os.Parcelable;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.text.ClipboardManager;
import android.util.Log;
import com.wellsandwhistles.android.redditsp.R;
import com.wellsandwhistles.android.redditsp.activities.*;
import com.wellsandwhistles.android.redditsp.cache.CacheRequest;
import com.wellsandwhistles.android.redditsp.fragments.UserProfileDialog;
import com.wellsandwhistles.android.redditsp.image.*;
import com.wellsandwhistles.android.redditsp.reddit.things.RedditPost;
import com.wellsandwhistles.android.redditsp.reddit.url.RedditURLParser;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LinkHandler {

	public static final Pattern
			youtubeDotComPattern = Pattern.compile(""^https?://[\\.\\w]*youtube\\.\\w+/.*""),
			youtuDotBePattern = Pattern.compile(""^https?://[\\.\\w]*youtu\\.be/([A-Za-z0-9\\-_]+)(\\?.*|).*""),
			vimeoPattern = Pattern.compile(""^https?://[\\.\\w]*vimeo\\.\\w+/.*""),
			googlePlayPattern = Pattern.compile(""^https?://[\\.\\w]*play\\.google\\.\\w+/.*"");

	public enum LinkAction {
		SHARE(R.string.action_share),
		COPY_URL(R.string.action_copy_link),
		SHARE_IMAGE(R.string.action_share_image),
		SAVE_IMAGE(R.string.action_save),
		EXTERNAL(R.string.action_external);

		public final int descriptionResId;

		LinkAction(final int descriptionResId){
			this.descriptionResId = descriptionResId;
		}
	}
	public static void onLinkClicked(AppCompatActivity activity, String url) {
		onLinkClicked(activity, url, false);
	}

	public static void onLinkClicked(AppCompatActivity activity, String url, boolean forceNoImage) {
		onLinkClicked(activity, url, forceNoImage, null);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post) {

		onLinkClicked(activity, url, forceNoImage, post, null, 0);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post,
			final ImgurAPI.AlbumInfo albumInfo,
			final int albumImageIndex) {
		onLinkClicked(activity, url, forceNoImage, post, albumInfo, albumImageIndex, false);
	}

	public static void onLinkClicked(
			final AppCompatActivity activity,
			String url,
			final boolean forceNoImage,
			final RedditPost post,
			final ImgurAPI.AlbumInfo albumInfo,
			final int albumImageIndex,
			final boolean fromExternalIntent) {

		final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(activity);

		//todo change this
		if(url.startsWith(""rr://"")) {

			final Uri rrUri = Uri.parse(url);

			if(rrUri.getAuthority().equals(""msg"")) {
				new Handler().post(new Runnable() {
					@Override
					public void run() {
						final AlertDialog.Builder builder = new AlertDialog.Builder(activity);
						builder.setTitle(rrUri.getQueryParameter(""title""));
						builder.setMessage(rrUri.getQueryParameter(""message""));
						AlertDialog alert = builder.create();
						alert.show();
					}
				});

				return;
			}
		}

		if(url.startsWith(""r/"") || url.startsWith(""u/"")) {
			url = ""/"" + url;
		}

		if(url.startsWith(""/"")) {
			url = ""https://reddit.com"" + url;
		}

		if(!url.contains(""://"")) {
			url = ""http://"" + url;
		}

		if(!forceNoImage && isProbablyAnImage(url)) {
			final Intent intent = new Intent(activity, ImageViewActivity.class);
			intent.setData(Uri.parse(url));
			intent.putExtra(""post"", post);

			if(albumInfo != null) {
				intent.putExtra(""album"", albumInfo.id);
				intent.putExtra(""albumImageIndex"", albumImageIndex);
			}

			activity.startActivity(intent);
			return;
		}

		if(!forceNoImage && imgurAlbumPattern.matcher(url).matches()) {

			//todo delete albumview
			final PrefsUtility.AlbumViewMode albumViewMode
					= PrefsUtility.pref_behaviour_albumview_mode();

			switch(albumViewMode) {

				case INTERNAL_LIST: {
					final Intent intent = new Intent(activity, AlbumListingActivity.class);
					intent.setData(Uri.parse(url));
					intent.putExtra(""post"", post);
					activity.startActivity(intent);
					return;
				}

				case INTERNAL_BROWSER: {
					final Intent intent = new Intent(activity, WebViewActivity.class);
					intent.putExtra(""url"", url);
					intent.putExtra(""post"", post);
					activity.startActivity(intent);
					return;
				}

				case EXTERNAL_BROWSER: {
					openWebBrowser(activity, Uri.parse(url), fromExternalIntent);
					return;
				}
			}
		}

		final RedditURLParser.RedditURL redditURL = RedditURLParser.parse(Uri.parse(url));
		if(redditURL != null) {

			switch(redditURL.pathType()) {

				case RedditURLParser.SUBREDDIT_POST_LISTING_URL:
				case RedditURLParser.MULTIREDDIT_POST_LISTING_URL:
				case RedditURLParser.USER_POST_LISTING_URL:
				case RedditURLParser.UNKNOWN_POST_LISTING_URL: {
					final Intent intent = new Intent(activity, PostListingActivity.class);
					intent.setData(redditURL.generateJsonUri());
					activity.startActivityForResult(intent, 1);
					return;
				}

				case RedditURLParser.POST_COMMENT_LISTING_URL:
				case RedditURLParser.USER_COMMENT_LISTING_URL: {
					final Intent intent = new Intent(activity, CommentListingActivity.class);
					intent.setData(redditURL.generateJsonUri());
					activity.startActivityForResult(intent, 1);
					return;
				}

				case RedditURLParser.USER_PROFILE_URL: {
					UserProfileDialog.newInstance(redditURL.asUserProfileURL().username).show(activity.getSupportFragmentManager(), null);
					return;
				}
			}
		}

		// Use a browser

		if(!PrefsUtility.pref_behaviour_useinternalbrowser(activity, sharedPreferences)) {
			if(openWebBrowser(activity, Uri.parse(url), fromExternalIntent)) {
				return;
			}
		}

		if(youtubeDotComPattern.matcher(url).matches()
				|| vimeoPattern.matcher(url).matches()
				|| googlePlayPattern.matcher(url).matches()) {
			if(openWebBrowser(activity, Uri.parse(url), fromExternalIntent)) {
				return;
			}
		}

		final Matcher youtuDotBeMatcher = youtuDotBePattern.matcher(url);

		if(youtuDotBeMatcher.find() && youtuDotBeMatcher.group(1) != null) {
			final String youtuBeUrl = ""http://youtube.com/watch?v="" + youtuDotBeMatcher.group(1)
					+ (youtuDotBeMatcher.group(2).length() > 0 ? ""&"" + youtuDotBeMatcher.group(2).substring(1) : """");
			if(openWebBrowser(activity, Uri.parse(youtuBeUrl), fromExternalIntent)) {
				return;
			}
		}

		final Intent intent = new Intent(activity, WebViewActivity.class);
		intent.putExtra(""url"", url);
		intent.putExtra(""post"", post);
		activity.startActivity(intent);
	}

	public static void onLinkLongClicked(AppCompatActivity activity, String uri){
		onLinkLongClicked(activity, uri, false);
	}

	public static void onLinkLongClicked(final AppCompatActivity activity,
	                                        final String uri,
	                                        final boolean forceNoImage) {
		if (uri == null){
			return;
		}

		final EnumSet<LinkHandler.LinkAction> itemPref = PrefsUtility.pref_menus_link_context_items(activity, PreferenceManager.getDefaultSharedPreferences(activity));

		if (itemPref.isEmpty()) {
			return;
		}

		final ArrayList<LinkMenuItem> menu = new ArrayList<>();

		if (itemPref.contains(LinkAction.COPY_URL)) {
			menu.add(new LinkMenuItem(activity, R.string.action_copy_link, LinkAction.COPY_URL));
		}
		if (itemPref.contains(LinkAction.EXTERNAL)) {
			menu.add(new LinkMenuItem(activity, R.string.action_external, LinkAction.EXTERNAL));
		}
		if (itemPref.contains(LinkAction.SAVE_IMAGE) && isProbablyAnImage(uri) && !forceNoImage) {
			menu.add(new LinkMenuItem(activity, R.string.action_save_image, LinkAction.SAVE_IMAGE));
		}
		if (itemPref.contains(LinkAction.SHARE)) {
			menu.add(new LinkMenuItem(activity, R.string.action_share, LinkAction.SHARE));
		}
		if (itemPref.contains(LinkAction.SHARE_IMAGE) && isProbablyAnImage(uri) && !forceNoImage) {
			menu.add(new LinkMenuItem(activity, R.string.action_share_image, LinkAction.SHARE_IMAGE));
		}
		final String[] menuText = new String[menu.size()];

		for (int i = 0; i < menuText.length; i++) {
			menuText[i] = menu.get(i).title;
		}

		final AlertDialog.Builder builder = new AlertDialog.Builder(activity);

		builder.setItems(menuText, new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				onActionMenuItemSelected(uri, activity, menu.get(which).action);
			}
		});

		//builder.setNeutralButton(R.string.dialog_cancel, null);

		final AlertDialog alert = builder.create();
		alert.setCanceledOnTouchOutside(true);
		alert.show();
	}

	public static void onActionMenuItemSelected(String uri, AppCompatActivity activity, LinkAction action){
		switch (action){
			case SHARE:
				final Intent mailer = new Intent(Intent.ACTION_SEND);
				mailer.setType(""text/plain"");
				mailer.putExtra(Intent.EXTRA_TEXT, uri);
				activity.startActivity(Intent.createChooser(mailer, activity.getString(R.string.action_share)));
				break;
			case COPY_URL:
				ClipboardManager manager = (ClipboardManager) activity.getSystemService(Context.CLIPBOARD_SERVICE);
				manager.setText(uri);
				break;

			case EXTERNAL:
				final Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(Uri.parse(uri));
				activity.startActivity(intent);
				break;
			case SHARE_IMAGE:
				((BaseActivity)activity).requestPermissionWithCallback(Manifest.permission.WRITE_EXTERNAL_STORAGE, new ShareImageCallback(activity, uri));
				break;
			case SAVE_IMAGE:
				((BaseActivity)activity).requestPermissionWithCallback(Manifest.permission.WRITE_EXTERNAL_STORAGE, new SaveImageCallback(activity, uri));
				break;
		}
	}
	public static boolean openWebBrowser(AppCompatActivity activity, Uri uri, final boolean fromExternalIntent) {

		if(!fromExternalIntent) {
			try {
				final Intent intent = new Intent(Intent.ACTION_VIEW);
				intent.setData(uri);
				activity.startActivity(intent);
				return true;

			} catch(Exception e) {
				General.quickToast(activity, ""Failed to open url \"""" + uri.toString() + ""\"" in external browser"");
			}

		} else {

			// We want to make sure we don't just pass this back to ourselves

			final Intent baseIntent = new Intent(Intent.ACTION_VIEW);
			baseIntent.setData(uri);

			final ArrayList<Intent> targetIntents = new ArrayList<>();

			for (final ResolveInfo info : activity.getPackageManager().queryIntentActivities(baseIntent, 0)) {

				final String packageName = info.activityInfo.packageName;
				Log.i(""SRDEBUG"", ""Considering "" + packageName);

				if (packageName != null && !packageName.startsWith(""com.wellsandwhistles.android.redditsp"")) {
					final Intent intent = new Intent(Intent.ACTION_VIEW);
					intent.setData(uri);
					intent.setPackage(packageName);
					targetIntents.add(intent);
				}
			}

			if(!targetIntents.isEmpty()) {

				final Intent chooserIntent = Intent.createChooser(
						targetIntents.remove(0),
						activity.getString(R.string.open_with));

				if(!targetIntents.isEmpty()) {
					chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, targetIntents.toArray(new Parcelable[]{}));
				}
				activity.startActivity(chooserIntent);

				return true;
			}
		}

		return false;
	}

	public static final Pattern imgurPattern = Pattern.compile("".*[^A-Za-z]imgur\\.com/(\\w+).*""),
			imgurAlbumPattern = Pattern.compile("".*[^A-Za-z]imgur\\.com/(a|gallery)/(\\w+).*""),
			qkmePattern1 = Pattern.compile("".*[^A-Za-z]qkme\\.me/(\\w+).*""),
			qkmePattern2 = Pattern.compile("".*[^A-Za-z]quickmeme\\.com/meme/(\\w+).*""),
			lvmePattern = Pattern.compile("".*[^A-Za-z]livememe\\.com/(\\w+).*""),
			gfycatPattern = Pattern.compile("".*[^A-Za-z]gfycat\\.com/(\\w+).*""),
			streamablePattern = Pattern.compile("".*[^A-Za-z]streamable\\.com/(\\w+).*""),
			reddituploadsPattern = Pattern.compile("".*[^A-Za-z]i\\.reddituploads\\.com/(\\w+).*""),
			imgflipPattern = Pattern.compile("".*[^A-Za-z]imgflip\\.com/i/(\\w+).*""),
			makeamemePattern = Pattern.compile("".*[^A-Za-z]makeameme\\.org/meme/([\\w\\-]+).*"");

	public static boolean isProbablyAnImage(final String url) {

		{
			final Matcher matchImgur = imgurPattern.matcher(url);

			if(matchImgur.find()) {
				final String imgId = matchImgur.group(1);
				if(imgId.length() > 2 && !imgId.startsWith(""gallery"")) {
					return true;
				}
			}
		}

		{
			final Matcher matchGfycat = gfycatPattern.matcher(url);

			if(matchGfycat.find()) {
				final String imgId = matchGfycat.group(1);
				if(imgId.length() > 5) {
					return true;
				}
			}
		}

		{
			final Matcher matchStreamable = streamablePattern.matcher(url);

			if(matchStreamable.find()) {
				final String imgId = matchStreamable.group(1);
				if(imgId.length() > 2) {
					return true;
				}
			}
		}

		{
			final Matcher matchRedditUploads = reddituploadsPattern.matcher(url);

			if(matchRedditUploads.find()) {
				final String imgId = matchRedditUploads.group(1);
				if(imgId.length() > 10) {
					return true;
				}
			}
		}

		{
			final Matcher matchImgflip = imgflipPattern.matcher(url);

			if(matchImgflip.find()) {
				final String imgId = matchImgflip.group(1);
				if(imgId.length() > 3) {
					return true;
				}
			}
		}

		{
			final Matcher matchMakeameme = makeamemePattern.matcher(url);

			if(matchMakeameme.find()) {
				final String imgId = matchMakeameme.group(1);
				if(imgId.length() > 3) {
					return true;
				}
			}
		}

		return getImageUrlPatternMatch(url) != null;
	}

	private static abstract class ImageInfoRetryListener implements GetImageInfoListener {

		private final GetImageInfoListener mListener;

		private ImageInfoRetryListener(final GetImageInfoListener listener) {
			mListener = listener;
		}

		@Override
		public abstract void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage);

		@Override
		public void onSuccess(final ImageInfo info) {
			mListener.onSuccess(info);
		}

		@Override
		public void onNotAnImage() {
			mListener.onNotAnImage();
		}
	}

	public static void getImgurImageInfo(
			final Context context,
			final String imgId,
			final int priority,
			final int listId,
			final boolean returnUrlOnFailure,
			final GetImageInfoListener listener) {

		Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v3 with auth"");

		ImgurAPIV3.getImageInfo(context, imgId, priority, listId, true, new ImageInfoRetryListener(listener) {
			@Override
			public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

				Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v3 without auth"");

				ImgurAPIV3.getImageInfo(context, imgId, priority, listId, false, new ImageInfoRetryListener(listener) {
					@Override
					public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

						Log.i(""getImgurImageInfo"", ""Image "" + imgId + "": trying API v2"");

						ImgurAPI.getImageInfo(context, imgId, priority, listId, new ImageInfoRetryListener(listener) {
							@Override
							public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

								Log.i(""getImgurImageInfo"", ""All API requests failed!"");

								if(returnUrlOnFailure) {
									listener.onSuccess(new ImageInfo(""https://i.imgur.com/"" + imgId + "".jpg"", null));

								} else {
									listener.onFailure(type, t, status, readableMessage);
								}
							}
						});
					}
				});
			}
		});
	}

	private static abstract class AlbumInfoRetryListener implements GetAlbumInfoListener {

		private final GetAlbumInfoListener mListener;

		private AlbumInfoRetryListener(final GetAlbumInfoListener listener) {
			mListener = listener;
		}

		@Override
		public abstract void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage);

		@Override
		public void onSuccess(final ImgurAPI.AlbumInfo info) {
			mListener.onSuccess(info);
		}
	}

	public static void getImgurAlbumInfo(
			final Context context,
			final String albumId,
			final int priority,
			final int listId,
			final GetAlbumInfoListener listener) {

		Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v3 with auth"");

		ImgurAPIV3.getAlbumInfo(context, albumId, priority, listId, true, new AlbumInfoRetryListener(listener) {
			@Override
			public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

				Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v3 without auth"");

				ImgurAPIV3.getAlbumInfo(context, albumId, priority, listId, false, new AlbumInfoRetryListener(listener) {
					@Override
					public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

						Log.i(""getImgurAlbumInfo"", ""Album "" + albumId + "": trying API v2"");

						ImgurAPI.getAlbumInfo(context, albumId, priority, listId, new AlbumInfoRetryListener(listener) {
							@Override
							public void onFailure(final @CacheRequest.RequestFailureType int type, final Throwable t, final Integer status, final String readableMessage) {

								Log.i(""getImgurImageInfo"", ""All API requests failed!"");
								listener.onFailure(type, t, status, readableMessage);
							}
						});

					}
				});
			}
		});
	}

	public static void getImageInfo(
			final Context context,
			final String url,
			final int priority,
			final int listId,
			final GetImageInfoListener listener) {

		{
			final Matcher matchImgur = imgurPattern.matcher(url);

			if(matchImgur.find()) {
				final String imgId = matchImgur.group(1);
				if(imgId.length() > 2 && !imgId.startsWith(""gallery"")) {
					getImgurImageInfo(context, imgId, priority, listId, true, listener);
					return;
				}
			}
		}

		{
			final Matcher matchGfycat = gfycatPattern.matcher(url);

			if(matchGfycat.find()) {
				final String imgId = matchGfycat.group(1);
				if(imgId.length() > 5) {
					GfycatAPI.getImageInfo(context, imgId, priority, listId, listener);
					return;
				}
			}
		}

		{
			final Matcher matchStreamable = streamablePattern.matcher(url);

			if(matchStreamable.find()) {
				final String imgId = matchStreamable.group(1);
				if(imgId.length() > 2) {
					StreamableAPI.getImageInfo(context, imgId, priority, listId, listener);
					return;
				}
			}
		}

		{
			final Matcher matchRedditUploads = reddituploadsPattern.matcher(url);

			if(matchRedditUploads.find()) {
				final String imgId = matchRedditUploads.group(1);
				if(imgId.length() > 10) {
					listener.onSuccess(new ImageInfo(url, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		{
			final Matcher matchImgflip = imgflipPattern.matcher(url);

			if(matchImgflip.find()) {
				final String imgId = matchImgflip.group(1);
				if(imgId.length() > 3) {
					final String imageUrl = ""https://i.imgflip.com/"" + imgId + "".jpg"";
					listener.onSuccess(new ImageInfo(imageUrl, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		{
			final Matcher matchMakeameme = makeamemePattern.matcher(url);

			if(matchMakeameme.find()) {
				final String imgId = matchMakeameme.group(1);
				if(imgId.length() > 3) {
					final String imageUrl = ""https://media.makeameme.org/created/"" + imgId + "".jpg"";
					listener.onSuccess(new ImageInfo(imageUrl, ImageInfo.MediaType.IMAGE));
					return;
				}
			}
		}

		final ImageInfo imageUrlPatternMatch = getImageUrlPatternMatch(url);

		if(imageUrlPatternMatch != null) {
			listener.onSuccess(imageUrlPatternMatch);
		} else {
			listener.onNotAnImage();
		}
	}

	private static ImageInfo getImageUrlPatternMatch(final String url) {

		final String urlLower = General.asciiLowercase(url);

		final String[] imageExtensions = {"".jpg"", "".jpeg"", "".png""};

		final String[] videoExtensions = {"".webm"", "".mp4"", "".h264"", "".gifv"", "".mkv"", "".3gp""};


		for(final String ext: imageExtensions) {
			if(urlLower.endsWith(ext)) {
				return new ImageInfo(url, ImageInfo.MediaType.IMAGE);
			}
		}

		for(final String ext: videoExtensions) {
			if(urlLower.endsWith(ext)) {
				return new ImageInfo(url, ImageInfo.MediaType.VIDEO);
			}
		}

		if(urlLower.endsWith("".gif"")) {
			return new ImageInfo(url, ImageInfo.MediaType.GIF);
		}


		if(url.contains(""?"")) {

			final String urlBeforeQ = urlLower.split(""\\?"")[0];

			for(final String ext: imageExtensions) {
				if(urlBeforeQ.endsWith(ext)) {
					return new ImageInfo(url, ImageInfo.MediaType.IMAGE);
				}
			}

			for(final String ext: videoExtensions) {
				if(urlBeforeQ.endsWith(ext)) {
					return new ImageInfo(url, ImageInfo.MediaType.VIDEO);
				}
			}

			if(urlBeforeQ.endsWith("".gif"")) {
				return new ImageInfo(url, ImageInfo.MediaType.GIF);
			}
		}

		final Matcher matchQkme1 = qkmePattern1.matcher(url);

		if(matchQkme1.find()) {
			final String imgId = matchQkme1.group(1);
			if(imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://i.qkme.me/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		final Matcher matchQkme2 = qkmePattern2.matcher(url);

		if(matchQkme2.find()) {
			final String imgId = matchQkme2.group(1);
			if (imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://i.qkme.me/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		final Matcher matchLvme = lvmePattern.matcher(url);

		if(matchLvme.find()) {
			final String imgId = matchLvme.group(1);
			if (imgId.length() > 2) {
				return new ImageInfo(String.format(Locale.US, ""http://www.livememe.com/%s.jpg"", imgId), ImageInfo.MediaType.IMAGE);
			}
		}

		return null;

	}

	public static LinkedHashSet<String> computeAllLinks(final String text) {

		final LinkedHashSet<String> result = new LinkedHashSet<>();

		// From http://stackoverflow.com/a/1806161/1526861
		// TODO may not handle .co.uk, similar (but should handle .co/.us/.it/etc fine)
		final Pattern urlPattern = Pattern.compile(""\\b((((ht|f)tp(s?)\\:\\/\\/|~\\/|\\/)|www.)"" +
				""(\\w+:\\w+@)?(([-\\w]+\\.)+(com|org|net|gov"" +
				""|mil|biz|info|mobi|name|aero|jobs|museum"" +
				""|travel|[a-z]{2}))(:[\\d]{1,5})?"" +
				""(((\\/([-\\w~!$+|.,=]|%[a-f\\d]{2})+)+|\\/)+|\\?|#)?"" +
				""((\\?([-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" +
				""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)"" +
				""(&(?:[-\\w~!$+|.,*:]|%[a-f\\d{2}])+=?"" +
				""([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)*)*"" +
				""(#([-\\w~!$+|.,*:=]|%[a-f\\d]{2})*)?)\\b"");

		final Matcher urlMatcher = urlPattern.matcher(text);

		while(urlMatcher.find()) {
			result.add(urlMatcher.group(1));
		}

		final Matcher subredditMatcher = Pattern.compile(""(?<!\\w)(/?[ru]/\\w+)\\b"").matcher(text);

		while(subredditMatcher.find()) {
			result.add(subredditMatcher.group(1));
		}

		return result;
	}
	private static class LinkMenuItem {
		public final String title;
		public final LinkAction action;

		private LinkMenuItem(Context context, int titleRes, LinkAction action) {
			this.title = context.getString(titleRes);
			this.action = action;
		}
	}
}
",FALSE,,3779
3772,InitialSO.csv3772.txt,InitialGit.csv3772.txt,5,"import contextlib
import sys

@contextlib.contextmanager
def nostderr():
    savestderr = sys.stderr
    class Devnull(object):
        def write(self, _): pass
        def flush(self): pass
    sys.stderr = Devnull()
    try:
        yield
    finally:
        sys.stderr = savestderr
 with nostderr(): ","import contextlib
import sys

@contextlib.contextmanager
def nostderr():
    savestderr = sys.stderr
    class Devnull(object):
        def write(self, _): pass
        def flush(self): pass
    sys.stderr = Devnull()
    try:
        yield
    finally:
        sys.stderr = savestderr
 with nostderr(): ",TRUE,"""""""
General testing utilities.
""""""
import sys
from contextlib import contextmanager


@contextmanager
def nostderr():
    """"""
    ContextManager to suppress stderr messages
    http://stackoverflow.com/a/1810086/882918
    """"""
    savestderr = sys.stderr

    class Devnull(object):
        """""" /dev/null incarnation as output-stream-like object """"""
        def write(self, _):
            """""" Write method - just does nothing""""""
            pass

    sys.stderr = Devnull()
    try:
        yield
    finally:
        sys.stderr = savestderr
","""""""
General testing utilities.
""""""
import sys
from contextlib import contextmanager
from django.dispatch import Signal
from markupsafe import escape
from mock import Mock, patch
import moto


@contextmanager
def nostderr():
    """"""
    ContextManager to suppress stderr messages
    http://stackoverflow.com/a/1810086/882918
    """"""
    savestderr = sys.stderr

    class Devnull(object):
        """""" /dev/null incarnation as output-stream-like object """"""
        def write(self, _):
            """""" Write method - just does nothing""""""
            pass

    sys.stderr = Devnull()
    try:
        yield
    finally:
        sys.stderr = savestderr


class XssTestMixin(object):
    """"""
    Mixin for testing XSS vulnerabilities.
    """"""

    def assert_no_xss(self, response, xss_content):
        """"""Assert that `xss_content` is not present in the content of
        `response`, and that its escaped version is present. Uses the
        same `markupsafe.escape` function as Mako templates.

        Args:
          response (Response): The HTTP response
          xss_content (str): The Javascript code to check for.

        Returns:
          None

        """"""
        self.assertContains(response, escape(xss_content))
        self.assertNotContains(response, xss_content)


def disable_signal(module, signal):
    """"""Replace `signal` inside of `module` with a dummy signal. Can be
    used as a method or class decorator, as well as a context manager.""""""
    return patch.object(module, signal, new=Signal())


class MockSignalHandlerMixin(object):
    """"""Mixin for testing sending of signals.""""""

    @contextmanager
    def assert_signal_sent(self, module, signal, *args, **kwargs):
        """"""Assert that a signal was sent with the correct arguments. Since
        Django calls signal handlers with the signal as an argument,
        it is added to `kwargs`.

        Uses `mock.patch.object`, which requires the target to be
        specified as a module along with a variable name inside that
        module.

        Args:
          module (module): The module in which to patch the given signal name.
          signal (str): The name of the signal to patch.
          *args, **kwargs: The arguments which should have been passed
            along with the signal. If `exclude_args` is passed as a
            keyword argument, its value should be a list of keyword
            arguments passed to the signal whose values should be
            ignored.

        """"""
        with patch.object(module, signal, new=Signal()) as mock_signal:
            def handler(*args, **kwargs):  # pylint: disable=unused-argument
                """"""No-op signal handler.""""""
                pass
            mock_handler = Mock(spec=handler)
            mock_signal.connect(mock_handler)
            yield
            self.assertTrue(mock_handler.called)
            mock_args, mock_kwargs = mock_handler.call_args  # pylint: disable=unpacking-non-sequence
            if 'exclude_args' in kwargs:
                for key in kwargs['exclude_args']:
                    self.assertIn(key, mock_kwargs)
                    del mock_kwargs[key]
                del kwargs['exclude_args']
            self.assertEqual(mock_args, args)
            self.assertEqual(mock_kwargs, dict(kwargs, signal=mock_signal))


@contextmanager
def skip_signal(signal, **kwargs):
    """"""
    ContextManager to skip a signal by disconnecting it, yielding,
    and then reconnecting the signal.
    """"""
    signal.disconnect(**kwargs)
    yield
    signal.connect(**kwargs)


class MockS3Mixin(object):
    """"""
    TestCase mixin that stubs S3 using the moto library. Note that this will
    activate httpretty, which will monkey patch socket.
    """"""
    def setUp(self):
        super(MockS3Mixin, self).setUp()
        self._mock_s3 = moto.mock_s3()
        self._mock_s3.start()

    def tearDown(self):
        self._mock_s3.stop()
        super(MockS3Mixin, self).tearDown()
",FALSE,,3780
3779,InitialSO.csv3779.txt,InitialGit.csv3779.txt,14,"function gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        // 32 bits for ""time_low""
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),
        
        // 16 bits for ""time_mid""
        mt_rand( 0, 0xffff ),
        
        // 16 bits for ""time_hi_and_version"",
        // four most significant bits holds version number 4
        mt_rand( 0, 0x0fff ) | 0x4000,
        
        // 16 bits, 8 bits for ""clk_seq_hi_res"",
        // 8 bits for ""clk_seq_low"",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand( 0, 0x3fff ) | 0x8000,
        
        // 48 bits for ""node""
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}
 ","function gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        // 32 bits for ""time_low""
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

        // 16 bits for ""time_mid""
        mt_rand( 0, 0xffff ),

        // 16 bits for ""time_hi_and_version"",
        // four most significant bits holds version number 4
        mt_rand( 0, 0x0fff ) | 0x4000,

        // 16 bits, 8 bits for ""clk_seq_hi_res"",
        // 8 bits for ""clk_seq_low"",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand( 0, 0x3fff ) | 0x8000,

        // 48 bits for ""node""
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}
 ",FALSE,"<?php

/**
 * Nexcess.net Turpentine Extension for Magento
 * Copyright (C) 2012  Nexcess.net L.L.C.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

class Nexcessnet_Turpentine_Helper_Data extends Mage_Core_Helper_Abstract {

    /**
     * Contains a newly generated v4 uuid whenever read, possibly not available
     * on all kernels
     */
    const UUID_SOURCE   = '/proc/sys/kernel/random/uuid';

    /**
     * encryption singleton thing
     *
     * @var Mage_Core_Model_Encryption
     */
    protected $_crypt   = null;

    /**
     * Like built-in explode() but applies trim to each exploded element and
     * filters out empty elements from result
     *
     * @param  string $token [description]
     * @param  string $data  [description]
     * @return array
     */
    public function cleanExplode( $token, $data ) {
        return array_filter( array_map( 'trim',
            explode( $token, trim( $data ) ) ) );
    }

    public function generateUuid() {
        if( is_readable( self::UUID_SOURCE ) ) {
            $uuid = trim( file_get_contents( self::UUID_SOURCE ) );
        } elseif( function_exists( 'mt_rand' ) ) {
            /**
             * Taken from stackoverflow answer, possibly not the fastest or
             * strictly standards compliant
             * @link http://stackoverflow.com/a/2040279
             */
            $uuid = sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
                // 32 bits for ""time_low""
                mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

                // 16 bits for ""time_mid""
                mt_rand( 0, 0xffff ),

                // 16 bits for ""time_hi_and_version"",
                // four most significant bits holds version number 4
                mt_rand( 0, 0x0fff ) | 0x4000,

                // 16 bits, 8 bits for ""clk_seq_hi_res"",
                // 8 bits for ""clk_seq_low"",
                // two most significant bits holds zero and one for variant DCE1.1
                mt_rand( 0, 0x3fff ) | 0x8000,

                // 48 bits for ""node""
                mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
            );
        } else {
            // chosen by dice roll, guaranteed to be random
            $uuid = '4';
        }
        return $uuid;
    }

    /**
     * Get the Turpentine version
     *
     * @return string
     */
    public function getVersion() {
        return Mage::getConfig()->getModuleConfig( 'Nexcessnet_Turpentine' )->version;
    }

    /**
     * Encrypt using Magento CE standard encryption (even on Magento EE)
     *
     * @param  string $data
     * @return string
     */
    public function encrypt( $data ) {
        return base64_encode( $this->_getCrypt()->encrypt( $data ) );
    }

    /**
     * Decrypt using Mage CE standard encryption (even on Magento EE)
     *
     * @param  string $data
     * @return string
     */
    public function decrypt( $data ) {
        return $this->_getCrypt()->decrypt( base64_decode( $data ) );
    }

    /**
     * Get a list of child blocks inside the given block
     *
     * @param  Mage_Core_Model_Layout_Element $blockNode
     * @return array
     */
    public function getChildBlockNames( $blockNode ) {
        return array_unique( $this->_getChildBlockNames( $blockNode ) );
    }

    /**
     * Get the getModel formatted name of a model classname or object
     *
     * @param  string|object $model
     * @return string
     */
    public function getModelName( $model ) {
        if( is_object( $model ) ) {
            $model = get_class( $model );
        }
        return strtolower( preg_replace(
            '~^[^_]+_([^_]+)_Model_(.+)$~', '$1/$2', $model ) );
    }

    /**
     * Check config to see if Turpentine should handle the flash messages
     *
     * @return bool
     */
    public function useFlashMessagesFix() {
        return (bool)Mage::getStoreConfig(
            'turpentine_varnish/general/ajax_messages' );
    }

    /**
     * The actual recursive implementation of getChildBlockNames
     *
     * @param  Mage_Core_Model_Layout_Element $blockNode
     * @return array
     */
    protected function _getChildBlockNames( $blockNode ) {
        if( $blockNode instanceof Mage_Core_Model_Layout_Element ) {
            $blockNames = array( (string)$blockNode['name'] );
            foreach( $blockNode->xpath( './block | ./reference' ) as $childBlockNode ) {
                $blockNames = array_merge( $blockNames,
                    $this->_getChildBlockNames( $childBlockNode ) );
            }
        } else {
            $blockNames = array();
        }
        return $blockNames;
    }

    /**
     * Get encryption singleton thing
     *
     * @return Mage_Core_Model_Encryption
     */
    protected function _getCrypt() {
        if( is_null( $this->_crypt ) ) {
            $this->_crypt = Mage::getModel( 'core/encryption' );
            $this->_crypt->setHelper( Mage::helper( 'core' ) );
        }
        return $this->_crypt;
    }
}
","<?php

/**
 * Nexcess.net Turpentine Extension for Magento
 * Copyright (C) 2012  Nexcess.net L.L.C.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

class Nexcessnet_Turpentine_Helper_Data extends Mage_Core_Helper_Abstract {

    /**
     * Contains a newly generated v4 uuid whenever read, possibly not available
     * on all kernels
     */
    const UUID_SOURCE   = '/proc/sys/kernel/random/uuid';

    /**
     * Compression level for serialization compression
     *
     * Testing showed no significant (size) difference between levels 1 and 9
     * so using 1 since it's faster
     */
    const COMPRESSION_LEVEL = 1;

    /**
     * Hash algorithm to use in various cryptographic methods
     */
    const HASH_ALGORITHM    = 'sha256';

    /**
     * Cookie name for the Varnish bypass
     *
     * @var string
     */
    const BYPASS_COOKIE_NAME  = 'varnish_bypass';

    /**
     * encryption singleton thing
     *
     * @var Mage_Core_Model_Encryption
     */
    protected $_crypt   = null;

    /**
     * Like built-in explode() but applies trim to each exploded element and
     * filters out empty elements from result
     *
     * @param  string $token [description]
     * @param  string $data  [description]
     * @return array
     */
    public function cleanExplode( $token, $data ) {
        return array_filter( array_map( 'trim',
            explode( $token, trim( $data ) ) ) );
    }

    /**
     * Generate a v4 UUID
     *
     * @return string
     */
    public function generateUuid() {
        if( is_readable( self::UUID_SOURCE ) ) {
            $uuid = trim( file_get_contents( self::UUID_SOURCE ) );
        } elseif( function_exists( 'mt_rand' ) ) {
            /**
             * Taken from stackoverflow answer, possibly not the fastest or
             * strictly standards compliant
             * @link http://stackoverflow.com/a/2040279
             */
            $uuid = sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
                // 32 bits for ""time_low""
                mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

                // 16 bits for ""time_mid""
                mt_rand( 0, 0xffff ),

                // 16 bits for ""time_hi_and_version"",
                // four most significant bits holds version number 4
                mt_rand( 0, 0x0fff ) | 0x4000,

                // 16 bits, 8 bits for ""clk_seq_hi_res"",
                // 8 bits for ""clk_seq_low"",
                // two most significant bits holds zero and one for variant DCE1.1
                mt_rand( 0, 0x3fff ) | 0x8000,

                // 48 bits for ""node""
                mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
            );
        } else {
            // chosen by dice roll, guaranteed to be random
            $uuid = '4';
        }
        return $uuid;
    }

    /**
     * Get the Turpentine version
     *
     * @return string
     */
    public function getVersion() {
        return Mage::getConfig()
            ->getModuleConfig( 'Nexcessnet_Turpentine' )->version;
    }

    /**
     * Base64 encode a string
     *
     * NOTE this changes the last 2 characters to be friendly to URLs
     *     / => .
     *     + => -
     *
     * @param  string $str
     * @return string
     */
    public function urlBase64Encode( $str ) {
        return str_replace(
            array( '/', '+' ),
            array( '.', '-' ),
            base64_encode( $str ) );
    }

    /**
     * Base64 decode a string, counterpart to urlBase64Encode
     *
     * @param  string $str
     * @return string
     */
    public function urlBase64Decode( $str ) {
        return base64_decode(
            str_replace(
                array( '.', '-' ),
                array( '/', '+' ),
                $str ) );
    }

    /**
     * Serialize a variable into a string that can be used in a URL
     *
     * Using gzdeflate to avoid the checksum/metadata overhead in gzencode and
     * gzcompress
     *
     * @param  mixed $data
     * @return string
     */
    public function freeze( $data ) {
        Varien_Profiler::start( 'turpentine::helper::data::freeze' );
        $frozenData = $this->urlBase64Encode(
            $this->_getCrypt()->encrypt(
                gzdeflate(
                    serialize( $data ),
                    self::COMPRESSION_LEVEL ) ) );
        Varien_Profiler::stop( 'turpentine::helper::data::freeze' );
        return $frozenData;
    }

    /**
     * Unserialize data
     *
     * @param  string $data
     * @return mixed
     */
    public function thaw( $data ) {
        Varien_Profiler::start( 'turpentine::helper::data::thaw' );
        $thawedData = unserialize(
            gzinflate(
                $this->_getCrypt()->decrypt(
                    $this->urlBase64Decode( $data ) ) ) );
        Varien_Profiler::stop( 'turpentine::helper::data::thaw' );
        return $thawedData;
    }

    /**
     * Get SHA256 hash of a string, salted with encryption key
     *
     * @param  string $data
     * @return string
     */
    public function secureHash( $data ) {
        $salt = $this->_getCryptKey();
        return hash( self::HASH_ALGORITHM, sprintf( '%s:%s', $salt, $data ) );
    }

    /**
     * Get the HMAC hash for given data
     *
     * @param  string $data
     * @return string
     */
    public function getHmac( $data ) {
        return hash_hmac( self::HASH_ALGORITHM, $data, $this->_getCryptKey() );
    }

    /**
     * Hash a cache key the same way blocks do
     *
     * @param  array $key
     * @return string
     */
    public function getCacheKeyHash( $key ) {
        return sha1( implode( '|', array_values( $key ) ) );
    }

    /**
     * Get a list of child blocks inside the given block
     *
     * @param  Mage_Core_Model_Layout_Element $blockNode
     * @return array
     */
    public function getChildBlockNames( $blockNode ) {
        return array_unique( $this->_getChildBlockNames( $blockNode ) );
    }

    /**
     * Get the getModel formatted name of a model classname or object
     *
     * @param  string|object $model
     * @return string
     */
    public function getModelName( $model ) {
        if( is_object( $model ) ) {
            $model = get_class( $model );
        }
        return strtolower( preg_replace(
            '~^[^_]+_([^_]+)_Model_(.+)$~', '$1/$2', $model ) );
    }

    /**
     * Check config to see if Turpentine should handle the flash messages
     *
     * @return bool
     */
    public function useFlashMessagesFix() {
        return (bool)Mage::getStoreConfig(
            'turpentine_varnish/general/ajax_messages' );
    }

    /**
     * Check config to see if Turpentine should apply the product list toolbar
     * fix
     *
     * @return bool
     */
    public function useProductListToolbarFix() {
        return (bool)Mage::getStoreConfig(
            'turpentine_varnish/general/fix_product_toolbar' );
    }

    /**
     * Check if Turpentine should apply the new VCL on config changes
     *
     * @return bool
     */
    public function getAutoApplyOnSave() {
        return (bool)Mage::getStoreConfig(
            'turpentine_varnish/general/auto_apply_on_save' );
    }

	/**
	 * Get config value specifying when to strip VCL whitespaces
	 *
	 * @return string
	 */
	public function getStripVclWhitespace() {
		return Mage::getStoreConfig(
			'turpentine_varnish/general/strip_vcl_whitespace' );
	}

	/**
	 * Check if VCL whitespaces should be stripped for the given action
	 *
	 * @param string $action can be either ""apply"", ""save"" or ""download""
	 * @return bool
	 */
	public function shouldStripVclWhitespace($action) {
		$configValue = $this->getStripVclWhitespace();
		if ( $configValue==='always' ) {
			return true;
		} elseif ( $configValue==='apply' && $action==='apply' ) {
			return true;
		}
		return false;
	}

    /**
     * Get the cookie name for the Varnish bypass
     *
     * @return string
     */
    public function getBypassCookieName() {
        return self::BYPASS_COOKIE_NAME;
    }

    /**
     * The actual recursive implementation of getChildBlockNames
     *
     * @param  Mage_Core_Model_Layout_Element $blockNode
     * @return array
     */
    protected function _getChildBlockNames( $blockNode ) {
        Varien_Profiler::start( 'turpentine::helper::data::_getChildBlockNames' );
        if( $blockNode instanceof Mage_Core_Model_Layout_Element ) {
            $blockNames = array( (string)$blockNode['name'] );
            foreach( $blockNode->xpath( './block | ./reference' ) as $childBlockNode ) {
                $blockNames = array_merge( $blockNames,
                    $this->_getChildBlockNames( $childBlockNode ) );
                if( $this->getLayout() instanceof Varien_Simplexml_Config ) {
                    foreach( $this->getLayout()->getNode()->xpath( sprintf(
                        '//reference[@name=\'%s\']', (string)$childBlockNode['name'] ) )
                            as $childBlockLayoutNode ) {
                        $blockNames = array_merge( $blockNames,
                            $this->_getChildBlockNames( $childBlockLayoutNode ) );

                    }
                }
            }
        } else {
            $blockNames = array();
        }
        Varien_Profiler::stop( 'turpentine::helper::data::_getChildBlockNames' );
        return $blockNames;
    }

    /**
     * Get encryption singleton thing
     *
     * Not using core/cryption because it auto-base64 encodes stuff which we
     * don't want in this case
     *
     * @return Mage_Core_Model_Encryption
     */
    protected function _getCrypt() {
        if( is_null( $this->_crypt ) ) {
            $this->_crypt = Varien_Crypt::factory()
                ->init( $this->_getCryptKey() );
        }
        return $this->_crypt;
    }

    /**
     * Get Magento's encryption key
     *
     * @return string
     */
    protected function _getCryptKey() {
        return (string)Mage::getConfig()->getNode( 'global/crypt/key' );
    }
}
",FALSE,,3789
3780,InitialSO.csv3780.txt,InitialGit.csv3780.txt,13,"function multi_tax_terms($where) {
    global $wp_query;
    if ( strpos($wp_query->query_vars['term'], ',') !== false && strpos($where, ""AND 0"") !== false ) {
        // it's failing because taxonomies can't handle multiple terms
        //first, get the terms
        $term_arr = explode("","", $wp_query->query_vars['term']);
        foreach($term_arr as $term_item) {
            $terms[] = get_terms($wp_query->query_vars['taxonomy'], array('slug' => $term_item));
        }

        //next, get the id of posts with that term in that tax
        foreach ( $terms as $term ) {
            $term_ids[] = $term[0]->term_id;
        }
        
        $post_ids = get_objects_in_term($term_ids, $wp_query->query_vars['taxonomy']);
    
        if ( !is_wp_error($post_ids) && count($post_ids) ) {
            // build the new query
            $new_where = "" AND wp_posts.ID IN ("" . implode(', ', $post_ids) . "") "";
            // re-add any other query vars via concatenation on the $new_where string below here
            
            // now, sub out the bad where with the good
            $where = str_replace(""AND 0"", $new_where, $where);
        } else {
            // give up
        }
    }
    return $where;
}

add_filter(""posts_where"", ""multi_tax_terms"");
 ","function multi_tax_terms($where) {
    global $wp_query;
    if ( strpos($wp_query->query_vars['term'], ',') !== false && strpos($where, ""AND 0"") !== false ) {
        // it's failing because taxonomies can't handle multiple terms
        //first, get the terms
        $term_arr = explode("","", $wp_query->query_vars['term']);
        foreach($term_arr as $term_item) {
            $terms[] = get_terms($wp_query->query_vars['taxonomy'], array('slug' => $term_item));
        }

        //next, get the id of posts with that term in that tax
        foreach ( $terms as $term ) {
            $term_ids[] = $term[0]->term_id;
        }

        $post_ids = get_objects_in_term($term_ids, $wp_query->query_vars['taxonomy']);

        if ( !is_wp_error($post_ids) && count($post_ids) ) {
            // build the new query
            $new_where = "" AND wp_posts.ID IN ("" . implode(', ', $post_ids) . "") "";
            // re-add any other query vars via concatenation on the $new_where string below here

            // now, sub out the bad where with the good
            $where = str_replace(""AND 0"", $new_where, $where);
        } else {
            // give up
        }
    }
    return $where;
}

add_filter(""posts_where"", ""multi_tax_terms"");
 ",FALSE,"<?php
function theme_more_link($more_link, $more_link_text) {
	
	$more_link = '[raw]' . $more_link . '[/raw]';
	
	return str_replace('more-link', 'read_more_link', $more_link);
}
add_filter('the_content_more_link', 'theme_more_link', 10, 2);

function theme_excerpt_more($excerpt) {
	return str_replace('[...]', '...', $excerpt);
}
add_filter('wp_trim_excerpt', 'theme_excerpt_more');

function theme_exclude_category_feed() {
	$exclude_cats = theme_get_option('blog','exclude_categorys');
	foreach ($exclude_cats as $key => $cat) {
		$exclude_cats[$key] = -$cat;
	}
	if ( is_feed() ) {
		set_query_var(""cat"", implode("","",$exclude_cats));
	}
}
add_filter('pre_get_posts', 'theme_exclude_category_feed');

/*
 * Remove Blog categories from category widget
 */
function theme_exclude_category_widget($cat_args)
{
	$exclude_cats = theme_get_option('blog','exclude_categorys');
	
	if(is_array($exclude_cats)){
		$cat_args['exclude'] = implode("","",$exclude_cats);
	}
 	return $cat_args;
}
add_filter('widget_categories_args', 'theme_exclude_category_widget');


function theme_exclude_the_categorys($thelist,$separator=' ') {
	if(!defined('WP_ADMIN')) {
		//Category IDs to exclude
		$exclude = theme_get_option('blog','exclude_categorys');

		$exclude2 = array();
		foreach($exclude as $c) {
			$exclude2[] = get_cat_name($c);
		}

		$cats = explode($separator,$thelist);
		$newlist = array();
		foreach($cats as $cat) {
			$catname = trim(strip_tags($cat));
			if(!in_array($catname,$exclude2))
				$newlist[] = $cat;
		}
		return implode($separator,$newlist);
	} else {
		return $thelist;
	}
}
add_filter('the_category','theme_exclude_the_categorys',10,2);

/*
 * add a span element for style in the page
 */
function theme_comment_style($return) {
	return str_replace($return, ""<span></span>$return"", $return);
}
add_filter('get_comment_author_link', 'theme_comment_style');

function theme_widget_title_remove_space($return){
	$return = trim($return);
	if('&nbsp;' == $return){
		return '';	
	}else{
		return $return;
	}
}
add_filter('widget_title', 'theme_widget_title_remove_space');

function theme_widget_text_shortcode($content) {
	$content = do_shortcode($content);
	$new_content = '';
	$pattern_full = '{(\[raw\].*?\[/raw\])}is';
	$pattern_contents = '{\[raw\](.*?)\[/raw\]}is';
	$pieces = preg_split($pattern_full, $content, -1, PREG_SPLIT_DELIM_CAPTURE);
	
	foreach ($pieces as $piece) {
		if (preg_match($pattern_contents, $piece, $matches)) {
			$new_content .= $matches[1];
		} else {
			$new_content .= do_shortcode($piece);
		}
	}

	return $new_content;
}
// Allow Shortcodes in Sidebar Widgets
add_filter('widget_text', 'theme_widget_text_shortcode');

global $wp_version;
if(version_compare($wp_version, ""3.1"", '<')){
	/*
	 * Thank to Bob Sherron.
	 * http://stackoverflow.com/questions/1155565/query-multiple-custom-taxonomy-terms-in-wordpress-2-8/2060777#2060777
	 */
	function multi_tax_terms($where) {
		global $wp_query;
		global $wpdb;
		if (isset($wp_query->query_vars['term']) && (strpos($wp_query->query_vars['term'], ',') !== false && strpos($where, ""AND 0"") !== false) ) {
			// it's failing because taxonomies can't handle multiple terms
			//first, get the terms
			$term_arr = explode("","", $wp_query->query_vars['term']);
			foreach($term_arr as $term_item) {
				$terms[] = get_terms($wp_query->query_vars['taxonomy'], array('slug' => $term_item));
			}

			//next, get the id of posts with that term in that tax
			foreach ( $terms as $term ) {
				$term_ids[] = $term[0]->term_id;
			}

			$post_ids = get_objects_in_term($term_ids, $wp_query->query_vars['taxonomy']);

			if ( !is_wp_error($post_ids) && count($post_ids) ) {
				// build the new query
				$new_where = "" AND $wpdb->posts.ID IN ("" . implode(', ', $post_ids) . "") "";
				// re-add any other query vars via concatenation on the $new_where string below here

				// now, sub out the bad where with the good
				$where = str_replace(""AND 0"", $new_where, $where);
			} else {
				// give up
			}
		}
		return $where;
	}
	add_filter(""posts_where"", ""multi_tax_terms"");
}

/*
 * add menu order support for Single Portfolio Item Previous & Next Navigation
 */
$order = theme_get_option('portfolio','single_navigation_order');
if($order = 'menu_order'){
	function get_previous_portfolio_menu_order_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$current_menu_order = $post->menu_order;
			$where = $wpdb->prepare(""WHERE p.menu_order < %s AND p.post_type = 'portfolio' AND p.post_status = 'publish'"", $current_menu_order);
		}
		return $where;
	}
	function get_next_portfolio_menu_order_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$current_menu_order = $post->menu_order;
			$where = $wpdb->prepare(""WHERE p.menu_order > %s AND p.post_type = 'portfolio' AND p.post_status = 'publish'"", $current_menu_order);
		}
		return $where;
	}
	add_filter(""get_previous_post_where"", ""get_previous_portfolio_menu_order_where"");
	add_filter(""get_next_post_where"", ""get_next_portfolio_menu_order_where"");

	function get_previous_portfolio_menu_order_sort($sort){
		global $post;
		if($post->post_type == 'portfolio'){
			$sort = ""ORDER BY p.menu_order DESC LIMIT 1"";
		}
		return $sort;
	}
	function get_next_portfolio_menu_order_sort($sort){
		global $post;
		if($post->post_type == 'portfolio'){
			$sort = ""ORDER BY p.menu_order ASC LIMIT 1"";	
		}
		return $sort;
	}

	add_filter(""get_previous_post_sort"", ""get_previous_portfolio_menu_order_sort"");
	add_filter(""get_next_post_sort"", ""get_next_portfolio_menu_order_sort"");
}

/*
 * Single Portfolio Item Document Type Navigation
 */
if(theme_get_option('portfolio','single_doc_navigation')){
	function get_adjacent_doc_portfolio_join($join){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$join .= "" JOIN $wpdb->postmeta ON (p.ID = $wpdb->postmeta.post_id) "";
		}
		return $join;	
	}
	add_filter(""get_previous_post_join"", ""get_adjacent_doc_portfolio_join"");
	add_filter(""get_next_post_join"", ""get_adjacent_doc_portfolio_join"");

	function get_adjacent_doc_portfolio_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$where .= $wpdb->prepare("" AND $wpdb->postmeta.meta_key = %s "", '_type');
			$where .= $wpdb->prepare(""AND $wpdb->postmeta.meta_value = %s "", 'doc');
		}
		return $where;
	}
	add_filter(""get_previous_post_where"", ""get_adjacent_doc_portfolio_where"");
	add_filter(""get_next_post_where"", ""get_adjacent_doc_portfolio_where"");
}

// custom post type for google sitemap plugin
if(class_exists('GoogleSitemapGeneratorLoader')){
	require_once (THEME_PLUGINS . '/guar_sitemap/guar_sitemap.php');
	function theme_sitemap_filter($posttypes)
	{
		foreach($posttypes as $key => $val)
		{
			if($val=='slideshow')
			{
				unset($posttypes[$key]);
			}
		}
		$posttypes[] = 'portfolio';
		return $posttypes;
	}
 
	add_filter('guar_sitemap_posttype_filter','theme_sitemap_filter',10,1);
}
","<?php
function theme_more_link($more_link, $more_link_text) {
	
	$more_link = '[raw]' . $more_link . '[/raw]';
	
	return str_replace('more-link', 'read_more_link', $more_link);
}
add_filter('the_content_more_link', 'theme_more_link', 10, 2);

function theme_excerpt_more($excerpt) {
	return str_replace('[...]', '...', $excerpt);
}
add_filter('wp_trim_excerpt', 'theme_excerpt_more');

function theme_exclude_category_feed() {
	$exclude_cats = theme_get_option('blog','exclude_categorys');
	foreach ($exclude_cats as $key => $cat) {
		$exclude_cats[$key] = -$cat;
	}
	if ( is_feed() ) {
		set_query_var(""cat"", implode("","",$exclude_cats));
	}
}
add_filter('pre_get_posts', 'theme_exclude_category_feed');

/*
 * Remove Blog categories from category widget
 */
function theme_exclude_category_widget($cat_args)
{
	$exclude_cats = theme_get_option('blog','exclude_categorys');
	
	if(is_array($exclude_cats)){
		$cat_args['exclude'] = implode("","",$exclude_cats);
	}
 	return $cat_args;
}
add_filter('widget_categories_args', 'theme_exclude_category_widget');


function theme_exclude_the_categorys($thelist,$separator=' ') {
	if(!defined('WP_ADMIN')) {
		//Category IDs to exclude
		$exclude = theme_get_option('blog','exclude_categorys');

		$exclude2 = array();
		foreach($exclude as $c) {
			$exclude2[] = get_cat_name($c);
		}

		$cats = explode($separator,$thelist);
		$newlist = array();
		foreach($cats as $cat) {
			$catname = trim(strip_tags($cat));
			if(!in_array($catname,$exclude2))
				$newlist[] = $cat;
		}
		return implode($separator,$newlist);
	} else {
		return $thelist;
	}
}
add_filter('the_category','theme_exclude_the_categorys',10,2);

/*
 * add a span element for style in the page
 */
function theme_comment_style($return) {
	return str_replace($return, ""<span></span>$return"", $return);
}
add_filter('get_comment_author_link', 'theme_comment_style');

function theme_widget_title_remove_space($return){
	$return = trim($return);
	if('&nbsp;' == $return){
		return '';	
	}else{
		return $return;
	}
}
add_filter('widget_title', 'theme_widget_title_remove_space');

function theme_widget_text_shortcode($content) {
	$content = do_shortcode($content);
	$new_content = '';
	$pattern_full = '{(\[raw\].*?\[/raw\])}is';
	$pattern_contents = '{\[raw\](.*?)\[/raw\]}is';
	$pieces = preg_split($pattern_full, $content, -1, PREG_SPLIT_DELIM_CAPTURE);
	
	foreach ($pieces as $piece) {
		if (preg_match($pattern_contents, $piece, $matches)) {
			$new_content .= $matches[1];
		} else {
			$new_content .= do_shortcode($piece);
		}
	}

	return $new_content;
}
// Allow Shortcodes in Sidebar Widgets
add_filter('widget_text', 'theme_widget_text_shortcode');

global $wp_version;
if(version_compare($wp_version, ""3.1"", '<')){
	/*
	 * Thank to Bob Sherron.
	 * http://stackoverflow.com/questions/1155565/query-multiple-custom-taxonomy-terms-in-wordpress-2-8/2060777#2060777
	 */
	function multi_tax_terms($where) {
		global $wp_query;
		global $wpdb;
		if (isset($wp_query->query_vars['term']) && (strpos($wp_query->query_vars['term'], ',') !== false && strpos($where, ""AND 0"") !== false) ) {
			// it's failing because taxonomies can't handle multiple terms
			//first, get the terms
			$term_arr = explode("","", $wp_query->query_vars['term']);
			foreach($term_arr as $term_item) {
				$terms[] = get_terms($wp_query->query_vars['taxonomy'], array('slug' => $term_item));
			}

			//next, get the id of posts with that term in that tax
			foreach ( $terms as $term ) {
				$term_ids[] = $term[0]->term_id;
			}

			$post_ids = get_objects_in_term($term_ids, $wp_query->query_vars['taxonomy']);

			if ( !is_wp_error($post_ids) && count($post_ids) ) {
				// build the new query
				$new_where = "" AND $wpdb->posts.ID IN ("" . implode(', ', $post_ids) . "") "";
				// re-add any other query vars via concatenation on the $new_where string below here

				// now, sub out the bad where with the good
				$where = str_replace(""AND 0"", $new_where, $where);
			} else {
				// give up
			}
		}
		return $where;
	}
	add_filter(""posts_where"", ""multi_tax_terms"");
}

/*
 * add menu order support for Single Portfolio Item Previous & Next Navigation
 */
$order = theme_get_option('portfolio','single_navigation_order');
if($order = 'menu_order'){
	function get_previous_portfolio_menu_order_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$current_menu_order = $post->menu_order;
			$where = $wpdb->prepare(""WHERE p.menu_order < %s AND p.post_type = 'portfolio' AND p.post_status = 'publish'"", $current_menu_order);
		}
		return $where;
	}
	function get_next_portfolio_menu_order_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$current_menu_order = $post->menu_order;
			$where = $wpdb->prepare(""WHERE p.menu_order > %s AND p.post_type = 'portfolio' AND p.post_status = 'publish'"", $current_menu_order);
		}
		return $where;
	}
	add_filter(""get_previous_post_where"", ""get_previous_portfolio_menu_order_where"");
	add_filter(""get_next_post_where"", ""get_next_portfolio_menu_order_where"");

	function get_previous_portfolio_menu_order_sort($sort){
		global $post;
		if($post->post_type == 'portfolio'){
			$sort = ""ORDER BY p.menu_order DESC LIMIT 1"";
		}
		return $sort;
	}
	function get_next_portfolio_menu_order_sort($sort){
		global $post;
		if($post->post_type == 'portfolio'){
			$sort = ""ORDER BY p.menu_order ASC LIMIT 1"";	
		}
		return $sort;
	}

	add_filter(""get_previous_post_sort"", ""get_previous_portfolio_menu_order_sort"");
	add_filter(""get_next_post_sort"", ""get_next_portfolio_menu_order_sort"");
}

/*
 * Single Portfolio Item Document Type Navigation
 */
if(theme_get_option('portfolio','single_doc_navigation')){
	function get_adjacent_doc_portfolio_join($join){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$join .= "" JOIN $wpdb->postmeta ON (p.ID = $wpdb->postmeta.post_id) "";
		}
		return $join;	
	}
	add_filter(""get_previous_post_join"", ""get_adjacent_doc_portfolio_join"");
	add_filter(""get_next_post_join"", ""get_adjacent_doc_portfolio_join"");

	function get_adjacent_doc_portfolio_where($where){
		global $post, $wpdb;
		if($post->post_type == 'portfolio'){
			$where .= $wpdb->prepare("" AND $wpdb->postmeta.meta_key = %s "", '_type');
			$where .= $wpdb->prepare(""AND $wpdb->postmeta.meta_value = %s "", 'doc');
		}
		return $where;
	}
	add_filter(""get_previous_post_where"", ""get_adjacent_doc_portfolio_where"");
	add_filter(""get_next_post_where"", ""get_adjacent_doc_portfolio_where"");
}

// custom post type for google sitemap plugin
if(class_exists('GoogleSitemapGeneratorLoader')){
	require_once (THEME_PLUGINS . '/guar_sitemap/guar_sitemap.php');
	function theme_sitemap_filter($posttypes)
	{
		foreach($posttypes as $key => $val)
		{
			if($val=='slideshow')
			{
				unset($posttypes[$key]);
			}
		}
		$posttypes[] = 'portfolio';
		return $posttypes;
	}
 
	add_filter('guar_sitemap_posttype_filter','theme_sitemap_filter',10,1);
}
",TRUE,,3790
3785,InitialSO.csv3785.txt,InitialGit.csv3785.txt,3,"function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

console.log(uuidv4()) Math.random() Math.random() crypto function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  )
}

console.log(uuidv4()); ","uuid crypto.randomUUID() Node.js function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

console.log(uuidv4()); ",FALSE,"/*! Raven.js 3.24.1 (f3b3500) | github.com/getsentry/raven-js */

/*
 * Includes TraceKit
 * https://github.com/getsentry/TraceKit
 *
 * Copyright 2018 Matt Robenolt and other contributors
 * Released under the BSD license
 * https://github.com/getsentry/raven-js/blob/master/LICENSE
 *
 */

(function(f){if(typeof exports===""object""&&typeof module!==""undefined""){module.exports=f()}else if(typeof define===""function""&&define.amd){define([],f)}else{var g;if(typeof window!==""undefined""){g=window}else if(typeof global!==""undefined""){g=global}else if(typeof self!==""undefined""){g=self}else{g=this}g=(g.Raven||(g.Raven = {}));g=(g.Plugins||(g.Plugins = {}));g.Console = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==""function""&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(""Cannot find module '""+o+""'"");throw f.code=""MODULE_NOT_FOUND"",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==""function""&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * console plugin
 *
 * Monkey patches console.* calls into Sentry messages with
 * their appropriate log levels. (Experimental)
 *
 * Options:
 *
 *   `levels`: An array of levels (methods on `console`) to report to Sentry.
 *     Defaults to debug, info, warn, and error.
 */
var wrapConsoleMethod = _dereq_(2).wrapMethod;

function consolePlugin(Raven, console, pluginOptions) {
  console = console || window.console || {};
  pluginOptions = pluginOptions || {};

  var logLevels = pluginOptions.levels || ['debug', 'info', 'warn', 'error'];
  if ('assert' in console) logLevels.push('assert');

  var callback = function(msg, data) {
    Raven.captureMessage(msg, data);
  };

  var level = logLevels.pop();
  while (level) {
    wrapConsoleMethod(console, level, callback);
    level = logLevels.pop();
  }
}

module.exports = consolePlugin;

},{""2"":2}],2:[function(_dereq_,module,exports){
var utils = _dereq_(3);

var wrapMethod = function(console, level, callback) {
  var originalConsoleLevel = console[level];
  var originalConsole = console;

  if (!(level in console)) {
    return;
  }

  var sentryLevel = level === 'warn' ? 'warning' : level;

  console[level] = function() {
    var args = [].slice.call(arguments);

    var msg = utils.safeJoin(args, ' ');
    var data = {level: sentryLevel, logger: 'console', extra: {arguments: args}};

    if (level === 'assert') {
      if (args[0] === false) {
        // Default browsers message
        msg =
          'Assertion failed: ' + (utils.safeJoin(args.slice(1), ' ') || 'console.assert');
        data.extra.arguments = args.slice(1);
        callback && callback(msg, data);
      }
    } else {
      callback && callback(msg, data);
    }

    // this fails for some browsers. :(
    if (originalConsoleLevel) {
      // IE9 doesn't allow calling apply on console functions directly
      // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193
      Function.prototype.apply.call(originalConsoleLevel, originalConsole, args);
    }
  };
};

module.exports = {
  wrapMethod: wrapMethod
};

},{""3"":3}],3:[function(_dereq_,module,exports){
(function (global){
var stringify = _dereq_(4);

var _window =
  typeof window !== 'undefined'
    ? window
    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function isObject(what) {
  return typeof what === 'object' && what !== null;
}

// Yanked from https://git.io/vS8DV re-used under CC0
// with some tiny modifications
function isError(value) {
  switch ({}.toString.call(value)) {
    case '[object Error]':
      return true;
    case '[object Exception]':
      return true;
    case '[object DOMException]':
      return true;
    default:
      return value instanceof Error;
  }
}

function isErrorEvent(value) {
  return supportsErrorEvent() && {}.toString.call(value) === '[object ErrorEvent]';
}

function isUndefined(what) {
  return what === void 0;
}

function isFunction(what) {
  return typeof what === 'function';
}

function isPlainObject(what) {
  return Object.prototype.toString.call(what) === '[object Object]';
}

function isString(what) {
  return Object.prototype.toString.call(what) === '[object String]';
}

function isArray(what) {
  return Object.prototype.toString.call(what) === '[object Array]';
}

function isEmptyObject(what) {
  if (!isPlainObject(what)) return false;

  for (var _ in what) {
    if (what.hasOwnProperty(_)) {
      return false;
    }
  }
  return true;
}

function supportsErrorEvent() {
  try {
    new ErrorEvent(''); // eslint-disable-line no-new
    return true;
  } catch (e) {
    return false;
  }
}

function supportsFetch() {
  if (!('fetch' in _window)) return false;

  try {
    new Headers(); // eslint-disable-line no-new
    new Request(''); // eslint-disable-line no-new
    new Response(); // eslint-disable-line no-new
    return true;
  } catch (e) {
    return false;
  }
}

// Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
// https://caniuse.com/#feat=referrer-policy
// It doesn't. And it throw exception instead of ignoring this parameter...
// REF: https://github.com/getsentry/raven-js/issues/1233
function supportsReferrerPolicy() {
  if (!supportsFetch()) return false;

  try {
    // eslint-disable-next-line no-new
    new Request('pickleRick', {
      referrerPolicy: 'origin'
    });
    return true;
  } catch (e) {
    return false;
  }
}

function supportsPromiseRejectionEvent() {
  return typeof PromiseRejectionEvent === 'function';
}

function wrappedCallback(callback) {
  function dataCallback(data, original) {
    var normalizedData = callback(data) || data;
    if (original) {
      return original(normalizedData) || normalizedData;
    }
    return normalizedData;
  }

  return dataCallback;
}

function each(obj, callback) {
  var i, j;

  if (isUndefined(obj.length)) {
    for (i in obj) {
      if (hasKey(obj, i)) {
        callback.call(null, i, obj[i]);
      }
    }
  } else {
    j = obj.length;
    if (j) {
      for (i = 0; i < j; i++) {
        callback.call(null, i, obj[i]);
      }
    }
  }
}

function objectMerge(obj1, obj2) {
  if (!obj2) {
    return obj1;
  }
  each(obj2, function(key, value) {
    obj1[key] = value;
  });
  return obj1;
}

/**
 * This function is only used for react-native.
 * react-native freezes object that have already been sent over the
 * js bridge. We need this function in order to check if the object is frozen.
 * So it's ok that objectFrozen returns false if Object.isFrozen is not
 * supported because it's not relevant for other ""platforms"". See related issue:
 * https://github.com/getsentry/react-native-sentry/issues/57
 */
function objectFrozen(obj) {
  if (!Object.isFrozen) {
    return false;
  }
  return Object.isFrozen(obj);
}

function truncate(str, max) {
  return !max || str.length <= max ? str : str.substr(0, max) + '\u2026';
}

/**
 * hasKey, a better form of hasOwnProperty
 * Example: hasKey(MainHostObject, property) === true/false
 *
 * @param {Object} host object to check property
 * @param {string} key to check
 */
function hasKey(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}

function joinRegExp(patterns) {
  // Combine an array of regular expressions and strings into one large regexp
  // Be mad.
  var sources = [],
    i = 0,
    len = patterns.length,
    pattern;

  for (; i < len; i++) {
    pattern = patterns[i];
    if (isString(pattern)) {
      // If it's a string, we need to escape it
      // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
      sources.push(pattern.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1'));
    } else if (pattern && pattern.source) {
      // If it's a regexp already, we want to extract the source
      sources.push(pattern.source);
    }
    // Intentionally skip other cases
  }
  return new RegExp(sources.join('|'), 'i');
}

function urlencode(o) {
  var pairs = [];
  each(o, function(key, value) {
    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
  });
  return pairs.join('&');
}

// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
// intentionally using regex and not <a/> href parsing trick because React Native and other
// environments where DOM might not be available
function parseUrl(url) {
  if (typeof url !== 'string') return {};
  var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);

  // coerce to undefined values to empty string so we don't get 'undefined'
  var query = match[6] || '';
  var fragment = match[8] || '';
  return {
    protocol: match[2],
    host: match[4],
    path: match[5],
    relative: match[5] + query + fragment // everything minus origin
  };
}
function uuid4() {
  var crypto = _window.crypto || _window.msCrypto;

  if (!isUndefined(crypto) && crypto.getRandomValues) {
    // Use window.crypto API if available
    // eslint-disable-next-line no-undef
    var arr = new Uint16Array(8);
    crypto.getRandomValues(arr);

    // set 4 in byte 7
    arr[3] = (arr[3] & 0xfff) | 0x4000;
    // set 2 most significant bits of byte 9 to '10'
    arr[4] = (arr[4] & 0x3fff) | 0x8000;

    var pad = function(num) {
      var v = num.toString(16);
      while (v.length < 4) {
        v = '0' + v;
      }
      return v;
    };

    return (
      pad(arr[0]) +
      pad(arr[1]) +
      pad(arr[2]) +
      pad(arr[3]) +
      pad(arr[4]) +
      pad(arr[5]) +
      pad(arr[6]) +
      pad(arr[7])
    );
  } else {
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (Math.random() * 16) | 0,
        v = c === 'x' ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  }
}

/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @param elem
 * @returns {string}
 */
function htmlTreeAsString(elem) {
  /* eslint no-extra-parens:0*/
  var MAX_TRAVERSE_HEIGHT = 5,
    MAX_OUTPUT_LEN = 80,
    out = [],
    height = 0,
    len = 0,
    separator = ' > ',
    sepLength = separator.length,
    nextStr;

  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {
    nextStr = htmlElementAsString(elem);
    // bail out if
    // - nextStr is the 'html' element
    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
    //   (ignore this limit if we are on the first iteration)
    if (
      nextStr === 'html' ||
      (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)
    ) {
      break;
    }

    out.push(nextStr);

    len += nextStr.length;
    elem = elem.parentNode;
  }

  return out.reverse().join(separator);
}

/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @param HTMLElement
 * @returns {string}
 */
function htmlElementAsString(elem) {
  var out = [],
    className,
    classes,
    key,
    attr,
    i;

  if (!elem || !elem.tagName) {
    return '';
  }

  out.push(elem.tagName.toLowerCase());
  if (elem.id) {
    out.push('#' + elem.id);
  }

  className = elem.className;
  if (className && isString(className)) {
    classes = className.split(/\s+/);
    for (i = 0; i < classes.length; i++) {
      out.push('.' + classes[i]);
    }
  }
  var attrWhitelist = ['type', 'name', 'title', 'alt'];
  for (i = 0; i < attrWhitelist.length; i++) {
    key = attrWhitelist[i];
    attr = elem.getAttribute(key);
    if (attr) {
      out.push('[' + key + '=""' + attr + '""]');
    }
  }
  return out.join('');
}

/**
 * Returns true if either a OR b is truthy, but not both
 */
function isOnlyOneTruthy(a, b) {
  return !!(!!a ^ !!b);
}

/**
 * Returns true if both parameters are undefined
 */
function isBothUndefined(a, b) {
  return isUndefined(a) && isUndefined(b);
}

/**
 * Returns true if the two input exception interfaces have the same content
 */
function isSameException(ex1, ex2) {
  if (isOnlyOneTruthy(ex1, ex2)) return false;

  ex1 = ex1.values[0];
  ex2 = ex2.values[0];

  if (ex1.type !== ex2.type || ex1.value !== ex2.value) return false;

  // in case both stacktraces are undefined, we can't decide so default to false
  if (isBothUndefined(ex1.stacktrace, ex2.stacktrace)) return false;

  return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);
}

/**
 * Returns true if the two input stack trace interfaces have the same content
 */
function isSameStacktrace(stack1, stack2) {
  if (isOnlyOneTruthy(stack1, stack2)) return false;

  var frames1 = stack1.frames;
  var frames2 = stack2.frames;

  // Exit early if frame count differs
  if (frames1.length !== frames2.length) return false;

  // Iterate through every frame; bail out if anything differs
  var a, b;
  for (var i = 0; i < frames1.length; i++) {
    a = frames1[i];
    b = frames2[i];
    if (
      a.filename !== b.filename ||
      a.lineno !== b.lineno ||
      a.colno !== b.colno ||
      a['function'] !== b['function']
    )
      return false;
  }
  return true;
}

/**
 * Polyfill a method
 * @param obj object e.g. `document`
 * @param name method name present on object e.g. `addEventListener`
 * @param replacement replacement function
 * @param track {optional} record instrumentation to an array
 */
function fill(obj, name, replacement, track) {
  if (obj == null) return;
  var orig = obj[name];
  obj[name] = replacement(orig);
  obj[name].__raven__ = true;
  obj[name].__orig__ = orig;
  if (track) {
    track.push([obj, name, orig]);
  }
}

/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns {string}
 */
function safeJoin(input, delimiter) {
  if (!isArray(input)) return '';

  var output = [];

  for (var i = 0; i < input.length; i++) {
    try {
      output.push(String(input[i]));
    } catch (e) {
      output.push('[value cannot be serialized]');
    }
  }

  return output.join(delimiter);
}

// Default Node.js REPL depth
var MAX_SERIALIZE_EXCEPTION_DEPTH = 3;
// 50kB, as 100kB is max payload size, so half sounds reasonable
var MAX_SERIALIZE_EXCEPTION_SIZE = 50 * 1024;
var MAX_SERIALIZE_KEYS_LENGTH = 40;

function utf8Length(value) {
  return ~-encodeURI(value).split(/%..|./).length;
}

function jsonSize(value) {
  return utf8Length(JSON.stringify(value));
}

function serializeValue(value) {
  var maxLength = 40;

  if (typeof value === 'string') {
    return value.length <= maxLength ? value : value.substr(0, maxLength - 1) + '\u2026';
  } else if (
    typeof value === 'number' ||
    typeof value === 'boolean' ||
    typeof value === 'undefined'
  ) {
    return value;
  }

  var type = Object.prototype.toString.call(value);

  // Node.js REPL notation
  if (type === '[object Object]') return '[Object]';
  if (type === '[object Array]') return '[Array]';
  if (type === '[object Function]')
    return value.name ? '[Function: ' + value.name + ']' : '[Function]';

  return value;
}

function serializeObject(value, depth) {
  if (depth === 0) return serializeValue(value);

  if (isPlainObject(value)) {
    return Object.keys(value).reduce(function(acc, key) {
      acc[key] = serializeObject(value[key], depth - 1);
      return acc;
    }, {});
  } else if (Array.isArray(value)) {
    return value.map(function(val) {
      return serializeObject(val, depth - 1);
    });
  }

  return serializeValue(value);
}

function serializeException(ex, depth, maxSize) {
  if (!isPlainObject(ex)) return ex;

  depth = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_DEPTH : depth;
  maxSize = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_SIZE : maxSize;

  var serialized = serializeObject(ex, depth);

  if (jsonSize(stringify(serialized)) > maxSize) {
    return serializeException(ex, depth - 1);
  }

  return serialized;
}

function serializeKeysForMessage(keys, maxLength) {
  if (typeof keys === 'number' || typeof keys === 'string') return keys.toString();
  if (!Array.isArray(keys)) return '';

  keys = keys.filter(function(key) {
    return typeof key === 'string';
  });
  if (keys.length === 0) return '[object has no keys]';

  maxLength = typeof maxLength !== 'number' ? MAX_SERIALIZE_KEYS_LENGTH : maxLength;
  if (keys[0].length >= maxLength) return keys[0];

  for (var usedKeys = keys.length; usedKeys > 0; usedKeys--) {
    var serialized = keys.slice(0, usedKeys).join(', ');
    if (serialized.length > maxLength) continue;
    if (usedKeys === keys.length) return serialized;
    return serialized + '\u2026';
  }

  return '';
}

function sanitize(input, sanitizeKeys) {
  if (!isArray(sanitizeKeys) || (isArray(sanitizeKeys) && sanitizeKeys.length === 0))
    return input;

  var sanitizeRegExp = joinRegExp(sanitizeKeys);
  var sanitizeMask = '********';
  var safeInput;

  try {
    safeInput = JSON.parse(stringify(input));
  } catch (o_O) {
    return input;
  }

  function sanitizeWorker(workerInput) {
    if (isArray(workerInput)) {
      return workerInput.map(function(val) {
        return sanitizeWorker(val);
      });
    }

    if (isPlainObject(workerInput)) {
      return Object.keys(workerInput).reduce(function(acc, k) {
        if (sanitizeRegExp.test(k)) {
          acc[k] = sanitizeMask;
        } else {
          acc[k] = sanitizeWorker(workerInput[k]);
        }
        return acc;
      }, {});
    }

    return workerInput;
  }

  return sanitizeWorker(safeInput);
}

module.exports = {
  isObject: isObject,
  isError: isError,
  isErrorEvent: isErrorEvent,
  isUndefined: isUndefined,
  isFunction: isFunction,
  isPlainObject: isPlainObject,
  isString: isString,
  isArray: isArray,
  isEmptyObject: isEmptyObject,
  supportsErrorEvent: supportsErrorEvent,
  supportsFetch: supportsFetch,
  supportsReferrerPolicy: supportsReferrerPolicy,
  supportsPromiseRejectionEvent: supportsPromiseRejectionEvent,
  wrappedCallback: wrappedCallback,
  each: each,
  objectMerge: objectMerge,
  truncate: truncate,
  objectFrozen: objectFrozen,
  hasKey: hasKey,
  joinRegExp: joinRegExp,
  urlencode: urlencode,
  uuid4: uuid4,
  htmlTreeAsString: htmlTreeAsString,
  htmlElementAsString: htmlElementAsString,
  isSameException: isSameException,
  isSameStacktrace: isSameStacktrace,
  parseUrl: parseUrl,
  fill: fill,
  safeJoin: safeJoin,
  serializeException: serializeException,
  serializeKeysForMessage: serializeKeysForMessage,
  sanitize: sanitize
};

}).call(this,typeof global !== ""undefined"" ? global : typeof self !== ""undefined"" ? self : typeof window !== ""undefined"" ? window : {})
},{""4"":4}],4:[function(_dereq_,module,exports){
/*
 json-stringify-safe
 Like JSON.stringify, but doesn't throw on circular references.

 Originally forked from https://github.com/isaacs/json-stringify-safe
 version 5.0.1 on 3/8/2017 and modified to handle Errors serialization
 and IE8 compatibility. Tests for this are in test/vendor.

 ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE
*/

exports = module.exports = stringify;
exports.getSerialize = serializer;

function indexOf(haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) return i;
  }
  return -1;
}

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
}

// https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106
function stringifyError(value) {
  var err = {
    // These properties are implemented as magical getters and don't show up in for in
    stack: value.stack,
    message: value.message,
    name: value.name
  };

  for (var i in value) {
    if (Object.prototype.hasOwnProperty.call(value, i)) {
      err[i] = value[i];
    }
  }

  return err;
}

function serializer(replacer, cycleReplacer) {
  var stack = [];
  var keys = [];

  if (cycleReplacer == null) {
    cycleReplacer = function(key, value) {
      if (stack[0] === value) {
        return '[Circular ~]';
      }
      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';
    };
  }

  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = indexOf(stack, this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);

      if (~indexOf(stack, value)) {
        value = cycleReplacer.call(this, key, value);
      }
    } else {
      stack.push(value);
    }

    return replacer == null
      ? value instanceof Error ? stringifyError(value) : value
      : replacer.call(this, key, value);
  };
}

},{}]},{},[1])(1)
});","/*! Raven.js 3.24.1 (f3b3500) | github.com/getsentry/raven-js */

/*
 * Includes TraceKit
 * https://github.com/getsentry/TraceKit
 *
 * Copyright 2018 Matt Robenolt and other contributors
 * Released under the BSD license
 * https://github.com/getsentry/raven-js/blob/master/LICENSE
 *
 */

(function(f){if(typeof exports===""object""&&typeof module!==""undefined""){module.exports=f()}else if(typeof define===""function""&&define.amd){define([],f)}else{var g;if(typeof window!==""undefined""){g=window}else if(typeof global!==""undefined""){g=global}else if(typeof self!==""undefined""){g=self}else{g=this}g=(g.Raven||(g.Raven = {}));g=(g.Plugins||(g.Plugins = {}));g.Console = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==""function""&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(""Cannot find module '""+o+""'"");throw f.code=""MODULE_NOT_FOUND"",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==""function""&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * console plugin
 *
 * Monkey patches console.* calls into Sentry messages with
 * their appropriate log levels. (Experimental)
 *
 * Options:
 *
 *   `levels`: An array of levels (methods on `console`) to report to Sentry.
 *     Defaults to debug, info, warn, and error.
 */
var wrapConsoleMethod = _dereq_(2).wrapMethod;

function consolePlugin(Raven, console, pluginOptions) {
  console = console || window.console || {};
  pluginOptions = pluginOptions || {};

  var logLevels = pluginOptions.levels || ['debug', 'info', 'warn', 'error'];
  if ('assert' in console) logLevels.push('assert');

  var callback = function(msg, data) {
    Raven.captureMessage(msg, data);
  };

  var level = logLevels.pop();
  while (level) {
    wrapConsoleMethod(console, level, callback);
    level = logLevels.pop();
  }
}

module.exports = consolePlugin;

},{""2"":2}],2:[function(_dereq_,module,exports){
var utils = _dereq_(3);

var wrapMethod = function(console, level, callback) {
  var originalConsoleLevel = console[level];
  var originalConsole = console;

  if (!(level in console)) {
    return;
  }

  var sentryLevel = level === 'warn' ? 'warning' : level;

  console[level] = function() {
    var args = [].slice.call(arguments);

    var msg = utils.safeJoin(args, ' ');
    var data = {level: sentryLevel, logger: 'console', extra: {arguments: args}};

    if (level === 'assert') {
      if (args[0] === false) {
        // Default browsers message
        msg =
          'Assertion failed: ' + (utils.safeJoin(args.slice(1), ' ') || 'console.assert');
        data.extra.arguments = args.slice(1);
        callback && callback(msg, data);
      }
    } else {
      callback && callback(msg, data);
    }

    // this fails for some browsers. :(
    if (originalConsoleLevel) {
      // IE9 doesn't allow calling apply on console functions directly
      // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193
      Function.prototype.apply.call(originalConsoleLevel, originalConsole, args);
    }
  };
};

module.exports = {
  wrapMethod: wrapMethod
};

},{""3"":3}],3:[function(_dereq_,module,exports){
(function (global){
var stringify = _dereq_(4);

var _window =
  typeof window !== 'undefined'
    ? window
    : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function isObject(what) {
  return typeof what === 'object' && what !== null;
}

// Yanked from https://git.io/vS8DV re-used under CC0
// with some tiny modifications
function isError(value) {
  switch ({}.toString.call(value)) {
    case '[object Error]':
      return true;
    case '[object Exception]':
      return true;
    case '[object DOMException]':
      return true;
    default:
      return value instanceof Error;
  }
}

function isErrorEvent(value) {
  return supportsErrorEvent() && {}.toString.call(value) === '[object ErrorEvent]';
}

function isUndefined(what) {
  return what === void 0;
}

function isFunction(what) {
  return typeof what === 'function';
}

function isPlainObject(what) {
  return Object.prototype.toString.call(what) === '[object Object]';
}

function isString(what) {
  return Object.prototype.toString.call(what) === '[object String]';
}

function isArray(what) {
  return Object.prototype.toString.call(what) === '[object Array]';
}

function isEmptyObject(what) {
  if (!isPlainObject(what)) return false;

  for (var _ in what) {
    if (what.hasOwnProperty(_)) {
      return false;
    }
  }
  return true;
}

function supportsErrorEvent() {
  try {
    new ErrorEvent(''); // eslint-disable-line no-new
    return true;
  } catch (e) {
    return false;
  }
}

function supportsFetch() {
  if (!('fetch' in _window)) return false;

  try {
    new Headers(); // eslint-disable-line no-new
    new Request(''); // eslint-disable-line no-new
    new Response(); // eslint-disable-line no-new
    return true;
  } catch (e) {
    return false;
  }
}

// Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default
// https://caniuse.com/#feat=referrer-policy
// It doesn't. And it throw exception instead of ignoring this parameter...
// REF: https://github.com/getsentry/raven-js/issues/1233
function supportsReferrerPolicy() {
  if (!supportsFetch()) return false;

  try {
    // eslint-disable-next-line no-new
    new Request('pickleRick', {
      referrerPolicy: 'origin'
    });
    return true;
  } catch (e) {
    return false;
  }
}

function supportsPromiseRejectionEvent() {
  return typeof PromiseRejectionEvent === 'function';
}

function wrappedCallback(callback) {
  function dataCallback(data, original) {
    var normalizedData = callback(data) || data;
    if (original) {
      return original(normalizedData) || normalizedData;
    }
    return normalizedData;
  }

  return dataCallback;
}

function each(obj, callback) {
  var i, j;

  if (isUndefined(obj.length)) {
    for (i in obj) {
      if (hasKey(obj, i)) {
        callback.call(null, i, obj[i]);
      }
    }
  } else {
    j = obj.length;
    if (j) {
      for (i = 0; i < j; i++) {
        callback.call(null, i, obj[i]);
      }
    }
  }
}

function objectMerge(obj1, obj2) {
  if (!obj2) {
    return obj1;
  }
  each(obj2, function(key, value) {
    obj1[key] = value;
  });
  return obj1;
}

/**
 * This function is only used for react-native.
 * react-native freezes object that have already been sent over the
 * js bridge. We need this function in order to check if the object is frozen.
 * So it's ok that objectFrozen returns false if Object.isFrozen is not
 * supported because it's not relevant for other ""platforms"". See related issue:
 * https://github.com/getsentry/react-native-sentry/issues/57
 */
function objectFrozen(obj) {
  if (!Object.isFrozen) {
    return false;
  }
  return Object.isFrozen(obj);
}

function truncate(str, max) {
  return !max || str.length <= max ? str : str.substr(0, max) + '\u2026';
}

/**
 * hasKey, a better form of hasOwnProperty
 * Example: hasKey(MainHostObject, property) === true/false
 *
 * @param {Object} host object to check property
 * @param {string} key to check
 */
function hasKey(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}

function joinRegExp(patterns) {
  // Combine an array of regular expressions and strings into one large regexp
  // Be mad.
  var sources = [],
    i = 0,
    len = patterns.length,
    pattern;

  for (; i < len; i++) {
    pattern = patterns[i];
    if (isString(pattern)) {
      // If it's a string, we need to escape it
      // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
      sources.push(pattern.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1'));
    } else if (pattern && pattern.source) {
      // If it's a regexp already, we want to extract the source
      sources.push(pattern.source);
    }
    // Intentionally skip other cases
  }
  return new RegExp(sources.join('|'), 'i');
}

function urlencode(o) {
  var pairs = [];
  each(o, function(key, value) {
    pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
  });
  return pairs.join('&');
}

// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
// intentionally using regex and not <a/> href parsing trick because React Native and other
// environments where DOM might not be available
function parseUrl(url) {
  if (typeof url !== 'string') return {};
  var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);

  // coerce to undefined values to empty string so we don't get 'undefined'
  var query = match[6] || '';
  var fragment = match[8] || '';
  return {
    protocol: match[2],
    host: match[4],
    path: match[5],
    relative: match[5] + query + fragment // everything minus origin
  };
}
function uuid4() {
  var crypto = _window.crypto || _window.msCrypto;

  if (!isUndefined(crypto) && crypto.getRandomValues) {
    // Use window.crypto API if available
    // eslint-disable-next-line no-undef
    var arr = new Uint16Array(8);
    crypto.getRandomValues(arr);

    // set 4 in byte 7
    arr[3] = (arr[3] & 0xfff) | 0x4000;
    // set 2 most significant bits of byte 9 to '10'
    arr[4] = (arr[4] & 0x3fff) | 0x8000;

    var pad = function(num) {
      var v = num.toString(16);
      while (v.length < 4) {
        v = '0' + v;
      }
      return v;
    };

    return (
      pad(arr[0]) +
      pad(arr[1]) +
      pad(arr[2]) +
      pad(arr[3]) +
      pad(arr[4]) +
      pad(arr[5]) +
      pad(arr[6]) +
      pad(arr[7])
    );
  } else {
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (Math.random() * 16) | 0,
        v = c === 'x' ? r : (r & 0x3) | 0x8;
      return v.toString(16);
    });
  }
}

/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @param elem
 * @returns {string}
 */
function htmlTreeAsString(elem) {
  /* eslint no-extra-parens:0*/
  var MAX_TRAVERSE_HEIGHT = 5,
    MAX_OUTPUT_LEN = 80,
    out = [],
    height = 0,
    len = 0,
    separator = ' > ',
    sepLength = separator.length,
    nextStr;

  while (elem && height++ < MAX_TRAVERSE_HEIGHT) {
    nextStr = htmlElementAsString(elem);
    // bail out if
    // - nextStr is the 'html' element
    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
    //   (ignore this limit if we are on the first iteration)
    if (
      nextStr === 'html' ||
      (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)
    ) {
      break;
    }

    out.push(nextStr);

    len += nextStr.length;
    elem = elem.parentNode;
  }

  return out.reverse().join(separator);
}

/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @param HTMLElement
 * @returns {string}
 */
function htmlElementAsString(elem) {
  var out = [],
    className,
    classes,
    key,
    attr,
    i;

  if (!elem || !elem.tagName) {
    return '';
  }

  out.push(elem.tagName.toLowerCase());
  if (elem.id) {
    out.push('#' + elem.id);
  }

  className = elem.className;
  if (className && isString(className)) {
    classes = className.split(/\s+/);
    for (i = 0; i < classes.length; i++) {
      out.push('.' + classes[i]);
    }
  }
  var attrWhitelist = ['type', 'name', 'title', 'alt'];
  for (i = 0; i < attrWhitelist.length; i++) {
    key = attrWhitelist[i];
    attr = elem.getAttribute(key);
    if (attr) {
      out.push('[' + key + '=""' + attr + '""]');
    }
  }
  return out.join('');
}

/**
 * Returns true if either a OR b is truthy, but not both
 */
function isOnlyOneTruthy(a, b) {
  return !!(!!a ^ !!b);
}

/**
 * Returns true if both parameters are undefined
 */
function isBothUndefined(a, b) {
  return isUndefined(a) && isUndefined(b);
}

/**
 * Returns true if the two input exception interfaces have the same content
 */
function isSameException(ex1, ex2) {
  if (isOnlyOneTruthy(ex1, ex2)) return false;

  ex1 = ex1.values[0];
  ex2 = ex2.values[0];

  if (ex1.type !== ex2.type || ex1.value !== ex2.value) return false;

  // in case both stacktraces are undefined, we can't decide so default to false
  if (isBothUndefined(ex1.stacktrace, ex2.stacktrace)) return false;

  return isSameStacktrace(ex1.stacktrace, ex2.stacktrace);
}

/**
 * Returns true if the two input stack trace interfaces have the same content
 */
function isSameStacktrace(stack1, stack2) {
  if (isOnlyOneTruthy(stack1, stack2)) return false;

  var frames1 = stack1.frames;
  var frames2 = stack2.frames;

  // Exit early if frame count differs
  if (frames1.length !== frames2.length) return false;

  // Iterate through every frame; bail out if anything differs
  var a, b;
  for (var i = 0; i < frames1.length; i++) {
    a = frames1[i];
    b = frames2[i];
    if (
      a.filename !== b.filename ||
      a.lineno !== b.lineno ||
      a.colno !== b.colno ||
      a['function'] !== b['function']
    )
      return false;
  }
  return true;
}

/**
 * Polyfill a method
 * @param obj object e.g. `document`
 * @param name method name present on object e.g. `addEventListener`
 * @param replacement replacement function
 * @param track {optional} record instrumentation to an array
 */
function fill(obj, name, replacement, track) {
  if (obj == null) return;
  var orig = obj[name];
  obj[name] = replacement(orig);
  obj[name].__raven__ = true;
  obj[name].__orig__ = orig;
  if (track) {
    track.push([obj, name, orig]);
  }
}

/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns {string}
 */
function safeJoin(input, delimiter) {
  if (!isArray(input)) return '';

  var output = [];

  for (var i = 0; i < input.length; i++) {
    try {
      output.push(String(input[i]));
    } catch (e) {
      output.push('[value cannot be serialized]');
    }
  }

  return output.join(delimiter);
}

// Default Node.js REPL depth
var MAX_SERIALIZE_EXCEPTION_DEPTH = 3;
// 50kB, as 100kB is max payload size, so half sounds reasonable
var MAX_SERIALIZE_EXCEPTION_SIZE = 50 * 1024;
var MAX_SERIALIZE_KEYS_LENGTH = 40;

function utf8Length(value) {
  return ~-encodeURI(value).split(/%..|./).length;
}

function jsonSize(value) {
  return utf8Length(JSON.stringify(value));
}

function serializeValue(value) {
  var maxLength = 40;

  if (typeof value === 'string') {
    return value.length <= maxLength ? value : value.substr(0, maxLength - 1) + '\u2026';
  } else if (
    typeof value === 'number' ||
    typeof value === 'boolean' ||
    typeof value === 'undefined'
  ) {
    return value;
  }

  var type = Object.prototype.toString.call(value);

  // Node.js REPL notation
  if (type === '[object Object]') return '[Object]';
  if (type === '[object Array]') return '[Array]';
  if (type === '[object Function]')
    return value.name ? '[Function: ' + value.name + ']' : '[Function]';

  return value;
}

function serializeObject(value, depth) {
  if (depth === 0) return serializeValue(value);

  if (isPlainObject(value)) {
    return Object.keys(value).reduce(function(acc, key) {
      acc[key] = serializeObject(value[key], depth - 1);
      return acc;
    }, {});
  } else if (Array.isArray(value)) {
    return value.map(function(val) {
      return serializeObject(val, depth - 1);
    });
  }

  return serializeValue(value);
}

function serializeException(ex, depth, maxSize) {
  if (!isPlainObject(ex)) return ex;

  depth = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_DEPTH : depth;
  maxSize = typeof depth !== 'number' ? MAX_SERIALIZE_EXCEPTION_SIZE : maxSize;

  var serialized = serializeObject(ex, depth);

  if (jsonSize(stringify(serialized)) > maxSize) {
    return serializeException(ex, depth - 1);
  }

  return serialized;
}

function serializeKeysForMessage(keys, maxLength) {
  if (typeof keys === 'number' || typeof keys === 'string') return keys.toString();
  if (!Array.isArray(keys)) return '';

  keys = keys.filter(function(key) {
    return typeof key === 'string';
  });
  if (keys.length === 0) return '[object has no keys]';

  maxLength = typeof maxLength !== 'number' ? MAX_SERIALIZE_KEYS_LENGTH : maxLength;
  if (keys[0].length >= maxLength) return keys[0];

  for (var usedKeys = keys.length; usedKeys > 0; usedKeys--) {
    var serialized = keys.slice(0, usedKeys).join(', ');
    if (serialized.length > maxLength) continue;
    if (usedKeys === keys.length) return serialized;
    return serialized + '\u2026';
  }

  return '';
}

function sanitize(input, sanitizeKeys) {
  if (!isArray(sanitizeKeys) || (isArray(sanitizeKeys) && sanitizeKeys.length === 0))
    return input;

  var sanitizeRegExp = joinRegExp(sanitizeKeys);
  var sanitizeMask = '********';
  var safeInput;

  try {
    safeInput = JSON.parse(stringify(input));
  } catch (o_O) {
    return input;
  }

  function sanitizeWorker(workerInput) {
    if (isArray(workerInput)) {
      return workerInput.map(function(val) {
        return sanitizeWorker(val);
      });
    }

    if (isPlainObject(workerInput)) {
      return Object.keys(workerInput).reduce(function(acc, k) {
        if (sanitizeRegExp.test(k)) {
          acc[k] = sanitizeMask;
        } else {
          acc[k] = sanitizeWorker(workerInput[k]);
        }
        return acc;
      }, {});
    }

    return workerInput;
  }

  return sanitizeWorker(safeInput);
}

module.exports = {
  isObject: isObject,
  isError: isError,
  isErrorEvent: isErrorEvent,
  isUndefined: isUndefined,
  isFunction: isFunction,
  isPlainObject: isPlainObject,
  isString: isString,
  isArray: isArray,
  isEmptyObject: isEmptyObject,
  supportsErrorEvent: supportsErrorEvent,
  supportsFetch: supportsFetch,
  supportsReferrerPolicy: supportsReferrerPolicy,
  supportsPromiseRejectionEvent: supportsPromiseRejectionEvent,
  wrappedCallback: wrappedCallback,
  each: each,
  objectMerge: objectMerge,
  truncate: truncate,
  objectFrozen: objectFrozen,
  hasKey: hasKey,
  joinRegExp: joinRegExp,
  urlencode: urlencode,
  uuid4: uuid4,
  htmlTreeAsString: htmlTreeAsString,
  htmlElementAsString: htmlElementAsString,
  isSameException: isSameException,
  isSameStacktrace: isSameStacktrace,
  parseUrl: parseUrl,
  fill: fill,
  safeJoin: safeJoin,
  serializeException: serializeException,
  serializeKeysForMessage: serializeKeysForMessage,
  sanitize: sanitize
};

}).call(this,typeof global !== ""undefined"" ? global : typeof self !== ""undefined"" ? self : typeof window !== ""undefined"" ? window : {})
},{""4"":4}],4:[function(_dereq_,module,exports){
/*
 json-stringify-safe
 Like JSON.stringify, but doesn't throw on circular references.

 Originally forked from https://github.com/isaacs/json-stringify-safe
 version 5.0.1 on 3/8/2017 and modified to handle Errors serialization
 and IE8 compatibility. Tests for this are in test/vendor.

 ISC license: https://github.com/isaacs/json-stringify-safe/blob/master/LICENSE
*/

exports = module.exports = stringify;
exports.getSerialize = serializer;

function indexOf(haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) return i;
  }
  return -1;
}

function stringify(obj, replacer, spaces, cycleReplacer) {
  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
}

// https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106
function stringifyError(value) {
  var err = {
    // These properties are implemented as magical getters and don't show up in for in
    stack: value.stack,
    message: value.message,
    name: value.name
  };

  for (var i in value) {
    if (Object.prototype.hasOwnProperty.call(value, i)) {
      err[i] = value[i];
    }
  }

  return err;
}

function serializer(replacer, cycleReplacer) {
  var stack = [];
  var keys = [];

  if (cycleReplacer == null) {
    cycleReplacer = function(key, value) {
      if (stack[0] === value) {
        return '[Circular ~]';
      }
      return '[Circular ~.' + keys.slice(0, indexOf(stack, value)).join('.') + ']';
    };
  }

  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = indexOf(stack, this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);

      if (~indexOf(stack, value)) {
        value = cycleReplacer.call(this, key, value);
      }
    } else {
      stack.push(value);
    }

    return replacer == null
      ? value instanceof Error ? stringifyError(value) : value
      : replacer.call(this, key, value);
  };
}

},{}]},{},[1])(1)
});",TRUE,,3794
3786,InitialSO.csv3786.txt,InitialGit.csv3786.txt,3,"'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
    return v.toString(16);
});
 >>> 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});
""3bce4931-6c75-41ab-afe0-2ec108a30860""
 Math.random() Math.random() ","uuid crypto.randomUUID() Node.js function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

console.log(uuidv4()); ",FALSE,"/**
 * @fileoverview Utilities for mixed-content in Web Platform Tests.
 * @author burnik@google.com (Kristijan Burnik)
 * Disclaimer: Some methods of other authors are annotated in the corresponding
 *     method's JSDoc.
 */

/**
 * Normalizes the target port for use in a URL. For default ports, this is the
 *     empty string (omitted port), otherwise it's a colon followed by the port
 *     number. Ports 80, 443 and an empty string are regarded as default ports.
 * @param {number} targetPort The port to use
 * @return {string} The port portion for using as part of a URL.
 */
function getNormalizedPort(targetPort) {
  return ([80, 443, """"].indexOf(targetPort) >= 0) ? """" : "":"" + targetPort;
}

/**
 * Creates a GUID.
 *     See: https://en.wikipedia.org/wiki/Globally_unique_identifier
 *     Original author: broofa (http://www.broofa.com/)
 *     Sourced from: http://stackoverflow.com/a/2117523/4949715
 * @return {string} A pseudo-random GUID.
 */
function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * Initiates a new XHR via GET.
 * @param {string} url The endpoint URL for the XHR.
 * @param {string} responseType Optional - how should the response be parsed.
 *     Default is ""json"".
 *     See: https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype
 * @return {Promise} A promise wrapping the success and error events.
 */
function xhrRequest(url, responseType) {
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = responseType || ""json"";

    xhr.addEventListener(""error"", function() {
      reject(Error(""Network Error""));
    });

    xhr.addEventListener(""load"", function() {
      if (xhr.status != 200)
        return reject(Error(xhr.statusText));

      resolve(xhr.response);
    });

    xhr.send();
  });
}

/**
 * Sets attributes on a given DOM element.
 * @param {DOMElement} element The element on which to set the attributes.
 * @param {object} An object with keys (serving as attribute names) and values.
 */
function setAttributes(el, attrs) {
  attrs = attrs || {}
  for (var attr in attrs)
    el.setAttribute(attr, attrs[attr]);
}


/**
 * Binds to success and error events of an object wrapping them into a promise
 *     available through {@code element.eventPromise}. The success event
 *     resolves and error event rejects.
 * @param {object} element An object supporting events on which to bind the
 *     promise.
 * @param {string} resolveEventName [=""load""] The event name to bind resolve to.
 * @param {string} rejectEventName [=""error""] The event name to bind reject to.
 */
function bindEvents(element, resolveEventName, rejectEventName) {
  element.eventPromise = new Promise(function(resolve, reject) {
    element.addEventListener(resolveEventName  || ""load"", resolve);
    element.addEventListener(rejectEventName || ""error"", reject);
  });
}

/**
 * Creates a new DOM element.
 * @param {string} tagName The type of the DOM element.
 * @param {object} attrs A JSON with attributes to apply to the element.
 * @param {DOMElement} parent Optional - an existing DOM element to append to
 *     If not provided, the returned element will remain orphaned.
 * @param {boolean} doBindEvents Optional - Whether to bind to load and error
 *     events and provide the promise wrapping the events via the element's
 *     {@code eventPromise} property. Default value evaluates to false.
 * @return {DOMElement} The newly created DOM element.
 */
function createElement(tagName, attrs, parent, doBindEvents) {
  var element = document.createElement(tagName);

  if (doBindEvents)
    bindEvents(element);

  // We set the attributes after binding to events to catch any
  // event-triggering attribute changes. E.g. form submission.
  setAttributes(element, attrs);

  if (parent)
    parent.appendChild(element);

  return element;
}

function createRequestViaElement(tagName, attrs, parent) {
  return createElement(tagName, attrs, parent, true).eventPromise;
}

/**
 * Creates a new empty iframe and appends it to {@code document.body} .
 * @param {string} name The name and ID of the new iframe.
 * @param {boolean} doBindEvents Whether to bind load and error events.
 * @return {DOMElement} The newly created iframe.
 */
function createHelperIframe(name, doBindEvents) {
  return createElement(""iframe"",
                       {""name"": name, ""id"": name},
                       document.body,
                       doBindEvents);
}

/**
 * Creates a new iframe, binds load and error events, sets the src attribute and
 *     appends it to {@code document.body} .
 * @param {string} url The src for the iframe.
 * @return {Promise} The promise for success/error events.
 */
function requestViaIframe(url) {
  return createRequestViaElement(""iframe"", {""src"": url}, document.body);
}

/**
 * Creates a new image, binds load and error events, sets the src attribute and
 *     appends it to {@code document.body} .
 * @param {string} url The src for the image.
 * @return {Promise} The promise for success/error events.
 */
function requestViaImage(url) {
  return createRequestViaElement(""img"", {""src"": url}, document.body);
}

/**
 * Initiates a new XHR GET request to provided URL.
 * @param {string} url The endpoint URL for the XHR.
 * @return {Promise} The promise for success/error events.
 */
function requestViaXhr(url) {
  return xhrRequest(url);
}

/**
 * Initiates a new GET request to provided URL via the Fetch API.
 * @param {string} url The endpoint URL for the Fetch.
 * @return {Promise} The promise for success/error events.
 */
function requestViaFetch(url) {
  return fetch(url);
}

/**
 * Creates a new Worker, binds message and error events wrapping them into.
 *     {@code worker.eventPromise} and posts an empty string message to start
 *     the worker.
 * @param {string} url The endpoint URL for the worker script.
 * @return {Promise} The promise for success/error events.
 */
function requestViaWorker(url) {
  var worker = new Worker(url);
  bindEvents(worker, ""message"", ""error"");
  worker.postMessage('');

  return worker.eventPromise;
}

/**
 * Sets the href attribute on a navigable DOM element and performs a navigation
 *     by clicking it. To avoid navigating away from the current execution
 *     context, a target attribute is set to point to a new helper iframe.
 * @param {DOMElement} navigableElement The navigable DOMElement
 * @param {string} url The href for the navigable element.
 * @return {Promise} The promise for success/error events.
 */
function requestViaNavigable(navigableElement, url) {
  var iframe = createHelperIframe(guid(), true);
  setAttributes(navigableElement,
                {""href"": url,
                 ""target"": iframe.name});
  navigableElement.click();

  return iframe.eventPromise;
}

/**
 * Creates a new anchor element, appends it to {@code document.body} and
 *     performs the navigation.
 * @param {string} url The URL to navigate to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaAnchor(url) {
  var a = createElement(""a"", {""innerHTML"": ""Link to resource""}, document.body);

  return requestViaNavigable(a, url);
}

/**
 * Creates a new area element, appends it to {@code document.body} and performs
 *     the navigation.
 * @param {string} url The URL to navigate to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaArea(url) {
  var area = createElement(""area"", {}, document.body);

  return requestViaNavigable(area, url);
}

/**
 * Creates a new script element, sets the src to url, and appends it to
 *     {@code document.body}.
 * @param {string} url The src URL.
 * @return {Promise} The promise for success/error events.
 */
function requestViaScript(url) {
  return createRequestViaElement(""script"", {""src"": url}, document.body);
}

/**
 * Creates a new form element, sets attributes, appends it to
 *     {@code document.body} and submits the form.
 * @param {string} url The URL to submit to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaForm(url) {
  var iframe = createHelperIframe(guid());
  var form = createElement(""form"",
                           {""action"": url,
                            ""method"": ""POST"",
                            ""target"": iframe.name},
                           document.body);
  bindEvents(iframe);
  form.submit();

  return iframe.eventPromise;
}

/**
 * Creates a new link element for a stylesheet, binds load and error events,
 *     sets the href to url and appends it to {@code document.head}.
 * @param {string} url The URL for a stylesheet.
 * @return {Promise} The promise for success/error events.
 */
function requestViaLinkStylesheet(url) {
  return createRequestViaElement(""link"",
                                 {""rel"": ""stylesheet"", ""href"": url},
                                 document.head);
}

/**
 * Creates a new link element for a prefetch, binds load and error events, sets
 *     the href to url and appends it to {@code document.head}.
 * @param {string} url The URL of a resource to prefetch.
 * @return {Promise} The promise for success/error events.
 */
function requestViaLinkPrefetch(url) {
  // TODO(kristijanburnik): Check if prefetch should support load and error
  // events. For now we assume it's not specified.
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ
  return createRequestViaElement(""link"",
                                 {""rel"": ""prefetch"", ""href"": url},
                                 document.head);
}

/**
 * Creates a new media element with a child source element, binds loadeddata and
 *     error events, sets attributes and appends to document.body.
 * @param {string} type The type of the media element (audio/video/picture).
 * @param {object} media_attrs The attributes for the media element.
 * @param {object} source_attrs The attributes for the child source element.
 * @return {DOMElement} The newly created media element.
 */
function createMediaElement(type, media_attrs, source_attrs) {
  var mediaElement = createElement(type, {});
  var sourceElement = createElement(""source"", {}, mediaElement);

  mediaElement.eventPromise = new Promise(function(resolve, reject) {
    mediaElement.addEventListener(""loadeddata"", resolve);
    // Notice that the source element will raise the error.
    sourceElement.addEventListener(""error"", reject);
  });

  setAttributes(mediaElement, media_attrs);
  setAttributes(sourceElement, source_attrs);
  document.body.appendChild(mediaElement);

  return mediaElement;
}

/**
 * Creates a new video element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}.
 * @param {string} url The URL of the video.
 * @return {Promise} The promise for success/error events.
 */
function requestViaVideo(url) {
  return createMediaElement(""video"",
                            {},
                            {type: ""video/mp4"", src: url}).eventPromise;
}

/**
 * Creates a new audio element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}.
 * @param {string} url The URL of the audio.
 * @return {Promise} The promise for success/error events.
 */
function requestViaAudio(url) {
  return createMediaElement(""audio"",
                            {},
                            {type: ""audio/mpeg"", src: url}).eventPromise;
}

/**
 * Creates a new picture element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}. Also
 *     creates new image element appending it to the picture
 * @param {string} url The URL of the image for the source and image elements.
 * @return {Promise} The promise for success/error events.
 */
function requestViaPicture(url) {
  var picture = createMediaElement(""picture"", {}, {""srcset"": url,
                                                ""type"": ""image/png""});
  return createRequestViaElement(""img"", {""src"": url}, picture);
}

/**
 * Creates a new object element, binds load and error events, sets the data to
 *     url, and appends it to {@code document.body}.
 * @param {string} url The data URL.
 * @return {Promise} The promise for success/error events.
 */
function requestViaObject(url) {
  return createRequestViaElement(""object"", {""data"": url}, document.body);
}

// SanityChecker does nothing in release mode. See sanity-checker.js for debug
// mode.
function SanityChecker() {}
SanityChecker.prototype.checkScenario = function() {};
","/**
 * @fileoverview Utilities for mixed-content in Web Platform Tests.
 * @author burnik@google.com (Kristijan Burnik)
 * Disclaimer: Some methods of other authors are annotated in the corresponding
 *     method's JSDoc.
 */

/**
 * Normalizes the target port for use in a URL. For default ports, this is the
 *     empty string (omitted port), otherwise it's a colon followed by the port
 *     number. Ports 80, 443 and an empty string are regarded as default ports.
 * @param {number} targetPort The port to use
 * @return {string} The port portion for using as part of a URL.
 */
function getNormalizedPort(targetPort) {
  return ([80, 443, """"].indexOf(targetPort) >= 0) ? """" : "":"" + targetPort;
}

/**
 * Creates a GUID.
 *     See: https://en.wikipedia.org/wiki/Globally_unique_identifier
 *     Original author: broofa (http://www.broofa.com/)
 *     Sourced from: http://stackoverflow.com/a/2117523/4949715
 * @return {string} A pseudo-random GUID.
 */
function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * Initiates a new XHR via GET.
 * @param {string} url The endpoint URL for the XHR.
 * @param {string} responseType Optional - how should the response be parsed.
 *     Default is ""json"".
 *     See: https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype
 * @return {Promise} A promise wrapping the success and error events.
 */
function xhrRequest(url, responseType) {
  return new Promise(function(resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = responseType || ""json"";

    xhr.addEventListener(""error"", function() {
      reject(Error(""Network Error""));
    });

    xhr.addEventListener(""load"", function() {
      if (xhr.status != 200)
        return reject(Error(xhr.statusText));

      resolve(xhr.response);
    });

    xhr.send();
  });
}

/**
 * Sets attributes on a given DOM element.
 * @param {DOMElement} element The element on which to set the attributes.
 * @param {object} An object with keys (serving as attribute names) and values.
 */
function setAttributes(el, attrs) {
  attrs = attrs || {}
  for (var attr in attrs)
    el.setAttribute(attr, attrs[attr]);
}


/**
 * Binds to success and error events of an object wrapping them into a promise
 *     available through {@code element.eventPromise}. The success event
 *     resolves and error event rejects.
 * @param {object} element An object supporting events on which to bind the
 *     promise.
 * @param {string} resolveEventName [=""load""] The event name to bind resolve to.
 * @param {string} rejectEventName [=""error""] The event name to bind reject to.
 */
function bindEvents(element, resolveEventName, rejectEventName) {
  element.eventPromise = new Promise(function(resolve, reject) {
    element.addEventListener(resolveEventName  || ""load"", resolve);
    element.addEventListener(rejectEventName || ""error"",
                             function(e) { e.preventDefault(); reject(); } );
  });
}

/**
 * Creates a new DOM element.
 * @param {string} tagName The type of the DOM element.
 * @param {object} attrs A JSON with attributes to apply to the element.
 * @param {DOMElement} parent Optional - an existing DOM element to append to
 *     If not provided, the returned element will remain orphaned.
 * @param {boolean} doBindEvents Optional - Whether to bind to load and error
 *     events and provide the promise wrapping the events via the element's
 *     {@code eventPromise} property. Default value evaluates to false.
 * @return {DOMElement} The newly created DOM element.
 */
function createElement(tagName, attrs, parent, doBindEvents) {
  var element = document.createElement(tagName);

  if (doBindEvents)
    bindEvents(element);

  // We set the attributes after binding to events to catch any
  // event-triggering attribute changes. E.g. form submission.
  //
  // But be careful with images: unlike other elements they will start the load
  // as soon as the attr is set, even if not in the document yet, and sometimes
  // complete it synchronously, so the append doesn't have the effect we want.
  // So for images, we want to set the attrs after appending, whereas for other
  // elements we want to do it before appending.
  var isImg = (tagName == ""img"");
  if (!isImg)
    setAttributes(element, attrs);

  if (parent)
    parent.appendChild(element);

  if (isImg)
    setAttributes(element, attrs);

  return element;
}

function createRequestViaElement(tagName, attrs, parent) {
  return createElement(tagName, attrs, parent, true).eventPromise;
}

/**
 * Creates a new empty iframe and appends it to {@code document.body} .
 * @param {string} name The name and ID of the new iframe.
 * @param {boolean} doBindEvents Whether to bind load and error events.
 * @return {DOMElement} The newly created iframe.
 */
function createHelperIframe(name, doBindEvents) {
  return createElement(""iframe"",
                       {""name"": name, ""id"": name},
                       document.body,
                       doBindEvents);
}

/**
 * Creates a new iframe, binds load and error events, sets the src attribute and
 *     appends it to {@code document.body} .
 * @param {string} url The src for the iframe.
 * @return {Promise} The promise for success/error events.
 */
function requestViaIframe(url) {
  return createRequestViaElement(""iframe"", {""src"": url}, document.body);
}

/**
 * Creates a new image, binds load and error events, sets the src attribute and
 *     appends it to {@code document.body} .
 * @param {string} url The src for the image.
 * @return {Promise} The promise for success/error events.
 */
function requestViaImage(url) {
  return createRequestViaElement(""img"", {""src"": url}, document.body);
}

/**
 * Initiates a new XHR GET request to provided URL.
 * @param {string} url The endpoint URL for the XHR.
 * @return {Promise} The promise for success/error events.
 */
function requestViaXhr(url) {
  return xhrRequest(url);
}

/**
 * Initiates a new GET request to provided URL via the Fetch API.
 * @param {string} url The endpoint URL for the Fetch.
 * @return {Promise} The promise for success/error events.
 */
function requestViaFetch(url) {
  return fetch(url);
}

/**
 * Creates a new Worker, binds message and error events wrapping them into.
 *     {@code worker.eventPromise} and posts an empty string message to start
 *     the worker.
 * @param {string} url The endpoint URL for the worker script.
 * @return {Promise} The promise for success/error events.
 */
function requestViaWorker(url) {
  var worker = new Worker(url);
  bindEvents(worker, ""message"", ""error"");
  worker.postMessage('');

  return worker.eventPromise;
}

/**
 * Sets the href attribute on a navigable DOM element and performs a navigation
 *     by clicking it. To avoid navigating away from the current execution
 *     context, a target attribute is set to point to a new helper iframe.
 * @param {DOMElement} navigableElement The navigable DOMElement
 * @param {string} url The href for the navigable element.
 * @return {Promise} The promise for success/error events.
 */
function requestViaNavigable(navigableElement, url) {
  var iframe = createHelperIframe(guid(), true);
  setAttributes(navigableElement,
                {""href"": url,
                 ""target"": iframe.name});
  navigableElement.click();

  return iframe.eventPromise;
}

/**
 * Creates a new anchor element, appends it to {@code document.body} and
 *     performs the navigation.
 * @param {string} url The URL to navigate to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaAnchor(url) {
  var a = createElement(""a"", {""innerHTML"": ""Link to resource""}, document.body);

  return requestViaNavigable(a, url);
}

/**
 * Creates a new area element, appends it to {@code document.body} and performs
 *     the navigation.
 * @param {string} url The URL to navigate to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaArea(url) {
  var area = createElement(""area"", {}, document.body);

  return requestViaNavigable(area, url);
}

/**
 * Creates a new script element, sets the src to url, and appends it to
 *     {@code document.body}.
 * @param {string} url The src URL.
 * @return {Promise} The promise for success/error events.
 */
function requestViaScript(url) {
  return createRequestViaElement(""script"", {""src"": url}, document.body);
}

/**
 * Creates a new form element, sets attributes, appends it to
 *     {@code document.body} and submits the form.
 * @param {string} url The URL to submit to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaForm(url) {
  var iframe = createHelperIframe(guid());
  var form = createElement(""form"",
                           {""action"": url,
                            ""method"": ""POST"",
                            ""target"": iframe.name},
                           document.body);
  bindEvents(iframe);
  form.submit();

  return iframe.eventPromise;
}

/**
 * Creates a new link element for a stylesheet, binds load and error events,
 *     sets the href to url and appends it to {@code document.head}.
 * @param {string} url The URL for a stylesheet.
 * @return {Promise} The promise for success/error events.
 */
function requestViaLinkStylesheet(url) {
  return createRequestViaElement(""link"",
                                 {""rel"": ""stylesheet"", ""href"": url},
                                 document.head);
}

/**
 * Creates a new link element for a prefetch, binds load and error events, sets
 *     the href to url and appends it to {@code document.head}.
 * @param {string} url The URL of a resource to prefetch.
 * @return {Promise} The promise for success/error events.
 */
function requestViaLinkPrefetch(url) {
  // TODO(kristijanburnik): Check if prefetch should support load and error
  // events. For now we assume it's not specified.
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ
  return createRequestViaElement(""link"",
                                 {""rel"": ""prefetch"", ""href"": url},
                                 document.head);
}

/**
 * Creates a new media element with a child source element, binds loadeddata and
 *     error events, sets attributes and appends to document.body.
 * @param {string} type The type of the media element (audio/video/picture).
 * @param {object} media_attrs The attributes for the media element.
 * @param {object} source_attrs The attributes for the child source element.
 * @return {DOMElement} The newly created media element.
 */
function createMediaElement(type, media_attrs, source_attrs) {
  var mediaElement = createElement(type, {});
  var sourceElement = createElement(""source"", {}, mediaElement);

  mediaElement.eventPromise = new Promise(function(resolve, reject) {
    mediaElement.addEventListener(""loadeddata"", resolve);
    // Notice that the source element will raise the error.
    sourceElement.addEventListener(""error"", reject);
  });

  setAttributes(mediaElement, media_attrs);
  setAttributes(sourceElement, source_attrs);
  document.body.appendChild(mediaElement);

  return mediaElement;
}

/**
 * Creates a new video element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}.
 * @param {string} url The URL of the video.
 * @return {Promise} The promise for success/error events.
 */
function requestViaVideo(url) {
  return createMediaElement(""video"",
                            {},
                            {type: ""video/mp4"", src: url}).eventPromise;
}

/**
 * Creates a new audio element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}.
 * @param {string} url The URL of the audio.
 * @return {Promise} The promise for success/error events.
 */
function requestViaAudio(url) {
  return createMediaElement(""audio"",
                            {},
                            {type: ""audio/mpeg"", src: url}).eventPromise;
}

/**
 * Creates a new picture element, binds loadeddata and error events, sets
 *     attributes and source URL and appends to {@code document.body}. Also
 *     creates new image element appending it to the picture
 * @param {string} url The URL of the image for the source and image elements.
 * @return {Promise} The promise for success/error events.
 */
function requestViaPicture(url) {
  var picture = createMediaElement(""picture"", {}, {""srcset"": url,
                                                ""type"": ""image/png""});
  return createRequestViaElement(""img"", {""src"": url}, picture);
}

/**
 * Creates a new object element, binds load and error events, sets the data to
 *     url, and appends it to {@code document.body}.
 * @param {string} url The data URL.
 * @return {Promise} The promise for success/error events.
 */
function requestViaObject(url) {
  return createRequestViaElement(""object"", {""data"": url}, document.body);
}

/**
 * Creates a new WebSocket pointing to {@code url} and sends a message string
 * ""echo"". The {@code message} and {@code error} events are triggering the
 * returned promise resolve/reject events.
 * @param {string} url The URL for WebSocket to connect to.
 * @return {Promise} The promise for success/error events.
 */
function requestViaWebSocket(url) {
  return new Promise(function(resolve, reject) {
    var websocket = new WebSocket(url);

    websocket.addEventListener(""message"", function(e) {
      resolve(JSON.parse(e.data));
    });

    websocket.addEventListener(""open"", function(e) {
      websocket.send(""echo"");
    });

    websocket.addEventListener(""error"", function(e) {
      reject(e)
    });
  });
}

// SanityChecker does nothing in release mode. See sanity-checker.js for debug
// mode.
function SanityChecker() {}
SanityChecker.prototype.checkScenario = function() {};
SanityChecker.prototype.setFailTimeout = function(test, timeout) {};
",FALSE,,3795
3788,InitialSO.csv3788.txt,InitialGit.csv3788.txt,3,"'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
    return v.toString(16);
});
 >>> 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});
""3bce4931-6c75-41ab-afe0-2ec108a30860""
 Math.random() Math.random() ","uuid crypto.randomUUID() Node.js function uuidv4() {
  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

console.log(uuidv4()); ",FALSE,"/*
  spsrsmart_core_1_0_0.js 2015-04-24 wem
  Smart Payment Solutions GmbH
  http://www.smart-payment-solutions.de/
  Copyright (c) 2015 Smart Payment Solutions GmbH
  Released under the GNU General Public License (Version 2)
  [http://www.gnu.org/licenses/gpl-2.0.html]
*/

/** Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
( function(){
  var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

  // The base RSmartClass implementation (does nothing)
  //this.RSmartClass = function(){};
  RSmartClass = function(){};
 
  // Create a new RSmartClass that inherits from this class
  RSmartClass.extend = function(prop) {
    var _super = this.prototype;
   
    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;
   
    // Copy the properties over onto the new prototype
    for (var name in prop) {
      // Check if we're overwriting an existing function
      prototype[name] = typeof prop[name] == ""function"" &&
        typeof _super[name] == ""function"" && fnTest.test(prop[name]) ?
        (function(name, fn){
          return function() {
            var tmp = this._super;
           
            // Add a new ._super() method that is the same method
            // but on the super-class
            this._super = _super[name];
           
            // The method only need to be bound temporarily, so we
            // remove it when we're done executing
            var ret = fn.apply(this, arguments);       
            this._super = tmp;
           
            return ret;
          };
        })(name, prop[name]) :
        prop[name];
    }
   
    // The dummy class constructor
    function RSmartClass() {
      // All construction is actually done in the init method
      if ( !initializing && this.init )
        this.init.apply(this, arguments);
    }
   
    // Populate our constructed prototype object
    RSmartClass.prototype = prototype;
   
    // Enforce the constructor to be what we expect
    RSmartClass.prototype.constructor = RSmartClass;

    // And make this class extendable
    RSmartClass.extend = arguments.callee;
   
    return RSmartClass;
  };
})();

// ============================================================================

/** GUID Generator, je nach Browser mit Crypro-Bibliothek oder nicht.
 * by stackoverflow.com
 * Wird zur Methode der Ur-Klasse.
 */
RSmartClass.prototype.generateGUID = (typeof(window.crypto) != 'undefined' && 
                typeof(window.crypto.getRandomValues) != 'undefined') ?
    function() {
        // If we have a cryptographically secure PRNG, use that
        // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript
        var buf = new Uint16Array(8);
        window.crypto.getRandomValues(buf);
        var S4 = function(num) {
            var ret = num.toString(16);
            while(ret.length < 4){
                ret = ""0""+ret;
            }
            return ret;
        };
        return (S4(buf[0])+S4(buf[1])+""-""+S4(buf[2])+""-""+S4(buf[3])+""-""+S4(buf[4])+""-""+S4(buf[5])+S4(buf[6])+S4(buf[7]));
    }

    :

    function() {
        // Otherwise, just use Math.random
        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        });
    };

// ============================================================================

/** Checks if an argument is defined.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is defined, false otherwise
 */
RSmartClass.prototype.isDefined = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'undefined')
        return false;
    else
        return true;
}; // End isDefined

/** Checks if an argument is an object.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is an object, false otherwise
 */
RSmartClass.prototype.isObject = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'object') {
        if(argument != null)
            return true;
        else
            return false;
    }
    else
        return false;
}; // End isObject

/** Checks if an argument is a jQuery object.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a jQuery object, false otherwise
 */
RSmartClass.prototype.isJQueryObject = function(argument) {
    if(!this.isObject(argument))
        return false;
    else {
        if(argument.selector)
            return true;
        else
            return false;
    }
};


/** Checks if an argument is a function.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a function, false otherwise
 */
RSmartClass.prototype.isFunction = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'function')
        return true;
    else
        return false;
}; // End isFunction

/** Checks if an argument is a boolean.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a boolean, false otherwise
 */
RSmartClass.prototype.isBoolean = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'boolean')
        return true;
    else
        return false;
}; // End isBoolean

/** Checks if an argument is a string.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a string, false otherwise
 */
RSmartClass.prototype.isString = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'string')
        return true;
    else
        return false;
}; // End isString

/** Checks if an argument is a number.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a number, false otherwise
 */
RSmartClass.prototype.isNumber = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'number')
        return true;
    else
        return false;
}; // End isNumber

/** Checks if an argument is numeric.
 *  This can be either a number or a string containing a number
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is numeric, false otherwise
 */
RSmartClass.prototype.isNumeric = function(argument) {
    return !isNaN( parseFloat(argument) ) && isFinite( argument );
}; // End isNumeric

/** Checks if an argument is an array.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is an array, false otherwise
 */
RSmartClass.prototype.isArray = function(argument) {
    return argument instanceof Array ? true : false;
}; // End isArray

// jQuery.noConflict(); is needed for WebSites that use Scriptaculous or Prototype JavaScript Libraries,
// because they also use the $ Variable. Gambio for example is using Scriptaculous.
// See also (http://api.jquery.com/jQuery.noConflict/)
if(window.jQuery) {
    jQuery.noConflict();
}

// Declare the used class namespaces
window.spsrsmart = window.spsrsmart || {};
spsrsmart.rsmartcore = spsrsmart.rsmartcore || {};
spsrsmart.rsmartcore.AppConfig = spsrsmart.rsmartcore.AppConfig || {};

/**
 * Observer Implementation
 */
spsrsmart.rsmartcore.Observer = RSmartClass.extend({
    
    init: function() {
        this.observers = [];
        this.listeners = [];
    }, // End init
    
    /**
     * Adds an observer.
     * The callback function must have the signature function(scope, data),
     * where the scope is the object that extends this class and data
     * is an arbitrary object. 
     * 
     * @param object obj
     *    The object that adds the observer
     * 
     * @param string callback
     *    The name of a callback function of obj
     */
    addObserver: function(obj, callback) {
        // Check, if function exists
        if(typeof (obj[callback] ) !== 'function') {
            throw (""Function don't exist"" );
        }
        // OK
        this.observers.push({
            obj: obj,
            callback: callback
        });
    }, // End addObserver
    
    /**
     * Removes an observer.
     * 
     * @param object obj
     *    The object that removes the observer
     *    
     * @param string callback
     *    The name of a callback function of obj
     */
    removeObserver: function(obj, callback) {
        this.observers = this.observers.filter(function(el) {
            if (el.obj !== obj && el.callback != callback) {
                return el;
            }
         });
    }, // End removeObserver
    
    /**
     * Adds a listener. 
     * The listener function must have the signature function(scope, data),
     * where the scope is the object that extends this class and data
     * is an arbitrary object.
     * 
     * @param function func
     *    A function. This can also be an anonymous function
     */
    addListener: function(func) {
        var argtype = typeof(func);
        if(argtype == 'function') {
            this.listeners.push({
                func: func
            });
        }
    }, // End addListener
    
    /**
     * Removes a listener.
     * 
     * @param function func
     *    A function. This can also be an anonymous function
     */
    removeListener: function(func) {
        var argtype = typeof(func);
        if(argtype == 'function') {
            this.listeners = this.listeners.filter(function(el) {
                if(el.func !== func) {
                    return el;
                }
            });
        }
    }, // End removeListener
    
    /**
     * Notifies all registered observers and listeners.
     * 
     * @param data
     *    The notification data
     */
    notify: function(data) {
        var scope = this;
        for (var i = 0; i < this.observers.length; i++) {
            var el = this.observers[i];
            // The first argument is obj. This ensures that
            // within the callback method 'this' is the reference to
            // the object that added the observer.
            // scope is the reference of the observer
            el.obj[el.callback].call(el.obj, scope, data);
        }
        
        for (var i = 0; i < this.listeners.length; i++) {
            var el = this.listeners[i];
            el.func.call(scope, data);
        }
    } // End notify
    
});
// End class spsrsmart.rsmartcore.Observer

/**
 * DynamicHtmlClient
 */
spsrsmart.rsmartcore.DynamicHtmlClient = spsrsmart.rsmartcore.Observer.extend({
    
    /**
     * Constructs a new spsrsmart.rsmartcore.DynamicHtmlClient
     */
    init: function() {
        // Call the constructor of spsrsmart.Observer
        this._super();
        
        this.dynamicHtmlId = """";
        this.dynamicHtmlParent = null;
        this.dynamicHtmlCode = """";
    }, // End constructor
    
    dynamicHtmlSetParent: function(jqueryObject) {
        var parent = null;
        if(this.isJQueryObject(jqueryObject)) {
            parent = jqueryObject;
        }
        
        if(parent != null) {
            this.dynamicHtmlParent = parent;
            this.dynamicHtmlId = this.generateGUID();
            var htmlCode = this.dynamicHtmlCode.replace(/#mwmucid/g, this.dynamicHtmlId);
            this.dynamicHtmlParent.append(htmlCode);
        }
        else {
            if(this.dynamicHtmlParent != null) {
                this.dynamicHtmlRemoveId(this.dynamicHtmlId);
            }
            this.dynamicHtmlParent = null;
            this.dynamicHtmlId = """";
        }
    }, // End dynamicHtmlSetParent
    
    dynamicHtmlRemoveId: function(id) {
        var idToRemove = """";
        if(this.isString(id)) {
            idToRemove = id;
        }
        
        if(idToRemove != """") {
            idToRemove = ""#"" + idToRemove;
            jQuery(idToRemove).remove();
        }
    }, // End dynamicHtmlRemoveId
    
    dynamicHtmlGetParent: function() {
        return this.dynamicHtmlParent;
    }, // End dynamicHtmlGetParent
    
    dynamicHtmlGetId: function() {
        return this.dynamicHtmlId;
    }, // End dynamicHtmlGetId
    
    dynamicHtmlGetJQueryId: function(suffix) {
        var idSuffix = """";
        if(this.isString(suffix)) {
            idSuffix = suffix;
        }
        var result = """";
        if(idSuffix != """")
            result = ""#"" + this.dynamicHtmlId + idSuffix;
        else
            result = ""#"" + this.dynamicHtmlId;
        return result;
    }, // End dynamicHtmlGetJQueryId
    
    dynamicHtmlSetHtmlCode: function(htmlcode) {
        if(this.isString(htmlcode)) {
            this.dynamicHtmlCode = htmlcode;
        }
    }, // End dynamicHtmlSetHtmlCode
    
    dynamicHtmlGetHtmlCode: function() {
        return this.dynamicHtmlCode;
    } // End dynamicHtmlGetHtmlCode
    
});
// End class spsrsmart.rsmartcore.DynamicHtmlClient

/**
 * GlobalObject
 */
spsrsmart.rsmartcore.GlobalObject = spsrsmart.rsmartcore.Observer.extend({
    
    init: function() {
        // Call the constructor of spsrsmart.rsmartcore.Observer
        this._super();
        
        this.mainAPP = null;
    }, // End constructor
    
    setMainApp: function(app) {
        if(this.isObject(app)) {
            this.mainAPP = app;
        }
    }, // End setMainApp
    
    getMainApp: function() {
        return this.mainAPP;
    } // End getMainApp
    
});
// End class spsrsmart.rsmartcore.GlobalObject

window.SPSRSMARTGLOBALOBJECT = new spsrsmart.rsmartcore.GlobalObject();

/**
 * Draggable
 * ---------
 * Draggable support for logging window
 */
spsrsmart.rsmartcore.Draggable = spsrsmart.rsmartcore.Observer.extend({
    
    init: function(options) {
        // Call the constructor of spsrsmart.rsmartcore.Observer
        this._super();
        
        this.draggableid = """";
        this.draggableElement = null;
        this.oldX = null;
        this.oldY = null;
        this.mouseInElement = false;
        this.dragging = false;
        
        this.setOptions(options);
        if(this.draggableid != """") {
            this.run();
        }
    }, // End constructor
    
    setOptions: function(options) {
        if(this.isObject(options)) {
            if(this.isString(options.draggableid)) {
                this.draggableid = options.draggableid;
            }
        }
    }, // End setOptions
    
    run: function() {
        var that = this;
        
        this.draggableElement = jQuery(""#"" + this.draggableid);
        
        this.draggableElement.mouseenter(function(evt) {
            jQuery(this).css({""cursor"": ""move""});
            that.mouseInElement = true;
        });
        this.draggableElement.mouseleave(function(evt) {
            jQuery(this).css({""cursor"": ""default""});
            that.mouseInElement = false;
        });
        
        
        jQuery(document).mousedown(function(evt) {
            //evt.preventDefault();
            // MWMUC-23.01.2015
            if(that.mouseInElement == true) {
               that.dragging = true;
            }
            // MWMUC-23.01.2015  that.dragging = true;
        })
        
        // this.draggableElement.mouseup
        jQuery(document).mouseup(function(evt) {
            //evt.preventDefault();
            that.dragging = false;
            that.oldX = null;
            that.oldY = null;
        });
        
        jQuery(document).mousemove(function(evt) {
            //evt.preventDefault();
            var x = evt.clientX;
            var y = evt.clientY;
            if(that.dragging == true) {
                if(that.oldX == null || that.oldY == null) {
                    that.oldX = x;
                    that.oldY = y;
                }
                else {
                    var diffx = x - that.oldX;
                    var diffy = y - that.oldY;
                    that.oldX = x;
                    that.oldY = y;
                    
                    // MWMUC-23.01.2015: Commented out, so that move events are also
                    // sent, when the cursor is temporary not in the emelent                    
                    // if(that.mouseInElement == true) {
                        var notifyOptions = {
                            action: ""elementDragged"",
                            diffx: diffx,
                            diffy: diffy,
                            mouseInElement: that.mouseInElement
                        };
                        that.notify(notifyOptions);
                    //} // end: if(that.mouseInElement == true)
                }
            }
        });
    } // End run
    
});
// End class spsrsmart.rsmartcore.Draggable

/**
 * DynamicLoggingWindowDraggable
 * -----------------------------
 * The draggable logging window
 */
spsrsmart.rsmartcore.DynamicLoggingWindowDraggable = spsrsmart.rsmartcore.DynamicHtmlClient.extend({
    
    init: function(options) {
        // Call the constructor of spsrsmart.rsmartcore.DynamicHtmlClient
        this._super();
        
        // Variables
        this.OPTIONS = null;
        this.refWindow = null;
        this.refWindowTitle = null;
        this.refWindowContent = null;
        this.refButtonClear = null;
        this.refButtonHide = null;
        
        this.loggingWindowTop = 3;
        this.loggingWindowLeft = 3;        
        this.loggingWindowWidth = 400;
        this.loggingWindowHeight = 400;
        this.loggingContentWidth = this.loggingWindowWidth - 10; // 390;
        this.loggingContentHeight = this.loggingWindowHeight - 25; // 375;
        this.entityClear = ""&#8855;""; // ""&#8801;""; //""&#8709;"";
        this.entityArrowDown = ""&#8659;"";
        this.entityArrowRight = ""&#8658;"";
        
        var markup               = ""<div id='#mwmucid' class='mwmuc-loggingwindow mwmuc-loggingwindow-visible' >"" +
                                   ""  <div id='#mwmucid-title' class='mwmuc-loggingwindow-title' >"" +
                                   ""    <span id='#mwmucid-titletext' class='mwmuc-loggingwindow-titletext' >"" + ""Logging Window"" + ""</span>"" +
                                   ""    <span id='#mwmucid-titlebuttons' class='mwmuc-loggingwindow-titlebuttons'  >"" +
                                   ""       <span id='#mwmucid-clearbutton' class='mwmuc-loggingwindow-titlebuttons-clearbutton' title='Clear'>"" + this.entityClear + ""</span>"" +
                                   ""       <span id='#mwmucid-hidebutton' class='mwmuc-loggingwindow-titlebuttons-hidebutton' title='Hide'>"" + this.entityArrowDown + ""</span>"" +
                                   ""    </span>"" +
                                   ""  </div>"" +
                                   ""  <div id='#mwmucid-content' class='mwmuc-loggingwindow-content' ></div>"" +
                                   ""</div>"";
        this.dynamicHtmlSetHtmlCode(markup);
        
        this.windowWidth = jQuery(window).width();
        this.windowHeight = jQuery(window).height();
        
        this.visible = false;
        this.initiallyHidden = false;
        
        this.draggableClass = null;
        
        this.setOptions(options);
        
        this.createLoggingWindow();
    }, // End constructor
    
    setOptions: function(options) {
        if(this.isObject(options)) {
            this.OPTIONS = options;
            
            if(this.isNumber(this.OPTIONS.width)) {
                if(this.OPTIONS.width > 50) { 
                    this.loggingWindowWidth = this.OPTIONS.width;
                    this.loggingContentWidth = this.loggingWindowWidth - 10; 
                }
            }
            
            if(this.isNumber(this.OPTIONS.height)) {
                if(this.OPTIONS.height > 50) {
                    this.loggingWindowHeight = this.OPTIONS.height;
                    this.loggingContentHeight = this.loggingWindowHeight - 25;
                }
            }
            
            if(this.isNumber(this.OPTIONS.top)) {
                this.loggingWindowTop = this.OPTIONS.top;
            }
            
            if(this.isNumber(this.OPTIONS.left)) {
                this.loggingWindowLeft = this.OPTIONS.left;
            }
            
            if(this.isString(this.OPTIONS.mode)) {
                if(this.OPTIONS.mode == ""hidden"") {
                    this.initiallyHidden = true;
                }
            }
        }
        
        
        if(this.windowWidth < this.loggingWindowWidth) {
            this.loggingWindowWidth = this.windowWidth - 20;
            this.loggingContentWidth = this.loggingWindowWidth - 10;
        }
        if(this.windowHeight < this.loggingWindowHeight) {
            this.loggingWindowHeight = this.windowHeight - 20;
            this.loggingContentHeight = this.loggingWindowHeight - 25;
        }        
    }, // End setOptions

    getOptions: function() {
        return this.OPTIONS;
    }, // End getOptions

    logString: function(str) {
        if(this.isString(str)) {
            if(this.refWindow == null) {
                this.createLoggingWindow();
            }
            
            if(this.refWindowContent != null) {
                var html = this.refWindowContent.html();
                html = html + str + ""<br/>"";
                this.refWindowContent.html(html);
            }            
        }
    }, // End logString
    
    clearContent: function() {
        if(this.refWindowContent != null) {
            this.refWindowContent.html("""");
        }
    }, // End clearContent

    hideWindow: function() {
        if(this.visible == true) {
            if(this.refWindow != null) {
                var pos = 0 - this.loggingWindowWidth + 25;
                this.refWindow.css({
                    left: pos
                });
                this.refWindowContent.hide();
                this.refButtonHide.attr(""title"", ""Show Logging Window"");
                this.refButtonHide.html(this.entityArrowRight);
                
                // MWMUC-23.01.2015
                this.refWindow.removeClass(""mwmuc-loggingwindow-visible"");
                this.refWindow.addClass(""mwmuc-loggingwindow-invisible"");                
            }
            this.visible = false;
        }
    }, // End hideWindow

    showWindow: function() {
        if(this.visible == false) {
            if(this.refWindow != null) {
                this.refWindow.css({
                    left: this.loggingWindowLeft,
                    height: this.loggingWindowHeight
                });
                this.refWindowContent.show();
                this.refButtonHide.attr(""title"", ""Hide"");
                this.refButtonHide.html(this.entityArrowDown);  
                
                // MWMUC-23.01.2015
                this.refWindow.removeClass(""mwmuc-loggingwindow-invisible"");
                this.refWindow.addClass(""mwmuc-loggingwindow-visible"");                
            }
            this.visible = true;
        }
    }, // End showWindow

    createLoggingWindow: function() {
        var that = this;
        if(this.refWindow != null) {
            // Window is already created
            return;
        }
        
        this.dynamicHtmlSetParent(jQuery(""body""));
        
        this.refWindow = jQuery(this.dynamicHtmlGetJQueryId());
        this.refWindow.css({
            position: ""fixed"",
            top: this.loggingWindowTop,
            left: this.loggingWindowLeft,
            width: this.loggingWindowWidth,
            height: this.loggingWindowHeight,
            ""z-index"": 20000,
            ""pointer-events"": ""auto"" // This catches events here in the overlay and do not let go them through to the underlayed components
        });
        
        this.refWindowTitle = jQuery(this.dynamicHtmlGetJQueryId(""-title""));        
        this.refWindowContent = jQuery(this.dynamicHtmlGetJQueryId(""-content""));
        this.refWindowContent.css({
            ""overflow-x"": ""auto"",
            ""overflow-y"": ""auto"",
            ""white-space"": ""nowrap"",
            width: this.loggingContentWidth,
            height: this.loggingContentHeight - 20 // 10
        });
                
        this.refButtonClear = jQuery(this.dynamicHtmlGetJQueryId(""-clearbutton""));
        this.refButtonClear.bind(""click"", function(evt) {
            evt.preventDefault();
            that.clearContent();
        });
        
        this.refButtonHide = jQuery(this.dynamicHtmlGetJQueryId(""-hidebutton""));
        this.refButtonHide.bind(""click"", function(evt) {
            evt.preventDefault();
            if(that.visible == true)
                that.hideWindow();
            else
                that.showWindow();
        });
        
        this.visible = true;
        
        if(this.initiallyHidden == true) {
            this.hideWindow();
        }
        
        // Exists spsrsmart.rsmartcore.Draggable ?
        if(spsrsmart.rsmartcore.Draggable) {
            var draggableOptions = {
                draggableid: this.dynamicHtmlGetId() + ""-title""
            };
            this.draggableClass = new spsrsmart.rsmartcore.Draggable(draggableOptions);
            this.draggableClass.addObserver(this, ""dragHandler"");
        }
    }, // End createLoggingWindow

    dragHandler: function(draggable, data) {
        if(this.isObject(data)) {
            //this.logString(""dragHandler: "" + JSON.stringify(data));
            
            if(data.action == ""elementDragged"") {
                this.loggingWindowTop = this.loggingWindowTop + data.diffy;
                // MWMUC-26.01.2015: Move the window up maximum to the top  
                if(this.loggingWindowTop < 0) {
                    this.loggingWindowTop = 0;
                }
                // MWMUC-26.01.2015: Move the window down maximum to window height minus 50
                if(this.loggingWindowTop > (this.windowHeight - 50) ) {
                    this.loggingWindowTop = this.windowHeight - 50;
                }                
                this.loggingWindowLeft = this.loggingWindowLeft + data.diffx;
                this.refWindow.css({
                    top: this.loggingWindowTop,
                    left: this.loggingWindowLeft
                });
            }
        }
    } // End dragHandler
    
});
// End class spsrsmart.rsmartcore.DynamicLoggingWindowDraggable
","/*
  spsrsmart_core_1_0_0.js 2015-04-24 wem
  Smart Payment Solutions GmbH
  http://www.smart-payment-solutions.de/
  Copyright (c) 2015 Smart Payment Solutions GmbH
  Released under the GNU General Public License (Version 2)
  [http://www.gnu.org/licenses/gpl-2.0.html]
*/

/** Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
( function(){
  var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

  // The base RSmartClass implementation (does nothing)
  //this.RSmartClass = function(){};
  RSmartClass = function(){};
 
  // Create a new RSmartClass that inherits from this class
  RSmartClass.extend = function(prop) {
    var _super = this.prototype;
   
    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    initializing = true;
    var prototype = new this();
    initializing = false;
   
    // Copy the properties over onto the new prototype
    for (var name in prop) {
      // Check if we're overwriting an existing function
      prototype[name] = typeof prop[name] == ""function"" &&
        typeof _super[name] == ""function"" && fnTest.test(prop[name]) ?
        (function(name, fn){
          return function() {
            var tmp = this._super;
           
            // Add a new ._super() method that is the same method
            // but on the super-class
            this._super = _super[name];
           
            // The method only need to be bound temporarily, so we
            // remove it when we're done executing
            var ret = fn.apply(this, arguments);       
            this._super = tmp;
           
            return ret;
          };
        })(name, prop[name]) :
        prop[name];
    }
   
    // The dummy class constructor
    function RSmartClass() {
      // All construction is actually done in the init method
      if ( !initializing && this.init )
        this.init.apply(this, arguments);
    }
   
    // Populate our constructed prototype object
    RSmartClass.prototype = prototype;
   
    // Enforce the constructor to be what we expect
    RSmartClass.prototype.constructor = RSmartClass;

    // And make this class extendable
    RSmartClass.extend = arguments.callee;
   
    return RSmartClass;
  };
})();

// ============================================================================

/** GUID Generator, je nach Browser mit Crypro-Bibliothek oder nicht.
 * by stackoverflow.com
 * Wird zur Methode der Ur-Klasse.
 */
RSmartClass.prototype.generateGUID = (typeof(window.crypto) != 'undefined' && 
                typeof(window.crypto.getRandomValues) != 'undefined') ?
    function() {
        // If we have a cryptographically secure PRNG, use that
        // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript
        var buf = new Uint16Array(8);
        window.crypto.getRandomValues(buf);
        var S4 = function(num) {
            var ret = num.toString(16);
            while(ret.length < 4){
                ret = ""0""+ret;
            }
            return ret;
        };
        return (S4(buf[0])+S4(buf[1])+""-""+S4(buf[2])+""-""+S4(buf[3])+""-""+S4(buf[4])+""-""+S4(buf[5])+S4(buf[6])+S4(buf[7]));
    }

    :

    function() {
        // Otherwise, just use Math.random
        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        });
    };

// ============================================================================

/** Checks if an argument is defined.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is defined, false otherwise
 */
RSmartClass.prototype.isDefined = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'undefined')
        return false;
    else
        return true;
}; // End isDefined

/** Checks if an argument is an object.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is an object, false otherwise
 */
RSmartClass.prototype.isObject = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'object') {
        if(argument != null)
            return true;
        else
            return false;
    }
    else
        return false;
}; // End isObject

/** Checks if an argument is a jQuery object.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a jQuery object, false otherwise
 */
RSmartClass.prototype.isJQueryObject = function(argument) {
    if(!this.isObject(argument))
        return false;
    else {
        if(argument.selector)
            return true;
        else
            return false;
    }
};


/** Checks if an argument is a function.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a function, false otherwise
 */
RSmartClass.prototype.isFunction = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'function')
        return true;
    else
        return false;
}; // End isFunction

/** Checks if an argument is a boolean.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a boolean, false otherwise
 */
RSmartClass.prototype.isBoolean = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'boolean')
        return true;
    else
        return false;
}; // End isBoolean

/** Checks if an argument is a string.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a string, false otherwise
 */
RSmartClass.prototype.isString = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'string')
        return true;
    else
        return false;
}; // End isString

/** Checks if an argument is a number.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is a number, false otherwise
 */
RSmartClass.prototype.isNumber = function(argument) {
    var argtype = typeof(argument);
    if(argtype == 'number')
        return true;
    else
        return false;
}; // End isNumber

/** Checks if an argument is numeric.
 *  This can be either a number or a string containing a number
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is numeric, false otherwise
 */
RSmartClass.prototype.isNumeric = function(argument) {
    return !isNaN( parseFloat(argument) ) && isFinite( argument );
}; // End isNumeric

/** Checks if an argument is an array.
 *
 * @param argument
 *    The argument to check
 *    
 * @return
 *    true if argument is an array, false otherwise
 */
RSmartClass.prototype.isArray = function(argument) {
    return argument instanceof Array ? true : false;
}; // End isArray

// jQuery.noConflict(); is needed for WebSites that use Scriptaculous or Prototype JavaScript Libraries,
// because they also use the $ Variable. Gambio for example is using Scriptaculous.
// See also (http://api.jquery.com/jQuery.noConflict/)
if(window.jQuery) {
    jQuery.noConflict();
}

// Declare the used class namespaces
window.spsrsmart = window.spsrsmart || {};
spsrsmart.rsmartcore = spsrsmart.rsmartcore || {};
spsrsmart.rsmartcore.AppConfig = spsrsmart.rsmartcore.AppConfig || {};

/**
 * Observer Implementation
 */
spsrsmart.rsmartcore.Observer = RSmartClass.extend({
    
    init: function() {
        this.observers = [];
        this.listeners = [];
    }, // End init
    
    /**
     * Adds an observer.
     * The callback function must have the signature function(scope, data),
     * where the scope is the object that extends this class and data
     * is an arbitrary object. 
     * 
     * @param object obj
     *    The object that adds the observer
     * 
     * @param string callback
     *    The name of a callback function of obj
     */
    addObserver: function(obj, callback) {
        // Check, if function exists
        if(typeof (obj[callback] ) !== 'function') {
            throw (""Function don't exist"" );
        }
        // OK
        this.observers.push({
            obj: obj,
            callback: callback
        });
    }, // End addObserver
    
    /**
     * Removes an observer.
     * 
     * @param object obj
     *    The object that removes the observer
     *    
     * @param string callback
     *    The name of a callback function of obj
     */
    removeObserver: function(obj, callback) {
        this.observers = this.observers.filter(function(el) {
            if (el.obj !== obj && el.callback != callback) {
                return el;
            }
         });
    }, // End removeObserver
    
    /**
     * Adds a listener. 
     * The listener function must have the signature function(scope, data),
     * where the scope is the object that extends this class and data
     * is an arbitrary object.
     * 
     * @param function func
     *    A function. This can also be an anonymous function
     */
    addListener: function(func) {
        var argtype = typeof(func);
        if(argtype == 'function') {
            this.listeners.push({
                func: func
            });
        }
    }, // End addListener
    
    /**
     * Removes a listener.
     * 
     * @param function func
     *    A function. This can also be an anonymous function
     */
    removeListener: function(func) {
        var argtype = typeof(func);
        if(argtype == 'function') {
            this.listeners = this.listeners.filter(function(el) {
                if(el.func !== func) {
                    return el;
                }
            });
        }
    }, // End removeListener
    
    /**
     * Notifies all registered observers and listeners.
     * 
     * @param data
     *    The notification data
     */
    notify: function(data) {
        var scope = this;
        for (var i = 0; i < this.observers.length; i++) {
            var el = this.observers[i];
            // The first argument is obj. This ensures that
            // within the callback method 'this' is the reference to
            // the object that added the observer.
            // scope is the reference of the observer
            el.obj[el.callback].call(el.obj, scope, data);
        }
        
        for (var i = 0; i < this.listeners.length; i++) {
            var el = this.listeners[i];
            el.func.call(scope, data);
        }
    } // End notify
    
});
// End class spsrsmart.rsmartcore.Observer

/**
 * DynamicHtmlClient
 */
spsrsmart.rsmartcore.DynamicHtmlClient = spsrsmart.rsmartcore.Observer.extend({
    
    /**
     * Constructs a new spsrsmart.rsmartcore.DynamicHtmlClient
     */
    init: function() {
        // Call the constructor of spsrsmart.Observer
        this._super();
        
        this.dynamicHtmlId = """";
        this.dynamicHtmlParent = null;
        this.dynamicHtmlCode = """";
    }, // End constructor
    
    dynamicHtmlSetParent: function(jqueryObject) {
        var parent = null;
        if(this.isJQueryObject(jqueryObject)) {
            parent = jqueryObject;
        }
        
        if(parent != null) {
            this.dynamicHtmlParent = parent;
            this.dynamicHtmlId = this.generateGUID();
            var htmlCode = this.dynamicHtmlCode.replace(/#mwmucid/g, this.dynamicHtmlId);
            this.dynamicHtmlParent.append(htmlCode);
        }
        else {
            if(this.dynamicHtmlParent != null) {
                this.dynamicHtmlRemoveId(this.dynamicHtmlId);
            }
            this.dynamicHtmlParent = null;
            this.dynamicHtmlId = """";
        }
    }, // End dynamicHtmlSetParent
    
    dynamicHtmlRemoveId: function(id) {
        var idToRemove = """";
        if(this.isString(id)) {
            idToRemove = id;
        }
        
        if(idToRemove != """") {
            idToRemove = ""#"" + idToRemove;
            jQuery(idToRemove).remove();
        }
    }, // End dynamicHtmlRemoveId
    
    dynamicHtmlGetParent: function() {
        return this.dynamicHtmlParent;
    }, // End dynamicHtmlGetParent
    
    dynamicHtmlGetId: function() {
        return this.dynamicHtmlId;
    }, // End dynamicHtmlGetId
    
    dynamicHtmlGetJQueryId: function(suffix) {
        var idSuffix = """";
        if(this.isString(suffix)) {
            idSuffix = suffix;
        }
        var result = """";
        if(idSuffix != """")
            result = ""#"" + this.dynamicHtmlId + idSuffix;
        else
            result = ""#"" + this.dynamicHtmlId;
        return result;
    }, // End dynamicHtmlGetJQueryId
    
    dynamicHtmlSetHtmlCode: function(htmlcode) {
        if(this.isString(htmlcode)) {
            this.dynamicHtmlCode = htmlcode;
        }
    }, // End dynamicHtmlSetHtmlCode
    
    dynamicHtmlGetHtmlCode: function() {
        return this.dynamicHtmlCode;
    } // End dynamicHtmlGetHtmlCode
    
});
// End class spsrsmart.rsmartcore.DynamicHtmlClient

/**
 * GlobalObject
 */
spsrsmart.rsmartcore.GlobalObject = spsrsmart.rsmartcore.Observer.extend({
    
    init: function() {
        // Call the constructor of spsrsmart.rsmartcore.Observer
        this._super();
        
        this.mainAPP = null;
    }, // End constructor
    
    setMainApp: function(app) {
        if(this.isObject(app)) {
            this.mainAPP = app;
        }
    }, // End setMainApp
    
    getMainApp: function() {
        return this.mainAPP;
    } // End getMainApp
    
});
// End class spsrsmart.rsmartcore.GlobalObject

window.SPSRSMARTGLOBALOBJECT = new spsrsmart.rsmartcore.GlobalObject();

/**
 * Draggable
 * ---------
 * Draggable support for logging window
 */
spsrsmart.rsmartcore.Draggable = spsrsmart.rsmartcore.Observer.extend({
    
    init: function(options) {
        // Call the constructor of spsrsmart.rsmartcore.Observer
        this._super();
        
        this.draggableid = """";
        this.draggableElement = null;
        this.oldX = null;
        this.oldY = null;
        this.mouseInElement = false;
        this.dragging = false;
        
        this.setOptions(options);
        if(this.draggableid != """") {
            this.run();
        }
    }, // End constructor
    
    setOptions: function(options) {
        if(this.isObject(options)) {
            if(this.isString(options.draggableid)) {
                this.draggableid = options.draggableid;
            }
        }
    }, // End setOptions
    
    run: function() {
        var that = this;
        
        this.draggableElement = jQuery(""#"" + this.draggableid);
        
        this.draggableElement.mouseenter(function(evt) {
            jQuery(this).css({""cursor"": ""move""});
            that.mouseInElement = true;
        });
        this.draggableElement.mouseleave(function(evt) {
            jQuery(this).css({""cursor"": ""default""});
            that.mouseInElement = false;
        });
        
        
        jQuery(document).mousedown(function(evt) {
            //evt.preventDefault();
            // MWMUC-23.01.2015
            if(that.mouseInElement == true) {
               that.dragging = true;
            }
            // MWMUC-23.01.2015  that.dragging = true;
        })
        
        // this.draggableElement.mouseup
        jQuery(document).mouseup(function(evt) {
            //evt.preventDefault();
            that.dragging = false;
            that.oldX = null;
            that.oldY = null;
        });
        
        jQuery(document).mousemove(function(evt) {
            //evt.preventDefault();
            var x = evt.clientX;
            var y = evt.clientY;
            if(that.dragging == true) {
                if(that.oldX == null || that.oldY == null) {
                    that.oldX = x;
                    that.oldY = y;
                }
                else {
                    var diffx = x - that.oldX;
                    var diffy = y - that.oldY;
                    that.oldX = x;
                    that.oldY = y;
                    
                    // MWMUC-23.01.2015: Commented out, so that move events are also
                    // sent, when the cursor is temporary not in the emelent                    
                    // if(that.mouseInElement == true) {
                        var notifyOptions = {
                            action: ""elementDragged"",
                            diffx: diffx,
                            diffy: diffy,
                            mouseInElement: that.mouseInElement
                        };
                        that.notify(notifyOptions);
                    //} // end: if(that.mouseInElement == true)
                }
            }
        });
    } // End run
    
});
// End class spsrsmart.rsmartcore.Draggable

/**
 * DynamicLoggingWindowDraggable
 * -----------------------------
 * The draggable logging window
 */
spsrsmart.rsmartcore.DynamicLoggingWindowDraggable = spsrsmart.rsmartcore.DynamicHtmlClient.extend({
    
    init: function(options) {
        // Call the constructor of spsrsmart.rsmartcore.DynamicHtmlClient
        this._super();
        
        // Variables
        this.OPTIONS = null;
        this.refWindow = null;
        this.refWindowTitle = null;
        this.refWindowContent = null;
        this.refButtonClear = null;
        this.refButtonHide = null;
        
        this.loggingWindowTop = 3;
        this.loggingWindowLeft = 3;        
        this.loggingWindowWidth = 400;
        this.loggingWindowHeight = 400;
        this.loggingContentWidth = this.loggingWindowWidth - 10; // 390;
        this.loggingContentHeight = this.loggingWindowHeight - 25; // 375;
        this.entityClear = ""&#8855;""; // ""&#8801;""; //""&#8709;"";
        this.entityArrowDown = ""&#8659;"";
        this.entityArrowRight = ""&#8658;"";
        
        var markup               = ""<div id='#mwmucid' class='mwmuc-loggingwindow mwmuc-loggingwindow-visible' >"" +
                                   ""  <div id='#mwmucid-title' class='mwmuc-loggingwindow-title' >"" +
                                   ""    <span id='#mwmucid-titletext' class='mwmuc-loggingwindow-titletext' >"" + ""Logging Window"" + ""</span>"" +
                                   ""    <span id='#mwmucid-titlebuttons' class='mwmuc-loggingwindow-titlebuttons'  >"" +
                                   ""       <span id='#mwmucid-clearbutton' class='mwmuc-loggingwindow-titlebuttons-clearbutton' title='Clear'>"" + this.entityClear + ""</span>"" +
                                   ""       <span id='#mwmucid-hidebutton' class='mwmuc-loggingwindow-titlebuttons-hidebutton' title='Hide'>"" + this.entityArrowDown + ""</span>"" +
                                   ""    </span>"" +
                                   ""  </div>"" +
                                   ""  <div id='#mwmucid-content' class='mwmuc-loggingwindow-content' ></div>"" +
                                   ""</div>"";
        this.dynamicHtmlSetHtmlCode(markup);
        
        this.windowWidth = jQuery(window).width();
        this.windowHeight = jQuery(window).height();
        
        this.visible = false;
        this.initiallyHidden = false;
        
        this.draggableClass = null;
        
        this.setOptions(options);
        
        this.createLoggingWindow();
    }, // End constructor
    
    setOptions: function(options) {
        if(this.isObject(options)) {
            this.OPTIONS = options;
            
            if(this.isNumber(this.OPTIONS.width)) {
                if(this.OPTIONS.width > 50) { 
                    this.loggingWindowWidth = this.OPTIONS.width;
                    this.loggingContentWidth = this.loggingWindowWidth - 10; 
                }
            }
            
            if(this.isNumber(this.OPTIONS.height)) {
                if(this.OPTIONS.height > 50) {
                    this.loggingWindowHeight = this.OPTIONS.height;
                    this.loggingContentHeight = this.loggingWindowHeight - 25;
                }
            }
            
            if(this.isNumber(this.OPTIONS.top)) {
                this.loggingWindowTop = this.OPTIONS.top;
            }
            
            if(this.isNumber(this.OPTIONS.left)) {
                this.loggingWindowLeft = this.OPTIONS.left;
            }
            
            if(this.isString(this.OPTIONS.mode)) {
                if(this.OPTIONS.mode == ""hidden"") {
                    this.initiallyHidden = true;
                }
            }
        }
        
        
        if(this.windowWidth < this.loggingWindowWidth) {
            this.loggingWindowWidth = this.windowWidth - 20;
            this.loggingContentWidth = this.loggingWindowWidth - 10;
        }
        if(this.windowHeight < this.loggingWindowHeight) {
            this.loggingWindowHeight = this.windowHeight - 20;
            this.loggingContentHeight = this.loggingWindowHeight - 25;
        }        
    }, // End setOptions

    getOptions: function() {
        return this.OPTIONS;
    }, // End getOptions

    logString: function(str) {
        if(this.isString(str)) {
            if(this.refWindow == null) {
                this.createLoggingWindow();
            }
            
            if(this.refWindowContent != null) {
                var html = this.refWindowContent.html();
                html = html + str + ""<br/>"";
                this.refWindowContent.html(html);
            }            
        }
    }, // End logString
    
    clearContent: function() {
        if(this.refWindowContent != null) {
            this.refWindowContent.html("""");
        }
    }, // End clearContent

    hideWindow: function() {
        if(this.visible == true) {
            if(this.refWindow != null) {
                var pos = 0 - this.loggingWindowWidth + 25;
                this.refWindow.css({
                    left: pos
                });
                this.refWindowContent.hide();
                this.refButtonHide.attr(""title"", ""Show Logging Window"");
                this.refButtonHide.html(this.entityArrowRight);
                
                // MWMUC-23.01.2015
                this.refWindow.removeClass(""mwmuc-loggingwindow-visible"");
                this.refWindow.addClass(""mwmuc-loggingwindow-invisible"");                
            }
            this.visible = false;
        }
    }, // End hideWindow

    showWindow: function() {
        if(this.visible == false) {
            if(this.refWindow != null) {
                this.refWindow.css({
                    left: this.loggingWindowLeft,
                    height: this.loggingWindowHeight
                });
                this.refWindowContent.show();
                this.refButtonHide.attr(""title"", ""Hide"");
                this.refButtonHide.html(this.entityArrowDown);  
                
                // MWMUC-23.01.2015
                this.refWindow.removeClass(""mwmuc-loggingwindow-invisible"");
                this.refWindow.addClass(""mwmuc-loggingwindow-visible"");                
            }
            this.visible = true;
        }
    }, // End showWindow

    createLoggingWindow: function() {
        var that = this;
        if(this.refWindow != null) {
            // Window is already created
            return;
        }
        
        this.dynamicHtmlSetParent(jQuery(""body""));
        
        this.refWindow = jQuery(this.dynamicHtmlGetJQueryId());
        this.refWindow.css({
            position: ""fixed"",
            top: this.loggingWindowTop,
            left: this.loggingWindowLeft,
            width: this.loggingWindowWidth,
            height: this.loggingWindowHeight,
            ""z-index"": 20000,
            ""pointer-events"": ""auto"" // This catches events here in the overlay and do not let go them through to the underlayed components
        });
        
        this.refWindowTitle = jQuery(this.dynamicHtmlGetJQueryId(""-title""));        
        this.refWindowContent = jQuery(this.dynamicHtmlGetJQueryId(""-content""));
        this.refWindowContent.css({
            ""overflow-x"": ""auto"",
            ""overflow-y"": ""auto"",
            ""white-space"": ""nowrap"",
            width: this.loggingContentWidth,
            height: this.loggingContentHeight - 20 // 10
        });
                
        this.refButtonClear = jQuery(this.dynamicHtmlGetJQueryId(""-clearbutton""));
        this.refButtonClear.bind(""click"", function(evt) {
            evt.preventDefault();
            that.clearContent();
        });
        
        this.refButtonHide = jQuery(this.dynamicHtmlGetJQueryId(""-hidebutton""));
        this.refButtonHide.bind(""click"", function(evt) {
            evt.preventDefault();
            if(that.visible == true)
                that.hideWindow();
            else
                that.showWindow();
        });
        
        this.visible = true;
        
        if(this.initiallyHidden == true) {
            this.hideWindow();
        }
        
        // Exists spsrsmart.rsmartcore.Draggable ?
        if(spsrsmart.rsmartcore.Draggable) {
            var draggableOptions = {
                draggableid: this.dynamicHtmlGetId() + ""-title""
            };
            this.draggableClass = new spsrsmart.rsmartcore.Draggable(draggableOptions);
            this.draggableClass.addObserver(this, ""dragHandler"");
        }
    }, // End createLoggingWindow

    dragHandler: function(draggable, data) {
        if(this.isObject(data)) {
            //this.logString(""dragHandler: "" + JSON.stringify(data));
            
            if(data.action == ""elementDragged"") {
                this.loggingWindowTop = this.loggingWindowTop + data.diffy;
                // MWMUC-26.01.2015: Move the window up maximum to the top  
                if(this.loggingWindowTop < 0) {
                    this.loggingWindowTop = 0;
                }
                // MWMUC-26.01.2015: Move the window down maximum to window height minus 50
                if(this.loggingWindowTop > (this.windowHeight - 50) ) {
                    this.loggingWindowTop = this.windowHeight - 50;
                }                
                this.loggingWindowLeft = this.loggingWindowLeft + data.diffx;
                this.refWindow.css({
                    top: this.loggingWindowTop,
                    left: this.loggingWindowLeft
                });
            }
        }
    } // End dragHandler
    
});
// End class spsrsmart.rsmartcore.DynamicLoggingWindowDraggable
",FALSE,,3796
3789,InitialSO.csv3789.txt,InitialGit.csv3789.txt,6,"def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
 basestring basestring = (str, bytes)
 ","def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
 basestring str bytes yield from from collections.abc import Iterable

def flatten(l):
    for el in l:
        if isinstance(el, Iterable) and not isinstance(el, (str, bytes)):
            yield from flatten(el)
        else:
            yield el
 ",FALSE,"#!/usr/bin/env python

def as_list(x):
    if isinstance(x, list):
        return x
    else:
        return [x]


# http://stackoverflow.com/a/2158532/2077242

import collections

def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

from itertools import izip_longest

def iter_chunks(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return izip_longest(*args, fillvalue=fillvalue)

","#!/usr/bin/env python

def as_list(x):
    if isinstance(x, list):
        return x
    else:
        return [x]


# http://stackoverflow.com/a/2158532/2077242

import collections

def flatten(l):
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el

from itertools import izip_longest

def iter_chunks(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return izip_longest(*args, fillvalue=fillvalue)

",TRUE,,3798
3790,InitialSO.csv3790.txt,InitialGit.csv3790.txt,6,"<canvas id=""thecanvas"" width=""400"" height=""400""></canvas>

<script>
var canvas = document.getElementById('thecanvas');

if(canvas.getContext) 
{
  var ctx = canvas.getContext('2d');
  drawEllipse(ctx, 10, 10, 100, 60);
  drawEllipseByCenter(ctx, 60,40,20,10);
}

function drawEllipseByCenter(ctx, cx, cy, w, h) {
  drawEllipse(ctx, cx - w/2.0, cy - h/2.0, w, h);
}

function drawEllipse(ctx, x, y, w, h) {
  var kappa = .5522848,
      ox = (w / 2) * kappa, // control point offset horizontal
      oy = (h / 2) * kappa, // control point offset vertical
      xe = x + w,           // x-end
      ye = y + h,           // y-end
      xm = x + w / 2,       // x-middle
      ym = y + h / 2;       // y-middle

  ctx.beginPath();
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  //ctx.closePath(); // not used correctly, see comments (use to close off open path)
  ctx.stroke();
}

</script>
 ","<canvas id=""thecanvas"" width=""400"" height=""400""></canvas>

<script>
var canvas = document.getElementById('thecanvas');

if(canvas.getContext) 
{
  var ctx = canvas.getContext('2d');
  drawEllipse(ctx, 10, 10, 100, 60);
  drawEllipseByCenter(ctx, 60,40,20,10);
}

function drawEllipseByCenter(ctx, cx, cy, w, h) {
  drawEllipse(ctx, cx - w/2.0, cy - h/2.0, w, h);
}

function drawEllipse(ctx, x, y, w, h) {
  var kappa = .5522848,
      ox = (w / 2) * kappa, // control point offset horizontal
      oy = (h / 2) * kappa, // control point offset vertical
      xe = x + w,           // x-end
      ye = y + h,           // y-end
      xm = x + w / 2,       // x-middle
      ym = y + h / 2;       // y-middle

  ctx.beginPath();
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  //ctx.closePath(); // not used correctly, see comments (use to close off open path)
  ctx.stroke();
}

</script>
 ",TRUE,"/**
 * Jdenticon {version}
 * http://jdenticon.com
 *  
 * Built: {date}
 *
 * Copyright (c) 2014-{year} Daniel Mester Pirttijärvi
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 
 * 3. This notice may not be removed or altered from any source distribution.
 * 
 */

/*jslint bitwise: true */

window[""jdenticon""] = (function() {
    ""use strict"";
    var undefined,
        /** @const */
        HASH_ATTRIBUTE = ""data-jdenticon-hash"",
        jQuery = window[""jQuery""];
    
    /**
     * Represents a color.
     * @private
     * @constructor
     */
    function Color() { }
    /**
     * @param {number} r Red channel [0, 255]
     * @param {number} g Green channel [0, 255]
     * @param {number} b Blue channel [0, 255]
     * @param {number=} a Alpha [0, 1]
     */
    Color.rgb = function (r, g, b, a) {
        var color = new Color();
        color.s = ""rgba("" +
            (r & 0xff) + "","" +
            (g & 0xff) + "","" +
            (b & 0xff) + "","" +
            (a === undefined ? 1 : a) + "")"";
        return color;
    };
    /**
     * @param h Hue [0, 1]
     * @param s Saturation [0, 1]
     * @param l Lightness [0, 1]
     * @param {number=} a Alpha [0, 1]
     */
    Color.hsl = function (h, s, l, a) {
        var color = new Color();
        color.s = ""hsla("" +
            ((h * 360) | 0) + "","" +
            ((s * 100) | 0) + ""%,"" +
            ((l * 100) | 0) + ""%,"" +
            (a === undefined ? 1 : a) + "")"";
        return color;
    };
    // This function will correct the lightness for the ""dark"" hues
    Color.correctedHsl = function (h, s, l) {
        var correctors = [ 0.95, 1, 1, 1, 0.7, 0.8, 0.8 ];
        return Color.hsl(h, s, 1 - correctors[(h * 6 + 0.5) | 0] * (1 - l));
    };
    Color.prototype = {
        toString: function () {
            return this.s;
        }
    };
    
    
    /**
     * A wrapper around a context for building paths.
     * @private
     * @constructor
     */
    function Path(ctx) {
        this._ctx = ctx;
        ctx.beginPath();
    }
    Path.prototype = {
        /**
         * Adds a polygon to the path.
         * @param {Array} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]
         * @param {boolean=} invert Specifies if the polygon will be inverted.
         */
        addPolygon: function (points, invert) {
            var di = invert ? -2 : 2,
                i = invert ? points.length - 2 : 0,
                ctx = this._ctx;
            
            ctx.moveTo(points[i], points[i + 1]);
            
            for (i += di; i < points.length && i >= 0; i += di) {
                ctx.lineTo(points[i], points[i + 1]);
            }
            ctx.closePath();
        },
        
        /**
         * Adds a polygon to the path.
         * Source: http://stackoverflow.com/a/2173084
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.
         * @param {number} w The width of the ellipse.
         * @param {number} h The height of the ellipse.
         * @param {boolean=} invert Specifies if the ellipse will be inverted.
         */
        addEllipse: function (x, y, w, h, invert) {
            var ctx = this._ctx,
                kappa = .5522848,
                ox = (w / 2) * kappa, // control point offset horizontal
                oy = (h / 2) * kappa, // control point offset vertical
                xe = x + w,           // x-end
                ye = y + h,           // y-end
                xm = x + w / 2,       // x-middle
                ym = y + h / 2;       // y-middle

            if (invert) {
                ye = y;
                y = y + h;
                oy = -oy;
            }

            ctx.moveTo(x, ym);
            ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
            ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
            ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
            ctx.closePath();
        },

        /**
         * Adds a rectangle to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle.
         * @param {number} w The width of the rectangle.
         * @param {number} h The height of the rectangle.
         * @param {boolean=} invert Specifies if the rectangle will be inverted.
         */
        addRectangle: function (x, y, w, h, invert) {
            this.addPolygon([
                x, y, 
                x + w, y,
                x + w, y + h,
                x, y + h
            ], invert);
        },

        /**
         * Adds a right triangle to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.
         * @param {number} w The width of the triangle.
         * @param {number} h The height of the triangle.
         * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.
         * @param {boolean=} invert Specifies if the triangle will be inverted.
         */
        addTriangle: function (x, y, w, h, r, invert) {
            var points = [
                x + w, y, 
                x + w, y + h, 
                x, y + h,
                x, y
            ];
            points.splice((r || 0) % 4, 2);
            this.addPolygon(points, invert);
        },

        /**
         * Adds a rhombus to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.
         * @param {number} w The width of the rhombus.
         * @param {number} h The height of the rhombus.
         * @param {boolean=} invert Specifies if the rhombus will be inverted.
         */
        addRhombus: function (x, y, w, h, invert) {
            this.addPolygon([
                x + w / 2, y,
                x + w, y + h / 2,
                x + w / 2, y + h,
                x, y + h / 2
            ], invert);
        },

        fill: function () {
            this._ctx.fill();
        }
    };
    
    
    // SHAPES
    /** @const */
    var CENTER_SHAPES = [
        /** @param {Path} p */
        function (p, cell, index) {
            var k = cell * 0.42;
            p.addPolygon([
                0, 0,
                cell, 0,
                cell, cell - k * 2,
                cell - k, cell,
                0, cell
            ]);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var k = 0 | (cell * 0.4);
            p.addTriangle(cell - k, cell - k * 2, k, k * 2, 1);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var s = 0 | (cell / 3);
            p.addRectangle(s, s, cell - s, cell - s);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var inner = 0 | (cell * 0.1),
                outer = 0 | (cell * 0.25);
            p.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var m = 0 | (cell * 0.15),
                s = 0 | (cell * 0.5);
            p.addEllipse(cell - s - m, cell - s - m, s, s);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = cell * 0.1,
                outer = inner * 4;

            p.addRectangle(0, 0, cell, cell);
            p.addPolygon([
                outer, outer,
                cell - inner, outer,
                outer + (cell - outer - inner) / 2, cell - inner
            ], true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, 0, cell, cell, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addRectangle(0, 0, cell, cell / 2);
            p.addRectangle(0, cell / 2, cell / 2, cell / 2);
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = 0 | (cell * 0.14),
                outer = 0 | (cell * 0.35);
            p.addRectangle(0, 0, cell, cell);
            p.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = cell * 0.12,
                outer = inner * 3;

            p.addRectangle(0, 0, cell, cell);
            p.addEllipse(outer, outer, cell - inner - outer, cell - inner - outer, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell * 0.25;
            p.addRectangle(0, 0, cell, cell);
            p.addRhombus(m, m, cell - m, cell - m, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell * 0.4, s = cell * 1.2;
            if (!index) {
                p.addEllipse(m, m, s, s);
            }
        }
    ];
    
    /** @const */
    var OUTER_SHAPES = [
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, 0, cell, cell, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, cell / 2, cell, cell / 2, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addRhombus(0, 0, cell, cell);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell / 6;
            p.addEllipse(m, m, cell - 2 * m, cell - 2 * m);
        }
    ];

    /**
     * Updates the identicon in the speciifed canvas element.
     */
    function update(canvas, hash, padding) {
        var ctx = (canvas = typeof(canvas) === ""string"" ? document.querySelector(canvas) : canvas).getContext(""2d""),
            size = Math.min(canvas.width) * (1 - 2 * (padding === undefined ? 0.08 : padding));
        
        ctx.save();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.translate(
            0 | ((canvas.width - size) / 2),
            0 | ((canvas.height - size) / 2));
        
        drawIcon(
            ctx, 
            hash || canvas.getAttribute(HASH_ATTRIBUTE),
            size);
            
        ctx.restore();
    }

    /**
     * Draws an identicon to a context.
     */
    function drawIcon(ctx, hash, size) {
        // Sizes smaller than 30 px are not supported. If really needed, apply a scaling transformation 
        // to the context before passing it to this function.
        if (size < 30) {
            throw new Error(""Jdenticon cannot render identicons smaller than 30 pixels."");
        }
        if (!/^[0-9a-f]{10,}$/i.test(hash)) {
            throw new Error(""Invalid hash passed to Jdenticon."");
        }
        
        size = size | 0;
        
        var cell = (0 | (size / 8)) * 2;

        function renderShape(ctx, shapes, index, rotationIndex, positions) {
            var r = rotationIndex ? parseInt(hash.charAt(rotationIndex), 16) : 0,
                shape = shapes[parseInt(hash.charAt(index), 16) % shapes.length],
                i,
                path;

            for (i = 0; i < positions.length; i++) {
                ctx.save();
                ctx.translate(positions[i][0] * cell + cell / 2, positions[i][1] * cell + cell / 2);
                ctx.rotate((r++ % 4) * Math.PI / 2);
                ctx.translate(-cell / 2, -cell / 2);
                path = new Path(ctx);
                shape(path, cell, i);
                path.fill();
                ctx.restore();
            }
        }

        // AVAILABLE COLORS
        // the first 15 characters of the hash control the pixels (even/odd)
        // they are drawn down the middle first, then mirrored outwards
        var hue = parseInt(hash.substr(-7), 16) / 0xfffffff,

            // Available colors for this icon
            availableColors = [
                // Dark gray
                Color.rgb(76, 76, 76),
                // Mid color
                Color.correctedHsl(hue, 0.5, 0.6),
                // Light gray
                Color.rgb(230, 230, 230),
                // Light color
                Color.correctedHsl(hue, 0.5, 0.8),
                // Dark color
                Color.hsl(hue, 0.5, 0.4)
            ],

            // The index of the selected colors
            selectedColorIndexes = [],
            index;

        function isDuplicate(values) {
            if (values.indexOf(index) >= 0) {
                for (var i = 0; i < values.length; i++) {
                    if (selectedColorIndexes.indexOf(values[i]) >= 0) {
                        return true;
                    }
                }
            }
        }

        for (var i = 0; i < 3; i++) {
            index = parseInt(hash.charAt(8 + i), 16) % availableColors.length;
            if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo
                isDuplicate([2, 3])) { // Disallow light gray and light color combo
                index = 1;
            }
            selectedColorIndexes.push(index);
        }

        function selectColor(index) {
            ctx.fillStyle = availableColors[selectedColorIndexes[index]].toString();
        }

        
        // ACTUAL RENDERING
        ctx.clearRect(0, 0, size, size);
        // Sides
        selectColor(0);
        renderShape(ctx, OUTER_SHAPES, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);
        // Corners
        selectColor(1);
        renderShape(ctx, OUTER_SHAPES, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);
        // Center
        selectColor(2);
        renderShape(ctx, CENTER_SHAPES, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);
    };

    /**
     * Updates all canvas elements with the data-jdenticon-hash attribute.
     */
    function jdenticon() {
        var hash, 
            canvases = document.getElementsByTagName(""canvas"");
            
        for (var i = 0; i < canvases.length; i++) {
            hash = canvases[i].getAttribute(""data-jdenticon-hash"");
            if (hash) {
                update(canvases[i], hash);
            }
        }
    }
    jdenticon[""drawIcon""] = drawIcon;
    jdenticon[""update""] = update;
    
    // Basic jQuery plugin
    if (jQuery) {
        jQuery[""fn""][""jdenticon""] = function (hash, padding) {
            this[""each""](function (index, el) {
                update(el, hash, padding);
            });
            return this;
        };
    }
    
    setTimeout(jdenticon, 0);
    return jdenticon;
})();","/**
 * Jdenticon {version}
 * http://jdenticon.com
 *  
 * Built: {date}
 *
 * Copyright (c) 2014-{year} Daniel Mester Pirttijärvi
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 
 * 3. This notice may not be removed or altered from any source distribution.
 * 
 */

/*jslint bitwise: true */

window[""jdenticon""] = (function() {
    ""use strict"";
    var undefined,
        /** @const */
        HASH_ATTRIBUTE = ""data-jdenticon-hash"",
        jQuery = window[""jQuery""];
    
    /**
     * Represents a color.
     * @private
     * @constructor
     */
    function Color() { }
    /**
     * @param {number} r Red channel [0, 255]
     * @param {number} g Green channel [0, 255]
     * @param {number} b Blue channel [0, 255]
     * @param {number=} a Alpha [0, 1]
     */
    Color.rgb = function (r, g, b, a) {
        var color = new Color();
        color.s = ""rgba("" +
            (r & 0xff) + "","" +
            (g & 0xff) + "","" +
            (b & 0xff) + "","" +
            (a === undefined ? 1 : a) + "")"";
        return color;
    };
    /**
     * @param h Hue [0, 1]
     * @param s Saturation [0, 1]
     * @param l Lightness [0, 1]
     * @param {number=} a Alpha [0, 1]
     */
    Color.hsl = function (h, s, l, a) {
        var color = new Color();
        color.s = ""hsla("" +
            ((h * 360) | 0) + "","" +
            ((s * 100) | 0) + ""%,"" +
            ((l * 100) | 0) + ""%,"" +
            (a === undefined ? 1 : a) + "")"";
        return color;
    };
    // This function will correct the lightness for the ""dark"" hues
    Color.correctedHsl = function (h, s, l) {
        var correctors = [ 0.95, 1, 1, 1, 0.7, 0.8, 0.8 ];
        return Color.hsl(h, s, 1 - correctors[(h * 6 + 0.5) | 0] * (1 - l));
    };
    Color.prototype = {
        toString: function () {
            return this.s;
        }
    };
    
    
    /**
     * A wrapper around a context for building paths.
     * @private
     * @constructor
     */
    function Path(ctx) {
        this._ctx = ctx;
        ctx.beginPath();
    }
    Path.prototype = {
        /**
         * Adds a polygon to the path.
         * @param {Array} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]
         * @param {boolean=} invert Specifies if the polygon will be inverted.
         */
        addPolygon: function (points, invert) {
            var di = invert ? -2 : 2,
                i = invert ? points.length - 2 : 0,
                ctx = this._ctx;
            
            ctx.moveTo(points[i], points[i + 1]);
            
            for (i += di; i < points.length && i >= 0; i += di) {
                ctx.lineTo(points[i], points[i + 1]);
            }
            ctx.closePath();
        },
        
        /**
         * Adds a polygon to the path.
         * Source: http://stackoverflow.com/a/2173084
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.
         * @param {number} w The width of the ellipse.
         * @param {number} h The height of the ellipse.
         * @param {boolean=} invert Specifies if the ellipse will be inverted.
         */
        addEllipse: function (x, y, w, h, invert) {
            var ctx = this._ctx,
                kappa = .5522848,
                ox = (w / 2) * kappa, // control point offset horizontal
                oy = (h / 2) * kappa, // control point offset vertical
                xe = x + w,           // x-end
                ye = y + h,           // y-end
                xm = x + w / 2,       // x-middle
                ym = y + h / 2;       // y-middle

            if (invert) {
                ye = y;
                y = y + h;
                oy = -oy;
            }

            ctx.moveTo(x, ym);
            ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
            ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
            ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
            ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
            ctx.closePath();
        },

        /**
         * Adds a rectangle to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle.
         * @param {number} w The width of the rectangle.
         * @param {number} h The height of the rectangle.
         * @param {boolean=} invert Specifies if the rectangle will be inverted.
         */
        addRectangle: function (x, y, w, h, invert) {
            this.addPolygon([
                x, y, 
                x + w, y,
                x + w, y + h,
                x, y + h
            ], invert);
        },

        /**
         * Adds a right triangle to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.
         * @param {number} w The width of the triangle.
         * @param {number} h The height of the triangle.
         * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.
         * @param {boolean=} invert Specifies if the triangle will be inverted.
         */
        addTriangle: function (x, y, w, h, r, invert) {
            var points = [
                x + w, y, 
                x + w, y + h, 
                x, y + h,
                x, y
            ];
            points.splice((r || 0) % 4, 2);
            this.addPolygon(points, invert);
        },

        /**
         * Adds a rhombus to the path.
         * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.
         * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.
         * @param {number} w The width of the rhombus.
         * @param {number} h The height of the rhombus.
         * @param {boolean=} invert Specifies if the rhombus will be inverted.
         */
        addRhombus: function (x, y, w, h, invert) {
            this.addPolygon([
                x + w / 2, y,
                x + w, y + h / 2,
                x + w / 2, y + h,
                x, y + h / 2
            ], invert);
        },

        fill: function () {
            this._ctx.fill();
        }
    };
    
    
    // SHAPES
    /** @const */
    var CENTER_SHAPES = [
        /** @param {Path} p */
        function (p, cell, index) {
            var k = cell * 0.42;
            p.addPolygon([
                0, 0,
                cell, 0,
                cell, cell - k * 2,
                cell - k, cell,
                0, cell
            ]);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var k = 0 | (cell * 0.4);
            p.addTriangle(cell - k, cell - k * 2, k, k * 2, 1);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var s = 0 | (cell / 3);
            p.addRectangle(s, s, cell - s, cell - s);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var inner = 0 | (cell * 0.1),
                outer = 0 | (cell * 0.25);
            p.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer);
        },
        /** @param {Path} p */
        function (p, cell, index) { 
            var m = 0 | (cell * 0.15),
                s = 0 | (cell * 0.5);
            p.addEllipse(cell - s - m, cell - s - m, s, s);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = cell * 0.1,
                outer = inner * 4;

            p.addRectangle(0, 0, cell, cell);
            p.addPolygon([
                outer, outer,
                cell - inner, outer,
                outer + (cell - outer - inner) / 2, cell - inner
            ], true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, 0, cell, cell, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addRectangle(0, 0, cell, cell / 2);
            p.addRectangle(0, cell / 2, cell / 2, cell / 2);
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = 0 | (cell * 0.14),
                outer = 0 | (cell * 0.35);
            p.addRectangle(0, 0, cell, cell);
            p.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var inner = cell * 0.12,
                outer = inner * 3;

            p.addRectangle(0, 0, cell, cell);
            p.addEllipse(outer, outer, cell - inner - outer, cell - inner - outer, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell * 0.25;
            p.addRectangle(0, 0, cell, cell);
            p.addRhombus(m, m, cell - m, cell - m, true);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell * 0.4, s = cell * 1.2;
            if (!index) {
                p.addEllipse(m, m, s, s);
            }
        }
    ];
    
    /** @const */
    var OUTER_SHAPES = [
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, 0, cell, cell, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addTriangle(0, cell / 2, cell, cell / 2, 0);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            p.addRhombus(0, 0, cell, cell);
        },
        /** @param {Path} p */
        function (p, cell, index) {
            var m = cell / 6;
            p.addEllipse(m, m, cell - 2 * m, cell - 2 * m);
        }
    ];

    /**
     * Updates the identicon in the speciifed canvas element.
     */
    function update(canvas, hash, padding) {
        var ctx = (canvas = typeof(canvas) === ""string"" ? document.querySelector(canvas) : canvas).getContext(""2d""),
            size = Math.min(canvas.width) * (1 - 2 * (padding === undefined ? 0.08 : padding));
        
        ctx.save();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.translate(
            0 | ((canvas.width - size) / 2),
            0 | ((canvas.height - size) / 2));
        
        drawIcon(
            ctx, 
            hash || canvas.getAttribute(HASH_ATTRIBUTE),
            size);
            
        ctx.restore();
    }

    /**
     * Draws an identicon to a context.
     */
    function drawIcon(ctx, hash, size) {
        // Sizes smaller than 30 px are not supported. If really needed, apply a scaling transformation 
        // to the context before passing it to this function.
        if (size < 30) {
            throw new Error(""Jdenticon cannot render identicons smaller than 30 pixels."");
        }
        if (!/^[0-9a-f]{10,}$/i.test(hash)) {
            throw new Error(""Invalid hash passed to Jdenticon."");
        }
        
        size = size | 0;
        
        var cell = (0 | (size / 8)) * 2;

        function renderShape(ctx, shapes, index, rotationIndex, positions) {
            var r = rotationIndex ? parseInt(hash.charAt(rotationIndex), 16) : 0,
                shape = shapes[parseInt(hash.charAt(index), 16) % shapes.length],
                i,
                path;

            for (i = 0; i < positions.length; i++) {
                ctx.save();
                ctx.translate(positions[i][0] * cell + cell / 2, positions[i][1] * cell + cell / 2);
                ctx.rotate((r++ % 4) * Math.PI / 2);
                ctx.translate(-cell / 2, -cell / 2);
                path = new Path(ctx);
                shape(path, cell, i);
                path.fill();
                ctx.restore();
            }
        }

        // AVAILABLE COLORS
        // the first 15 characters of the hash control the pixels (even/odd)
        // they are drawn down the middle first, then mirrored outwards
        var hue = parseInt(hash.substr(-7), 16) / 0xfffffff,

            // Available colors for this icon
            availableColors = [
                // Dark gray
                Color.rgb(76, 76, 76),
                // Mid color
                Color.correctedHsl(hue, 0.5, 0.6),
                // Light gray
                Color.rgb(230, 230, 230),
                // Light color
                Color.correctedHsl(hue, 0.5, 0.8),
                // Dark color
                Color.hsl(hue, 0.5, 0.4)
            ],

            // The index of the selected colors
            selectedColorIndexes = [],
            index;

        function isDuplicate(values) {
            if (values.indexOf(index) >= 0) {
                for (var i = 0; i < values.length; i++) {
                    if (selectedColorIndexes.indexOf(values[i]) >= 0) {
                        return true;
                    }
                }
            }
        }

        for (var i = 0; i < 3; i++) {
            index = parseInt(hash.charAt(8 + i), 16) % availableColors.length;
            if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo
                isDuplicate([2, 3])) { // Disallow light gray and light color combo
                index = 1;
            }
            selectedColorIndexes.push(index);
        }

        function selectColor(index) {
            ctx.fillStyle = availableColors[selectedColorIndexes[index]].toString();
        }

        
        // ACTUAL RENDERING
        ctx.clearRect(0, 0, size, size);
        // Sides
        selectColor(0);
        renderShape(ctx, OUTER_SHAPES, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);
        // Corners
        selectColor(1);
        renderShape(ctx, OUTER_SHAPES, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);
        // Center
        selectColor(2);
        renderShape(ctx, CENTER_SHAPES, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);
    };

    /**
     * Updates all canvas elements with the data-jdenticon-hash attribute.
     */
    function jdenticon() {
        var hash, 
            canvases = document.getElementsByTagName(""canvas"");
            
        for (var i = 0; i < canvases.length; i++) {
            hash = canvases[i].getAttribute(""data-jdenticon-hash"");
            if (hash) {
                update(canvases[i], hash);
            }
        }
    }
    jdenticon[""drawIcon""] = drawIcon;
    jdenticon[""update""] = update;
    
    // Basic jQuery plugin
    if (jQuery) {
        jQuery[""fn""][""jdenticon""] = function (hash, padding) {
            this[""each""](function (index, el) {
                update(el, hash, padding);
            });
            return this;
        };
    }
    
    setTimeout(jdenticon, 0);
    return jdenticon;
})();",TRUE,,3802
3793,InitialSO.csv3793.txt,InitialGit.csv3793.txt,5,"createEvent createEventObject dataavailable element   var event; // The custom event that will be created

  if (document.createEvent) {
    event = document.createEvent(""HTMLEvents"");
    event.initEvent(""name-of-custom-event"", true, true);
  } else {
    event = document.createEventObject();
    event.eventType = ""name-of-custom-event"";
  }

  event.eventName = ""name-of-custom-event"";

  if (document.createEvent) {
    element.dispatchEvent(event);
  } else {
    element.fireEvent(""on"" + event.eventType, event);
  }
 ","createEvent createEventObject dataavailable element var event; // The custom event that will be created
if(document.createEvent){
    event = document.createEvent(""HTMLEvents"");
    event.initEvent(""dataavailable"", true, true);
    event.eventName = ""dataavailable"";
    element.dispatchEvent(event);
} else {
    event = document.createEventObject();
    event.eventName = ""dataavailable"";
    event.eventType = ""dataavailable"";
    element.fireEvent(""on"" + event.eventType, event);
}
 ",FALSE,"<?php

namespace Behat\Mink\Driver;

use Behat\Mink\Session,
    Behat\Mink\Element\NodeElement,
    Behat\Mink\Exception\DriverException;

use WebDriver\WebDriver;
use WebDriver\Key;

/*
 * This file is part of the Behat\Mink.
 * (c) Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Selenium2 driver.
 *
 * @author Pete Otaqui <pete@otaqui.com>
 */
class Selenium2Driver extends CoreDriver
{
    /**
     * The current Mink session
     * @var \Behat\Mink\Session
     */
    private $session;

    /**
     * Whether the browser has been started
     * @var Boolean
     */
    private $started = false;

    /**
     * The WebDriver instance
     * @var WebDriver
     */
    private $webDriver;

    /**
     * @var string
     */
    private $browserName;

    /**
     * @var array
     */
    private $desiredCapabilities;

    /**
     * The WebDriverSession instance
     * @var \WebDriver\Session
     */
    private $wdSession;

    /**
     * Instantiates the driver.
     *
     * @param string    $browserName Browser name
     * @param array     $desiredCapabilities The desired capabilities
     * @param string    $wdHost The WebDriver host
     */
    public function __construct($browserName = 'firefox', $desiredCapabilities = null, $wdHost = 'http://localhost:4444/wd/hub')
    {
        $this->setBrowserName($browserName);
        $this->setDesiredCapabilities($desiredCapabilities);
        $this->setWebDriver(new WebDriver($wdHost));
    }

    /**
     * Sets the browser name
     *
     * @param string $browserName the name of the browser to start, default is 'firefox'
     */
    protected function setBrowserName($browserName = 'firefox')
    {
        $this->browserName = $browserName;
    }

    /**
     * Sets the desired capabilities - called on construction.  If null is provided, will set the
     * defaults as dsesired.
     *
     * See http://code.google.com/p/selenium/wiki/DesiredCapabilities
     *
     * @param   array $desiredCapabilities  an array of capabilities to pass on to the WebDriver server
     */
    public function setDesiredCapabilities($desiredCapabilities = null)
    {
        if (null === $desiredCapabilities) {
            $desiredCapabilities = self::getDefaultCapabilities();
        }

        if (isset($desiredCapabilities['firefox'])) {
            foreach ($desiredCapabilities['firefox'] as $capability => $value) {
                switch ($capability) {
                    case 'profile':
                        $desiredCapabilities['firefox_'.$capability] = base64_encode(file_get_contents($value));
                        break;
                    default:
                        $desiredCapabilities['firefox_'.$capability] = $value;
                }
            }

            unset($desiredCapabilities['firefox']);
        }

        if (isset($desiredCapabilities['chrome'])) {
            foreach ($desiredCapabilities['chrome'] as $capability => $value) {
                $desiredCapabilities['chrome.'.$capability] = $value;
            }

            unset($desiredCapabilities['chrome']);
        }

        $this->desiredCapabilities = $desiredCapabilities;
    }

    /**
     * Sets the WebDriver instance
     *
     * @param WebDriver $webDriver An instance of the WebDriver class
     */
    public function setWebDriver(WebDriver $webDriver)
    {
        $this->webDriver = $webDriver;
    }

    /**
     * Gets the WebDriverSession instance
     *
     * @return \WebDriver\Session
     */
    public function getWebDriverSession()
    {
        return $this->wdSession;
    }

    /**
     * Returns the default capabilities
     *
     * @return array
     */
    public static function getDefaultCapabilities()
    {
        return array(
            'browserName'       => 'firefox',
            'version'           => '9',
            'platform'          => 'ANY',
            'browserVersion'    => '9',
            'browser'           => 'firefox',
            'name'              => 'Behat Test',
            'deviceOrientation' => 'portrait',
            'deviceType'        => 'tablet',
            'selenium-version'  => '2.31.0'
        );
    }

    /**
     * Makes sure that the Syn event library has been injected into the current page,
     * and return $this for a fluid interface,
     *
     *     $this->withSyn()->executeJsOnXpath($xpath, $script);
     *
     * @return Selenium2Driver
     */
    protected function withSyn()
    {
        $hasSyn = $this->wdSession->execute(array(
            'script' => 'return typeof window[""Syn""]!==""undefined""',
            'args'   => array()
        ));

        if (!$hasSyn) {
            $synJs = file_get_contents(__DIR__.'/Selenium2/syn.js');
            $this->wdSession->execute(array(
                'script' => $synJs,
                'args'   => array()
            ));
        }

        return $this;
    }

    /**
     * Creates some options for key events
     *
     * @param  string $event         the type of event ('keypress', 'keydown', 'keyup');
     * @param  string $char          the character or code
     * @param  string $modifier=null one of 'shift', 'alt', 'ctrl' or 'meta'
     *
     * @return string a json encoded options array for Syn
     */
    protected static function charToOptions($event, $char, $modifier=null)
    {
        $ord = ord($char);
        if (is_numeric($char)) {
            $ord  = $char;
            $char = chr($char);
        }

        $options = array(
            'keyCode'  => $ord,
            'charCode' => $ord
        );

        if ($modifier) {
            $options[$modifier.'Key'] = 1;
        }

        return json_encode($options);
    }

    /**
     * Executes JS on a given element - pass in a js script string and {{ELEMENT}} will
     * be replaced with a reference to the result of the $xpath query
     *
     * @example $this->executeJsOnXpath($xpath, 'return {{ELEMENT}}.childNodes.length');
     *
     * @param  string   $xpath  the xpath to search with
     * @param  string   $script the script to execute
     * @param  Boolean  $sync   whether to run the script synchronously (default is TRUE)
     *
     * @return mixed
     */
    protected function executeJsOnXpath($xpath, $script, $sync = true)
    {
        $element   = $this->wdSession->element('xpath', $xpath);
        $elementID = $element->getID();
        $subscript = ""arguments[0]"";

        $script  = str_replace('{{ELEMENT}}', $subscript, $script);
        $execute = ($sync) ? 'execute' : 'execute_async';

        return $this->wdSession->$execute(array(
            'script' => $script,
            'args'   => array(array('ELEMENT' => $elementID))
        ));
    }

    /**
     * @see Behat\Mink\Driver\DriverInterface::setSession()
     */
    public function setSession(Session $session)
    {
        $this->session = $session;
    }

    /**
     * Starts driver.
     */
    public function start()
    {
        try {
            $this->wdSession = $this->webDriver->session($this->browserName, $this->desiredCapabilities);
        } catch (\Exception $e) {
            throw new DriverException('Could not open connection', 0, $e);
        }

        if (!$this->wdSession) {
            throw new DriverException('Could not connect to a Selenium 2 / WebDriver server');
        }
        $this->started = true;
    }

    /**
     * Checks whether driver is started.
     *
     * @return  Boolean
     */
    public function isStarted()
    {
        return $this->started;
    }

    /**
     * Stops driver.
     */
    public function stop()
    {
        if (!$this->wdSession) {
            throw new DriverException('Could not connect to a Selenium 2 / WebDriver server');
        }

        $this->started = false;
        try {
            $this->wdSession->close();
        } catch (\Exception $e) {
            throw new DriverException('Could not close connection', 0, $e);
        }
    }

    /**
     * Resets driver.
     */
    public function reset()
    {
        $this->wdSession->deleteAllCookies();
    }

    /**
     * Visit specified URL.
     *
     * @param   string  $url    url of the page
     */
    public function visit($url)
    {
        $this->wdSession->open($url);
    }

    /**
     * Returns current URL address.
     *
     * @return  string
     */
    public function getCurrentUrl()
    {
        return $this->wdSession->url();
    }

    /**
     * Reloads current page.
     */
    public function reload()
    {
        $this->wdSession->refresh();
    }

    /**
     * Moves browser forward 1 page.
     */
    public function forward()
    {
        $this->wdSession->forward();
    }

    /**
     * Moves browser backward 1 page.
     */
    public function back()
    {
        $this->wdSession->back();
    }

    /**
     * Switches to specific browser window.
     *
     * @param string $name window name (null for switching back to main window)
     */
    public function switchToWindow($name = null)
    {
        $this->wdSession->focusWindow($name ? $name : '');
    }

    /**
     * Switches to specific iFrame.
     *
     * @param string $name iframe name (null for switching back)
     */
    public function switchToIFrame($name = null)
    {
        $this->wdSession->frame(array('id' => $name));
    }

    /**
     * Sets cookie.
     *
     * @param   string  $name
     * @param   string  $value
     */
    public function setCookie($name, $value = null)
    {
        if (null === $value) {
            $this->wdSession->deleteCookie($name);

            return;
        }

        $cookieArray = array(
            'name'   => $name,
            'value'  => (string) $value,
            'secure' => false, // thanks, chibimagic!
        );

        $this->wdSession->setCookie($cookieArray);
    }

    /**
     * Returns cookie by name.
     *
     * @param   string  $name
     *
     * @return  string|null
     */
    public function getCookie($name)
    {
        $cookies = $this->wdSession->getAllCookies();
        foreach ($cookies as $cookie) {
            if ($cookie['name'] === $name) {
                return urldecode($cookie['value']);
            }
        }
    }

    /**
     * Returns last response content.
     *
     * @return  string
     */
    public function getContent()
    {
        return $this->wdSession->source();
    }

    /**
     * Capture a screenshot of the current window.
     *
     * @return  string  screenshot of MIME type image/* depending
     *   on driver (e.g., image/png, image/jpeg)
     */
    public function getScreenshot()
    {
        return base64_decode($this->wdSession->screenshot());
    }

    /**
     * Finds elements with specified XPath query.
     *
     * @param   string  $xpath
     *
     * @return  array           array of Behat\Mink\Element\NodeElement
     */
    public function find($xpath)
    {
        $nodes = $this->wdSession->elements('xpath', $xpath);

        $elements = array();
        foreach ($nodes as $i => $node) {
            $elements[] = new NodeElement(sprintf('(%s)[%d]', $xpath, $i+1), $this->session);
        }

        return $elements;
    }

    /**
     * Returns element's tag name by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getTagName($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->name();
    }

    /**
     * Returns element's text by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getText($xpath)
    {
        $node = $this->wdSession->element('xpath', $xpath);
        $text = $node->text();
        $text = (string) str_replace(array(""\r"", ""\r\n"", ""\n""), ' ', $text);

        return $text;
    }

    /**
     * Returns element's html by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getHtml($xpath)
    {
        return $this->executeJsOnXpath($xpath, 'return {{ELEMENT}}.innerHTML;');
    }

    /**
     * Returns element's attribute by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  mixed
     */
    public function getAttribute($xpath, $name)
    {
        $attribute = $this->wdSession->element('xpath', $xpath)->attribute($name);
        if ('' !== $attribute) {
            return $attribute;
        }
    }

    /**
     * Returns element's value by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  mixed
     */
    public function getValue($xpath)
    {
        $script = <<<JS
var node = {{ELEMENT}},
    tagName = node.tagName;

if (tagName == ""INPUT"" || ""TEXTAREA"" == tagName) {
    var type = node.getAttribute('type');
    if (type == ""checkbox"") {
        value = ""boolean:"" + node.checked;
    } else if (type == ""radio"") {
        var name = node.getAttribute('name');
        if (name) {
            var fields = window.document.getElementsByName(name);
            var i, l = fields.length;
            for (i = 0; i < l; i++) {
                var field = fields.item(i);
                if (field.checked) {
                    value = ""string:"" + field.value;
                }
            }
        }
    } else {
        value = ""string:"" + node.value;
    }
} else if (tagName == ""SELECT"") {
    if (node.getAttribute('multiple')) {
        options = [];
        for (var i = 0; i < node.options.length; i++) {
            if (node.options[ i ].selected) {
                options.push(node.options[ i ].value);
            }
        }
        value = ""array:"" + options.join(',');
    } else {
        var idx = node.selectedIndex;
        if (idx >= 0) {
            value = ""string:"" + node.options.item(idx).value;
        } else {
            value = null;
        }
    }
} else {
    attributeValue = node.getAttribute('value');
    if (attributeValue != null) {
        value = ""string:"" + attributeValue;
    } else if (node.value) {
        value = ""string:"" + node.value;
    } else {
        return null;
    }
}

return value;
JS;

        $value = $this->executeJsOnXpath($xpath, $script);
        if ($value) {
            if (preg_match('/^string:(.*)$/ms', $value, $vars)) {
                return $vars[1];
            }
            if (preg_match('/^boolean:(.*)$/', $value, $vars)) {
                return 'true' === strtolower($vars[1]);
            }
            if (preg_match('/^array:(.*)$/', $value, $vars)) {
                if ('' === trim($vars[1])) {
                    return array();
                }

                return explode(',', $vars[1]);
            }
        }
    }

    /**
     * Sets element's value by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $value
     */
    public function setValue($xpath, $value)
    {
        $value = strval($value);
        $element = $this->wdSession->element('xpath', $xpath);
        $elementname = strtolower($element->name());

        switch (true) {
            case ($elementname == 'input' && strtolower($element->attribute('type')) == 'text'):
                for ($i = 0; $i < strlen($element->attribute('value')); $i++) {
                    $value = Key::BACKSPACE . $value;
                }
                break;
            case ($elementname == 'textarea'):
            case ($elementname == 'input' && strtolower($element->attribute('type')) != 'file'):
                $element->clear();
                break;
            case ($elementname == 'select'):
                $this->selectOption($xpath, $value);
                return;
        }

        $element->value(array('value' => array($value)));
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Checks checkbox by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function check($xpath)
    {
        $this->executeJsOnXpath($xpath, '{{ELEMENT}}.checked = true');
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Unchecks checkbox by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function uncheck($xpath)
    {
        $this->executeJsOnXpath($xpath, '{{ELEMENT}}.checked = false');
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Checks whether checkbox checked located by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  Boolean
     */
    public function isChecked($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->selected();
    }

    /**
     * Selects option from select field located by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $value
     * @param   Boolean $multiple
     */
    public function selectOption($xpath, $value, $multiple = false)
    {
        $valueEscaped = str_replace('""', '\""', $value);
        $multipleJS   = $multiple ? 'true' : 'false';

        $script = <<<JS
// Function to triger an event. Cross-browser compliant. See http://stackoverflow.com/a/2490876/135494
var triggerEvent = function (element, eventName) {
    var event;
    if (document.createEvent) {
        event = document.createEvent(""HTMLEvents"");
        event.initEvent(eventName, true, true);
    } else {
        event = document.createEventObject();
        event.eventType = eventName;
    }

    event.eventName = eventName;

    if (document.createEvent) {
        element.dispatchEvent(event);
    } else {
        element.fireEvent(""on"" + event.eventType, event);
    }
}

var node = {{ELEMENT}}
if (node.tagName == 'SELECT') {
    var i, l = node.length;
    for (i = 0; i < l; i++) {
        if (node[i].value == ""$valueEscaped"") {
            node[i].selected = true;
        } else if (!$multipleJS) {
            node[i].selected = false;
        }
    }
    triggerEvent(node, 'change');

} else {
    var nodes = window.document.getElementsByName(node.getAttribute('name'));
    var i, l = nodes.length;
    for (i = 0; i < l; i++) {
        if (nodes[i].getAttribute('value') == ""$valueEscaped"") {
            node.checked = true;
        }
    }
    if (node.tagName == 'INPUT') {
      var type = node.getAttribute('type');
      if (type == 'radio') {
        triggerEvent(node, 'change');
      }
    }
}
JS;


        $this->executeJsOnXpath($xpath, $script);
    }

    /**
     * Clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function click($xpath)
    {
        $this->wdSession->element('xpath', $xpath)->click('');
    }

    /**
     * Double-clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function doubleClick($xpath)
    {
        $script = 'Syn.dblclick({{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Right-clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function rightClick($xpath)
    {
        $script = 'Syn.rightClick({{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Attaches file path to file field located by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $path
     */
    public function attachFile($xpath, $path)
    {
        $this->wdSession->element('xpath', $xpath)->value(array('value'=>str_split($path)));
    }

    /**
     * Checks whether element visible located by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  Boolean
     */
    public function isVisible($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->displayed();
    }

    /**
     * Simulates a mouse over on the element.
     *
     * @param   string  $xpath
     */
    public function mouseOver($xpath)
    {
        $script = 'Syn.trigger(""mouseover"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Brings focus to element.
     *
     * @param   string  $xpath
     */
    public function focus($xpath)
    {
        $script = 'Syn.trigger(""focus"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Removes focus from element.
     *
     * @param   string  $xpath
     */
    public function blur($xpath)
    {
        $script = 'Syn.trigger(""blur"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Presses specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyPress($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keypress', $char, $modifier);
        $script = ""Syn.trigger('keypress', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Pressed down specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyDown($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keydown', $char, $modifier);
        $script = ""Syn.trigger('keydown', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Pressed up specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyUp($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keyup', $char, $modifier);
        $script = ""Syn.trigger('keyup', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }


    /**
     * Drag one element onto another.
     *
     * @param   string  $sourceXpath
     * @param   string  $destinationXpath
     */
    public function dragTo($sourceXpath, $destinationXpath)
    {
        $source      = $this->wdSession->element('xpath', $sourceXpath);
        $destination = $this->wdSession->element('xpath', $destinationXpath);

        $this->wdSession->moveto(array(
            'element' => $source->getID()
        ));

        $script = <<<JS
(function (element) {
    var event = document.createEvent(""HTMLEvents"");

    event.initEvent(""dragstart"", true, true);
    event.dataTransfer = {};

    element.dispatchEvent(event);
}({{ELEMENT}}));
JS;
        $this->withSyn()->executeJsOnXpath($sourceXpath, $script);

        $this->wdSession->buttondown();
        $this->wdSession->moveto(array(
            'element' => $destination->getID()
        ));
        $this->wdSession->buttonup();

        $script = <<<JS
(function (element) {
    var event = document.createEvent(""HTMLEvents"");

    event.initEvent(""drop"", true, true);
    event.dataTransfer = {};

    element.dispatchEvent(event);
}({{ELEMENT}}));
JS;
        $this->withSyn()->executeJsOnXpath($destinationXpath, $script);
    }

    /**
     * Executes JS script.
     *
     * @param   string  $script
     */
    public function executeScript($script)
    {
        $this->wdSession->execute(array('script' => $script, 'args' => array()));
    }

    /**
     * Evaluates JS script.
     *
     * @param   string  $script
     *
     * @return  mixed           script return value
     */
    public function evaluateScript($script)
    {
        return $this->wdSession->execute(array('script' => $script, 'args' => array()));
    }

    /**
     * Waits some time or until JS condition turns true.
     *
     * @param   integer $time       time in milliseconds
     * @param   string  $condition  JS condition
     *
     * @return boolean
     */
    public function wait($time, $condition)
    {
        $script = ""return $condition;"";
        $start = microtime(true);
        $end = $start + $time / 1000.0;

        do {
            $result = $this->wdSession->execute(array('script' => $script, 'args' => array()));
            usleep(100000);
        } while ( microtime(true) < $end && !$result );

        return (bool)$result;
    }

    /**
     * Set the dimensions of the window.
     *
     * @param integer $width set the window width, measured in pixels
     * @param integer $height set the window height, measured in pixels
     * @param string $name window name (null for the main window)
     */
    public function resizeWindow($width, $height, $name = null)
    {
        return $this->wdSession->window($name ? $name : 'current')->postSize(array('width' => $width, 'height' => $height));
    }
}
","<?php

namespace Behat\Mink\Driver;

use Behat\Mink\Session,
    Behat\Mink\Element\NodeElement,
    Behat\Mink\Exception\DriverException;

use WebDriver\WebDriver;
use WebDriver\Key;

/*
 * This file is part of the Behat\Mink.
 * (c) Konstantin Kudryashov <ever.zet@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Selenium2 driver.
 *
 * @author Pete Otaqui <pete@otaqui.com>
 */
class Selenium2Driver extends CoreDriver
{
    /**
     * The current Mink session
     * @var \Behat\Mink\Session
     */
    private $session;

    /**
     * Whether the browser has been started
     * @var Boolean
     */
    private $started = false;

    /**
     * The WebDriver instance
     * @var WebDriver
     */
    private $webDriver;

    /**
     * @var string
     */
    private $browserName;

    /**
     * @var array
     */
    private $desiredCapabilities;

    /**
     * The WebDriverSession instance
     * @var \WebDriver\Session
     */
    private $wdSession;

    /**
     * Instantiates the driver.
     *
     * @param string    $browserName Browser name
     * @param array     $desiredCapabilities The desired capabilities
     * @param string    $wdHost The WebDriver host
     */
    public function __construct($browserName = 'firefox', $desiredCapabilities = null, $wdHost = 'http://localhost:4444/wd/hub')
    {
        $this->setBrowserName($browserName);
        $this->setDesiredCapabilities($desiredCapabilities);
        $this->setWebDriver(new WebDriver($wdHost));
    }

    /**
     * Sets the browser name
     *
     * @param string $browserName the name of the browser to start, default is 'firefox'
     */
    protected function setBrowserName($browserName = 'firefox')
    {
        $this->browserName = $browserName;
    }

    /**
     * Sets the desired capabilities - called on construction.  If null is provided, will set the
     * defaults as dsesired.
     *
     * See http://code.google.com/p/selenium/wiki/DesiredCapabilities
     *
     * @param   array $desiredCapabilities  an array of capabilities to pass on to the WebDriver server
     */
    public function setDesiredCapabilities($desiredCapabilities = null)
    {
        if (null === $desiredCapabilities) {
            $desiredCapabilities = self::getDefaultCapabilities();
        }

        if (isset($desiredCapabilities['firefox'])) {
            foreach ($desiredCapabilities['firefox'] as $capability => $value) {
                switch ($capability) {
                    case 'profile':
                        $desiredCapabilities['firefox_'.$capability] = base64_encode(file_get_contents($value));
                        break;
                    default:
                        $desiredCapabilities['firefox_'.$capability] = $value;
                }
            }

            unset($desiredCapabilities['firefox']);
        }

        if (isset($desiredCapabilities['chrome'])) {
            foreach ($desiredCapabilities['chrome'] as $capability => $value) {
                $desiredCapabilities['chrome.'.$capability] = $value;
            }

            unset($desiredCapabilities['chrome']);
        }

        $this->desiredCapabilities = $desiredCapabilities;
    }

    /**
     * Sets the WebDriver instance
     *
     * @param WebDriver $webDriver An instance of the WebDriver class
     */
    public function setWebDriver(WebDriver $webDriver)
    {
        $this->webDriver = $webDriver;
    }

    /**
     * Gets the WebDriverSession instance
     *
     * @return \WebDriver\Session
     */
    public function getWebDriverSession()
    {
        return $this->wdSession;
    }

    /**
     * Returns the default capabilities
     *
     * @return array
     */
    public static function getDefaultCapabilities()
    {
        return array(
            'browserName'       => 'firefox',
            'version'           => '9',
            'platform'          => 'ANY',
            'browserVersion'    => '9',
            'browser'           => 'firefox',
            'name'              => 'Behat Test',
            'deviceOrientation' => 'portrait',
            'deviceType'        => 'tablet',
            'selenium-version'  => '2.31.0'
        );
    }

    /**
     * Makes sure that the Syn event library has been injected into the current page,
     * and return $this for a fluid interface,
     *
     *     $this->withSyn()->executeJsOnXpath($xpath, $script);
     *
     * @return Selenium2Driver
     */
    protected function withSyn()
    {
        $hasSyn = $this->wdSession->execute(array(
            'script' => 'return typeof window[""Syn""]!==""undefined""',
            'args'   => array()
        ));

        if (!$hasSyn) {
            $synJs = file_get_contents(__DIR__.'/Selenium2/syn.js');
            $this->wdSession->execute(array(
                'script' => $synJs,
                'args'   => array()
            ));
        }

        return $this;
    }

    /**
     * Creates some options for key events
     *
     * @param  string $event         the type of event ('keypress', 'keydown', 'keyup');
     * @param  string $char          the character or code
     * @param  string $modifier=null one of 'shift', 'alt', 'ctrl' or 'meta'
     *
     * @return string a json encoded options array for Syn
     */
    protected static function charToOptions($event, $char, $modifier=null)
    {
        $ord = ord($char);
        if (is_numeric($char)) {
            $ord  = $char;
            $char = chr($char);
        }

        $options = array(
            'keyCode'  => $ord,
            'charCode' => $ord
        );

        if ($modifier) {
            $options[$modifier.'Key'] = 1;
        }

        return json_encode($options);
    }

    /**
     * Executes JS on a given element - pass in a js script string and {{ELEMENT}} will
     * be replaced with a reference to the result of the $xpath query
     *
     * @example $this->executeJsOnXpath($xpath, 'return {{ELEMENT}}.childNodes.length');
     *
     * @param  string   $xpath  the xpath to search with
     * @param  string   $script the script to execute
     * @param  Boolean  $sync   whether to run the script synchronously (default is TRUE)
     *
     * @return mixed
     */
    protected function executeJsOnXpath($xpath, $script, $sync = true)
    {
        $element   = $this->wdSession->element('xpath', $xpath);
        $elementID = $element->getID();
        $subscript = ""arguments[0]"";

        $script  = str_replace('{{ELEMENT}}', $subscript, $script);
        $execute = ($sync) ? 'execute' : 'execute_async';

        return $this->wdSession->$execute(array(
            'script' => $script,
            'args'   => array(array('ELEMENT' => $elementID))
        ));
    }

    /**
     * @see Behat\Mink\Driver\DriverInterface::setSession()
     */
    public function setSession(Session $session)
    {
        $this->session = $session;
    }

    /**
     * Starts driver.
     */
    public function start()
    {
        try {
            $this->wdSession = $this->webDriver->session($this->browserName, $this->desiredCapabilities);
        } catch (\Exception $e) {
            throw new DriverException('Could not open connection', 0, $e);
        }

        if (!$this->wdSession) {
            throw new DriverException('Could not connect to a Selenium 2 / WebDriver server');
        }
        $this->started = true;
    }

    /**
     * Checks whether driver is started.
     *
     * @return  Boolean
     */
    public function isStarted()
    {
        return $this->started;
    }

    /**
     * Stops driver.
     */
    public function stop()
    {
        if (!$this->wdSession) {
            throw new DriverException('Could not connect to a Selenium 2 / WebDriver server');
        }

        $this->started = false;
        try {
            $this->wdSession->close();
        } catch (\Exception $e) {
            throw new DriverException('Could not close connection', 0, $e);
        }
    }

    /**
     * Resets driver.
     */
    public function reset()
    {
        $this->wdSession->deleteAllCookies();
    }

    /**
     * Visit specified URL.
     *
     * @param   string  $url    url of the page
     */
    public function visit($url)
    {
        $this->wdSession->open($url);
    }

    /**
     * Returns current URL address.
     *
     * @return  string
     */
    public function getCurrentUrl()
    {
        return $this->wdSession->url();
    }

    /**
     * Reloads current page.
     */
    public function reload()
    {
        $this->wdSession->refresh();
    }

    /**
     * Moves browser forward 1 page.
     */
    public function forward()
    {
        $this->wdSession->forward();
    }

    /**
     * Moves browser backward 1 page.
     */
    public function back()
    {
        $this->wdSession->back();
    }

    /**
     * Switches to specific browser window.
     *
     * @param string $name window name (null for switching back to main window)
     */
    public function switchToWindow($name = null)
    {
        $this->wdSession->focusWindow($name ? $name : '');
    }

    /**
     * Switches to specific iFrame.
     *
     * @param string $name iframe name (null for switching back)
     */
    public function switchToIFrame($name = null)
    {
        $this->wdSession->frame(array('id' => $name));
    }

    /**
     * Sets cookie.
     *
     * @param   string  $name
     * @param   string  $value
     */
    public function setCookie($name, $value = null)
    {
        if (null === $value) {
            $this->wdSession->deleteCookie($name);

            return;
        }

        $cookieArray = array(
            'name'   => $name,
            'value'  => (string) $value,
            'secure' => false, // thanks, chibimagic!
        );

        $this->wdSession->setCookie($cookieArray);
    }

    /**
     * Returns cookie by name.
     *
     * @param   string  $name
     *
     * @return  string|null
     */
    public function getCookie($name)
    {
        $cookies = $this->wdSession->getAllCookies();
        foreach ($cookies as $cookie) {
            if ($cookie['name'] === $name) {
                return urldecode($cookie['value']);
            }
        }
    }

    /**
     * Returns last response content.
     *
     * @return  string
     */
    public function getContent()
    {
        return $this->wdSession->source();
    }

    /**
     * Capture a screenshot of the current window.
     *
     * @return  string  screenshot of MIME type image/* depending
     *   on driver (e.g., image/png, image/jpeg)
     */
    public function getScreenshot()
    {
        return base64_decode($this->wdSession->screenshot());
    }

    /**
     * Finds elements with specified XPath query.
     *
     * @param   string  $xpath
     *
     * @return  array           array of Behat\Mink\Element\NodeElement
     */
    public function find($xpath)
    {
        $nodes = $this->wdSession->elements('xpath', $xpath);

        $elements = array();
        foreach ($nodes as $i => $node) {
            $elements[] = new NodeElement(sprintf('(%s)[%d]', $xpath, $i+1), $this->session);
        }

        return $elements;
    }

    /**
     * Returns element's tag name by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getTagName($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->name();
    }

    /**
     * Returns element's text by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getText($xpath)
    {
        $node = $this->wdSession->element('xpath', $xpath);
        $text = $node->text();
        $text = (string) str_replace(array(""\r"", ""\r\n"", ""\n""), ' ', $text);

        return $text;
    }

    /**
     * Returns element's html by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  string
     */
    public function getHtml($xpath)
    {
        return $this->executeJsOnXpath($xpath, 'return {{ELEMENT}}.innerHTML;');
    }

    /**
     * Returns element's attribute by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  mixed
     */
    public function getAttribute($xpath, $name)
    {
        $attribute = $this->wdSession->element('xpath', $xpath)->attribute($name);
        if ('' !== $attribute) {
            return $attribute;
        }
    }

    /**
     * Returns element's value by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  mixed
     */
    public function getValue($xpath)
    {
        $script = <<<JS
var node = {{ELEMENT}},
    tagName = node.tagName;

if (tagName == ""INPUT"" || ""TEXTAREA"" == tagName) {
    var type = node.getAttribute('type');
    if (type == ""checkbox"") {
        value = ""boolean:"" + node.checked;
    } else if (type == ""radio"") {
        var name = node.getAttribute('name');
        if (name) {
            var fields = window.document.getElementsByName(name);
            var i, l = fields.length;
            for (i = 0; i < l; i++) {
                var field = fields.item(i);
                if (field.checked) {
                    value = ""string:"" + field.value;
                }
            }
        }
    } else {
        value = ""string:"" + node.value;
    }
} else if (tagName == ""SELECT"") {
    if (node.getAttribute('multiple')) {
        options = [];
        for (var i = 0; i < node.options.length; i++) {
            if (node.options[ i ].selected) {
                options.push(node.options[ i ].value);
            }
        }
        value = ""array:"" + options.join(',');
    } else {
        var idx = node.selectedIndex;
        if (idx >= 0) {
            value = ""string:"" + node.options.item(idx).value;
        } else {
            value = null;
        }
    }
} else {
    attributeValue = node.getAttribute('value');
    if (attributeValue != null) {
        value = ""string:"" + attributeValue;
    } else if (node.value) {
        value = ""string:"" + node.value;
    } else {
        return null;
    }
}

return value;
JS;

        $value = $this->executeJsOnXpath($xpath, $script);
        if ($value) {
            if (preg_match('/^string:(.*)$/ms', $value, $vars)) {
                return $vars[1];
            }
            if (preg_match('/^boolean:(.*)$/', $value, $vars)) {
                return 'true' === strtolower($vars[1]);
            }
            if (preg_match('/^array:(.*)$/', $value, $vars)) {
                if ('' === trim($vars[1])) {
                    return array();
                }

                return explode(',', $vars[1]);
            }
        }
    }

    /**
     * Sets element's value by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $value
     */
    public function setValue($xpath, $value)
    {
        $value = strval($value);
        $element = $this->wdSession->element('xpath', $xpath);
        $elementname = strtolower($element->name());

        switch (true) {
            case ($elementname == 'input' && strtolower($element->attribute('type')) == 'text'):
                for ($i = 0; $i < strlen($element->attribute('value')); $i++) {
                    $value = Key::BACKSPACE . $value;
                }
                break;
            case ($elementname == 'textarea'):
            case ($elementname == 'input' && strtolower($element->attribute('type')) != 'file'):
                $element->clear();
                break;
            case ($elementname == 'select'):
                $this->selectOption($xpath, $value);
                return;
        }

        $element->value(array('value' => array($value)));
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Checks checkbox by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function check($xpath)
    {
        $this->executeJsOnXpath($xpath, '{{ELEMENT}}.checked = true');
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Unchecks checkbox by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function uncheck($xpath)
    {
        $this->executeJsOnXpath($xpath, '{{ELEMENT}}.checked = false');
        $script = ""Syn.trigger('change', {}, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Checks whether checkbox checked located by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  Boolean
     */
    public function isChecked($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->selected();
    }

    /**
     * Selects option from select field located by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $value
     * @param   Boolean $multiple
     */
    public function selectOption($xpath, $value, $multiple = false)
    {
        $valueEscaped = str_replace('""', '\""', $value);
        $multipleJS   = $multiple ? 'true' : 'false';

        $script = <<<JS
// Function to triger an event. Cross-browser compliant. See http://stackoverflow.com/a/2490876/135494
var triggerEvent = function (element, eventName) {
    var event;
    if (document.createEvent) {
        event = document.createEvent(""HTMLEvents"");
        event.initEvent(eventName, true, true);
    } else {
        event = document.createEventObject();
        event.eventType = eventName;
    }

    event.eventName = eventName;

    if (document.createEvent) {
        element.dispatchEvent(event);
    } else {
        element.fireEvent(""on"" + event.eventType, event);
    }
}

var node = {{ELEMENT}}
if (node.tagName == 'SELECT') {
    var i, l = node.length;
    for (i = 0; i < l; i++) {
        if (node[i].value == ""$valueEscaped"") {
            node[i].selected = true;
        } else if (!$multipleJS) {
            node[i].selected = false;
        }
    }
    triggerEvent(node, 'change');

} else {
    var nodes = window.document.getElementsByName(node.getAttribute('name'));
    var i, l = nodes.length;
    for (i = 0; i < l; i++) {
        if (nodes[i].getAttribute('value') == ""$valueEscaped"") {
            node.checked = true;
        }
    }
    if (node.tagName == 'INPUT') {
      var type = node.getAttribute('type');
      if (type == 'radio') {
        triggerEvent(node, 'change');
      }
    }
}
JS;


        $this->executeJsOnXpath($xpath, $script);
    }

    /**
     * Clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function click($xpath)
    {
        $this->wdSession->element('xpath', $xpath)->click('');
    }

    /**
     * Double-clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function doubleClick($xpath)
    {
        $script = 'Syn.dblclick({{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Right-clicks button or link located by it's XPath query.
     *
     * @param   string  $xpath
     */
    public function rightClick($xpath)
    {
        $script = 'Syn.rightClick({{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Attaches file path to file field located by it's XPath query.
     *
     * @param   string  $xpath
     * @param   string  $path
     */
    public function attachFile($xpath, $path)
    {
        $this->wdSession->element('xpath', $xpath)->value(array('value'=>str_split($path)));
    }

    /**
     * Checks whether element visible located by it's XPath query.
     *
     * @param   string  $xpath
     *
     * @return  Boolean
     */
    public function isVisible($xpath)
    {
        return $this->wdSession->element('xpath', $xpath)->displayed();
    }

    /**
     * Simulates a mouse over on the element.
     *
     * @param   string  $xpath
     */
    public function mouseOver($xpath)
    {
        $script = 'Syn.trigger(""mouseover"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Brings focus to element.
     *
     * @param   string  $xpath
     */
    public function focus($xpath)
    {
        $script = 'Syn.trigger(""focus"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Removes focus from element.
     *
     * @param   string  $xpath
     */
    public function blur($xpath)
    {
        $script = 'Syn.trigger(""blur"", {}, {{ELEMENT}})';
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Presses specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyPress($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keypress', $char, $modifier);
        $script = ""Syn.trigger('keypress', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Pressed down specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyDown($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keydown', $char, $modifier);
        $script = ""Syn.trigger('keydown', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }

    /**
     * Pressed up specific keyboard key.
     *
     * @param   string  $xpath
     * @param   mixed   $char       could be either char ('b') or char-code (98)
     * @param   string  $modifier   keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
    public function keyUp($xpath, $char, $modifier = null)
    {
        $options = self::charToOptions('keyup', $char, $modifier);
        $script = ""Syn.trigger('keyup', $options, {{ELEMENT}})"";
        $this->withSyn()->executeJsOnXpath($xpath, $script);
    }


    /**
     * Drag one element onto another.
     *
     * @param   string  $sourceXpath
     * @param   string  $destinationXpath
     */
    public function dragTo($sourceXpath, $destinationXpath)
    {
        $source      = $this->wdSession->element('xpath', $sourceXpath);
        $destination = $this->wdSession->element('xpath', $destinationXpath);

        $this->wdSession->moveto(array(
            'element' => $source->getID()
        ));

        $script = <<<JS
(function (element) {
    var event = document.createEvent(""HTMLEvents"");

    event.initEvent(""dragstart"", true, true);
    event.dataTransfer = {};

    element.dispatchEvent(event);
}({{ELEMENT}}));
JS;
        $this->withSyn()->executeJsOnXpath($sourceXpath, $script);

        $this->wdSession->buttondown();
        $this->wdSession->moveto(array(
            'element' => $destination->getID()
        ));
        $this->wdSession->buttonup();

        $script = <<<JS
(function (element) {
    var event = document.createEvent(""HTMLEvents"");

    event.initEvent(""drop"", true, true);
    event.dataTransfer = {};

    element.dispatchEvent(event);
}({{ELEMENT}}));
JS;
        $this->withSyn()->executeJsOnXpath($destinationXpath, $script);
    }

    /**
     * Executes JS script.
     *
     * @param   string  $script
     */
    public function executeScript($script)
    {
        $this->wdSession->execute(array('script' => $script, 'args' => array()));
    }

    /**
     * Evaluates JS script.
     *
     * @param   string  $script
     *
     * @return  mixed           script return value
     */
    public function evaluateScript($script)
    {
        return $this->wdSession->execute(array('script' => $script, 'args' => array()));
    }

    /**
     * Waits some time or until JS condition turns true.
     *
     * @param   integer $time       time in milliseconds
     * @param   string  $condition  JS condition
     *
     * @return boolean
     */
    public function wait($time, $condition)
    {
        $script = ""return $condition;"";
        $start = microtime(true);
        $end = $start + $time / 1000.0;

        do {
            $result = $this->wdSession->execute(array('script' => $script, 'args' => array()));
            usleep(100000);
        } while ( microtime(true) < $end && !$result );

        return (bool)$result;
    }

    /**
     * Set the dimensions of the window.
     *
     * @param integer $width set the window width, measured in pixels
     * @param integer $height set the window height, measured in pixels
     * @param string $name window name (null for the main window)
     */
    public function resizeWindow($width, $height, $name = null)
    {
        return $this->wdSession->window($name ? $name : 'current')->postSize(array('width' => $width, 'height' => $height));
    }
}
",TRUE,,3812
3794,InitialSO.csv3794.txt,InitialGit.csv3794.txt,8,"function isValidXmlName($name)
{
    try {
        new DOMElement($name);
        return TRUE;
    } catch(DOMException $e) {
        return FALSE;
    }
}
 var_dump( isValidXmlName('foo') );      // true   valid localName
var_dump( isValidXmlName(':foo') );     // true   valid localName
var_dump( isValidXmlName(':b:c') );     // true   valid localName
var_dump( isValidXmlName('b:c') );      // false  assumes QName
 function isValidXmlName($name)
{
    try {
        new DOMElement(
            $name,
            null,
            strpos($name, ':') >= 1 ? 'http://example.com' : null
        );
        return TRUE;
    } catch(DOMException $e) {
        return FALSE;
    }
}
 if(stripos($name, 'xml') === 0) return false;
 try/catch ","function isValidXmlName($name)
{
    try {
        new DOMElement($name);
        return TRUE;
    } catch(DOMException $e) {
        return FALSE;
    }
}
 var_dump( isValidXmlName('foo') );      // true   valid localName
var_dump( isValidXmlName(':foo') );     // true   valid localName
var_dump( isValidXmlName(':b:c') );     // true   valid localName
var_dump( isValidXmlName('b:c') );      // false  assumes QName
 function isValidXmlName($name)
{
    try {
        new DOMElement(
            $name,
            null,
            strpos($name, ':') >= 1 ? 'http://example.com' : null
        );
        return TRUE;
    } catch(DOMException $e) {
        return FALSE;
    }
}
 if(stripos($name, 'xml') === 0) return false;
 try/catch ",TRUE,"<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace yii\web;

use DOMDocument;
use DOMElement;
use DOMText;
use DOMException;
use yii\base\Arrayable;
use yii\base\Component;
use yii\helpers\StringHelper;

/**
 * XmlResponseFormatter formats the given data into an XML response content.
 *
 * It is used by [[Response]] to format response data.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class XmlResponseFormatter extends Component implements ResponseFormatterInterface
{
    /**
     * @var string the Content-Type header for the response
     */
    public $contentType = 'application/xml';
    /**
     * @var string the XML version
     */
    public $version = '1.0';
    /**
     * @var string the XML encoding. If not set, it will use the value of [[Response::charset]].
     */
    public $encoding;
    /**
     * @var string the name of the root element. If set to false, null or is empty then no root tag should be added.
     */
    public $rootTag = 'response';
    /**
     * @var string the name of the elements that represent the array elements with numeric keys.
     */
    public $itemTag = 'item';
    /**
     * @var bool whether to interpret objects implementing the [[\Traversable]] interface as arrays.
     * Defaults to `true`.
     * @since 2.0.7
     */
    public $useTraversableAsArray = true;
    /**
     * @var bool if object tags should be added
     * @since 2.0.11
     */
    public $useObjectTags = true;


    /**
     * Formats the specified response.
     * @param Response $response the response to be formatted.
     */
    public function format($response)
    {
        $charset = $this->encoding === null ? $response->charset : $this->encoding;
        if (stripos($this->contentType, 'charset') === false) {
            $this->contentType .= '; charset=' . $charset;
        }
        $response->getHeaders()->set('Content-Type', $this->contentType);
        if ($response->data !== null) {
            $dom = new DOMDocument($this->version, $charset);
            if (!empty($this->rootTag)) {
                $root = new DOMElement($this->rootTag);
                $dom->appendChild($root);
                $this->buildXml($root, $response->data);
            } else {
                $this->buildXml($dom, $response->data);
            }
            $response->content = $dom->saveXML();
        }
    }

    /**
     * @param DOMElement $element
     * @param mixed $data
     */
    protected function buildXml($element, $data)
    {
        if (is_array($data) ||
            ($data instanceof \Traversable && $this->useTraversableAsArray && !$data instanceof Arrayable)
        ) {
            foreach ($data as $name => $value) {
                if (is_int($name) && is_object($value)) {
                    $this->buildXml($element, $value);
                } elseif (is_array($value) || is_object($value)) {
                    $child = new DOMElement($this->getValidXmlElementName($name));
                    $element->appendChild($child);
                    $this->buildXml($child, $value);
                } else {
                    $child = new DOMElement($this->getValidXmlElementName($name));
                    $element->appendChild($child);
                    $child->appendChild(new DOMText($this->formatScalarValue($value)));
                }
            }
        } elseif (is_object($data)) {
            if ($this->useObjectTags) {
                $child = new DOMElement(StringHelper::basename(get_class($data)));
                $element->appendChild($child);
            } else {
                $child = $element;
            }
            if ($data instanceof Arrayable) {
                $this->buildXml($child, $data->toArray());
            } else {
                $array = [];
                foreach ($data as $name => $value) {
                    $array[$name] = $value;
                }
                $this->buildXml($child, $array);
            }
        } else {
            $element->appendChild(new DOMText($this->formatScalarValue($data)));
        }
    }

    /**
     * Formats scalar value to use in XML text node
     *
     * @param int|string|bool $value
     * @return string
     * @since 2.0.11
     */
    protected function formatScalarValue($value)
    {
        if ($value === true) {
            return 'true';
        }

        if ($value === false) {
            return 'false';
        }

        return (string) $value;
    }

    /**
     * Returns element name ready to be used in DOMElement if
     * name is not empty, is not int and is valid.
     *
     * Falls back to [[itemTag]] otherwise.
     *
     * @param mixed $name
     * @return string
     * @since 2.0.12
     */
    protected function getValidXmlElementName($name)
    {
        if (empty($name) || is_int($name) || !$this->isValidXmlName($name)) {
            return $this->itemTag;
        }
        return $name;
    }

    /**
     * Checks if name is valid to be used in XML
     *
     * @param mixed $name
     * @return bool
     * @see http://stackoverflow.com/questions/2519845/how-to-check-if-string-is-a-valid-xml-element-name/2519943#2519943
     */
    protected function isValidXmlName($name)
    {
        try {
            new DOMElement($name);
            return true;
        } catch (DOMException $e) {
            return false;
        }
    }
}
","<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace yii\web;

use DOMDocument;
use DOMElement;
use DOMException;
use DOMText;
use yii\base\Arrayable;
use yii\base\Component;
use yii\helpers\StringHelper;

/**
 * XmlResponseFormatter formats the given data into an XML response content.
 *
 * It is used by [[Response]] to format response data.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class XmlResponseFormatter extends Component implements ResponseFormatterInterface
{
    /**
     * @var string the Content-Type header for the response
     */
    public $contentType = 'application/xml';
    /**
     * @var string the XML version
     */
    public $version = '1.0';
    /**
     * @var string the XML encoding. If not set, it will use the value of [[Response::charset]].
     */
    public $encoding;
    /**
     * @var string the name of the root element. If set to false, null or is empty then no root tag should be added.
     */
    public $rootTag = 'response';
    /**
     * @var string the name of the elements that represent the array elements with numeric keys.
     */
    public $itemTag = 'item';
    /**
     * @var bool whether to interpret objects implementing the [[\Traversable]] interface as arrays.
     * Defaults to `true`.
     * @since 2.0.7
     */
    public $useTraversableAsArray = true;
    /**
     * @var bool if object tags should be added
     * @since 2.0.11
     */
    public $useObjectTags = true;


    /**
     * Formats the specified response.
     * @param Response $response the response to be formatted.
     */
    public function format($response)
    {
        $charset = $this->encoding === null ? $response->charset : $this->encoding;
        if (stripos($this->contentType, 'charset') === false) {
            $this->contentType .= '; charset=' . $charset;
        }
        $response->getHeaders()->set('Content-Type', $this->contentType);
        if ($response->data !== null) {
            $dom = new DOMDocument($this->version, $charset);
            if (!empty($this->rootTag)) {
                $root = new DOMElement($this->rootTag);
                $dom->appendChild($root);
                $this->buildXml($root, $response->data);
            } else {
                $this->buildXml($dom, $response->data);
            }
            $response->content = $dom->saveXML();
        }
    }

    /**
     * @param DOMElement $element
     * @param mixed $data
     */
    protected function buildXml($element, $data)
    {
        if (is_array($data) ||
            ($data instanceof \Traversable && $this->useTraversableAsArray && !$data instanceof Arrayable)
        ) {
            foreach ($data as $name => $value) {
                if (is_int($name) && is_object($value)) {
                    $this->buildXml($element, $value);
                } elseif (is_array($value) || is_object($value)) {
                    $child = new DOMElement($this->getValidXmlElementName($name));
                    $element->appendChild($child);
                    $this->buildXml($child, $value);
                } else {
                    $child = new DOMElement($this->getValidXmlElementName($name));
                    $element->appendChild($child);
                    $child->appendChild(new DOMText($this->formatScalarValue($value)));
                }
            }
        } elseif (is_object($data)) {
            if ($this->useObjectTags) {
                $child = new DOMElement(StringHelper::basename(get_class($data)));
                $element->appendChild($child);
            } else {
                $child = $element;
            }
            if ($data instanceof Arrayable) {
                $this->buildXml($child, $data->toArray());
            } else {
                $array = [];
                foreach ($data as $name => $value) {
                    $array[$name] = $value;
                }
                $this->buildXml($child, $array);
            }
        } else {
            $element->appendChild(new DOMText($this->formatScalarValue($data)));
        }
    }

    /**
     * Formats scalar value to use in XML text node.
     *
     * @param int|string|bool $value
     * @return string
     * @since 2.0.11
     */
    protected function formatScalarValue($value)
    {
        if ($value === true) {
            return 'true';
        }

        if ($value === false) {
            return 'false';
        }

        return (string) $value;
    }

    /**
     * Returns element name ready to be used in DOMElement if
     * name is not empty, is not int and is valid.
     *
     * Falls back to [[itemTag]] otherwise.
     *
     * @param mixed $name
     * @return string
     * @since 2.0.12
     */
    protected function getValidXmlElementName($name)
    {
        if (empty($name) || is_int($name) || !$this->isValidXmlName($name)) {
            return $this->itemTag;
        }

        return $name;
    }

    /**
     * Checks if name is valid to be used in XML.
     *
     * @param mixed $name
     * @return bool
     * @see http://stackoverflow.com/questions/2519845/how-to-check-if-string-is-a-valid-xml-element-name/2519943#2519943
     * @since 2.0.12
     */
    protected function isValidXmlName($name)
    {
        try {
            new DOMElement($name);
            return true;
        } catch (DOMException $e) {
            return false;
        }
    }
}
",FALSE,,3825
3795,InitialSO.csv3795.txt,InitialGit.csv3795.txt,7,":focus $("".."").is("":focus"") jQuery.expr[':'].focus = function( elem ) {
  return elem === document.activeElement && ( elem.type || elem.href );
};
 (elem.type || elem.href) if ($(""..."").is("":focus"")) {
  ...
}
 $(""input:focus"").doStuff();
 $(document.activeElement)
 :focus (function ( $ ) {
    var filters = $.expr["":""];
    if ( !filters.focus ) { 
        filters.focus = function( elem ) {
           return elem === document.activeElement && ( elem.type || elem.href );
        };
    }
})( jQuery );
 ",":focus $("".."").is("":focus"") jQuery.expr[':'].focus = function( elem ) {
  return elem === document.activeElement && ( elem.type || elem.href );
};
 (elem.type || elem.href) if ($(""..."").is("":focus"")) {
  ...
}
 $(""input:focus"").doStuff();
 $(document.activeElement)
 :focus (function ( $ ) {
    var filters = $.expr["":""];
    if ( !filters.focus ) { 
        filters.focus = function( elem ) {
           return elem === document.activeElement && ( elem.type || elem.href );
        };
    }
})( jQuery );
 ",TRUE,"
/**
 * @fileOverview Better Autocomplete is a flexible jQuery plugin which offers
 * rich text autocompletion, both from local and remote sources.
 *
 * @author Didrik Nordström, http://betamos.se/
 *
 * @version v1.0
 *
 * @requires
 *   <ul><li>
 *   jQuery 1.4+
 *   </li><li>
 *   IE7+ or any decent webkit/gecko-based web browser
 *   </li></ul>
 *
 * @preserve Better Autocomplete v1.0-dev
 * https://github.com/betamos/Better-Autocomplete
 *
 * Copyright 2011, Didrik Nordström, http://betamos.se/
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Requires jQuery 1.4+
 * http://jquery.com/
 */

/**
 * Create or alter an autocomplete object instance that belongs to
 * the elements in the selection. Make sure there are only text field elements
 * in the selection.
 *
 * @constructor
 *
 * @name jQuery.betterAutocomplete
 *
 * @param {String} method
 *   Should be one of the following:
 *   <ul><li>
 *     init: Initiate Better Autocomplete instances on the text input elements
 *     in the current jQuery selection. They are enabled by default. The other
 *     parameters are then required.
 *   </li><li>
 *     enable: In this jQuery selection, reenable the Better Autocomplete
 *     instances.
 *   </li><li>
 *     disable: In this jQuery selection, disable the Better Autocomplete
 *     instances.
 *   </li><li>
 *     destroy: In this jQuery selection, destroy the Better Autocomplete
 *     instances. It will not be possible to reenable them after this.
 *   </li></ul>
 *
 * @param {String|Object} [resource]
 *   If String, it will become the path for a remote resource. If not, it will
 *   be treated like a local resource. The path should provide JSON objects
 *   upon HTTP requests.
 *
 * @param {Object} [options]
 *   An object with configurable options:
 *   <ul><li>
 *     charLimit: (default=3 for remote or 1 for local resource) The minimum
 *     number of chars to do an AJAX call. A typical use case for this limit is
 *     to reduce server load.
 *   </li><li>
 *     delay: (default=350) The time in ms between last keypress and AJAX call.
 *     Typically used to prevent looking up irrelevant strings while the user
 *     is still typing. Only relevant for remote resources.
 *   </li><li>
 *     caseSensitive: (default=false) If the search should be case sensitive.
 *     If false, query strings will be converted to lowercase.
 *   </li><li>
 *     cacheLimit: (default=256 for remote or 0 for local resource) The maximum
 *     number of result objects to store in the cache. This option reduces
 *     server load if the user deletes characters to check back on previous
 *     results. To disable caching of previous results, set this option to 0.
 *   </li><li>
 *     remoteTimeout: (default=10000) The timeout for remote (AJAX) calls.
 *   </li><li>
 *     crossOrigin: (default=false) Set to true if cross origin requests will
 *     be performed, i.e. that the remote URL has a different domain. This will
 *     force Internet Explorer to use ""jsonp"" instead of ""json"" as datatype.
 *   </li><li>
 *     selectKeys: (default=[9, 13]) The key codes for keys which will select
 *     the current highlighted element. The defaults are tab, enter.
 *   </li></ul>
 *
 * @param {Object} [callbacks]
 *   An object containing optional callback functions on certain events. See
 *   {@link callbacks} for details. These callbacks should be used when
 *   customization of the default behavior of Better Autocomplete is required.
 *
 * @returns {Object}
 *   The jQuery object with the same element selection, for chaining.
 */

(function($) {

$.fn.betterAutocomplete = function(method) {

  /*
   * Each method expects the ""this"" object to be a valid DOM text input node.
   * The methods ""enable"", ""disable"" and ""destroy"" expects an instance of a
   * BetterAutocomplete object as their first argument.
   */
  var methods = {
    init: function(resource, options, callbacks) {
      var $input = $(this),
        bac = new BetterAutocomplete($input, resource, options, callbacks);
      $input.data('better-autocomplete', bac);
      bac.enable();
    },
    enable: function(bac) {
      bac.enable();
    },
    disable: function(bac) {
      bac.disable();
    },
    destroy: function(bac) {
      bac.destroy();
    }
  }, args = Array.prototype.slice.call(arguments, 1);

  // Method calling logic
  this.each(function() {
    switch (method) {
    case 'init':
      methods[method].apply(this, args);
      break;
    case 'enable':
    case 'disable':
    case 'destroy':
      var bac = $(this).data('better-autocomplete');
      if (bac instanceof BetterAutocomplete) {
        methods[method].call(this, bac);
      }
      break;
    default:
      $.error(['Method', method,
          'does not exist in jQuery.betterAutocomplete.'].join(' '));
    }
  });

  // Maintain chainability
  return this;
};

/**
 * The BetterAutocomplete constructor function. Returns a BetterAutocomplete
 * instance object.
 *
 * @private @constructor
 * @name BetterAutocomplete
 *
 * @param {Object} $input
 *   A single input element wrapped in jQuery.
 */
var BetterAutocomplete = function($input, resource, options, callbacks) {

  var lastRenderedQuery = '',
    cache = {}, // Key-valued caching of search results
    cacheOrder = [], // Array of query strings, in the order they are added
    cacheSize = 0, // Keep count of the cache's size
    timer, // Used for options.delay
    activeRemoteCalls = [], // A flat array of query strings that are pending
    disableMouseHighlight = false, // Suppress the autotriggered mouseover event
    inputEvents = {},
    isLocal = ($.type(resource) != 'string'),
    $results = $('<ul />').addClass('better-autocomplete'),
    hiddenResults = true, // $results are hidden
    preventBlurTimer = null; // IE bug workaround, see below in code.

  options = $.extend({
    charLimit: isLocal ? 1 : 3,
    delay: 350, // milliseconds
    caseSensitive: false,
    cacheLimit: isLocal ? 0 : 256, // Number of result objects
    remoteTimeout: 10000, // milliseconds
    crossOrigin: false,
    selectKeys: [9, 13] // [tab, enter]
  }, options);

  callbacks = $.extend({}, defaultCallbacks, callbacks);

  callbacks.insertSuggestionList($results, $input);

  inputEvents.focus = function() {
    // If the blur timer is active, a redraw is redundant.
    preventBlurTimer || redraw(true);
  };

  inputEvents.blur = function() {
    // If the blur prevention timer is active, refocus the input, since the
    // blur event can not be cancelled.
    if (preventBlurTimer) {
      $input.focus();
    }
    else {
      // The input has already lost focus, so redraw the suggestion list.
      redraw();
    }
  };

  inputEvents.keydown = function(event) {
    var index = getHighlighted();
    // If an arrow key is pressed and a result is highlighted
    if ($.inArray(event.keyCode, [38, 40]) >= 0 && index >= 0) {
      var newIndex,
        size = $('.result', $results).length;
      switch (event.keyCode) {
      case 38: // Up arrow
        newIndex = Math.max(0, index - 1);
        break;
      case 40: // Down arrow
        newIndex = Math.min(size - 1, index + 1);
        break;
      }
      disableMouseHighlight = true;
      setHighlighted(newIndex, true);
      return false;
    }
    // A select key has been pressed
    else if ($.inArray(event.keyCode, options.selectKeys) >= 0 &&
             !event.shiftKey && !event.ctrlKey && !event.altKey &&
             !event.metaKey) {
      select();
      return event.keyCode == 9; // Never cancel tab
    }
  };

  inputEvents.keyup = inputEvents.click = reprocess;

  $('.result', $results[0]).live({
    // When the user hovers a result with the mouse, highlight it.
    mouseover: function() {
      if (disableMouseHighlight) {
        return;
      }
      setHighlighted($('.result', $results).index($(this)));
    },
    mousemove: function() {
      // Enable mouseover again.
      disableMouseHighlight = false;
    },
    mousedown: function() {
      select();
      return false;
    }
  });

  // Prevent blur when clicking on group titles, scrollbars etc.,
  // This event is triggered after the others because of bubbling.
  $results.mousedown(function() {
    // Bug in IE where clicking on scrollbar would trigger a blur event for the
    // input field, despite using preventDefault() on the mousedown event.
    // This workaround locks the blur event on the input for a small time.
    clearTimeout(preventBlurTimer);
    preventBlurTimer = setTimeout(function() {
      preventBlurTimer = null;
    }, 50);
    return false;
  });

  /*
   * PUBLIC METHODS
   */

  /**
   * Enable this instance.
   */
  this.enable = function() {
    // Turn off the browser's autocompletion
    $input
      .attr('autocomplete', 'OFF')
      .attr('aria-autocomplete', 'list');
    $input.bind(inputEvents);
  };

  /**
   * Disable this instance.
   */
  this.disable = function() {
    $input
      .removeAttr('autocomplete')
      .removeAttr('aria-autocomplete');
    $results.hide();
    $input.unbind(inputEvents);
  };

  /**
   * Disable and remove this instance. This instance should not be reused.
   */
  this.destroy = function() {
    $results.remove();
    $input.unbind(inputEvents);
    $input.removeData('better-autocomplete');
  };

  /*
   * PRIVATE METHODS
   */

  /**
   * Add an array of results to the cache. Internal methods always reads from
   * the cache, so this method must be invoked even when caching is not used,
   * e.g. when using local results. This method automatically clears as much of
   * the cache as required to fit within the cache limit.
   *
   * @param {String} query
   *   The query to set the results to.
   *
   * @param {Array[Object]} results
   *   The array of results for this query.
   */
  var cacheResults = function(query, results) {
    cacheSize += results.length;
    // Now reduce size until it fits
    while (cacheSize > options.cacheLimit && cacheOrder.length) {
      var key = cacheOrder.shift();
      cacheSize -= cache[key].length;
      delete cache[key];
    }
    cacheOrder.push(query);
    cache[query] = results;
  };

  /**
   * Set highlight to a specific result item
   *
   * @param {Number} index
   *   The result's index, starting at 0.
   *
   * @param {Boolean} [autoScroll]
   *   (default=false) If scrolling of the results list should be automated.
   */
  var setHighlighted = function(index, autoScroll) {
    // Scrolling upwards
    var up = index == 0 || index < getHighlighted(),
      $scrollTo = $('.result', $results)
        .removeClass('highlight')
        .eq(index).addClass('highlight');

    if (!autoScroll) {
      return;
    }
    // Scrolling up, then make sure to show the group title
    if ($scrollTo.prev().is('.group') && up) {
      $scrollTo = $scrollTo.prev();
    }
    // Is $scrollTo partly above the visible region?
    if ($scrollTo.position().top < 0) {
      $results.scrollTop($scrollTo.position().top + $results.scrollTop());
    }
    // Or is it partly below the visible region?
    else if (($scrollTo.position().top + $scrollTo.outerHeight()) >
              $results.height()) {
      $results.scrollTop($scrollTo.position().top + $results.scrollTop() +
          $scrollTo.outerHeight() - $results.height());
    }
  };

  /**
   * Retrieve the index of the currently highlighted result item
   *
   * @returns {Number}
   *   The result's index or -1 if no result is highlighted.
   */
  var getHighlighted = function() {
    return $('.result', $results).index($('.result.highlight', $results));
  };

  /**
   * Select the current highlighted element, if any.
   */
  var select = function() {
    var $result = $('.result', $results).eq(getHighlighted());
    if (!$result.length) {
      return; // No selectable element
    }
    var result = $result.data('result');
    callbacks.select(result, $input);
    // Redraw again, if the callback changed focus or content
    reprocess();
  };

  /**
   * Fetch results asynchronously via AJAX.
   * Errors are ignored.
   *
   * @param {String} query
   *   The query string.
   */
  var fetchResults = function(query) {
    // Synchronously fetch local data
    if (isLocal) {
      cacheResults(query, callbacks.queryLocalResults(query, resource,
                                                      options.caseSensitive));
      redraw();
    }
    // Asynchronously fetch remote data
    else {
      activeRemoteCalls.push(query);
      var url = callbacks.constructURL(resource, query);
      callbacks.beginFetching($input);
      callbacks.fetchRemoteData(url, function(data) {
        var searchResults = callbacks.processRemoteData(data);
        if (!$.isArray(searchResults)) {
          searchResults = [];
        }
        cacheResults(query, searchResults);
        // Remove the query from active remote calls, since it's finished
        activeRemoteCalls = $.grep(activeRemoteCalls, function(value) {
          return value != query;
        });
        if (!activeRemoteCalls.length) {
          callbacks.finishFetching($input);
        }
        redraw();
      }, options.remoteTimeout, options.crossOrigin);
    }
  };

  /**
   * Reprocess the contents of the input field, fetch data and redraw if
   * necessary.
   */
  function reprocess() {
    var query = callbacks.canonicalQuery($input.val(), options.caseSensitive);
    clearTimeout(timer);
    // Indicate that timer is inactive
    timer = null;
    redraw();
    if (query.length >= options.charLimit && !$.isArray(cache[query]) &&
        $.inArray(query, activeRemoteCalls) == -1) {
      // Fetching is required
      $results.empty();
      if (isLocal) {
        fetchResults(query);
      }
      else {
        timer = setTimeout(function() {
          fetchResults(query);
          timer = null;
        }, options.delay);
      }
    }
  };

  /**
   * Redraws the autocomplete list based on current query and focus.
   *
   * @param {Boolean} [focus]
   *   (default=false) Force to treat the input element like it's focused.
   */
  var redraw = function(focus) {
    var query = callbacks.canonicalQuery($input.val(), options.caseSensitive);

    // The query does not exist in db
    if (!$.isArray(cache[query])) {
      lastRenderedQuery = null;
      $results.empty();
    }
    // The query exists and is not already rendered
    else if (lastRenderedQuery !== query) {
      lastRenderedQuery = query;
      renderResults(cache[query]);
      setHighlighted(0);
    }
    // Finally show/hide based on focus and emptiness
    if (($input.is(':focus') || focus) && !$results.is(':empty')) {
      $results.filter(':hidden').show() // Show if hidden
        .scrollTop($results.data('scroll-top')); // Reset the lost scrolling
      if (hiddenResults) {
        hiddenResults = false;
        callbacks.afterShow($results);
      }
    }
    else if ($results.is(':visible')) {
      // Store the scrolling position for later
      $results.data('scroll-top', $results.scrollTop())
        .hide(); // Hiding it resets it's scrollTop
      if (!hiddenResults) {
        hiddenResults = true;
        callbacks.afterHide($results);
      }
    }
  };

  /**
   * Regenerate the DOM content within the results list for a given set of
   * results. Heavy method, use only when necessary.
   *
   * @param {Array[Object]} results
   *   An array of result objects to render.
   */
  var renderResults = function(results) {
    $results.empty();
    var groups = {}; // Key is the group name, value is the heading element.

    $.each(results, function(index, result) {
      if ($.type(result) != 'object') {
        return; // Continue
      }

      var output = callbacks.themeResult(result);
      if ($.type(output) != 'string') {
        return; // Continue
      }

      // Add the group if it doesn't exist
      var group = callbacks.getGroup(result);
      if ($.type(group) == 'string' && !groups[group]) {
        var $groupHeading = $('<li />').addClass('group')
          .append($('<h3 />').html(group))
          .appendTo($results);
        groups[group] = $groupHeading;
      }

      var $result = $('<li />').addClass('result')
        .append(output)
        .data('result', result) // Store the result object on this DOM element
        .addClass(result.addClass);

      // First groupless item
      if ($.type(group) != 'string' &&
          !$results.children().first().is('.result')) {
        $results.prepend($result);
        return; // Continue
      }
      var $traverseFrom = ($.type(group) == 'string') ?
                          groups[group] : $results.children().first();
      var $target = $traverseFrom.nextUntil('.group').last();
      $result.insertAfter($target.length ? $target : $traverseFrom);
    });
  };
};

/*
 * CALLBACK METHODS
 */

/**
 * These callbacks are supposed to be overridden by you when you need
 * customization of the default behavior. When you are overriding a callback
 * function, it is a good idea to copy the source code from the default
 * callback function, as a skeleton.
 *
 * @name callbacks
 * @namespace
 */
var defaultCallbacks = {
  /**
   * @lends callbacks.prototype
   */

  /**
   * Gets fired when the user selects a result by clicking or using the
   * keyboard to select an element.
   *
   * <br /><br /><em>Default behavior: Inserts the result's title into the
   * input field.</em>
   *
   * @param {Object} result
   *   The result object that was selected.
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  select: function(result, $input) {
    $input.val(result.title);
  },

  /**
   * Given a result object, theme it to HTML.
   *
   * <br /><br /><em>Default behavior: Wraps result.title in an h4 tag, and
   * result.description in a p tag. Note that no sanitization of malicious
   * scripts is done here. Whatever is within the title/description is just
   * printed out. May contain HTML.</em>
   *
   * @param {Object} result
   *   The result object that should be rendered.
   *
   * @returns {String}
   *   HTML output, will be wrapped in a list element.
   */
  themeResult: function(result) {
    var output = [];
    if ($.type(result.title) == 'string') {
      output.push('<h4>', result.title, '</h4>');
    }
    if ($.type(result.description) == 'string') {
      output.push('<p>', result.description, '</p>');
    }
    return output.join('');
  },

  /**
   * Retrieve local results from the local resource by providing a query
   * string.
   *
   * <br /><br /><em>Default behavior: Automatically handles arrays, if the
   * data inside each element is either a plain string or a result object.
   * If it is a result object, it will match the query string against the
   * title and description property. Search is not case sensitive.</em>
   *
   * @param {String} query
   *   The query string, unescaped. May contain any UTF-8 character.
   *   If case insensitive, it already is lowercased.
   *
   * @param {Object} resource
   *   The resource provided in the {@link jQuery.betterAutocomplete} init
   *   constructor.
   *
   * @param {Boolean} caseSensitive
   *   From options.caseSensitive, the searching should be case sensitive.
   *
   * @returns {Array[Object]}
   *   A flat array containing pure result objects. May be an empty array.
   */
  queryLocalResults: function(query, resource, caseSensitive) {
    if (!$.isArray(resource)) {
      // Per default Better Autocomplete only handles arrays
      return [];
    }
    var results = [];
    $.each(resource, function(i, value) {
      switch ($.type(value)) {
      case 'string': // Flat array of strings
        if ((caseSensitive ? value : value.toLowerCase())
            .indexOf(query) >= 0) {
          // Match found
          results.push({ title: value });
        }
        break;
      case 'object': // Array of result objects
        if ($.type(value.title) == 'string' &&
            (caseSensitive ? value.title : value.title.toLowerCase())
            .indexOf(query) >= 0) {
          // Match found in title field
          results.push(value);
        }
        else if ($.type(value.description) == 'string' &&
                 (caseSensitive ? value.description :
                 value.description.toLowerCase()).indexOf(query) >= 0) {
          // Match found in description field
          results.push(value);
        }
        break;
      }
    });
    return results;
  },

  /**
   * Fetch remote result data and return it using completeCallback when
   * fetching is finished. Must be asynchronous in order to not freeze the
   * Better Autocomplete instance.
   *
   * <br /><br /><em>Default behavior: Fetches JSON data from the url, using
   * the jQuery.ajax() method. Errors are ignored.</em>
   *
   * @param {String} url
   *   The URL to fetch data from.
   *
   * @param {Function} completeCallback
   *   This function must be called, even if an error occurs. It takes zero
   *   or one parameter: the data that was fetched.
   *
   * @param {Number} timeout
   *   The preferred timeout for the request. This callback should respect
   *   the timeout.
   *
   * @param {Boolean} crossOrigin
   *   True if a cross origin request should be performed.
   */
  fetchRemoteData: function(url, completeCallback, timeout, crossOrigin) {
    $.ajax({
      url: url,
      dataType: crossOrigin && !$.support.cors ? 'jsonp' : 'json',
      timeout: timeout,
      success: function(data, textStatus) {
        completeCallback(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        completeCallback();
      }
    });
  },

  /**
   * Process remote fetched data by extracting an array of result objects
   * from it. This callback is useful if the fetched data is not the plain
   * results array, but a more complicated object which does contain results.
   *
   * <br /><br /><em>Default behavior: If the data is defined and is an
   * array, return it. Otherwise return an empty array.</em>
   *
   * @param {mixed} data
   *   The raw data recieved from the server. Can be undefined.
   *
   * @returns {Array[Object]}
   *   A flat array containing result objects. May be an empty array.
   */
  processRemoteData: function(data) {
    if ($.isArray(data)) {
      return data;
    }
    else {
      return [];
    }
  },

  /**
   * From a given result object, return it's group name (if any). Used for
   * grouping results together.
   *
   * <br /><br /><em>Default behavior: If the result has a ""group"" property
   * defined, return it.</em>
   *
   * @param {Object} result
   *   The result object.
   *
   * @returns {String}
   *   The group name, may contain HTML. If no group, don't return anything.
   */
  getGroup: function(result) {
    if ($.type(result.group) == 'string') {
      return result.group;
    }
  },

  /**
   * Called when remote fetching begins.
   *
   * <br /><br /><em>Default behavior: Adds the CSS class ""fetching"" to the
   * input field, for styling purposes.</em>
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  beginFetching: function($input) {
    $input.addClass('fetching');
  },

  /**
   * Called when fetching is finished. All active requests must finish before
   * this function is called.
   *
   * <br /><br /><em>Default behavior: Removes the ""fetching"" class.</em>
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  finishFetching: function($input) {
    $input.removeClass('fetching');
  },

  /**
   * Executed after the suggestion list has been shown.
   *
   * @param {Object} $results
   *   The suggestion list UL element, wrapped in jQuery.
   *
   * <br /><br /><em>Default behavior: Does nothing.</em>
   */
  afterShow: function($results) {},

  /**
   * Executed after the suggestion list has been hidden.
   *
   * @param {Object} $results
   *   The suggestion list UL element, wrapped in jQuery.
   *
   * <br /><br /><em>Default behavior: Does nothing.</em>
   */
  afterHide: function($results) {},

  /**
   * Construct the remote fetching URL.
   *
   * <br /><br /><em>Default behavior: Adds ""?q=query"" to the path. The query
   * string is URL encoded.</em>
   *
   * @param {String} path
   *   The path given in the {@link jQuery.betterAutocomplete} constructor.
   *
   * @param {String} query
   *   The raw query string. Remember to URL encode this to prevent illegal
   *   character errors.
   *
   * @returns {String}
   *   The URL, ready for fetching.
   */
  constructURL: function(path, query) {
    return path + '?q=' + encodeURIComponent(query);
  },

  /**
   * To ease up on server load, treat similar strings the same.
   *
   * <br /><br /><em>Default behavior: Trims the query from leading and
   * trailing whitespace.</em>
   *
   * @param {String} rawQuery
   *   The user's raw input.
   *
   * @param {Boolean} caseSensitive
   *   Case sensitive. Will convert to lowercase if false.
   *
   * @returns {String}
   *   The canonical query associated with this string.
   */
  canonicalQuery: function(rawQuery, caseSensitive) {
    var query = $.trim(rawQuery);
    if (!caseSensitive) {
      query = query.toLowerCase();
    }
    return query;
  },

  /**
   * Insert the results list into the DOM and position it properly.
   *
   * <br /><br /><em>Default behavior: Inserts suggestion list directly
   * after the input element and sets an absolute position using
   * jQuery.position() for determining left/top values. Also adds a nice
   * looking box-shadow to the list.</em>
   *
   * @param {Object} $results
   *   The UL list element to insert, wrapped in jQuery.
   *
   * @param {Object} $input
   *   The text input element, wrapped in jQuery.
   */
  insertSuggestionList: function($results, $input) {
    $results.width($input.outerWidth() - 2) // Subtract border width.
      .css({
        position: 'absolute',
        left: $input.position().left,
        top: $input.position().top + $input.outerHeight(),
        zIndex: 10,
        maxHeight: '330px',
        // Visually indicate that results are in the topmost layer
        boxShadow: '0 0 15px rgba(0, 0, 0, 0.5)'
      })
      .hide()
      .insertAfter($input);
  }
};

/*
 * jQuery focus selector, required by Better Autocomplete.
 *
 * @see http://stackoverflow.com/questions/967096/using-jquery-to-test-if-an-input-has-focus/2684561#2684561
 */
var filters = $.expr[':'];
if (!filters.focus) {
  filters.focus = function(elem) {
    return elem === document.activeElement && (elem.type || elem.href);
  };
}

})(jQuery);
","
/**
 * @fileOverview Better Autocomplete is a flexible jQuery plugin which offers
 * rich text autocompletion, both from local and remote sources.
 *
 * @author Didrik Nordström, http://betamos.se/
 *
 * @version v1.0
 *
 * @requires
 *   <ul><li>
 *   jQuery 1.4+
 *   </li><li>
 *   IE7+ or any decent webkit/gecko-based web browser
 *   </li></ul>
 *
 * @preserve Better Autocomplete v1.0-dev
 * https://github.com/betamos/Better-Autocomplete
 *
 * Copyright 2011, Didrik Nordström, http://betamos.se/
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Requires jQuery 1.4+
 * http://jquery.com/
 */

/**
 * Create or alter an autocomplete object instance that belongs to
 * the elements in the selection. Make sure there are only text field elements
 * in the selection.
 *
 * @constructor
 *
 * @name jQuery.betterAutocomplete
 *
 * @param {String} method
 *   Should be one of the following:
 *   <ul><li>
 *     init: Initiate Better Autocomplete instances on the text input elements
 *     in the current jQuery selection. They are enabled by default. The other
 *     parameters are then required.
 *   </li><li>
 *     enable: In this jQuery selection, reenable the Better Autocomplete
 *     instances.
 *   </li><li>
 *     disable: In this jQuery selection, disable the Better Autocomplete
 *     instances.
 *   </li><li>
 *     destroy: In this jQuery selection, destroy the Better Autocomplete
 *     instances. It will not be possible to reenable them after this.
 *   </li></ul>
 *
 * @param {String|Object} [resource]
 *   If String, it will become the path for a remote resource. If not, it will
 *   be treated like a local resource. The path should provide JSON objects
 *   upon HTTP requests.
 *
 * @param {Object} [options]
 *   An object with configurable options:
 *   <ul><li>
 *     charLimit: (default=3 for remote or 1 for local resource) The minimum
 *     number of chars to do an AJAX call. A typical use case for this limit is
 *     to reduce server load.
 *   </li><li>
 *     delay: (default=350) The time in ms between last keypress and AJAX call.
 *     Typically used to prevent looking up irrelevant strings while the user
 *     is still typing. Only relevant for remote resources.
 *   </li><li>
 *     caseSensitive: (default=false) If the search should be case sensitive.
 *     If false, query strings will be converted to lowercase.
 *   </li><li>
 *     cacheLimit: (default=256 for remote or 0 for local resource) The maximum
 *     number of result objects to store in the cache. This option reduces
 *     server load if the user deletes characters to check back on previous
 *     results. To disable caching of previous results, set this option to 0.
 *   </li><li>
 *     remoteTimeout: (default=10000) The timeout for remote (AJAX) calls.
 *   </li><li>
 *     crossOrigin: (default=false) Set to true if cross origin requests will
 *     be performed, i.e. that the remote URL has a different domain. This will
 *     force Internet Explorer to use ""jsonp"" instead of ""json"" as datatype.
 *   </li><li>
 *     selectKeys: (default=[9, 13]) The key codes for keys which will select
 *     the current highlighted element. The defaults are tab, enter.
 *   </li></ul>
 *
 * @param {Object} [callbacks]
 *   An object containing optional callback functions on certain events. See
 *   {@link callbacks} for details. These callbacks should be used when
 *   customization of the default behavior of Better Autocomplete is required.
 *
 * @returns {Object}
 *   The jQuery object with the same element selection, for chaining.
 */

(function($) {

$.fn.betterAutocomplete = function(method) {

  /*
   * Each method expects the ""this"" object to be a valid DOM text input node.
   * The methods ""enable"", ""disable"" and ""destroy"" expects an instance of a
   * BetterAutocomplete object as their first argument.
   */
  var methods = {
    init: function(resource, options, callbacks) {
      var $input = $(this),
        bac = new BetterAutocomplete($input, resource, options, callbacks);
      $input.data('better-autocomplete', bac);
      bac.enable();
    },
    enable: function(bac) {
      bac.enable();
    },
    disable: function(bac) {
      bac.disable();
    },
    destroy: function(bac) {
      bac.destroy();
    }
  }, args = Array.prototype.slice.call(arguments, 1);

  // Method calling logic
  this.each(function() {
    switch (method) {
    case 'init':
      methods[method].apply(this, args);
      break;
    case 'enable':
    case 'disable':
    case 'destroy':
      var bac = $(this).data('better-autocomplete');
      if (bac instanceof BetterAutocomplete) {
        methods[method].call(this, bac);
      }
      break;
    default:
      $.error(['Method', method,
          'does not exist in jQuery.betterAutocomplete.'].join(' '));
    }
  });

  // Maintain chainability
  return this;
};

/**
 * The BetterAutocomplete constructor function. Returns a BetterAutocomplete
 * instance object.
 *
 * @private @constructor
 * @name BetterAutocomplete
 *
 * @param {Object} $input
 *   A single input element wrapped in jQuery.
 */
var BetterAutocomplete = function($input, resource, options, callbacks) {

  var lastRenderedQuery = '',
    cache = {}, // Key-valued caching of search results
    cacheOrder = [], // Array of query strings, in the order they are added
    cacheSize = 0, // Keep count of the cache's size
    timer, // Used for options.delay
    activeRemoteCalls = [], // A flat array of query strings that are pending
    disableMouseHighlight = false, // Suppress the autotriggered mouseover event
    inputEvents = {},
    isLocal = ($.type(resource) != 'string'),
    $results = $('<ul />').addClass('better-autocomplete'),
    hiddenResults = true, // $results are hidden
    preventBlurTimer = null; // IE bug workaround, see below in code.

  options = $.extend({
    charLimit: isLocal ? 1 : 3,
    delay: 350, // milliseconds
    caseSensitive: false,
    cacheLimit: isLocal ? 0 : 256, // Number of result objects
    remoteTimeout: 10000, // milliseconds
    crossOrigin: false,
    selectKeys: [9, 13] // [tab, enter]
  }, options);

  callbacks = $.extend({}, defaultCallbacks, callbacks);

  callbacks.insertSuggestionList($results, $input);

  inputEvents.focus = function() {
    // If the blur timer is active, a redraw is redundant.
    preventBlurTimer || redraw(true);
  };

  inputEvents.blur = function() {
    // If the blur prevention timer is active, refocus the input, since the
    // blur event can not be cancelled.
    if (preventBlurTimer) {
      $input.focus();
    }
    else {
      // The input has already lost focus, so redraw the suggestion list.
      redraw();
    }
  };

  inputEvents.keydown = function(event) {
    var index = getHighlighted();
    // If an arrow key is pressed and a result is highlighted
    if ($.inArray(event.keyCode, [38, 40]) >= 0 && index >= 0) {
      var newIndex,
        size = $('.result', $results).length;
      switch (event.keyCode) {
      case 38: // Up arrow
        newIndex = Math.max(0, index - 1);
        break;
      case 40: // Down arrow
        newIndex = Math.min(size - 1, index + 1);
        break;
      }
      disableMouseHighlight = true;
      setHighlighted(newIndex, true);
      return false;
    }
    // A select key has been pressed
    else if ($.inArray(event.keyCode, options.selectKeys) >= 0 &&
             !event.shiftKey && !event.ctrlKey && !event.altKey &&
             !event.metaKey) {
      select();
      return event.keyCode == 9; // Never cancel tab
    }
  };

  inputEvents.keyup = inputEvents.click = reprocess;

  $('.result', $results[0]).live({
    // When the user hovers a result with the mouse, highlight it.
    mouseover: function() {
      if (disableMouseHighlight) {
        return;
      }
      setHighlighted($('.result', $results).index($(this)));
    },
    mousemove: function() {
      // Enable mouseover again.
      disableMouseHighlight = false;
    },
    mousedown: function() {
      select();
      return false;
    }
  });

  // Prevent blur when clicking on group titles, scrollbars etc.,
  // This event is triggered after the others because of bubbling.
  $results.mousedown(function() {
    // Bug in IE where clicking on scrollbar would trigger a blur event for the
    // input field, despite using preventDefault() on the mousedown event.
    // This workaround locks the blur event on the input for a small time.
    clearTimeout(preventBlurTimer);
    preventBlurTimer = setTimeout(function() {
      preventBlurTimer = null;
    }, 50);
    return false;
  });

  /*
   * PUBLIC METHODS
   */

  /**
   * Enable this instance.
   */
  this.enable = function() {
    // Turn off the browser's autocompletion
    $input
      .attr('autocomplete', 'OFF')
      .attr('aria-autocomplete', 'list');
    $input.bind(inputEvents);
  };

  /**
   * Disable this instance.
   */
  this.disable = function() {
    $input
      .removeAttr('autocomplete')
      .removeAttr('aria-autocomplete');
    $results.hide();
    $input.unbind(inputEvents);
  };

  /**
   * Disable and remove this instance. This instance should not be reused.
   */
  this.destroy = function() {
    $results.remove();
    $input.unbind(inputEvents);
    $input.removeData('better-autocomplete');
  };

  /*
   * PRIVATE METHODS
   */

  /**
   * Add an array of results to the cache. Internal methods always reads from
   * the cache, so this method must be invoked even when caching is not used,
   * e.g. when using local results. This method automatically clears as much of
   * the cache as required to fit within the cache limit.
   *
   * @param {String} query
   *   The query to set the results to.
   *
   * @param {Array[Object]} results
   *   The array of results for this query.
   */
  var cacheResults = function(query, results) {
    cacheSize += results.length;
    // Now reduce size until it fits
    while (cacheSize > options.cacheLimit && cacheOrder.length) {
      var key = cacheOrder.shift();
      cacheSize -= cache[key].length;
      delete cache[key];
    }
    cacheOrder.push(query);
    cache[query] = results;
  };

  /**
   * Set highlight to a specific result item
   *
   * @param {Number} index
   *   The result's index, starting at 0.
   *
   * @param {Boolean} [autoScroll]
   *   (default=false) If scrolling of the results list should be automated.
   */
  var setHighlighted = function(index, autoScroll) {
    // Scrolling upwards
    var up = index == 0 || index < getHighlighted(),
      $scrollTo = $('.result', $results)
        .removeClass('highlight')
        .eq(index).addClass('highlight');

    if (!autoScroll) {
      return;
    }
    // Scrolling up, then make sure to show the group title
    if ($scrollTo.prev().is('.group') && up) {
      $scrollTo = $scrollTo.prev();
    }
    // Is $scrollTo partly above the visible region?
    if ($scrollTo.position().top < 0) {
      $results.scrollTop($scrollTo.position().top + $results.scrollTop());
    }
    // Or is it partly below the visible region?
    else if (($scrollTo.position().top + $scrollTo.outerHeight()) >
              $results.height()) {
      $results.scrollTop($scrollTo.position().top + $results.scrollTop() +
          $scrollTo.outerHeight() - $results.height());
    }
  };

  /**
   * Retrieve the index of the currently highlighted result item
   *
   * @returns {Number}
   *   The result's index or -1 if no result is highlighted.
   */
  var getHighlighted = function() {
    return $('.result', $results).index($('.result.highlight', $results));
  };

  /**
   * Select the current highlighted element, if any.
   */
  var select = function() {
    var $result = $('.result', $results).eq(getHighlighted());
    if (!$result.length) {
      return; // No selectable element
    }
    var result = $result.data('result');
    callbacks.select(result, $input);
    // Redraw again, if the callback changed focus or content
    reprocess();
  };

  /**
   * Fetch results asynchronously via AJAX.
   * Errors are ignored.
   *
   * @param {String} query
   *   The query string.
   */
  var fetchResults = function(query) {
    // Synchronously fetch local data
    if (isLocal) {
      cacheResults(query, callbacks.queryLocalResults(query, resource,
                                                      options.caseSensitive));
      redraw();
    }
    // Asynchronously fetch remote data
    else {
      activeRemoteCalls.push(query);
      var url = callbacks.constructURL(resource, query);
      callbacks.beginFetching($input);
      callbacks.fetchRemoteData(url, function(data) {
        var searchResults = callbacks.processRemoteData(data);
        if (!$.isArray(searchResults)) {
          searchResults = [];
        }
        cacheResults(query, searchResults);
        // Remove the query from active remote calls, since it's finished
        activeRemoteCalls = $.grep(activeRemoteCalls, function(value) {
          return value != query;
        });
        if (!activeRemoteCalls.length) {
          callbacks.finishFetching($input);
        }
        redraw();
      }, options.remoteTimeout, options.crossOrigin);
    }
  };

  /**
   * Reprocess the contents of the input field, fetch data and redraw if
   * necessary.
   */
  function reprocess() {
    var query = callbacks.canonicalQuery($input.val(), options.caseSensitive);
    clearTimeout(timer);
    // Indicate that timer is inactive
    timer = null;
    redraw();
    if (query.length >= options.charLimit && !$.isArray(cache[query]) &&
        $.inArray(query, activeRemoteCalls) == -1) {
      // Fetching is required
      $results.empty();
      if (isLocal) {
        fetchResults(query);
      }
      else {
        timer = setTimeout(function() {
          fetchResults(query);
          timer = null;
        }, options.delay);
      }
    }
  };

  /**
   * Redraws the autocomplete list based on current query and focus.
   *
   * @param {Boolean} [focus]
   *   (default=false) Force to treat the input element like it's focused.
   */
  var redraw = function(focus) {
    var query = callbacks.canonicalQuery($input.val(), options.caseSensitive);

    // The query does not exist in db
    if (!$.isArray(cache[query])) {
      lastRenderedQuery = null;
      $results.empty();
    }
    // The query exists and is not already rendered
    else if (lastRenderedQuery !== query) {
      lastRenderedQuery = query;
      renderResults(cache[query]);
      setHighlighted(0);
    }
    // Finally show/hide based on focus and emptiness
    if (($input.is(':focus') || focus) && !$results.is(':empty')) {
      $results.filter(':hidden').show() // Show if hidden
        .scrollTop($results.data('scroll-top')); // Reset the lost scrolling
      if (hiddenResults) {
        hiddenResults = false;
        callbacks.afterShow($results);
      }
    }
    else if ($results.is(':visible')) {
      // Store the scrolling position for later
      $results.data('scroll-top', $results.scrollTop())
        .hide(); // Hiding it resets it's scrollTop
      if (!hiddenResults) {
        hiddenResults = true;
        callbacks.afterHide($results);
      }
    }
  };

  /**
   * Regenerate the DOM content within the results list for a given set of
   * results. Heavy method, use only when necessary.
   *
   * @param {Array[Object]} results
   *   An array of result objects to render.
   */
  var renderResults = function(results) {
    $results.empty();
    var groups = {}; // Key is the group name, value is the heading element.

    $.each(results, function(index, result) {
      if ($.type(result) != 'object') {
        return; // Continue
      }

      var output = callbacks.themeResult(result);
      if ($.type(output) != 'string') {
        return; // Continue
      }

      // Add the group if it doesn't exist
      var group = callbacks.getGroup(result);
      if ($.type(group) == 'string' && !groups[group]) {
        var $groupHeading = $('<li />').addClass('group')
          .append($('<h3 />').html(group))
          .appendTo($results);
        groups[group] = $groupHeading;
      }

      var $result = $('<li />').addClass('result')
        .append(output)
        .data('result', result) // Store the result object on this DOM element
        .addClass(result.addClass);

      // First groupless item
      if ($.type(group) != 'string' &&
          !$results.children().first().is('.result')) {
        $results.prepend($result);
        return; // Continue
      }
      var $traverseFrom = ($.type(group) == 'string') ?
                          groups[group] : $results.children().first();
      var $target = $traverseFrom.nextUntil('.group').last();
      $result.insertAfter($target.length ? $target : $traverseFrom);
    });
  };
};

/*
 * CALLBACK METHODS
 */

/**
 * These callbacks are supposed to be overridden by you when you need
 * customization of the default behavior. When you are overriding a callback
 * function, it is a good idea to copy the source code from the default
 * callback function, as a skeleton.
 *
 * @name callbacks
 * @namespace
 */
var defaultCallbacks = {
  /**
   * @lends callbacks.prototype
   */

  /**
   * Gets fired when the user selects a result by clicking or using the
   * keyboard to select an element.
   *
   * <br /><br /><em>Default behavior: Inserts the result's title into the
   * input field.</em>
   *
   * @param {Object} result
   *   The result object that was selected.
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  select: function(result, $input) {
    $input.val(result.title);
  },

  /**
   * Given a result object, theme it to HTML.
   *
   * <br /><br /><em>Default behavior: Wraps result.title in an h4 tag, and
   * result.description in a p tag. Note that no sanitization of malicious
   * scripts is done here. Whatever is within the title/description is just
   * printed out. May contain HTML.</em>
   *
   * @param {Object} result
   *   The result object that should be rendered.
   *
   * @returns {String}
   *   HTML output, will be wrapped in a list element.
   */
  themeResult: function(result) {
    var output = [];
    if ($.type(result.title) == 'string') {
      output.push('<h4>', result.title, '</h4>');
    }
    if ($.type(result.description) == 'string') {
      output.push('<p>', result.description, '</p>');
    }
    return output.join('');
  },

  /**
   * Retrieve local results from the local resource by providing a query
   * string.
   *
   * <br /><br /><em>Default behavior: Automatically handles arrays, if the
   * data inside each element is either a plain string or a result object.
   * If it is a result object, it will match the query string against the
   * title and description property. Search is not case sensitive.</em>
   *
   * @param {String} query
   *   The query string, unescaped. May contain any UTF-8 character.
   *   If case insensitive, it already is lowercased.
   *
   * @param {Object} resource
   *   The resource provided in the {@link jQuery.betterAutocomplete} init
   *   constructor.
   *
   * @param {Boolean} caseSensitive
   *   From options.caseSensitive, the searching should be case sensitive.
   *
   * @returns {Array[Object]}
   *   A flat array containing pure result objects. May be an empty array.
   */
  queryLocalResults: function(query, resource, caseSensitive) {
    if (!$.isArray(resource)) {
      // Per default Better Autocomplete only handles arrays
      return [];
    }
    var results = [];
    $.each(resource, function(i, value) {
      switch ($.type(value)) {
      case 'string': // Flat array of strings
        if ((caseSensitive ? value : value.toLowerCase())
            .indexOf(query) >= 0) {
          // Match found
          results.push({ title: value });
        }
        break;
      case 'object': // Array of result objects
        if ($.type(value.title) == 'string' &&
            (caseSensitive ? value.title : value.title.toLowerCase())
            .indexOf(query) >= 0) {
          // Match found in title field
          results.push(value);
        }
        else if ($.type(value.description) == 'string' &&
                 (caseSensitive ? value.description :
                 value.description.toLowerCase()).indexOf(query) >= 0) {
          // Match found in description field
          results.push(value);
        }
        break;
      }
    });
    return results;
  },

  /**
   * Fetch remote result data and return it using completeCallback when
   * fetching is finished. Must be asynchronous in order to not freeze the
   * Better Autocomplete instance.
   *
   * <br /><br /><em>Default behavior: Fetches JSON data from the url, using
   * the jQuery.ajax() method. Errors are ignored.</em>
   *
   * @param {String} url
   *   The URL to fetch data from.
   *
   * @param {Function} completeCallback
   *   This function must be called, even if an error occurs. It takes zero
   *   or one parameter: the data that was fetched.
   *
   * @param {Number} timeout
   *   The preferred timeout for the request. This callback should respect
   *   the timeout.
   *
   * @param {Boolean} crossOrigin
   *   True if a cross origin request should be performed.
   */
  fetchRemoteData: function(url, completeCallback, timeout, crossOrigin) {
    $.ajax({
      url: url,
      dataType: crossOrigin && !$.support.cors ? 'jsonp' : 'json',
      timeout: timeout,
      success: function(data, textStatus) {
        completeCallback(data);
      },
      error: function(jqXHR, textStatus, errorThrown) {
        completeCallback();
      }
    });
  },

  /**
   * Process remote fetched data by extracting an array of result objects
   * from it. This callback is useful if the fetched data is not the plain
   * results array, but a more complicated object which does contain results.
   *
   * <br /><br /><em>Default behavior: If the data is defined and is an
   * array, return it. Otherwise return an empty array.</em>
   *
   * @param {mixed} data
   *   The raw data recieved from the server. Can be undefined.
   *
   * @returns {Array[Object]}
   *   A flat array containing result objects. May be an empty array.
   */
  processRemoteData: function(data) {
    if ($.isArray(data)) {
      return data;
    }
    else {
      return [];
    }
  },

  /**
   * From a given result object, return it's group name (if any). Used for
   * grouping results together.
   *
   * <br /><br /><em>Default behavior: If the result has a ""group"" property
   * defined, return it.</em>
   *
   * @param {Object} result
   *   The result object.
   *
   * @returns {String}
   *   The group name, may contain HTML. If no group, don't return anything.
   */
  getGroup: function(result) {
    if ($.type(result.group) == 'string') {
      return result.group;
    }
  },

  /**
   * Called when remote fetching begins.
   *
   * <br /><br /><em>Default behavior: Adds the CSS class ""fetching"" to the
   * input field, for styling purposes.</em>
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  beginFetching: function($input) {
    $input.addClass('fetching');
  },

  /**
   * Called when fetching is finished. All active requests must finish before
   * this function is called.
   *
   * <br /><br /><em>Default behavior: Removes the ""fetching"" class.</em>
   *
   * @param {Object} $input
   *   The input DOM element, wrapped in jQuery.
   */
  finishFetching: function($input) {
    $input.removeClass('fetching');
  },

  /**
   * Executed after the suggestion list has been shown.
   *
   * @param {Object} $results
   *   The suggestion list UL element, wrapped in jQuery.
   *
   * <br /><br /><em>Default behavior: Does nothing.</em>
   */
  afterShow: function($results) {},

  /**
   * Executed after the suggestion list has been hidden.
   *
   * @param {Object} $results
   *   The suggestion list UL element, wrapped in jQuery.
   *
   * <br /><br /><em>Default behavior: Does nothing.</em>
   */
  afterHide: function($results) {},

  /**
   * Construct the remote fetching URL.
   *
   * <br /><br /><em>Default behavior: Adds ""?q=query"" to the path. The query
   * string is URL encoded.</em>
   *
   * @param {String} path
   *   The path given in the {@link jQuery.betterAutocomplete} constructor.
   *
   * @param {String} query
   *   The raw query string. Remember to URL encode this to prevent illegal
   *   character errors.
   *
   * @returns {String}
   *   The URL, ready for fetching.
   */
  constructURL: function(path, query) {
    return path + '?q=' + encodeURIComponent(query);
  },

  /**
   * To ease up on server load, treat similar strings the same.
   *
   * <br /><br /><em>Default behavior: Trims the query from leading and
   * trailing whitespace.</em>
   *
   * @param {String} rawQuery
   *   The user's raw input.
   *
   * @param {Boolean} caseSensitive
   *   Case sensitive. Will convert to lowercase if false.
   *
   * @returns {String}
   *   The canonical query associated with this string.
   */
  canonicalQuery: function(rawQuery, caseSensitive) {
    var query = $.trim(rawQuery);
    if (!caseSensitive) {
      query = query.toLowerCase();
    }
    return query;
  },

  /**
   * Insert the results list into the DOM and position it properly.
   *
   * <br /><br /><em>Default behavior: Inserts suggestion list directly
   * after the input element and sets an absolute position using
   * jQuery.position() for determining left/top values. Also adds a nice
   * looking box-shadow to the list.</em>
   *
   * @param {Object} $results
   *   The UL list element to insert, wrapped in jQuery.
   *
   * @param {Object} $input
   *   The text input element, wrapped in jQuery.
   */
  insertSuggestionList: function($results, $input) {
    $results.width($input.outerWidth() - 2) // Subtract border width.
      .css({
        position: 'absolute',
        left: $input.position().left,
        top: $input.position().top + $input.outerHeight(),
        zIndex: 10,
        maxHeight: '330px',
        // Visually indicate that results are in the topmost layer
        boxShadow: '0 0 15px rgba(0, 0, 0, 0.5)'
      })
      .hide()
      .insertAfter($input);
  }
};

/*
 * jQuery focus selector, required by Better Autocomplete.
 *
 * @see http://stackoverflow.com/questions/967096/using-jquery-to-test-if-an-input-has-focus/2684561#2684561
 */
var filters = $.expr[':'];
if (!filters.focus) {
  filters.focus = function(elem) {
    return elem === document.activeElement && (elem.type || elem.href);
  };
}

})(jQuery);
",TRUE,,3827
3796,InitialSO.csv3796.txt,InitialGit.csv3796.txt,3,"## {{{ http://code.activestate.com/recipes/511478/ (r1)
import math
import functools

def percentile(N, percent, key=lambda x:x):
    """"""
    Find the percentile of a list of values.

    @parameter N - is a list of values. Note N MUST BE already sorted.
    @parameter percent - a float value from 0.0 to 1.0.
    @parameter key - optional key function to compute value from each element of N.

    @return - the percentile of the values
    """"""
    if not N:
        return None
    k = (len(N)-1) * percent
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return key(N[int(k)])
    d0 = key(N[int(f)]) * (c-k)
    d1 = key(N[int(c)]) * (k-f)
    return d0+d1

# median is 50th percentile.
median = functools.partial(percentile, percent=0.5)
## end of http://code.activestate.com/recipes/511478/ }}}
 ","## {{{ http://code.activestate.com/recipes/511478/ (r1)
import math
import functools

def percentile(N, percent, key=lambda x:x):
    """"""
    Find the percentile of a list of values.

    @parameter N - is a list of values. Note N MUST BE already sorted.
    @parameter percent - a float value from 0.0 to 1.0.
    @parameter key - optional key function to compute value from each element of N.

    @return - the percentile of the values
    """"""
    if not N:
        return None
    k = (len(N)-1) * percent
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return key(N[int(k)])
    d0 = key(N[int(f)]) * (c-k)
    d1 = key(N[int(c)]) * (k-f)
    return d0+d1

# median is 50th percentile.
median = functools.partial(percentile, percent=0.5)
## end of http://code.activestate.com/recipes/511478/ }}}
 ",TRUE,"#!/usr/bin/env python3
import os
import json
from uncertain import umean
import sys
import statistics
import math

TIMINGS_DIR = 'collected'


def get_latencies(data):
    """"""Get the list of frame latencies and draw latencies for a
    benchmark.
    """"""
    msgs = data['messages'][1:]  # Skip the first message as a ""warmup.""

    all_latencies = []
    all_draw_latencies = []
    for msg in msgs:
        # As a sanity check, we can get an average frame latency for the
        # entire message with:
        # avg_latency = msg['ms'] / msg['frames']

        all_latencies += msg['latencies']
        all_draw_latencies += msg['draw_latencies']

    # More sanity checking: we should have the same number of overall and
    # draw-call latencies, and the draw latency should always be less than the
    # overall latency.
    assert len(all_latencies) == len(all_draw_latencies)
    # print(data['fn'], file=sys.stderr)
    for l, dl in zip(all_latencies, all_draw_latencies):
        # print(l, dl, file=sys.stderr)
        assert dl < l

    return all_latencies, all_draw_latencies


def summarize_unc(unc):
    """"""Format an uncertain value as a Vega-ready JSON-style dictionary.
    """"""
    return {
        'value': unc.value,
        'error': unc.error,
        'err_min': unc.value - unc.error,
        'err_max': unc.value + unc.error,
    }


# Based on:
# http://stackoverflow.com/a/2753343/39182
def quantile(data, frac):
    """"""Get a quantile of a *sorted* list of values.
    """"""
    k = (len(data) - 1) * frac
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return data[int(k)]
    d0 = data[int(f)] * (c - k)
    d1 = data[int(c)] * (k - f)
    return d0 + d1


def stats(values):
    """"""Summarize the sequence of latency values.
    """"""
    mean = statistics.mean(values)
    stdev = statistics.stdev(values, xbar=mean)
    se = stdev / math.sqrt(len(values))  # Standard error of the mean.
    svalues = sorted(values)
    return {
        'mean': mean,
        'stdev': stdev,
        'se': se,
        'mean_minus_stdev': mean - stdev,
        'mean_plus_stdev': mean + stdev,
        'mean_minus_se': mean - se,
        'mean_plus_se': mean + se,
        'q50': quantile(svalues, 0.5),
        'q90': quantile(svalues, 0.9),
        'q95': quantile(svalues, 0.95),
        'q99': quantile(svalues, 0.99),
        'median': statistics.median_grouped(svalues),
        'min': svalues[0],
        'max': svalues[-1],
    }


def summarize(as_json, as_madoko):
    """"""Summarize all the collected data.""""""
    out = []
    for fn in os.listdir(TIMINGS_DIR):
        path = os.path.join(TIMINGS_DIR, fn)
        with open(path) as f:
            data = json.load(f)
        latencies, draw_latencies = get_latencies(data)
        latency, draw_latency = umean(latencies), umean(draw_latencies)
        name, _ = os.path.splitext(os.path.basename(data['fn']))

        if as_json:
            # Emit a Vega-ready data record.
            latency_stats, draw_latency_stats = \
                stats(latencies), stats(draw_latencies)
            out.append({
                'name': name,
                'latency': latency_stats,
                'draw_latency': draw_latency_stats,
            })

        elif as_madoko:
            # Emit Madoko definitions for inclusion in text.
            prefix = 'data-{}-'.format(name)
            ms = '&nbsp;ms'
            print(prefix + 'latency:',
                  '{:.1f}'.format(latency.value) + ms)
            print(prefix + 'draw-latency:',
                  '{:.1f}'.format(draw_latency.value) + ms)
            draw_frac = draw_latency.value / latency.value
            print(prefix + 'draw-frac: {:.0%}'.format(draw_frac))

        else:
            # Human-readable.
            print(data['fn'])
            print('frame latency:', latency, 'ms')
            print('draw latency:', draw_latency, 'ms')
            print('fps:', 1000.0 / latency)

    if as_json:
        json.dump(out, sys.stdout, sort_keys=True, indent=2)


if __name__ == '__main__':
    summarize('-j' in sys.argv, '-m' in sys.argv)
","#!/usr/bin/env python3
import os
import json
from uncertain import umean
import sys
import statistics
import math

TIMINGS_DIR = 'collected'


def get_latencies(data):
    """"""Get the list of frame latencies and draw latencies for a
    benchmark.
    """"""
    msgs = data['messages'][1:]  # Skip the first message as a ""warmup.""

    all_latencies = []
    all_draw_latencies = []
    for msg in msgs:
        # As a sanity check, we can get an average frame latency for the
        # entire message with:
        # avg_latency = msg['ms'] / msg['frames']

        all_latencies += msg['latencies']
        all_draw_latencies += msg['draw_latencies']

    # More sanity checking: we should have the same number of overall and
    # draw-call latencies, and the draw latency should always be less than the
    # overall latency.
    assert len(all_latencies) == len(all_draw_latencies)
    # print(data['fn'], file=sys.stderr)
    for l, dl in zip(all_latencies, all_draw_latencies):
        # print(l, dl, file=sys.stderr)
        assert dl <= l

    return all_latencies, all_draw_latencies


def summarize_unc(unc):
    """"""Format an uncertain value as a Vega-ready JSON-style dictionary.
    """"""
    return {
        'value': unc.value,
        'error': unc.error,
        'err_min': unc.value - unc.error,
        'err_max': unc.value + unc.error,
    }


# Based on:
# http://stackoverflow.com/a/2753343/39182
def quantile(data, frac):
    """"""Get a quantile of a *sorted* list of values.
    """"""
    k = (len(data) - 1) * frac
    f = math.floor(k)
    c = math.ceil(k)
    if f == c:
        return data[int(k)]
    d0 = data[int(f)] * (c - k)
    d1 = data[int(c)] * (k - f)
    return d0 + d1


def stats(values):
    """"""Summarize the sequence of latency values.
    """"""
    mean = statistics.mean(values)
    stdev = statistics.stdev(values, xbar=mean)
    se = stdev / math.sqrt(len(values))  # Standard error of the mean.
    svalues = sorted(values)
    return {
        'mean': mean,
        'stdev': stdev,
        'se': se,
        'mean_minus_stdev': mean - stdev,
        'mean_plus_stdev': mean + stdev,
        'mean_minus_se': mean - se,
        'mean_plus_se': mean + se,
        'q50': quantile(svalues, 0.5),
        'q90': quantile(svalues, 0.9),
        'q95': quantile(svalues, 0.95),
        'q99': quantile(svalues, 0.99),
        'median': statistics.median_grouped(svalues),
        'min': svalues[0],
        'max': svalues[-1],
    }


def summarize(as_json, as_madoko):
    """"""Summarize all the collected data.""""""
    out = []
    for fn in os.listdir(TIMINGS_DIR):
        path = os.path.join(TIMINGS_DIR, fn)
        with open(path) as f:
            data = json.load(f)
        latencies, draw_latencies = get_latencies(data)
        latency, draw_latency = umean(latencies), umean(draw_latencies)
        name, _ = os.path.splitext(os.path.basename(data['fn']))

        if as_json:
            # Emit a Vega-ready data record.
            latency_stats, draw_latency_stats = \
                stats(latencies), stats(draw_latencies)
            out.append({
                'name': name,
                'latency': latency_stats,
                'draw_latency': draw_latency_stats,
            })

        elif as_madoko:
            # Emit Madoko definitions for inclusion in text.
            prefix = 'data-{}-'.format(name)
            ms = '&nbsp;ms'
            print(prefix + 'latency:',
                  '{:.1f}'.format(latency.value) + ms)
            print(prefix + 'draw-latency:',
                  '{:.1f}'.format(draw_latency.value) + ms)
            draw_frac = draw_latency.value / latency.value
            print(prefix + 'draw-frac: {:.0%}'.format(draw_frac))

        else:
            # Human-readable.
            print(data['fn'])
            print('frame latency:', latency, 'ms')
            print('draw latency:', draw_latency, 'ms')
            print('fps:', 1000.0 / latency)

    if as_json:
        json.dump(out, sys.stdout, sort_keys=True, indent=2)


if __name__ == '__main__':
    summarize('-j' in sys.argv, '-m' in sys.argv)
",FALSE,,3828
3798,InitialSO.csv3798.txt,InitialGit.csv3798.txt,17,"var formatXml = this.formatXml = function (xml) {
        var reg = /(>)\s*(<)(\/*)/g; // updated Mar 30, 2015
        var wsexp = / *(.*) +\n/g;
        var contexp = /(<.+>)(.+\n)/g;
        xml = xml.replace(reg, '$1\n$2$3').replace(wsexp, '$1\n').replace(contexp, '$1\n$2');
        var pad = 0;
        var formatted = '';
        var lines = xml.split('\n');
        var indent = 0;
        var lastType = 'other';
        // 4 types of tags - single, closing, opening, other (text, doctype, comment) - 4*4 = 16 transitions 
        var transitions = {
            'single->single': 0,
            'single->closing': -1,
            'single->opening': 0,
            'single->other': 0,
            'closing->single': 0,
            'closing->closing': -1,
            'closing->opening': 0,
            'closing->other': 0,
            'opening->single': 1,
            'opening->closing': 0,
            'opening->opening': 1,
            'opening->other': 1,
            'other->single': 0,
            'other->closing': -1,
            'other->opening': 0,
            'other->other': 0
        };

        for (var i = 0; i < lines.length; i++) {
            var ln = lines[i];
            var single = Boolean(ln.match(/<.+\/>/)); // is this line a single tag? ex. <br />
            var closing = Boolean(ln.match(/<\/.+>/)); // is this a closing tag? ex. </a>
            var opening = Boolean(ln.match(/<[^!].*>/)); // is this even a tag (that's not <!something>)
            var type = single ? 'single' : closing ? 'closing' : opening ? 'opening' : 'other';
            var fromTo = lastType + '->' + type;
            lastType = type;
            var padding = '';

            indent += transitions[fromTo];
            for (var j = 0; j < indent; j++) {
                padding += '\t';
            }
            if (fromTo == 'opening->closing')
                formatted = formatted.substr(0, formatted.length - 1) + ln + '\n'; // substr removes line break (\n) from prev loop
            else
                formatted += padding + ln + '\n';
        }

        return formatted;
    };
 ","var formatXml = this.formatXml = function (xml) {
        var reg = /(>)\s*(<)(\/*)/g; // updated Mar 30, 2015
        var wsexp = / *(.*) +\n/g;
        var contexp = /(<.+>)(.+\n)/g;
        xml = xml.replace(reg, '$1\n$2$3').replace(wsexp, '$1\n').replace(contexp, '$1\n$2');
        var pad = 0;
        var formatted = '';
        var lines = xml.split('\n');
        var indent = 0;
        var lastType = 'other';
        // 4 types of tags - single, closing, opening, other (text, doctype, comment) - 4*4 = 16 transitions 
        var transitions = {
            'single->single': 0,
            'single->closing': -1,
            'single->opening': 0,
            'single->other': 0,
            'closing->single': 0,
            'closing->closing': -1,
            'closing->opening': 0,
            'closing->other': 0,
            'opening->single': 1,
            'opening->closing': 0,
            'opening->opening': 1,
            'opening->other': 1,
            'other->single': 0,
            'other->closing': -1,
            'other->opening': 0,
            'other->other': 0
        };

        for (var i = 0; i < lines.length; i++) {
            var ln = lines[i];

            // Luca Viggiani 2017-07-03: handle optional <?xml ... ?> declaration
            if (ln.match(/\s*<\?xml/)) {
                formatted += ln + ""\n"";
                continue;
            }
            // ---

            var single = Boolean(ln.match(/<.+\/>/)); // is this line a single tag? ex. <br />
            var closing = Boolean(ln.match(/<\/.+>/)); // is this a closing tag? ex. </a>
            var opening = Boolean(ln.match(/<[^!].*>/)); // is this even a tag (that's not <!something>)
            var type = single ? 'single' : closing ? 'closing' : opening ? 'opening' : 'other';
            var fromTo = lastType + '->' + type;
            lastType = type;
            var padding = '';

            indent += transitions[fromTo];
            for (var j = 0; j < indent; j++) {
                padding += '\t';
            }
            if (fromTo == 'opening->closing')
                formatted = formatted.substr(0, formatted.length - 1) + ln + '\n'; // substr removes line break (\n) from prev loop
            else
                formatted += padding + ln + '\n';
        }

        return formatted;
    };
 ",FALSE,"'use strict';

SwaggerUi.Views.OperationView = Backbone.View.extend({
  invocationUrl: null,

  events: {
    'submit .sandbox'         : 'submitOperation',
    'click .submit'           : 'submitOperation',
    'click .response_hider'   : 'hideResponse',
    'click .toggleOperation'  : 'toggleOperationContent',
    'mouseenter .api-ic'      : 'mouseEnter',
    'dblclick .curl'          : 'selectText',
    'change [name=responseContentType]' : 'showSnippet'
  },

  initialize: function(opts) {
    opts = opts || {};
    this.router = opts.router;
    this.auths = opts.auths;
    this.parentId = this.model.parentId;
    this.nickname = this.model.nickname;
    this.model.encodedParentId = encodeURIComponent(this.parentId);

    if (opts.swaggerOptions) {
      this.model.defaultRendering = opts.swaggerOptions.defaultModelRendering;

      if (opts.swaggerOptions.showRequestHeaders) {
        this.model.showRequestHeaders = true;
      }
    }
    return this;
  },

  selectText: function(event) {
    var doc = document,
        text = event.target.firstChild,
        range,
        selection;
    if (doc.body.createTextRange) {
      range = document.body.createTextRange();
      range.moveToElementText(text);
      range.select();
    } else if (window.getSelection) {
      selection = window.getSelection();
      range = document.createRange();
      range.selectNodeContents(text);
      selection.removeAllRanges();
      selection.addRange(range);
    }
  },

  mouseEnter: function(e) {
    var elem = $(this.el).find('.content');
    var x = e.pageX;
    var y = e.pageY;
    var scX = $(window).scrollLeft();
    var scY = $(window).scrollTop();
    var scMaxX = scX + $(window).width();
    var scMaxY = scY + $(window).height();
    var wd = elem.width();
    var hgh = elem.height();

    if (x + wd > scMaxX) {
      x = scMaxX - wd;
    }

    if (x < scX) {
      x = scX;
    }

    if (y + hgh > scMaxY) {
      y = scMaxY - hgh;
    }

    if (y < scY) {
      y = scY;
    }

    var pos = {};
    pos.top = y;
    pos.left = x;
    elem.css(pos);
  },

  // Note: copied from CoffeeScript compiled file
  // TODO: redactor
  render: function() {
    var a, auth, auths, code, contentTypeModel, isMethodSubmissionSupported, k, key, l, len, len1, len2, len3, len4, m, modelAuths, n, o, p, param, q, ref, ref1, ref2, ref3, ref4, ref5, responseContentTypeView, responseSignatureView, schema, schemaObj, scopeIndex, signatureModel, statusCode, successResponse, type, v, value, produces, isXML, isJSON;
    isMethodSubmissionSupported = jQuery.inArray(this.model.method, this.model.supportedSubmitMethods()) >= 0;
    if (!isMethodSubmissionSupported) {
      this.model.isReadOnly = true;
    }
    this.model.description = this.model.description || this.model.notes;
    this.model.oauth = null;
    modelAuths = this.model.authorizations || this.model.security;
    if (modelAuths) {
      if (Array.isArray(modelAuths)) {
        for (l = 0, len = modelAuths.length; l < len; l++) {
          auths = modelAuths[l];
          for (key in auths) {
            for (a in this.auths) {
              auth = this.auths[a];
              if (key === auth.name) {
                if (auth.type === 'oauth2') {
                  this.model.oauth = {};
                  this.model.oauth.scopes = [];
                  ref1 = auth.value.scopes;
                  for (k in ref1) {
                    v = ref1[k];
                    scopeIndex = auths[key].indexOf(k);
                    if (scopeIndex >= 0) {
                      o = {
                        scope: k,
                        description: v
                      };
                      this.model.oauth.scopes.push(o);
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        for (k in modelAuths) {
          v = modelAuths[k];
          if (k === 'oauth2') {
            if (this.model.oauth === null) {
              this.model.oauth = {};
            }
            if (this.model.oauth.scopes === void 0) {
              this.model.oauth.scopes = [];
            }
            for (m = 0, len1 = v.length; m < len1; m++) {
              o = v[m];
              this.model.oauth.scopes.push(o);
            }
          }
        }
      }
    }
    if (typeof this.model.responses !== 'undefined') {
      this.model.responseMessages = [];
      ref2 = this.model.responses;
      for (code in ref2) {
        value = ref2[code];
        schema = null;
        schemaObj = this.model.responses[code].schema;
        if (schemaObj && schemaObj.$ref) {
          schema = schemaObj.$ref;
          if (schema.indexOf('#/definitions/') !== -1) {
            schema = schema.replace(/^.*#\/definitions\//, '');
          }
        }
        this.model.responseMessages.push({
          code: code,
          message: value.description,
          responseModel: schema,
          headers: value.headers,
          schema: schemaObj
        });
      }
    }
    if (typeof this.model.responseMessages === 'undefined') {
      this.model.responseMessages = [];
    }
    signatureModel = null;
    produces = this.model.produces;
    isXML = this.contains(produces, 'xml');
    isJSON = isXML ? this.contains(produces, 'json') : true;

    if (this.model.successResponse) {
      successResponse = this.model.successResponse;
      for (key in successResponse) {
        value = successResponse[key];
        this.model.successCode = key;
        if (typeof value === 'object' && typeof value.createJSONSample === 'function') {
          this.model.successDescription = value.description;
          this.model.headers = this.parseResponseHeaders(value.headers);
          signatureModel = {
            sampleJSON: isJSON ? JSON.stringify(SwaggerUi.partials.signature.createJSONSample(value), void 0, 2) : false,
            isParam: false,
            sampleXML: isXML ? SwaggerUi.partials.signature.createXMLSample(value.name, value.definition, value.models) : false,
            signature: SwaggerUi.partials.signature.getModelSignature(value.name, value.definition, value.models, value.modelPropertyMacro)
          };
        } else {
          signatureModel = {
            signature: SwaggerUi.partials.signature.getPrimitiveSignature(value)
          };
        }
      }
    } else if (this.model.responseClassSignature && this.model.responseClassSignature !== 'string') {
      signatureModel = {
        sampleJSON: this.model.responseSampleJSON,
        isParam: false,
        signature: this.model.responseClassSignature
      };
    }
    $(this.el).html(Handlebars.templates.operation(this.model));
    if (signatureModel) {
      signatureModel.defaultRendering = this.model.defaultRendering;
      responseSignatureView = new SwaggerUi.Views.SignatureView({
        model: signatureModel,
        router: this.router,
        tagName: 'div'
      });
      $('.model-signature', $(this.el)).append(responseSignatureView.render().el);
    } else {
      this.model.responseClassSignature = 'string';
      $('.model-signature', $(this.el)).html(this.model.type);
    }
    contentTypeModel = {
      isParam: false
    };
    contentTypeModel.consumes = this.model.consumes;
    contentTypeModel.produces = this.model.produces;
    ref3 = this.model.parameters;
    for (n = 0, len2 = ref3.length; n < len2; n++) {
      param = ref3[n];
      type = param.type || param.dataType || '';
      if (typeof type === 'undefined') {
        schema = param.schema;
        if (schema && schema.$ref) {
          ref = schema.$ref;
          if (ref.indexOf('#/definitions/') === 0) {
            type = ref.substring('#/definitions/'.length);
          } else {
            type = ref;
          }
        }
      }
      if (type && type.toLowerCase() === 'file') {
        if (!contentTypeModel.consumes) {
          contentTypeModel.consumes = 'multipart/form-data';
        }
      }
      param.type = type;
    }
    responseContentTypeView = new SwaggerUi.Views.ResponseContentTypeView({
      model: contentTypeModel,
      router: this.router
    });
    $('.response-content-type', $(this.el)).append(responseContentTypeView.render().el);
    ref4 = this.model.parameters;
    for (p = 0, len3 = ref4.length; p < len3; p++) {
      param = ref4[p];
      this.addParameter(param, contentTypeModel.consumes);
    }
    ref5 = this.model.responseMessages;
    for (q = 0, len4 = ref5.length; q < len4; q++) {
      statusCode = ref5[q];
      statusCode.isXML = isXML;
      statusCode.isJSON = isJSON;
      if (!_.isUndefined(statusCode.headers)) {
        statusCode.headers = this.parseHeadersType(statusCode.headers);
      }
      this.addStatusCode(statusCode);
    }

    if (Array.isArray(this.model.security)) {
      var authsModel = SwaggerUi.utils.parseSecurityDefinitions(this.model.security);

      authsModel.isLogout = !_.isEmpty(window.swaggerUi.api.clientAuthorizations.authz);
      this.authView = new SwaggerUi.Views.AuthButtonView({
        data: authsModel,
        router: this.router,
        isOperation: true,
        model: {
          scopes: authsModel.scopes
        }
      });
      this.$('.authorize-wrapper').append(this.authView.render().el);
    }

    this.showSnippet();
    return this;
  },

  parseHeadersType: function (headers) {
    var map = {
      'string': {
        'date-time': 'dateTime',
        'date'     : 'date'
      }
    };

    _.forEach(headers, function (header) {
      var value;
      header = header || {};
      value = map[header.type] && map[header.type][header.format];
      if (!_.isUndefined(value)) {
        header.type = value;
      }
    });

    return headers;
  },

  contains: function (produces, type) {
    return produces.filter(function (val) {
      if (val.indexOf(type) > -1) {
        return true;
      }
    }).length;
  },

  parseResponseHeaders: function (data) {
    var HEADERS_SEPARATOR = '; ';
    var headers = _.clone(data);

    _.forEach(headers, function (header) {
      var other = [];
      _.forEach(header, function (value, key) {
        var properties = ['type', 'description'];
        if (properties.indexOf(key.toLowerCase()) === -1) {
          other.push(key + ': ' + value);
        }
      });

      other.join(HEADERS_SEPARATOR);
      header.other = other;
    });

    return headers;
  },

  addParameter: function(param, consumes) {
    // Render a parameter
    param.consumes = consumes;
    param.defaultRendering = this.model.defaultRendering;

    // Copy this param JSON spec so that it will be available for JsonEditor
    if(param.schema){
      $.extend(true, param.schema, this.model.definitions[param.type]);
      param.schema.definitions = this.model.definitions;
      // This is required for JsonEditor to display the root properly
      if(!param.schema.type){
        param.schema.type = 'object';
      }
      // This is the title that will be used by JsonEditor for the root
      // Since we already display the parameter's name in the Parameter column
      // We set this to space, we can't set it to null or space otherwise JsonEditor
      // will replace it with the text ""root"" which won't look good on screen
      if(!param.schema.title){
        param.schema.title = ' ';
      }
    }

    var paramView = new SwaggerUi.Views.ParameterView({
      model: param,
      tagName: 'tr',
      readOnly: this.model.isReadOnly,
      swaggerOptions: this.options.swaggerOptions
    });
    $('.operation-params', $(this.el)).append(paramView.render().el);
  },

  addStatusCode: function(statusCode) {
    // Render status codes
    statusCode.defaultRendering = this.model.defaultRendering;
    var statusCodeView = new SwaggerUi.Views.StatusCodeView({
      model: statusCode,
      tagName: 'tr',
      router: this.router
    });
    $('.operation-status', $(this.el)).append(statusCodeView.render().el);
  },

  // Note: copied from CoffeeScript compiled file
  // TODO: redactor
  submitOperation: function(e) {
    var error_free, form, isFileUpload, map, opts;
    if (e !== null) {
      e.preventDefault();
    }
    form = $('.sandbox', $(this.el));
    error_free = true;
    form.find('input.required').each(function() {
      $(this).removeClass('error');
      if (jQuery.trim($(this).val()) === '') {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    form.find('textarea.required:visible').each(function() {
      $(this).removeClass('error');
      if (jQuery.trim($(this).val()) === '') {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              return $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    form.find('select.required').each(function() {
      $(this).removeClass('error');
      if (this.selectedIndex === -1) {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    if (error_free) {
      map = this.getInputMap(form);
      isFileUpload = this.isFileUpload(form);
      opts = {
        parent: this
      };
      if (this.options.swaggerOptions) {
        for(var key in this.options.swaggerOptions) {
          opts[key] = this.options.swaggerOptions[key];
        }
      }

      var pi;
      for(pi = 0; pi < this.model.parameters.length; pi++){
        var p = this.model.parameters[pi];
        if( p.jsonEditor && p.jsonEditor.isEnabled()){
          var json = p.jsonEditor.getValue();
          map[p.name] = JSON.stringify(json);
        }
      }

      opts.responseContentType = $('div select[name=responseContentType]', $(this.el)).val();
      opts.requestContentType = $('div select[name=parameterContentType]', $(this.el)).val();
      $('.response_throbber', $(this.el)).show();
      if (isFileUpload) {
        $('.request_url', $(this.el)).html('<pre></pre>');
        $('.request_url pre', $(this.el)).text(this.invocationUrl);

        opts.useJQuery = true;
        map.parameterContentType = 'multipart/form-data';
        this.map = map;
        return this.model.execute(map, opts, this.showCompleteStatus, this.showErrorStatus, this);
      } else {
        this.map = map;
        return this.model.execute(map, opts, this.showCompleteStatus, this.showErrorStatus, this);
      }
    }
  },

  getInputMap: function (form) {
    var map, ref1, l, len, o, ref2, m, len1, val, ref3, n, len2;
    map = {};
    ref1 = form.find('input');
    for (l = 0, len = ref1.length; l < len; l++) {
      o = ref1[l];
      if ((o.value !== null) && jQuery.trim(o.value).length > 0) {
        map[o.name] = o.value;
      }
      if (o.type === 'file') {
        map[o.name] = o.files[0];
      }
    }
    ref2 = form.find('textarea');
    for (m = 0, len1 = ref2.length; m < len1; m++) {
      o = ref2[m];
      val = this.getTextAreaValue(o);
      if ((val !== null) && jQuery.trim(val).length > 0) {
        map[o.name] = val;
      }
    }
    ref3 = form.find('select');
    for (n = 0, len2 = ref3.length; n < len2; n++) {
      o = ref3[n];
      val = this.getSelectedValue(o);
      if ((val !== null) && jQuery.trim(val).length > 0) {
        map[o.name] = val;
      }
    }
    return map;
  },

  isFileUpload: function (form) {
    var ref1, l, len, o;
    var isFileUpload = false;
    ref1 = form.find('input');
    for (l = 0, len = ref1.length; l < len; l++) {
      o = ref1[l];
      if (o.type === 'file') {
        isFileUpload = true;
      }
    }
    return isFileUpload;
  },

  success: function(response, parent) {
    parent.showCompleteStatus(response);
  },

  // wraps a jquery response as a shred response
  wrap: function(data) {
    var h, headerArray, headers, i, l, len, o;
    headers = {};
    headerArray = data.getAllResponseHeaders().split('\r');
    for (l = 0, len = headerArray.length; l < len; l++) {
      i = headerArray[l];
      h = i.match(/^([^:]*?):(.*)$/);
      if (!h) {
        h = [];
      }
      h.shift();
      if (h[0] !== void 0 && h[1] !== void 0) {
        headers[h[0].trim()] = h[1].trim();
      }
    }
    o = {};
    o.content = {};
    o.content.data = data.responseText;
    o.headers = headers;
    o.request = {};
    o.request.url = this.invocationUrl;
    o.status = data.status;
    return o;
  },

  getSelectedValue: function(select) {
    if (!select.multiple) {
      return select.value;
    } else {
      var options = [];
      for (var l = 0, len = select.options.length; l < len; l++) {
        var opt = select.options[l];
        if (opt.selected) {
          options.push(opt.value);
        }
      }
      if (options.length > 0) {
        return options;
      } else {
        return null;
      }
    }
  },

  // handler for hide response link
  hideResponse: function(e) {
    if (e) { e.preventDefault(); }
    $('.response', $(this.el)).slideUp();
    $('.response_hider', $(this.el)).fadeOut();
  },

  // Show response from server
  showResponse: function(response) {
    var prettyJson = JSON.stringify(response, null, '\t').replace(/\n/g, '<br>');
    $('.response_body', $(this.el)).html(_.escape(prettyJson));
  },

  // Show error from server
  showErrorStatus: function(data, parent) {
    parent.showStatus(data);
  },

  // show the status codes
  showCompleteStatus: function(data, parent){
    parent.showStatus(data);
  },

  // Adapted from http://stackoverflow.com/a/2893259/454004
  // Note: directly ported from CoffeeScript
  // TODO: Cleanup CoffeeScript artifacts
  formatXml: function(xml) {
    var contexp, fn, formatted, indent, l, lastType, len, lines, ln, pad, reg, transitions, wsexp;
    reg = /(>)(<)(\/*)/g;
    wsexp = /[ ]*(.*)[ ]+\n/g;
    contexp = /(<.+>)(.+\n)/g;
    xml = xml.replace(/\r\n/g, '\n').replace(reg, '$1\n$2$3').replace(wsexp, '$1\n').replace(contexp, '$1\n$2');
    pad = 0;
    formatted = '';
    lines = xml.split('\n');
    indent = 0;
    lastType = 'other';
    transitions = {
      'single->single': 0,
      'single->closing': -1,
      'single->opening': 0,
      'single->other': 0,
      'closing->single': 0,
      'closing->closing': -1,
      'closing->opening': 0,
      'closing->other': 0,
      'opening->single': 1,
      'opening->closing': 0,
      'opening->opening': 1,
      'opening->other': 1,
      'other->single': 0,
      'other->closing': -1,
      'other->opening': 0,
      'other->other': 0
    };
    fn = function(ln) {
      var fromTo, j, key, padding, type, types, value;
      types = {
        single: Boolean(ln.match(/<.+\/>/)),
        closing: Boolean(ln.match(/<\/.+>/)),
        opening: Boolean(ln.match(/<[^!?].*>/))
      };
      type = ((function() {
        var results;
        results = [];
        for (key in types) {
          value = types[key];
          if (value) {
            results.push(key);
          }
        }
        return results;
      })())[0];
      type = type === void 0 ? 'other' : type;
      fromTo = lastType + '->' + type;
      lastType = type;
      padding = '';
      indent += transitions[fromTo];
      padding = ((function() {
        var m, ref1, results;
        results = [];
        for (j = m = 0, ref1 = indent; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
          results.push('  ');
        }
        return results;
      })()).join('');
      if (fromTo === 'opening->closing') {
        formatted = formatted.substr(0, formatted.length - 1) + ln + '\n';
      } else {
        formatted += padding + ln + '\n';
      }
    };
    for (l = 0, len = lines.length; l < len; l++) {
      ln = lines[l];
      fn(ln);
    }
    return formatted;
  },

  // puts the response data in UI
  showStatus: function(response) {
    var url, content;
    if (response.content === undefined) {
      content = response.data;
      url = response.url;
    } else {
      content = response.content.data;
      url = response.request.url;
    }
    var headers = response.headers;
    content = jQuery.trim(content);

    // if server is nice, and sends content-type back, we can use it
    var contentType = null;
    if (headers) {
      contentType = headers['Content-Type'] || headers['content-type'];
      if (contentType) {
        contentType = contentType.split(';')[0].trim();
      }
    }
    $('.response_body', $(this.el)).removeClass('json');
    $('.response_body', $(this.el)).removeClass('xml');

    var supportsAudioPlayback = function(contentType){
      var audioElement = document.createElement('audio');
      return !!(audioElement.canPlayType && audioElement.canPlayType(contentType).replace(/no/, ''));
    };

    var pre;
    var code;
    if (!content) {
      code = $('<code />').text('no content');
      pre = $('<pre class=""json"" />').append(code);

      // JSON
    } else if (contentType === 'application/json' || /\+json$/.test(contentType)) {
      var json = null;
      try {
        json = JSON.stringify(JSON.parse(content), null, '  ');
      } catch (_error) {
        json = 'can\'t parse JSON.  Raw result:\n\n' + content;
      }
      code = $('<code />').text(json);
      pre = $('<pre class=""json"" />').append(code);

      // XML
    } else if (contentType === 'application/xml' || /\+xml$/.test(contentType)) {
      code = $('<code />').text(this.formatXml(content));
      pre = $('<pre class=""xml"" />').append(code);

      // HTML
    } else if (contentType === 'text/html') {
      code = $('<code />').html(_.escape(content));
      pre = $('<pre class=""xml"" />').append(code);

      // Plain Text
    } else if (/text\/plain/.test(contentType)) {
      code = $('<code />').text(content);
      pre = $('<pre class=""plain"" />').append(code);


      // Image
    } else if (/^image\//.test(contentType)) {
      pre = $('<img>').attr('src', url);

      // Audio
    } else if (/^audio\//.test(contentType) && supportsAudioPlayback(contentType)) {
      pre = $('<audio controls>').append($('<source>').attr('src', url).attr('type', contentType));

      // Download
    } else if (headers['Content-Disposition'] && (/attachment/).test(headers['Content-Disposition']) ||
        headers['content-disposition'] && (/attachment/).test(headers['content-disposition']) ||
        headers['Content-Description'] && (/File Transfer/).test(headers['Content-Description']) ||
        headers['content-description'] && (/File Transfer/).test(headers['content-description'])) {

      if ('Blob' in window) {
        var type = contentType || 'text/html';
        var blob = new Blob([content], {type: type});
        var a = document.createElement('a');
        var href = window.URL.createObjectURL(blob);
        var fileName = response.url.substr(response.url.lastIndexOf('/') + 1);
        var download = [type, fileName, href].join(':');

        // Use filename from response header
        var disposition = headers['content-disposition'] || headers['Content-Disposition'];
        if(typeof disposition !== 'undefined') {
          var responseFilename = /filename=([^;]*);?/.exec(disposition);
          if(responseFilename !== null && responseFilename.length > 1) {
            download = responseFilename[1];
          }
        }

        a.setAttribute('href', href);
        a.setAttribute('download', download);
        a.innerText = 'Download ' + fileName;

        pre = $('<div/>').append(a);
      } else {
        pre = $('<pre class=""json"" />').append('Download headers detected but your browser does not support downloading binary via XHR (Blob).');
      }

      // Location header based redirect download
    } else if(headers.location || headers.Location) {
      window.location = response.url;

      // Anything else (CORS)
    } else {
      code = $('<code />').text(content);
      pre = $('<pre class=""json"" />').append(code);
    }
    var response_body = pre;
    $('.request_url', $(this.el)).html('<pre></pre>');
    $('.request_url pre', $(this.el)).text(url);
    $('.response_code', $(this.el)).html('<pre>' + response.status + '</pre>');
    $('.response_body', $(this.el)).html(response_body);
    $('.response_headers', $(this.el)).html('<pre>' + _.escape(JSON.stringify(response.headers, null, '  ')).replace(/\n/g, '<br>') + '</pre>');
    $('.response', $(this.el)).slideDown();
    $('.response_hider', $(this.el)).show();
    $('.response_throbber', $(this.el)).hide();


    // adds curl output
    var curlCommand = this.model.asCurl(this.map, {responseContentType: contentType});
    curlCommand = curlCommand.replace('!', '&#33;');
    $( 'div.curl', $(this.el)).html('<pre>' + _.escape(curlCommand) + '</pre>');

    // only highlight the response if response is less than threshold, default state is highlight response
    var opts = this.options.swaggerOptions;

    if (opts.showRequestHeaders) {
      var form = $('.sandbox', $(this.el)),
          map = this.getInputMap(form),
          requestHeaders = this.model.getHeaderParams(map);
      delete requestHeaders['Content-Type'];
      $('.request_headers', $(this.el)).html('<pre>' + _.escape(JSON.stringify(requestHeaders, null, '  ')).replace(/\n/g, '<br>') + '</pre>');
    }

    var response_body_el = $('.response_body', $(this.el))[0];
    // only highlight the response if response is less than threshold, default state is highlight response
    if (opts.highlightSizeThreshold && typeof response.data !== 'undefined' && response.data.length > opts.highlightSizeThreshold) {
      return response_body_el;
    } else {
      return hljs.highlightBlock(response_body_el);
    }
  },

  toggleOperationContent: function (event) {
    var elem = $('#' + Docs.escapeResourceName(this.parentId + '_' + this.nickname + '_content'));
    if (elem.is(':visible')){
      $.bbq.pushState('#/', 2);
      event.preventDefault();
      Docs.collapseOperation(elem);
    } else {
      Docs.expandOperation(elem);
    }
  },

  getTextAreaValue: function(textArea) {
    var param, parsed, result, i;
    if (textArea.value === null || jQuery.trim(textArea.value).length === 0) {
      return null;
    }
    param = this.getParamByName(textArea.name);
    if (param && param.type && param.type.toLowerCase() === 'array') {
      parsed = textArea.value.split('\n');
      result = [];
      for (i = 0; i < parsed.length; i++) {
        if (parsed[i] !== null && jQuery.trim(parsed[i]).length > 0) {
          result.push(parsed[i]);
        }
      }
      return result.length > 0 ? result : null;
    } else {
      return textArea.value;
    }
  },

  showSnippet: function () {
    var contentTypeEl = this.$('[name=responseContentType]');
    var xmlSnippetEl = this.$('.operation-status .snippet_xml, .response-class .snippet_xml');
    var jsonSnippetEl = this.$('.operation-status .snippet_json, .response-class .snippet_json');
    var contentType;

    if (!contentTypeEl.length) { return; }
    contentType = contentTypeEl.val();

    if (contentType.indexOf('xml') > -1) {
      xmlSnippetEl.show();
      jsonSnippetEl.hide();
    } else {
      jsonSnippetEl.show();
      xmlSnippetEl.hide();
    }
  },

  getParamByName: function(name) {
    var i;
    if (this.model.parameters) {
      for(i = 0; i < this.model.parameters.length; i++) {
        if (this.model.parameters[i].name === name) {
          return this.model.parameters[i];
        }
      }
    }
    return null;
  }

});
","'use strict';

SwaggerUi.Views.OperationView = Backbone.View.extend({
  invocationUrl: null,

  events: {
    'submit .sandbox'         : 'submitOperation',
    'click .submit'           : 'submitOperation',
    'click .response_hider'   : 'hideResponse',
    'click .toggleOperation'  : 'toggleOperationContent',
    'mouseenter .api-ic'      : 'mouseEnter',
    'dblclick .curl'          : 'selectText',
    'change [name=responseContentType]' : 'showSnippet'
  },

  initialize: function(opts) {
    opts = opts || {};
    this.router = opts.router;
    this.auths = opts.auths;
    this.parentId = this.model.parentId;
    this.nickname = this.model.nickname;
    this.model.encodedParentId = encodeURIComponent(this.parentId);

    if (opts.swaggerOptions) {
      this.model.defaultRendering = opts.swaggerOptions.defaultModelRendering;

      if (opts.swaggerOptions.showRequestHeaders) {
        this.model.showRequestHeaders = true;
      }
    }
    return this;
  },

  selectText: function(event) {
    var doc = document,
        text = event.target.firstChild,
        range,
        selection;
    if (doc.body.createTextRange) {
      range = document.body.createTextRange();
      range.moveToElementText(text);
      range.select();
    } else if (window.getSelection) {
      selection = window.getSelection();
      range = document.createRange();
      range.selectNodeContents(text);
      selection.removeAllRanges();
      selection.addRange(range);
    }
  },

  mouseEnter: function(e) {
    var elem = $(this.el).find('.content');
    var x = e.pageX;
    var y = e.pageY;
    var scX = $(window).scrollLeft();
    var scY = $(window).scrollTop();
    var scMaxX = scX + $(window).width();
    var scMaxY = scY + $(window).height();
    var wd = elem.width();
    var hgh = elem.height();

    if (x + wd > scMaxX) {
      x = scMaxX - wd;
    }

    if (x < scX) {
      x = scX;
    }

    if (y + hgh > scMaxY) {
      y = scMaxY - hgh;
    }

    if (y < scY) {
      y = scY;
    }

    var pos = {};
    pos.top = y;
    pos.left = x;
    elem.css(pos);
  },

  // Note: copied from CoffeeScript compiled file
  // TODO: redactor
  render: function() {
    var a, auth, auths, code, contentTypeModel, isMethodSubmissionSupported, k, key, l, len, len1, len2, len3, len4, m, modelAuths, n, o, p, param, q, ref, ref1, ref2, ref3, ref4, ref5, responseContentTypeView, responseSignatureView, schema, schemaObj, scopeIndex, signatureModel, statusCode, successResponse, type, v, value, produces, isXML, isJSON;
    isMethodSubmissionSupported = jQuery.inArray(this.model.method, this.model.supportedSubmitMethods()) >= 0;
    if (!isMethodSubmissionSupported) {
      this.model.isReadOnly = true;
    }
    this.model.description = this.model.description || this.model.notes;
    this.model.oauth = null;
    modelAuths = this.model.authorizations || this.model.security;
    if (modelAuths) {
      if (Array.isArray(modelAuths)) {
        for (l = 0, len = modelAuths.length; l < len; l++) {
          auths = modelAuths[l];
          for (key in auths) {
            for (a in this.auths) {
              auth = this.auths[a];
              if (key === auth.name) {
                if (auth.type === 'oauth2') {
                  this.model.oauth = {};
                  this.model.oauth.scopes = [];
                  ref1 = auth.value.scopes;
                  for (k in ref1) {
                    v = ref1[k];
                    scopeIndex = auths[key].indexOf(k);
                    if (scopeIndex >= 0) {
                      o = {
                        scope: k,
                        description: v
                      };
                      this.model.oauth.scopes.push(o);
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        for (k in modelAuths) {
          v = modelAuths[k];
          if (k === 'oauth2') {
            if (this.model.oauth === null) {
              this.model.oauth = {};
            }
            if (this.model.oauth.scopes === void 0) {
              this.model.oauth.scopes = [];
            }
            for (m = 0, len1 = v.length; m < len1; m++) {
              o = v[m];
              this.model.oauth.scopes.push(o);
            }
          }
        }
      }
    }
    if (typeof this.model.responses !== 'undefined') {
      this.model.responseMessages = [];
      ref2 = this.model.responses;
      for (code in ref2) {
        value = ref2[code];
        schema = null;
        schemaObj = this.model.responses[code].schema;
        if (schemaObj && schemaObj.$ref) {
          schema = schemaObj.$ref;
          if (schema.indexOf('#/definitions/') !== -1) {
            schema = schema.replace(/^.*#\/definitions\//, '');
          }
        }
        this.model.responseMessages.push({
          code: code,
          message: value.description,
          responseModel: schema,
          headers: value.headers,
          schema: schemaObj
        });
      }
    }
    if (typeof this.model.responseMessages === 'undefined') {
      this.model.responseMessages = [];
    }
    signatureModel = null;
    produces = this.model.produces;
    isXML = this.contains(produces, 'xml');
    isJSON = isXML ? this.contains(produces, 'json') : true;

    if (this.model.successResponse) {
      successResponse = this.model.successResponse;
      for (key in successResponse) {
        value = successResponse[key];
        this.model.successCode = key;
        if (typeof value === 'object' && typeof value.createJSONSample === 'function') {
          this.model.successDescription = value.description;
          this.model.headers = this.parseResponseHeaders(value.headers);
          signatureModel = {
            sampleJSON: isJSON ? JSON.stringify(SwaggerUi.partials.signature.createJSONSample(value), void 0, 2) : false,
            isParam: false,
            sampleXML: isXML ? SwaggerUi.partials.signature.createXMLSample(value.name, value.definition, value.models) : false,
            signature: SwaggerUi.partials.signature.getModelSignature(value.name, value.definition, value.models, value.modelPropertyMacro)
          };
        } else {
          signatureModel = {
            signature: SwaggerUi.partials.signature.getPrimitiveSignature(value)
          };
        }
      }
    } else if (this.model.responseClassSignature && this.model.responseClassSignature !== 'string') {
      signatureModel = {
        sampleJSON: this.model.responseSampleJSON,
        isParam: false,
        signature: this.model.responseClassSignature
      };
    }
    $(this.el).html(Handlebars.templates.operation(this.model));
    if (signatureModel) {
      signatureModel.defaultRendering = this.model.defaultRendering;
      responseSignatureView = new SwaggerUi.Views.SignatureView({
        model: signatureModel,
        router: this.router,
        tagName: 'div'
      });
      $('.model-signature', $(this.el)).append(responseSignatureView.render().el);
    } else {
      this.model.responseClassSignature = 'string';
      $('.model-signature', $(this.el)).html(this.model.type);
    }
    contentTypeModel = {
      isParam: false
    };
    contentTypeModel.consumes = this.model.consumes;
    contentTypeModel.produces = this.model.produces;
    ref3 = this.model.parameters;
    for (n = 0, len2 = ref3.length; n < len2; n++) {
      param = ref3[n];
      type = param.type || param.dataType || '';
      if (typeof type === 'undefined') {
        schema = param.schema;
        if (schema && schema.$ref) {
          ref = schema.$ref;
          if (ref.indexOf('#/definitions/') === 0) {
            type = ref.substring('#/definitions/'.length);
          } else {
            type = ref;
          }
        }
      }
      if (type && type.toLowerCase() === 'file') {
        if (!contentTypeModel.consumes) {
          contentTypeModel.consumes = 'multipart/form-data';
        }
      }
      param.type = type;
    }
    responseContentTypeView = new SwaggerUi.Views.ResponseContentTypeView({
      model: contentTypeModel,
      router: this.router
    });
    $('.response-content-type', $(this.el)).append(responseContentTypeView.render().el);
    ref4 = this.model.parameters;
    for (p = 0, len3 = ref4.length; p < len3; p++) {
      param = ref4[p];
      this.addParameter(param, contentTypeModel.consumes);
    }
    ref5 = this.model.responseMessages;
    for (q = 0, len4 = ref5.length; q < len4; q++) {
      statusCode = ref5[q];
      statusCode.isXML = isXML;
      statusCode.isJSON = isJSON;
      if (!_.isUndefined(statusCode.headers)) {
        statusCode.headers = this.parseHeadersType(statusCode.headers);
      }
      this.addStatusCode(statusCode);
    }

    if (Array.isArray(this.model.security)) {
      var authsModel = SwaggerUi.utils.parseSecurityDefinitions(this.model.security);

      authsModel.isLogout = !_.isEmpty(window.swaggerUi.api.clientAuthorizations.authz);
      this.authView = new SwaggerUi.Views.AuthButtonView({
        data: authsModel,
        router: this.router,
        isOperation: true,
        model: {
          scopes: authsModel.scopes
        }
      });
      this.$('.authorize-wrapper').append(this.authView.render().el);
    }

    this.showSnippet();
    return this;
  },

  parseHeadersType: function (headers) {
    var map = {
      'string': {
        'date-time': 'dateTime',
        'date'     : 'date'
      }
    };

    _.forEach(headers, function (header) {
      var value;
      header = header || {};
      value = map[header.type] && map[header.type][header.format];
      if (!_.isUndefined(value)) {
        header.type = value;
      }
    });

    return headers;
  },

  contains: function (produces, type) {
    return produces.filter(function (val) {
      if (val.indexOf(type) > -1) {
        return true;
      }
    }).length;
  },

  parseResponseHeaders: function (data) {
    var HEADERS_SEPARATOR = '; ';
    var headers = _.clone(data);

    _.forEach(headers, function (header) {
      var other = [];
      _.forEach(header, function (value, key) {
        var properties = ['type', 'description'];
        if (properties.indexOf(key.toLowerCase()) === -1) {
          other.push(key + ': ' + value);
        }
      });

      other.join(HEADERS_SEPARATOR);
      header.other = other;
    });

    return headers;
  },

  addParameter: function(param, consumes) {
    // Render a parameter
    param.consumes = consumes;
    param.defaultRendering = this.model.defaultRendering;

    // Copy this param JSON spec so that it will be available for JsonEditor
    if(param.schema){
      $.extend(true, param.schema, this.model.definitions[param.type]);
      param.schema.definitions = this.model.definitions;
      // This is required for JsonEditor to display the root properly
      if(!param.schema.type){
        param.schema.type = 'object';
      }
      // This is the title that will be used by JsonEditor for the root
      // Since we already display the parameter's name in the Parameter column
      // We set this to space, we can't set it to null or space otherwise JsonEditor
      // will replace it with the text ""root"" which won't look good on screen
      if(!param.schema.title){
        param.schema.title = ' ';
      }
    }

    var paramView = new SwaggerUi.Views.ParameterView({
      model: param,
      tagName: 'tr',
      readOnly: this.model.isReadOnly,
      swaggerOptions: this.options.swaggerOptions
    });
    $('.operation-params', $(this.el)).append(paramView.render().el);
  },

  addStatusCode: function(statusCode) {
    // Render status codes
    statusCode.defaultRendering = this.model.defaultRendering;
    var statusCodeView = new SwaggerUi.Views.StatusCodeView({
      model: statusCode,
      tagName: 'tr',
      router: this.router
    });
    $('.operation-status', $(this.el)).append(statusCodeView.render().el);
  },

  // Note: copied from CoffeeScript compiled file
  // TODO: redactor
  submitOperation: function(e) {
    var error_free, form, isFileUpload, map, opts;
    if (e !== null) {
      e.preventDefault();
    }
    form = $('.sandbox', $(this.el));
    error_free = true;
    form.find('input.required').each(function() {
      $(this).removeClass('error');
      if (jQuery.trim($(this).val()) === '') {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    form.find('textarea.required:visible').each(function() {
      $(this).removeClass('error');
      if (jQuery.trim($(this).val()) === '') {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              return $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    form.find('select.required').each(function() {
      $(this).removeClass('error');
      if (this.selectedIndex === -1) {
        $(this).addClass('error');
        $(this).wiggle({
          callback: (function(_this) {
            return function() {
              $(_this).focus();
            };
          })(this)
        });
        error_free = false;
      }
    });
    if (error_free) {
      map = this.getInputMap(form);
      isFileUpload = this.isFileUpload(form);
      opts = {
        parent: this
      };
      if (this.options.swaggerOptions) {
        for(var key in this.options.swaggerOptions) {
          opts[key] = this.options.swaggerOptions[key];
        }
      }

      var pi;
      for(pi = 0; pi < this.model.parameters.length; pi++){
        var p = this.model.parameters[pi];
        if( p.jsonEditor && p.jsonEditor.isEnabled()){
          var json = p.jsonEditor.getValue();
          map[p.name] = JSON.stringify(json);
        }
      }

      opts.responseContentType = $('div select[name=responseContentType]', $(this.el)).val();
      opts.requestContentType = $('div select[name=parameterContentType]', $(this.el)).val();
      $('.response_throbber', $(this.el)).show();
      if (isFileUpload) {
        $('.request_url', $(this.el)).html('<pre></pre>');
        $('.request_url pre', $(this.el)).text(this.invocationUrl);

        opts.useJQuery = true;
        map.parameterContentType = 'multipart/form-data';
        this.map = map;
        return this.model.execute(map, opts, this.showCompleteStatus, this.showErrorStatus, this);
      } else {
        this.map = map;
        return this.model.execute(map, opts, this.showCompleteStatus, this.showErrorStatus, this);
      }
    }
  },

  getInputMap: function (form) {
    var map, ref1, l, len, o, ref2, m, len1, val, ref3, n, len2;
    map = {};
    ref1 = form.find('input');
    for (l = 0, len = ref1.length; l < len; l++) {
      o = ref1[l];
      if ((o.value !== null) && jQuery.trim(o.value).length > 0) {
        map[o.name] = o.value;
      }
      if (o.type === 'file') {
        map[o.name] = o.files[0];
      }
    }
    ref2 = form.find('textarea');
    for (m = 0, len1 = ref2.length; m < len1; m++) {
      o = ref2[m];
      val = this.getTextAreaValue(o);
      if ((val !== null) && jQuery.trim(val).length > 0) {
        map[o.name] = val;
      }
    }
    ref3 = form.find('select');
    for (n = 0, len2 = ref3.length; n < len2; n++) {
      o = ref3[n];
      val = this.getSelectedValue(o);
      if ((val !== null) && jQuery.trim(val).length > 0) {
        map[o.name] = val;
      }
    }
    return map;
  },

  isFileUpload: function (form) {
    var ref1, l, len, o;
    var isFileUpload = false;
    ref1 = form.find('input');
    for (l = 0, len = ref1.length; l < len; l++) {
      o = ref1[l];
      if (o.type === 'file') {
        isFileUpload = true;
      }
    }
    return isFileUpload;
  },

  success: function(response, parent) {
    parent.showCompleteStatus(response);
  },

  // wraps a jquery response as a shred response
  wrap: function(data) {
    var h, headerArray, headers, i, l, len, o;
    headers = {};
    headerArray = data.getAllResponseHeaders().split('\r');
    for (l = 0, len = headerArray.length; l < len; l++) {
      i = headerArray[l];
      h = i.match(/^([^:]*?):(.*)$/);
      if (!h) {
        h = [];
      }
      h.shift();
      if (h[0] !== void 0 && h[1] !== void 0) {
        headers[h[0].trim()] = h[1].trim();
      }
    }
    o = {};
    o.content = {};
    o.content.data = data.responseText;
    o.headers = headers;
    o.request = {};
    o.request.url = this.invocationUrl;
    o.status = data.status;
    return o;
  },

  getSelectedValue: function(select) {
    if (!select.multiple) {
      return select.value;
    } else {
      var options = [];
      for (var l = 0, len = select.options.length; l < len; l++) {
        var opt = select.options[l];
        if (opt.selected) {
          options.push(opt.value);
        }
      }
      if (options.length > 0) {
        return options;
      } else {
        return null;
      }
    }
  },

  // handler for hide response link
  hideResponse: function(e) {
    if (e) { e.preventDefault(); }
    $('.response', $(this.el)).slideUp();
    $('.response_hider', $(this.el)).fadeOut();
  },

  // Show response from server
  showResponse: function(response) {
    var prettyJson = JSON.stringify(response, null, '\t').replace(/\n/g, '<br>');
    $('.response_body', $(this.el)).html(_.escape(prettyJson));
  },

  // Show error from server
  showErrorStatus: function(data, parent) {
    parent.showStatus(data);
  },

  // show the status codes
  showCompleteStatus: function(data, parent){
    parent.showStatus(data);
  },

  // Adapted from http://stackoverflow.com/a/2893259/454004
  // Note: directly ported from CoffeeScript
  // TODO: Cleanup CoffeeScript artifacts
  formatXml: function(xml) {
    var contexp, fn, formatted, indent, l, lastType, len, lines, ln, pad, reg, transitions, wsexp;
    reg = /(>)(<)(\/*)/g;
    wsexp = /[ ]*(.*)[ ]+\n/g;
    contexp = /(<.+>)(.+\n)/g;
    xml = xml.replace(/\r\n/g, '\n').replace(reg, '$1\n$2$3').replace(wsexp, '$1\n').replace(contexp, '$1\n$2');
    pad = 0;
    formatted = '';
    lines = xml.split('\n');
    indent = 0;
    lastType = 'other';
    transitions = {
      'single->single': 0,
      'single->closing': -1,
      'single->opening': 0,
      'single->other': 0,
      'closing->single': 0,
      'closing->closing': -1,
      'closing->opening': 0,
      'closing->other': 0,
      'opening->single': 1,
      'opening->closing': 0,
      'opening->opening': 1,
      'opening->other': 1,
      'other->single': 0,
      'other->closing': -1,
      'other->opening': 0,
      'other->other': 0
    };
    fn = function(ln) {
      var fromTo, j, key, padding, type, types, value;
      types = {
        single: Boolean(ln.match(/<.+\/>/)),
        closing: Boolean(ln.match(/<\/.+>/)),
        opening: Boolean(ln.match(/<[^!?].*>/))
      };
      type = ((function() {
        var results;
        results = [];
        for (key in types) {
          value = types[key];
          if (value) {
            results.push(key);
          }
        }
        return results;
      })())[0];
      type = type === void 0 ? 'other' : type;
      fromTo = lastType + '->' + type;
      lastType = type;
      padding = '';
      indent += transitions[fromTo];
      padding = ((function() {
        var m, ref1, results;
        results = [];
        for (j = m = 0, ref1 = indent; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
          results.push('  ');
        }
        return results;
      })()).join('');
      if (fromTo === 'opening->closing') {
        formatted = formatted.substr(0, formatted.length - 1) + ln + '\n';
      } else {
        formatted += padding + ln + '\n';
      }
    };
    for (l = 0, len = lines.length; l < len; l++) {
      ln = lines[l];
      fn(ln);
    }
    return formatted;
  },

  // puts the response data in UI
  showStatus: function(response) {
    var url, content;
    if (response.content === undefined) {
      content = response.data;
      url = response.url;
    } else {
      content = response.content.data;
      url = response.request.url;
    }
    var headers = response.headers;
    content = jQuery.trim(content);

    // if server is nice, and sends content-type back, we can use it
    var contentType = null;
    if (headers) {
      contentType = headers['Content-Type'] || headers['content-type'];
      if (contentType) {
        contentType = contentType.split(';')[0].trim();
      }
    }
    $('.response_body', $(this.el)).removeClass('json');
    $('.response_body', $(this.el)).removeClass('xml');

    var supportsAudioPlayback = function(contentType){
      var audioElement = document.createElement('audio');
      return !!(audioElement.canPlayType && audioElement.canPlayType(contentType).replace(/no/, ''));
    };

    var pre;
    var code;
    if (!content) {
      code = $('<code />').text('no content');
      pre = $('<pre class=""json"" />').append(code);

      // JSON
    } else if (contentType === 'application/json' || /\+json$/.test(contentType)) {
      var json = null;
      try {
        json = JSON.stringify(JSON.parse(content), null, '  ');
      } catch (_error) {
        json = 'can\'t parse JSON.  Raw result:\n\n' + content;
      }
      code = $('<code />').text(json);
      pre = $('<pre class=""json"" />').append(code);

      // XML
    } else if (contentType === 'application/xml' || /\+xml$/.test(contentType)) {
      code = $('<code />').text(this.formatXml(content));
      pre = $('<pre class=""xml"" />').append(code);

      // HTML
    } else if (contentType === 'text/html') {
      code = $('<code />').html(_.escape(content));
      pre = $('<pre class=""xml"" />').append(code);

      // Plain Text
    } else if (/text\/plain/.test(contentType)) {
      code = $('<code />').text(content);
      pre = $('<pre class=""plain"" />').append(code);


      // Image
    } else if (/^image\//.test(contentType)) {
      pre = $('<img>').attr('src', url);

      // Audio
    } else if (/^audio\//.test(contentType) && supportsAudioPlayback(contentType)) {
      pre = $('<audio controls>').append($('<source>').attr('src', url).attr('type', contentType));

      // Download
    } else if (headers['Content-Disposition'] && (/attachment/).test(headers['Content-Disposition']) ||
        headers['content-disposition'] && (/attachment/).test(headers['content-disposition']) ||
        headers['Content-Description'] && (/File Transfer/).test(headers['Content-Description']) ||
        headers['content-description'] && (/File Transfer/).test(headers['content-description'])) {

      if ('Blob' in window) {
        var type = contentType || 'text/html';
        var blob = new Blob([content], {type: type});
        var a = document.createElement('a');
        var href = window.URL.createObjectURL(blob);
        var fileName = response.url.substr(response.url.lastIndexOf('/') + 1);
        var download = [type, fileName, href].join(':');

        // Use filename from response header
        var disposition = headers['content-disposition'] || headers['Content-Disposition'];
        if(typeof disposition !== 'undefined') {
          var responseFilename = /filename=([^;]*);?/.exec(disposition);
          if(responseFilename !== null && responseFilename.length > 1) {
            download = responseFilename[1];
          }
        }

        a.setAttribute('href', href);
        a.setAttribute('download', download);
        a.innerText = 'Download ' + fileName;

        pre = $('<div/>').append(a);
      } else {
        pre = $('<pre class=""json"" />').append('Download headers detected but your browser does not support downloading binary via XHR (Blob).');
      }

      // Location header based redirect download
    } else if(headers.location || headers.Location) {
      window.location = response.url;

      // Anything else (CORS)
    } else {
      code = $('<code />').text(content);
      pre = $('<pre class=""json"" />').append(code);
    }
    var response_body = pre;
    $('.request_url', $(this.el)).html('<pre></pre>');
    $('.request_url pre', $(this.el)).text(url);
    $('.response_code', $(this.el)).html('<pre>' + response.status + '</pre>');
    $('.response_body', $(this.el)).html(response_body);
    $('.response_headers', $(this.el)).html('<pre>' + _.escape(JSON.stringify(response.headers, null, '  ')).replace(/\n/g, '<br>') + '</pre>');
    $('.response', $(this.el)).slideDown();
    $('.response_hider', $(this.el)).show();
    $('.response_throbber', $(this.el)).hide();


    // adds curl output
    var curlCommand = this.model.asCurl(this.map, {responseContentType: contentType});
    curlCommand = curlCommand.replace('!', '&#33;');
    $( 'div.curl', $(this.el)).html('<pre>' + _.escape(curlCommand) + '</pre>');

    // only highlight the response if response is less than threshold, default state is highlight response
    var opts = this.options.swaggerOptions;

    if (opts.showRequestHeaders) {
      var form = $('.sandbox', $(this.el)),
          map = this.getInputMap(form),
          requestHeaders = this.model.getHeaderParams(map);
      delete requestHeaders['Content-Type'];
      $('.request_headers', $(this.el)).html('<pre>' + _.escape(JSON.stringify(requestHeaders, null, '  ')).replace(/\n/g, '<br>') + '</pre>');
    }

    var response_body_el = $('.response_body', $(this.el))[0];
    // only highlight the response if response is less than threshold, default state is highlight response
    if (opts.highlightSizeThreshold && typeof response.data !== 'undefined' && response.data.length > opts.highlightSizeThreshold) {
      return response_body_el;
    } else {
      return hljs.highlightBlock(response_body_el);
    }
  },

  toggleOperationContent: function (event) {
    var elem = $('#' + Docs.escapeResourceName(this.parentId + '_' + this.nickname + '_content'));
    if (elem.is(':visible')){
      $.bbq.pushState('#/', 2);
      event.preventDefault();
      Docs.collapseOperation(elem);
    } else {
      Docs.expandOperation(elem);
    }
  },

  getTextAreaValue: function(textArea) {
    var param, parsed, result, i;
    if (textArea.value === null || jQuery.trim(textArea.value).length === 0) {
      return null;
    }
    param = this.getParamByName(textArea.name);
    if (param && param.type && param.type.toLowerCase() === 'array') {
      parsed = textArea.value.split('\n');
      result = [];
      for (i = 0; i < parsed.length; i++) {
        if (parsed[i] !== null && jQuery.trim(parsed[i]).length > 0) {
          result.push(parsed[i]);
        }
      }
      return result.length > 0 ? result : null;
    } else {
      return textArea.value;
    }
  },

  showSnippet: function () {
    var contentTypeEl = this.$('[name=responseContentType]');
    var xmlSnippetEl = this.$('.operation-status .snippet_xml, .response-class .snippet_xml');
    var jsonSnippetEl = this.$('.operation-status .snippet_json, .response-class .snippet_json');
    var contentType;

    if (!contentTypeEl.length) { return; }
    contentType = contentTypeEl.val();

    if (contentType.indexOf('xml') > -1) {
      xmlSnippetEl.show();
      jsonSnippetEl.hide();
    } else {
      jsonSnippetEl.show();
      xmlSnippetEl.hide();
    }
  },

  getParamByName: function(name) {
    var i;
    if (this.model.parameters) {
      for(i = 0; i < this.model.parameters.length; i++) {
        if (this.model.parameters[i].name === name) {
          return this.model.parameters[i];
        }
      }
    }
    return null;
  }

});
",TRUE,,3832
3802,InitialSO.csv3802.txt,InitialGit.csv3802.txt,28,"print softspace sys.stdout print import random
import sys
import thread
import threading
import time

def wait():
  time.sleep(random.random())
  return 'W'

def targ():
  for n in range(8):
    wait()
    print 'Thr', wait(), thread.get_ident(), wait(), 'at', wait(), n

tls = threading.local()

class ThreadSafeFile(object):
  def __init__(self, f):
    self.f = f
    self.lock = threading.RLock()
    self.nesting = 0

  def _getlock(self):
    self.lock.acquire()
    self.nesting += 1

  def _droplock(self):
    nesting = self.nesting
    self.nesting = 0
    for i in range(nesting):
      self.lock.release()

  def __getattr__(self, name):
    if name == 'softspace':
      return tls.softspace
    else:
      raise AttributeError(name)

  def __setattr__(self, name, value):
    if name == 'softspace':
      tls.softspace = value
    else:
      return object.__setattr__(self, name, value)

  def write(self, data):
    self._getlock()
    self.f.write(data)
    if data == '\n':
      self._droplock()

# comment the following statement out to get guaranteed chaos;-)
sys.stdout = ThreadSafeFile(sys.stdout)

thrs = []
for i in range(8):
  thrs.append(threading.Thread(target=targ))
print 'Starting'
for t in thrs:
  t.start()
for t in thrs:
  t.join()
print 'Done'
 wait Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1338986496 W at W 0
Thr W -1341116416 W at W 0
Thr W -1337921536 W at W 0
Thr W -1341648896 W at W 0
Thr W -1338454016 W at W 0
Thr W -1339518976 W at W 0
Thr W -1340583936 W at W 1
Thr W -1340051456 W at W 1
Thr W -1338986496 W at W 1
  ...more of the same...
 time.sleep wait Thr W -1341648896 W at W 0
Thr W -1341116416 W at W 0
Thr W -1341648896 W at W 1
Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1341116416 W at W 1
Thr W -1341116416 W at W 2
Thr W -1338986496 W at W 0
  ...more of the same...
 print 'ciao', \n softspace ","print softspace sys.stdout print import random
import sys
import thread
import threading
import time

def wait():
  time.sleep(random.random())
  return 'W'

def targ():
  for n in range(8):
    wait()
    print 'Thr', wait(), thread.get_ident(), wait(), 'at', wait(), n

tls = threading.local()

class ThreadSafeFile(object):
  def __init__(self, f):
    self.f = f
    self.lock = threading.RLock()
    self.nesting = 0

  def _getlock(self):
    self.lock.acquire()
    self.nesting += 1

  def _droplock(self):
    nesting = self.nesting
    self.nesting = 0
    for i in range(nesting):
      self.lock.release()

  def __getattr__(self, name):
    if name == 'softspace':
      return tls.softspace
    else:
      raise AttributeError(name)

  def __setattr__(self, name, value):
    if name == 'softspace':
      tls.softspace = value
    else:
      return object.__setattr__(self, name, value)

  def write(self, data):
    self._getlock()
    self.f.write(data)
    if data == '\n':
      self._droplock()

# comment the following statement out to get guaranteed chaos;-)
sys.stdout = ThreadSafeFile(sys.stdout)

thrs = []
for i in range(8):
  thrs.append(threading.Thread(target=targ))
print 'Starting'
for t in thrs:
  t.start()
for t in thrs:
  t.join()
print 'Done'
 wait Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1338986496 W at W 0
Thr W -1341116416 W at W 0
Thr W -1337921536 W at W 0
Thr W -1341648896 W at W 0
Thr W -1338454016 W at W 0
Thr W -1339518976 W at W 0
Thr W -1340583936 W at W 1
Thr W -1340051456 W at W 1
Thr W -1338986496 W at W 1
  ...more of the same...
 time.sleep wait Thr W -1341648896 W at W 0
Thr W -1341116416 W at W 0
Thr W -1341648896 W at W 1
Thr W -1340583936 W at W 0
Thr W -1340051456 W at W 0
Thr W -1341116416 W at W 1
Thr W -1341116416 W at W 2
Thr W -1338986496 W at W 0
  ...more of the same...
 print 'ciao', \n softspace ",TRUE,"#!/usr/bin/env python
# vim:ts=4:sw=4:et:
import unittest
import os
import os.path
import sys
# Ensure that we can find pywatchman
sys.path.append(os.path.join(os.getcwd(), 'python'))
sys.path.append(os.path.join(os.getcwd(), 'tests', 'integration'))
import tempfile
import shutil
import subprocess
import traceback
import time
import argparse
import atexit
import WatchmanTapTests
import WatchmanInstance
import glob
import threading
import multiprocessing
import math
import signal
import Interrupt
import random

try:
    import queue
except Exception:
    import Queue
    queue = Queue

parser = argparse.ArgumentParser(
    description=""Run the watchman unit and integration tests"")
parser.add_argument('-v', '--verbosity', default=2,
                    help=""test runner verbosity"")
parser.add_argument(
    ""--keep"",
    action='store_true',
    help=""preserve all temporary files created during test execution"")

parser.add_argument(
    ""files"",
    nargs='*',
    help='specify which test files to run')

parser.add_argument(
    '--method',
    action='append',
    help='specify which python test method names to run')

parser.add_argument(
    '--concurrency',
    default=int(math.ceil(1.5 * multiprocessing.cpu_count())),
    type=int,
    help='How many tests to run at once')

args = parser.parse_args()

# We test for this in a test case
os.environ['WATCHMAN_EMPTY_ENV_VAR'] = ''

# We'll put all our temporary stuff under one dir so that we
# can clean it all up at the end
temp_dir = os.path.realpath(tempfile.mkdtemp(prefix='watchmantest'))
if args.keep:
    atexit.register(sys.stdout.write,
                    'Preserving output in %s\n' % temp_dir)
else:
    atexit.register(shutil.rmtree, temp_dir)
# Redirect all temporary files to that location
tempfile.tempdir = temp_dir


def interrupt_handler(signo, frame):
    Interrupt.setInterrupted()
signal.signal(signal.SIGINT, interrupt_handler)


class Result(unittest.TestResult):
    # Make it easier to spot success/failure by coloring the status
    # green for pass, red for fail and yellow for skip.
    # also print the elapsed time per test
    transport = None
    encoding = None

    def shouldStop(self):
        if Interrupt.wasInterrupted():
            return True
        return super(Result, self).shouldStop()

    def startTest(self, test):
        self.startTime = time.time()
        super(Result, self).startTest(test)

    def setFlavour(self, transport, encoding):
        self.transport = transport
        self.encoding = encoding

    def flavour(self, test):
        if self.transport:
            return '%s [%s, %s]' % (test.id(), self.transport, self.encoding)
        return test.id()

    def addSuccess(self, test):
        elapsed = time.time() - self.startTime
        super(Result, self).addSuccess(test)
        print('\033[32mPASS\033[0m %s (%.3fs)' % (self.flavour(test), elapsed))

    def addSkip(self, test, reason):
        elapsed = time.time() - self.startTime
        super(Result, self).addSkip(test, reason)
        print('\033[33mSKIP\033[0m %s (%.3fs) %s' %
              (self.flavour(test), elapsed, reason))

    def __printFail(self, test, err):
        elapsed = time.time() - self.startTime
        t, val, trace = err
        print('\033[31mFAIL\033[0m %s (%.3fs)\n%s' % (
            self.flavour(test),
            elapsed,
            ''.join(traceback.format_exception(t, val, trace))))

    def addFailure(self, test, err):
        self.__printFail(test, err)
        super(Result, self).addFailure(test, err)

    def addError(self, test, err):
        self.__printFail(test, err)
        super(Result, self).addError(test, err)


def expandFilesList(files):
    """""" expand any dir names into a full list of files """"""
    res = []
    for g in args.files:
        if os.path.isdir(g):
            for dirname, dirs, files in os.walk(g):
                for f in files:
                    if not f.startswith('.'):
                        res.append(os.path.join(dirname, f))
        else:
            res.append(g)
    return res

if args.files:
    args.files = expandFilesList(args.files)


def shouldIncludeTestFile(filename):
    """""" used by our loader to respect the set of tests to run """"""
    global args
    fname = os.path.relpath(filename.replace('.pyc', '.py'))
    if args.files:
        for f in args.files:
            if f == fname:
                return True
        return False

    if args.method:
        # implies python tests only
        if not fname.endswith('.py'):
            return False

    return True

def shouldIncludeTestName(name):
    """""" used by our loader to respect the set of tests to run """"""
    global args
    if args.method:
        method = name.split('.').pop()
        for f in args.method:
            if method == f:
                return True
        return False
    return True


class Loader(unittest.TestLoader):
    """""" allows us to control the subset of which tests are run """"""

    def __init__(self):
        super(Loader, self).__init__()

    def loadTestsFromTestCase(self, testCaseClass):
        return super(Loader, self).loadTestsFromTestCase(testCaseClass)

    def getTestCaseNames(self, testCaseClass):
        names = super(Loader, self).getTestCaseNames(testCaseClass)
        return filter(lambda name: shouldIncludeTestName(name), names)

    def loadTestsFromModule(self, module):
        if not shouldIncludeTestFile(module.__file__):
            return unittest.TestSuite()
        return super(Loader, self).loadTestsFromModule(module)

loader = Loader()
suite = unittest.TestSuite()
for d in ['python/tests', 'tests/integration']:
    suite.addTests(loader.discover(d, top_level_dir=d))
suite.addTests(WatchmanTapTests.discover(
    shouldIncludeTestFile, 'tests/*.t'))
suite.addTests(WatchmanTapTests.discover(
    shouldIncludeTestFile, 'tests/integration/*.php'))

# Manage printing from concurrent threads
# http://stackoverflow.com/a/3030755/149111
class ThreadSafeFile(object):
    def __init__(self, f):
        self.f = f
        self.lock = threading.RLock()
        self.nesting = 0

    def _getlock(self):
        self.lock.acquire()
        self.nesting += 1

    def _droplock(self):
        nesting = self.nesting
        self.nesting = 0
        for i in range(nesting):
            self.lock.release()

    def __getattr__(self, name):
        if name == 'softspace':
            return tls.softspace
        else:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        if name == 'softspace':
            tls.softspace = value
        else:
            return object.__setattr__(self, name, value)

    def write(self, data):
        self._getlock()
        self.f.write(data)
        if data == '\n':
            self._droplock()

sys.stdout = ThreadSafeFile(sys.stdout)

tests_queue = queue.Queue()
results_queue = queue.Queue()

def runner():
    global results_queue
    global tests_queue

    try:
        # Start up a shared watchman instance for the tests.
        inst = WatchmanInstance.Instance()
        inst.start()
        # Allow tests to locate this default instance
        WatchmanInstance.setSharedInstance(inst)
    except Exception as e:
        print('This is going to suck:', e)
        return

    while True:
        test = tests_queue.get()
        try:
            if test == 'terminate':
                break

            if Interrupt.wasInterrupted():
                continue

            try:
                result = Result()
                test.run(result)
                results_queue.put(result)
            except Exception as e:
                print(e)

        finally:
            tests_queue.task_done()

    inst.stop()

def expand_suite(suite, target=None):
    """""" recursively expand a TestSuite into a list of TestCase """"""
    if target is None:
        target = []
    for i, test in enumerate(suite):
        if isinstance(test, unittest.TestSuite):
            expand_suite(test, target)
        else:
            target.append(test)

    # randomize both because we don't want tests to have relatively
    # dependency ordering and also because this can help avoid clumping
    # longer running tests together
    random.shuffle(target)
    return target

def queue_jobs(suite):
    """""" expands a test suite and queues it to the runners """"""
    for test in expand_suite(suite):
        tests_queue.put(test)

queue_jobs(suite)
for i in range(args.concurrency):
    t = threading.Thread(target=runner)
    t.daemon = True
    t.start()
    # also send a termination sentinel
    tests_queue.put('terminate')

# Wait for all tests to have been dispatched
tests_queue.join()

# Now pull out and aggregate the results
tests_run = 0
tests_failed = 0
tests_skipped = 0
while not results_queue.empty():
    res = results_queue.get()
    tests_run = tests_run + res.testsRun
    tests_failed = tests_failed + len(res.errors) + len(res.failures)
    tests_skipped = tests_skipped + len(res.skipped)

print('Ran %d, failed %d, skipped %d' % (
    tests_run, tests_failed, tests_skipped))

if tests_failed:
    sys.exit(1)
","#!/usr/bin/env python
# vim:ts=4:sw=4:et:
import unittest
import os
import os.path
import sys
# Ensure that we can find pywatchman
sys.path.append(os.path.join(os.getcwd(), 'python'))
sys.path.append(os.path.join(os.getcwd(), 'tests', 'integration'))
import tempfile
import shutil
import subprocess
import traceback
import time
import argparse
import atexit
import WatchmanTapTests
import WatchmanInstance
import WatchmanTestCase
import glob
import threading
import multiprocessing
import math
import signal
import Interrupt
import random

try:
    import queue
except Exception:
    import Queue
    queue = Queue

parser = argparse.ArgumentParser(
    description=""Run the watchman unit and integration tests"")
parser.add_argument('-v', '--verbosity', default=2,
                    help=""test runner verbosity"")
parser.add_argument(
    ""--keep"",
    action='store_true',
    help=""preserve all temporary files created during test execution"")

parser.add_argument(
    ""files"",
    nargs='*',
    help='specify which test files to run')

parser.add_argument(
    '--method',
    action='append',
    help='specify which python test method names to run')

parser.add_argument(
    '--concurrency',
    default=int(math.ceil(1.5 * multiprocessing.cpu_count())),
    type=int,
    help='How many tests to run at once')

args = parser.parse_args()

# We test for this in a test case
os.environ['WATCHMAN_EMPTY_ENV_VAR'] = ''

# We'll put all our temporary stuff under one dir so that we
# can clean it all up at the end
temp_dir = os.path.realpath(tempfile.mkdtemp(prefix='watchmantest'))
if args.keep:
    atexit.register(sys.stdout.write,
                    'Preserving output in %s\n' % temp_dir)
else:
    atexit.register(shutil.rmtree, temp_dir)
# Redirect all temporary files to that location
tempfile.tempdir = temp_dir


def interrupt_handler(signo, frame):
    Interrupt.setInterrupted()
signal.signal(signal.SIGINT, interrupt_handler)


class Result(unittest.TestResult):
    # Make it easier to spot success/failure by coloring the status
    # green for pass, red for fail and yellow for skip.
    # also print the elapsed time per test
    transport = None
    encoding = None

    def shouldStop(self):
        if Interrupt.wasInterrupted():
            return True
        return super(Result, self).shouldStop()

    def startTest(self, test):
        self.startTime = time.time()
        super(Result, self).startTest(test)

    def setFlavour(self, transport, encoding):
        self.transport = transport
        self.encoding = encoding

    def flavour(self, test):
        if self.transport:
            return '%s [%s, %s]' % (test.id(), self.transport, self.encoding)
        return test.id()

    def addSuccess(self, test):
        elapsed = time.time() - self.startTime
        super(Result, self).addSuccess(test)
        print('\033[32mPASS\033[0m %s (%.3fs)' % (self.flavour(test), elapsed))

    def addSkip(self, test, reason):
        elapsed = time.time() - self.startTime
        super(Result, self).addSkip(test, reason)
        print('\033[33mSKIP\033[0m %s (%.3fs) %s' %
              (self.flavour(test), elapsed, reason))

    def __printFail(self, test, err):
        elapsed = time.time() - self.startTime
        t, val, trace = err
        print('\033[31mFAIL\033[0m %s (%.3fs)\n%s' % (
            self.flavour(test),
            elapsed,
            ''.join(traceback.format_exception(t, val, trace))))

    def addFailure(self, test, err):
        self.__printFail(test, err)
        super(Result, self).addFailure(test, err)

    def addError(self, test, err):
        self.__printFail(test, err)
        super(Result, self).addError(test, err)


def expandFilesList(files):
    """""" expand any dir names into a full list of files """"""
    res = []
    for g in args.files:
        if os.path.isdir(g):
            for dirname, dirs, files in os.walk(g):
                for f in files:
                    if not f.startswith('.'):
                        res.append(os.path.join(dirname, f))
        else:
            res.append(g)
    return res

if args.files:
    args.files = expandFilesList(args.files)


def shouldIncludeTestFile(filename):
    """""" used by our loader to respect the set of tests to run """"""
    global args
    fname = os.path.relpath(filename.replace('.pyc', '.py'))
    if args.files:
        for f in args.files:
            if f == fname:
                return True
        return False

    if args.method:
        # implies python tests only
        if not fname.endswith('.py'):
            return False

    return True

def shouldIncludeTestName(name):
    """""" used by our loader to respect the set of tests to run """"""
    global args
    if args.method:
        method = name.split('.').pop()
        for f in args.method:
            if method == f:
                return True
        return False
    return True


class Loader(unittest.TestLoader):
    """""" allows us to control the subset of which tests are run """"""

    def __init__(self):
        super(Loader, self).__init__()

    def loadTestsFromTestCase(self, testCaseClass):
        return super(Loader, self).loadTestsFromTestCase(testCaseClass)

    def getTestCaseNames(self, testCaseClass):
        names = super(Loader, self).getTestCaseNames(testCaseClass)
        return filter(lambda name: shouldIncludeTestName(name), names)

    def loadTestsFromModule(self, module):
        if not shouldIncludeTestFile(module.__file__):
            return unittest.TestSuite()
        return super(Loader, self).loadTestsFromModule(module)

loader = Loader()
suite = unittest.TestSuite()
for d in ['python/tests', 'tests/integration']:
    suite.addTests(loader.discover(d, top_level_dir=d))
suite.addTests(WatchmanTapTests.discover(
    shouldIncludeTestFile, 'tests/*.t'))
suite.addTests(WatchmanTapTests.discover(
    shouldIncludeTestFile, 'tests/integration/*.php'))

# Manage printing from concurrent threads
# http://stackoverflow.com/a/3030755/149111
class ThreadSafeFile(object):
    def __init__(self, f):
        self.f = f
        self.lock = threading.RLock()
        self.nesting = 0

    def _getlock(self):
        self.lock.acquire()
        self.nesting += 1

    def _droplock(self):
        nesting = self.nesting
        self.nesting = 0
        for i in range(nesting):
            self.lock.release()

    def __getattr__(self, name):
        if name == 'softspace':
            return tls.softspace
        else:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        if name == 'softspace':
            tls.softspace = value
        else:
            return object.__setattr__(self, name, value)

    def write(self, data):
        self._getlock()
        self.f.write(data)
        if data == '\n':
            self._droplock()

sys.stdout = ThreadSafeFile(sys.stdout)

tests_queue = queue.Queue()
results_queue = queue.Queue()

def runner():
    global results_queue
    global tests_queue

    try:
        # Start up a shared watchman instance for the tests.
        inst = WatchmanInstance.Instance()
        inst.start()
        # Allow tests to locate this default instance
        WatchmanInstance.setSharedInstance(inst)
    except Exception as e:
        print('This is going to suck:', e)
        return

    while True:
        test = tests_queue.get()
        try:
            if test == 'terminate':
                break

            if Interrupt.wasInterrupted():
                continue

            try:
                result = Result()
                test.run(result)
                results_queue.put(result)
            except Exception as e:
                print(e)

        finally:
            tests_queue.task_done()

    inst.stop()

def expand_suite(suite, target=None):
    """""" recursively expand a TestSuite into a list of TestCase """"""
    if target is None:
        target = []
    for i, test in enumerate(suite):
        if isinstance(test, unittest.TestSuite):
            expand_suite(test, target)
        elif isinstance(test, WatchmanTestCase.WatchmanTestCase):
            for cfg in test.expandConfigurations():
                target.append(cfg)
        else:
            target.append(test)

    # randomize both because we don't want tests to have relatively
    # dependency ordering and also because this can help avoid clumping
    # longer running tests together
    random.shuffle(target)
    return target

def queue_jobs(tests):
    for test in tests:
        tests_queue.put(test)

all_tests = expand_suite(suite)
if len(all_tests) < args.concurrency:
    args.concurrency = len(all_tests)
queue_jobs(all_tests)

for i in range(args.concurrency):
    t = threading.Thread(target=runner)
    t.daemon = True
    t.start()
    # also send a termination sentinel
    tests_queue.put('terminate')

# Wait for all tests to have been dispatched
tests_queue.join()

# Now pull out and aggregate the results
tests_run = 0
tests_failed = 0
tests_skipped = 0
while not results_queue.empty():
    res = results_queue.get()
    tests_run = tests_run + res.testsRun
    tests_failed = tests_failed + len(res.errors) + len(res.failures)
    tests_skipped = tests_skipped + len(res.skipped)

print('Ran %d, failed %d, skipped %d, concurrency %d' % (
    tests_run, tests_failed, tests_skipped, args.concurrency))

if tests_failed:
    sys.exit(1)
",FALSE,,3836
3805,InitialSO.csv3805.txt,InitialGit.csv3805.txt,3,"raw_input() import sys

def query_yes_no(question, default=""yes""):
    """"""Ask a yes/no question via raw_input() and return their answer.

    ""question"" is a string that is presented to the user.
    ""default"" is the presumed answer if the user just hits <Enter>.
        It must be ""yes"" (the default), ""no"" or None (meaning
        an answer is required of the user).

    The ""answer"" return value is one of ""yes"" or ""no"".
    """"""
    valid = {""yes"": True, ""y"": True, ""ye"": True,
             ""no"": False, ""n"": False}
    if default is None:
        prompt = "" [y/n] ""
    elif default == ""yes"":
        prompt = "" [Y/n] ""
    elif default == ""no"":
        prompt = "" [y/N] ""
    else:
        raise ValueError(""invalid default answer: '%s'"" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write(""Please respond with 'yes' or 'no' ""
                             ""(or 'y' or 'n').\n"")
# Usage example

>>> query_yes_no(""Is cabbage yummier than cauliflower?"")
Is cabbage yummier than cauliflower? [Y/n] oops
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [Y/n] y
>>> True
 ","raw_input() input() import sys


def query_yes_no(question, default=""yes""):
    """"""Ask a yes/no question via raw_input() and return their answer.

    ""question"" is a string that is presented to the user.
    ""default"" is the presumed answer if the user just hits <Enter>.
            It must be ""yes"" (the default), ""no"" or None (meaning
            an answer is required of the user).

    The ""answer"" return value is True for ""yes"" or False for ""no"".
    """"""
    valid = {""yes"": True, ""y"": True, ""ye"": True, ""no"": False, ""n"": False}
    if default is None:
        prompt = "" [y/n] ""
    elif default == ""yes"":
        prompt = "" [Y/n] ""
    elif default == ""no"":
        prompt = "" [y/N] ""
    else:
        raise ValueError(""invalid default answer: '%s'"" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = input().lower()
        if default is not None and choice == """":
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write(""Please respond with 'yes' or 'no' "" ""(or 'y' or 'n').\n"")
 raw_input input >>> query_yes_no(""Is cabbage yummier than cauliflower?"")
Is cabbage yummier than cauliflower? [Y/n] oops
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [Y/n] [ENTER]
>>> True

>>> query_yes_no(""Is cabbage yummier than cauliflower?"", None)
Is cabbage yummier than cauliflower? [y/n] [ENTER]
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [y/n] y
>>> True
 ",FALSE,"#!/usr/bin/env python
# Copyright 2014 The LibYuv Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS. All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

""""""Setup links to a Chromium checkout for Libyuv.

Libyuv shares a lot of dependencies and build tools with Chromium.
To do this, many of the paths of a Chromium checkout is emulated by creating
symlinks to files and directories. This script handles the setup of symlinks to
achieve this.

It's a modified copy of the similar script that lives in WebRTC.
It also handles cleanup of the legacy Subversion-based approach that was used
before Chrome switched over their master repo from Subversion to Git.
""""""


import ctypes
import errno
import logging
import optparse
import os
import shelve
import shutil
import subprocess
import sys
import textwrap


DIRECTORIES = [
  'build',
  'buildtools',
  'google_apis',  # Needed by build/common.gypi.
  'net',
  'testing',
  'third_party/android_testrunner',
  'third_party/android_tools',
  'third_party/binutils',
  'third_party/libc++',
  'third_party/libc++abi',
  'third_party/libjpeg',
  'third_party/libjpeg_turbo',
  'third_party/llvm-build',
  'third_party/nss',
  'third_party/yasm',
  'tools/android',
  'tools/clang',
  'tools/gn',
  'tools/gyp',
  'tools/memory',
  'tools/python',
  'tools/valgrind',
  'tools/win',
]

FILES = {
  '.gn': None,
  'tools/find_depot_tools.py': None,
  'third_party/BUILD.gn': None,
}

CHROMIUM_CHECKOUT = os.path.join('chromium', 'src')
LINKS_DB = 'links'

# Version management to make future upgrades/downgrades easier to support.
SCHEMA_VERSION = 1


def query_yes_no(question, default=False):
  """"""Ask a yes/no question via raw_input() and return their answer.

  Modified from http://stackoverflow.com/a/3041990.
  """"""
  prompt = "" [%s/%%s]: ""
  prompt = prompt % ('Y' if default is True  else 'y')
  prompt = prompt % ('N' if default is False else 'n')

  if default is None:
    default = 'INVALID'

  while True:
    sys.stdout.write(question + prompt)
    choice = raw_input().lower()
    if choice == '' and default != 'INVALID':
      return default

    if 'yes'.startswith(choice):
      return True
    elif 'no'.startswith(choice):
      return False

    print ""Please respond with 'yes' or 'no' (or 'y' or 'n').""


# Actions
class Action(object):
  def __init__(self, dangerous):
    self.dangerous = dangerous

  def announce(self, planning):
    """"""Log a description of this action.

    Args:
      planning - True iff we're in the planning stage, False if we're in the
                 doit stage.
    """"""
    pass

  def doit(self, links_db):
    """"""Execute the action, recording what we did to links_db, if necessary.""""""
    pass


class Remove(Action):
  def __init__(self, path, dangerous):
    super(Remove, self).__init__(dangerous)
    self._priority = 0
    self._path = path

  def announce(self, planning):
    log = logging.warn
    filesystem_type = 'file'
    if not self.dangerous:
      log = logging.info
      filesystem_type = 'link'
    if planning:
      log('Planning to remove %s: %s', filesystem_type, self._path)
    else:
      log('Removing %s: %s', filesystem_type, self._path)

  def doit(self, _links_db):
    os.remove(self._path)


class Rmtree(Action):
  def __init__(self, path):
    super(Rmtree, self).__init__(dangerous=True)
    self._priority = 0
    self._path = path

  def announce(self, planning):
    if planning:
      logging.warn('Planning to remove directory: %s', self._path)
    else:
      logging.warn('Removing directory: %s', self._path)

  def doit(self, _links_db):
    if sys.platform.startswith('win'):
      # shutil.rmtree() doesn't work on Windows if any of the directories are
      # read-only, which svn repositories are.
      subprocess.check_call(['rd', '/q', '/s', self._path], shell=True)
    else:
      shutil.rmtree(self._path)


class Makedirs(Action):
  def __init__(self, path):
    super(Makedirs, self).__init__(dangerous=False)
    self._priority = 1
    self._path = path

  def doit(self, _links_db):
    try:
      os.makedirs(self._path)
    except OSError as e:
      if e.errno != errno.EEXIST:
        raise


class Symlink(Action):
  def __init__(self, source_path, link_path):
    super(Symlink, self).__init__(dangerous=False)
    self._priority = 2
    self._source_path = source_path
    self._link_path = link_path

  def announce(self, planning):
    if planning:
      logging.info(
          'Planning to create link from %s to %s', self._link_path,
          self._source_path)
    else:
      logging.debug(
          'Linking from %s to %s', self._link_path, self._source_path)

  def doit(self, links_db):
    # Files not in the root directory need relative path calculation.
    # On Windows, use absolute paths instead since NTFS doesn't seem to support
    # relative paths for symlinks.
    if sys.platform.startswith('win'):
      source_path = os.path.abspath(self._source_path)
    else:
      if os.path.dirname(self._link_path) != self._link_path:
        source_path = os.path.relpath(self._source_path,
                                      os.path.dirname(self._link_path))

    os.symlink(source_path, os.path.abspath(self._link_path))
    links_db[self._source_path] = self._link_path


class LinkError(IOError):
  """"""Failed to create a link.""""""
  pass


# Handles symlink creation on the different platforms.
if sys.platform.startswith('win'):
  def symlink(source_path, link_path):
    flag = 1 if os.path.isdir(source_path) else 0
    if not ctypes.windll.kernel32.CreateSymbolicLinkW(
        unicode(link_path), unicode(source_path), flag):
      raise OSError('Failed to create symlink to %s. Notice that only NTFS '
                    'version 5.0 and up has all the needed APIs for '
                    'creating symlinks.' % source_path)
  os.symlink = symlink


class LibyuvLinkSetup():
  def __init__(self, links_db, force=False, dry_run=False, prompt=False):
    self._force = force
    self._dry_run = dry_run
    self._prompt = prompt
    self._links_db = links_db

  def CreateLinks(self, on_bot):
    logging.debug('CreateLinks')
    # First, make a plan of action
    actions = []

    for source_path, link_path in FILES.iteritems():
      actions += self._ActionForPath(
          source_path, link_path, check_fn=os.path.isfile, check_msg='files')
    for source_dir in DIRECTORIES:
      actions += self._ActionForPath(
          source_dir, None, check_fn=os.path.isdir,
          check_msg='directories')

    actions.sort()

    if self._dry_run:
      for action in actions:
        action.announce(planning=True)
      logging.info('Not doing anything because dry-run was specified.')
      sys.exit(0)

    if any(a.dangerous for a in actions):
      logging.warn('Dangerous actions:')
      for action in (a for a in actions if a.dangerous):
        action.announce(planning=True)
      print

      if not self._force:
        logging.error(textwrap.dedent(""""""\
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                              A C T I O N     R E Q I R E D
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        Because chromium/src is transitioning to Git (from SVN), we needed to
        change the way that the Libyuv standalone checkout works. Instead of
        individually syncing subdirectories of Chromium in SVN, we're now
        syncing Chromium (and all of its DEPS, as defined by its own DEPS file),
        into the `chromium/src` directory.

        As such, all Chromium directories which are currently pulled by DEPS are
        now replaced with a symlink into the full Chromium checkout.

        To avoid disrupting developers, we've chosen to not delete your
        directories forcibly, in case you have some work in progress in one of
        them :).

        ACTION REQUIRED:
        Before running `gclient sync|runhooks` again, you must run:
        %s%s --force

        Which will replace all directories which now must be symlinks, after
        prompting with a summary of the work-to-be-done.
        """"""), 'python ' if sys.platform.startswith('win') else '', sys.argv[0])
        sys.exit(1)
      elif self._prompt:
        if not query_yes_no('Would you like to perform the above plan?'):
          sys.exit(1)

    for action in actions:
      action.announce(planning=False)
      action.doit(self._links_db)

    if not on_bot and self._force:
      logging.info('Completed!\n\nNow run `gclient sync|runhooks` again to '
                   'let the remaining hooks (that probably were interrupted) '
                   'execute.')

  def CleanupLinks(self):
    logging.debug('CleanupLinks')
    for source, link_path  in self._links_db.iteritems():
      if source == 'SCHEMA_VERSION':
        continue
      if os.path.islink(link_path) or sys.platform.startswith('win'):
        # os.path.islink() always returns false on Windows
        # See http://bugs.python.org/issue13143.
        logging.debug('Removing link to %s at %s', source, link_path)
        if not self._dry_run:
          if os.path.exists(link_path):
            if sys.platform.startswith('win') and os.path.isdir(link_path):
              subprocess.check_call(['rmdir', '/q', link_path], shell=True)
            else:
              os.remove(link_path)
          del self._links_db[source]

  @staticmethod
  def _ActionForPath(source_path, link_path=None, check_fn=None,
                     check_msg=None):
    """"""Create zero or more Actions to link to a file or directory.

    This will be a symlink on POSIX platforms. On Windows this requires
    that NTFS is version 5.0 or higher (Vista or newer).

    Args:
      source_path: Path relative to the Chromium checkout root.
        For readability, the path may contain slashes, which will
        automatically be converted to the right path delimiter on Windows.
      link_path: The location for the link to create. If omitted it will be the
        same path as source_path.
      check_fn: A function returning true if the type of filesystem object is
        correct for the attempted call. Otherwise an error message with
        check_msg will be printed.
      check_msg: String used to inform the user of an invalid attempt to create
        a file.
    Returns:
      A list of Action objects.
    """"""
    def fix_separators(path):
      if sys.platform.startswith('win'):
        return path.replace(os.altsep, os.sep)
      else:
        return path

    assert check_fn
    assert check_msg
    link_path = link_path or source_path
    link_path = fix_separators(link_path)

    source_path = fix_separators(source_path)
    source_path = os.path.join(CHROMIUM_CHECKOUT, source_path)
    if os.path.exists(source_path) and not check_fn:
      raise LinkError('_LinkChromiumPath can only be used to link to %s: '
                      'Tried to link to: %s' % (check_msg, source_path))

    if not os.path.exists(source_path):
      logging.debug('Silently ignoring missing source: %s. This is to avoid '
                    'errors on platform-specific dependencies.', source_path)
      return []

    actions = []

    if os.path.exists(link_path) or os.path.islink(link_path):
      if os.path.islink(link_path):
        actions.append(Remove(link_path, dangerous=False))
      elif os.path.isfile(link_path):
        actions.append(Remove(link_path, dangerous=True))
      elif os.path.isdir(link_path):
        actions.append(Rmtree(link_path))
      else:
        raise LinkError('Don\'t know how to plan: %s' % link_path)

    # Create parent directories to the target link if needed.
    target_parent_dirs = os.path.dirname(link_path)
    if (target_parent_dirs and
        target_parent_dirs != link_path and
        not os.path.exists(target_parent_dirs)):
      actions.append(Makedirs(target_parent_dirs))

    actions.append(Symlink(source_path, link_path))

    return actions

def _initialize_database(filename):
  links_database = shelve.open(filename)

  # Wipe the database if this version of the script ends up looking at a
  # newer (future) version of the links db, just to be sure.
  version = links_database.get('SCHEMA_VERSION')
  if version and version != SCHEMA_VERSION:
    logging.info('Found database with schema version %s while this script only '
                 'supports %s. Wiping previous database contents.', version,
                 SCHEMA_VERSION)
    links_database.clear()
  links_database['SCHEMA_VERSION'] = SCHEMA_VERSION
  return links_database


def main():
  on_bot = os.environ.get('CHROME_HEADLESS') == '1'

  parser = optparse.OptionParser()
  parser.add_option('-d', '--dry-run', action='store_true', default=False,
                    help='Print what would be done, but don\'t perform any '
                         'operations. This will automatically set logging to '
                         'verbose.')
  parser.add_option('-c', '--clean-only', action='store_true', default=False,
                    help='Only clean previously created links, don\'t create '
                         'new ones. This will automatically set logging to '
                         'verbose.')
  parser.add_option('-f', '--force', action='store_true', default=on_bot,
                    help='Force link creation. CAUTION: This deletes existing '
                         'folders and files in the locations where links are '
                         'about to be created.')
  parser.add_option('-n', '--no-prompt', action='store_false', dest='prompt',
                    default=(not on_bot),
                    help='Prompt if we\'re planning to do a dangerous action')
  parser.add_option('-v', '--verbose', action='store_const',
                    const=logging.DEBUG, default=logging.INFO,
                    help='Print verbose output for debugging.')
  options, _ = parser.parse_args()

  if options.dry_run or options.force or options.clean_only:
    options.verbose = logging.DEBUG
  logging.basicConfig(format='%(message)s', level=options.verbose)

  # Work from the root directory of the checkout.
  script_dir = os.path.dirname(os.path.abspath(__file__))
  os.chdir(script_dir)

  if sys.platform.startswith('win'):
    def is_admin():
      try:
        return os.getuid() == 0
      except AttributeError:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    if not is_admin():
      logging.error('On Windows, you now need to have administrator '
                    'privileges for the shell running %s (or '
                    '`gclient sync|runhooks`).\nPlease start another command '
                    'prompt as Administrator and try again.' % sys.argv[0])
      return 1

  if not os.path.exists(CHROMIUM_CHECKOUT):
    logging.error('Cannot find a Chromium checkout at %s. Did you run ""gclient '
                  'sync"" before running this script?', CHROMIUM_CHECKOUT)
    return 2

  links_database = _initialize_database(LINKS_DB)
  try:
    symlink_creator = LibyuvLinkSetup(links_database, options.force,
                                      options.dry_run, options.prompt)
    symlink_creator.CleanupLinks()
    if not options.clean_only:
      symlink_creator.CreateLinks(on_bot)
  except LinkError as e:
    print >> sys.stderr, e.message
    return 3
  finally:
    links_database.close()
  return 0


if __name__ == '__main__':
  sys.exit(main())
","#!/usr/bin/env python
# Copyright 2014 The LibYuv Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS. All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

""""""Setup links to a Chromium checkout for Libyuv.

Libyuv shares a lot of dependencies and build tools with Chromium.
To do this, many of the paths of a Chromium checkout is emulated by creating
symlinks to files and directories. This script handles the setup of symlinks to
achieve this.

It's a modified copy of the similar script that lives in WebRTC.
It also handles cleanup of the legacy Subversion-based approach that was used
before Chrome switched over their master repo from Subversion to Git.
""""""


import ctypes
import errno
import logging
import optparse
import os
import shelve
import shutil
import subprocess
import sys
import textwrap


DIRECTORIES = [
  'build',
  'buildtools',
  'google_apis',  # Needed by build/common.gypi.
  'net',
  'testing',
  'third_party/android_testrunner',
  'third_party/android_tools',
  'third_party/binutils',
  'third_party/libjpeg',
  'third_party/libjpeg_turbo',
  'third_party/libudev',
  'third_party/llvm-build',
  'third_party/nss',
  'third_party/yasm',
  'tools/android',
  'tools/clang',
  'tools/generate_library_loader',
  'tools/gn',
  'tools/gyp',
  'tools/memory',
  'tools/python',
  'tools/valgrind',
  'tools/win',
]

FILES = {
  '.gn': None,
  'tools/find_depot_tools.py': None,
  'third_party/BUILD.gn': None,
}

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
CHROMIUM_CHECKOUT = os.path.join('chromium', 'src')
LINKS_DB = 'links'

# Version management to make future upgrades/downgrades easier to support.
SCHEMA_VERSION = 1


def query_yes_no(question, default=False):
  """"""Ask a yes/no question via raw_input() and return their answer.

  Modified from http://stackoverflow.com/a/3041990.
  """"""
  prompt = "" [%s/%%s]: ""
  prompt = prompt % ('Y' if default is True  else 'y')
  prompt = prompt % ('N' if default is False else 'n')

  if default is None:
    default = 'INVALID'

  while True:
    sys.stdout.write(question + prompt)
    choice = raw_input().lower()
    if choice == '' and default != 'INVALID':
      return default

    if 'yes'.startswith(choice):
      return True
    elif 'no'.startswith(choice):
      return False

    print ""Please respond with 'yes' or 'no' (or 'y' or 'n').""


# Actions
class Action(object):
  def __init__(self, dangerous):
    self.dangerous = dangerous

  def announce(self, planning):
    """"""Log a description of this action.

    Args:
      planning - True iff we're in the planning stage, False if we're in the
                 doit stage.
    """"""
    pass

  def doit(self, links_db):
    """"""Execute the action, recording what we did to links_db, if necessary.""""""
    pass


class Remove(Action):
  def __init__(self, path, dangerous):
    super(Remove, self).__init__(dangerous)
    self._priority = 0
    self._path = path

  def announce(self, planning):
    log = logging.warn
    filesystem_type = 'file'
    if not self.dangerous:
      log = logging.info
      filesystem_type = 'link'
    if planning:
      log('Planning to remove %s: %s', filesystem_type, self._path)
    else:
      log('Removing %s: %s', filesystem_type, self._path)

  def doit(self, _links_db):
    os.remove(self._path)


class Rmtree(Action):
  def __init__(self, path):
    super(Rmtree, self).__init__(dangerous=True)
    self._priority = 0
    self._path = path

  def announce(self, planning):
    if planning:
      logging.warn('Planning to remove directory: %s', self._path)
    else:
      logging.warn('Removing directory: %s', self._path)

  def doit(self, _links_db):
    if sys.platform.startswith('win'):
      # shutil.rmtree() doesn't work on Windows if any of the directories are
      # read-only, which svn repositories are.
      subprocess.check_call(['rd', '/q', '/s', self._path], shell=True)
    else:
      shutil.rmtree(self._path)


class Makedirs(Action):
  def __init__(self, path):
    super(Makedirs, self).__init__(dangerous=False)
    self._priority = 1
    self._path = path

  def doit(self, _links_db):
    try:
      os.makedirs(self._path)
    except OSError as e:
      if e.errno != errno.EEXIST:
        raise


class Symlink(Action):
  def __init__(self, source_path, link_path):
    super(Symlink, self).__init__(dangerous=False)
    self._priority = 2
    self._source_path = source_path
    self._link_path = link_path

  def announce(self, planning):
    if planning:
      logging.info(
          'Planning to create link from %s to %s', self._link_path,
          self._source_path)
    else:
      logging.debug(
          'Linking from %s to %s', self._link_path, self._source_path)

  def doit(self, links_db):
    # Files not in the root directory need relative path calculation.
    # On Windows, use absolute paths instead since NTFS doesn't seem to support
    # relative paths for symlinks.
    if sys.platform.startswith('win'):
      source_path = os.path.abspath(self._source_path)
    else:
      if os.path.dirname(self._link_path) != self._link_path:
        source_path = os.path.relpath(self._source_path,
                                      os.path.dirname(self._link_path))

    os.symlink(source_path, os.path.abspath(self._link_path))
    links_db[self._source_path] = self._link_path


class LinkError(IOError):
  """"""Failed to create a link.""""""
  pass


# Handles symlink creation on the different platforms.
if sys.platform.startswith('win'):
  def symlink(source_path, link_path):
    flag = 1 if os.path.isdir(source_path) else 0
    if not ctypes.windll.kernel32.CreateSymbolicLinkW(
        unicode(link_path), unicode(source_path), flag):
      raise OSError('Failed to create symlink to %s. Notice that only NTFS '
                    'version 5.0 and up has all the needed APIs for '
                    'creating symlinks.' % source_path)
  os.symlink = symlink


class LibyuvLinkSetup():
  def __init__(self, links_db, force=False, dry_run=False, prompt=False):
    self._force = force
    self._dry_run = dry_run
    self._prompt = prompt
    self._links_db = links_db

  def CreateLinks(self, on_bot):
    logging.debug('CreateLinks')
    # First, make a plan of action
    actions = []

    for source_path, link_path in FILES.iteritems():
      actions += self._ActionForPath(
          source_path, link_path, check_fn=os.path.isfile, check_msg='files')
    for source_dir in DIRECTORIES:
      actions += self._ActionForPath(
          source_dir, None, check_fn=os.path.isdir,
          check_msg='directories')

    if not on_bot and self._force:
      # When making the manual switch from legacy SVN checkouts to the new
      # Git-based Chromium DEPS, the .gclient_entries file that contains cached
      # URLs for all DEPS entries must be removed to avoid future sync problems.
      entries_file = os.path.join(os.path.dirname(ROOT_DIR), '.gclient_entries')
      if os.path.exists(entries_file):
        actions.append(Remove(entries_file, dangerous=True))

    actions.sort()

    if self._dry_run:
      for action in actions:
        action.announce(planning=True)
      logging.info('Not doing anything because dry-run was specified.')
      sys.exit(0)

    if any(a.dangerous for a in actions):
      logging.warn('Dangerous actions:')
      for action in (a for a in actions if a.dangerous):
        action.announce(planning=True)
      print

      if not self._force:
        logging.error(textwrap.dedent(""""""\
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                              A C T I O N     R E Q I R E D
        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

        Because chromium/src is transitioning to Git (from SVN), we needed to
        change the way that the Libyuv standalone checkout works. Instead of
        individually syncing subdirectories of Chromium in SVN, we're now
        syncing Chromium (and all of its DEPS, as defined by its own DEPS file),
        into the `chromium/src` directory.

        As such, all Chromium directories which are currently pulled by DEPS are
        now replaced with a symlink into the full Chromium checkout.

        To avoid disrupting developers, we've chosen to not delete your
        directories forcibly, in case you have some work in progress in one of
        them :).

        ACTION REQUIRED:
        Before running `gclient sync|runhooks` again, you must run:
        %s%s --force

        Which will replace all directories which now must be symlinks, after
        prompting with a summary of the work-to-be-done.
        """"""), 'python ' if sys.platform.startswith('win') else '', sys.argv[0])
        sys.exit(1)
      elif self._prompt:
        if not query_yes_no('Would you like to perform the above plan?'):
          sys.exit(1)

    for action in actions:
      action.announce(planning=False)
      action.doit(self._links_db)

    if not on_bot and self._force:
      logging.info('Completed!\n\nNow run `gclient sync|runhooks` again to '
                   'let the remaining hooks (that probably were interrupted) '
                   'execute.')

  def CleanupLinks(self):
    logging.debug('CleanupLinks')
    for source, link_path  in self._links_db.iteritems():
      if source == 'SCHEMA_VERSION':
        continue
      if os.path.islink(link_path) or sys.platform.startswith('win'):
        # os.path.islink() always returns false on Windows
        # See http://bugs.python.org/issue13143.
        logging.debug('Removing link to %s at %s', source, link_path)
        if not self._dry_run:
          if os.path.exists(link_path):
            if sys.platform.startswith('win') and os.path.isdir(link_path):
              subprocess.check_call(['rmdir', '/q', link_path], shell=True)
            else:
              os.remove(link_path)
          del self._links_db[source]

  @staticmethod
  def _ActionForPath(source_path, link_path=None, check_fn=None,
                     check_msg=None):
    """"""Create zero or more Actions to link to a file or directory.

    This will be a symlink on POSIX platforms. On Windows this requires
    that NTFS is version 5.0 or higher (Vista or newer).

    Args:
      source_path: Path relative to the Chromium checkout root.
        For readability, the path may contain slashes, which will
        automatically be converted to the right path delimiter on Windows.
      link_path: The location for the link to create. If omitted it will be the
        same path as source_path.
      check_fn: A function returning true if the type of filesystem object is
        correct for the attempted call. Otherwise an error message with
        check_msg will be printed.
      check_msg: String used to inform the user of an invalid attempt to create
        a file.
    Returns:
      A list of Action objects.
    """"""
    def fix_separators(path):
      if sys.platform.startswith('win'):
        return path.replace(os.altsep, os.sep)
      else:
        return path

    assert check_fn
    assert check_msg
    link_path = link_path or source_path
    link_path = fix_separators(link_path)

    source_path = fix_separators(source_path)
    source_path = os.path.join(CHROMIUM_CHECKOUT, source_path)
    if os.path.exists(source_path) and not check_fn:
      raise LinkError('_LinkChromiumPath can only be used to link to %s: '
                      'Tried to link to: %s' % (check_msg, source_path))

    if not os.path.exists(source_path):
      logging.debug('Silently ignoring missing source: %s. This is to avoid '
                    'errors on platform-specific dependencies.', source_path)
      return []

    actions = []

    if os.path.exists(link_path) or os.path.islink(link_path):
      if os.path.islink(link_path):
        actions.append(Remove(link_path, dangerous=False))
      elif os.path.isfile(link_path):
        actions.append(Remove(link_path, dangerous=True))
      elif os.path.isdir(link_path):
        actions.append(Rmtree(link_path))
      else:
        raise LinkError('Don\'t know how to plan: %s' % link_path)

    # Create parent directories to the target link if needed.
    target_parent_dirs = os.path.dirname(link_path)
    if (target_parent_dirs and
        target_parent_dirs != link_path and
        not os.path.exists(target_parent_dirs)):
      actions.append(Makedirs(target_parent_dirs))

    actions.append(Symlink(source_path, link_path))

    return actions

def _initialize_database(filename):
  links_database = shelve.open(filename)

  # Wipe the database if this version of the script ends up looking at a
  # newer (future) version of the links db, just to be sure.
  version = links_database.get('SCHEMA_VERSION')
  if version and version != SCHEMA_VERSION:
    logging.info('Found database with schema version %s while this script only '
                 'supports %s. Wiping previous database contents.', version,
                 SCHEMA_VERSION)
    links_database.clear()
  links_database['SCHEMA_VERSION'] = SCHEMA_VERSION
  return links_database


def main():
  on_bot = os.environ.get('CHROME_HEADLESS') == '1'

  parser = optparse.OptionParser()
  parser.add_option('-d', '--dry-run', action='store_true', default=False,
                    help='Print what would be done, but don\'t perform any '
                         'operations. This will automatically set logging to '
                         'verbose.')
  parser.add_option('-c', '--clean-only', action='store_true', default=False,
                    help='Only clean previously created links, don\'t create '
                         'new ones. This will automatically set logging to '
                         'verbose.')
  parser.add_option('-f', '--force', action='store_true', default=on_bot,
                    help='Force link creation. CAUTION: This deletes existing '
                         'folders and files in the locations where links are '
                         'about to be created.')
  parser.add_option('-n', '--no-prompt', action='store_false', dest='prompt',
                    default=(not on_bot),
                    help='Prompt if we\'re planning to do a dangerous action')
  parser.add_option('-v', '--verbose', action='store_const',
                    const=logging.DEBUG, default=logging.INFO,
                    help='Print verbose output for debugging.')
  options, _ = parser.parse_args()

  if options.dry_run or options.force or options.clean_only:
    options.verbose = logging.DEBUG
  logging.basicConfig(format='%(message)s', level=options.verbose)

  # Work from the root directory of the checkout.
  script_dir = os.path.dirname(os.path.abspath(__file__))
  os.chdir(script_dir)

  if sys.platform.startswith('win'):
    def is_admin():
      try:
        return os.getuid() == 0
      except AttributeError:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    if not is_admin():
      logging.error('On Windows, you now need to have administrator '
                    'privileges for the shell running %s (or '
                    '`gclient sync|runhooks`).\nPlease start another command '
                    'prompt as Administrator and try again.' % sys.argv[0])
      return 1

  if not os.path.exists(CHROMIUM_CHECKOUT):
    logging.error('Cannot find a Chromium checkout at %s. Did you run ""gclient '
                  'sync"" before running this script?', CHROMIUM_CHECKOUT)
    return 2

  links_database = _initialize_database(LINKS_DB)
  try:
    symlink_creator = LibyuvLinkSetup(links_database, options.force,
                                      options.dry_run, options.prompt)
    symlink_creator.CleanupLinks()
    if not options.clean_only:
      symlink_creator.CreateLinks(on_bot)
  except LinkError as e:
    print >> sys.stderr, e.message
    return 3
  finally:
    links_database.close()
  return 0


if __name__ == '__main__':
  sys.exit(main())
",FALSE,,3838
3812,InitialSO.csv3812.txt,InitialGit.csv3812.txt,4,"public static void flushAllLogs()
{
    try
    {
        Set<FileAppender> flushedFileAppenders = new HashSet<FileAppender>();
        Enumeration currentLoggers = LogManager.getLoggerRepository().getCurrentLoggers();
        while(currentLoggers.hasMoreElements())
        {
            Object nextLogger = currentLoggers.nextElement();
            if(nextLogger instanceof Logger)
            {
                Logger currentLogger = (Logger) nextLogger;
                Enumeration allAppenders = currentLogger.getAllAppenders();
                while(allAppenders.hasMoreElements())
                {
                    Object nextElement = allAppenders.nextElement();
                    if(nextElement instanceof FileAppender)
                    {
                        FileAppender fileAppender = (FileAppender) nextElement;
                        if(!flushedFileAppenders.contains(fileAppender) && !fileAppender.getImmediateFlush())
                        {
                            flushedFileAppenders.add(fileAppender);
                            //log.info(""Appender ""+fileAppender.getName()+"" is not doing immediateFlush "");
                            fileAppender.setImmediateFlush(true);
                            currentLogger.info(""FLUSH"");
                            fileAppender.setImmediateFlush(false);
                        }
                        else
                        {
                            //log.info(""fileAppender""+fileAppender.getName()+"" is doing immediateFlush"");
                        }
                    }
                }
            }
        }
    }
    catch(RuntimeException e)
    {
        log.error(""Failed flushing logs"",e);
    }
}
 ","public static void flushAllLogs()
{
    try
    {
        Set<FileAppender> flushedFileAppenders = new HashSet<FileAppender>();
        Enumeration currentLoggers = LogManager.getLoggerRepository().getCurrentLoggers();
        while(currentLoggers.hasMoreElements())
        {
            Object nextLogger = currentLoggers.nextElement();
            if(nextLogger instanceof Logger)
            {
                Logger currentLogger = (Logger) nextLogger;
                Enumeration allAppenders = currentLogger.getAllAppenders();
                while(allAppenders.hasMoreElements())
                {
                    Object nextElement = allAppenders.nextElement();
                    if(nextElement instanceof FileAppender)
                    {
                        FileAppender fileAppender = (FileAppender) nextElement;
                        if(!flushedFileAppenders.contains(fileAppender) && !fileAppender.getImmediateFlush())
                        {
                            flushedFileAppenders.add(fileAppender);
                            //log.info(""Appender ""+fileAppender.getName()+"" is not doing immediateFlush "");
                            fileAppender.setImmediateFlush(true);
                            currentLogger.info(""FLUSH"");
                            fileAppender.setImmediateFlush(false);
                        }
                        else
                        {
                            //log.info(""fileAppender""+fileAppender.getName()+"" is doing immediateFlush"");
                        }
                    }
                }
            }
        }
    }
    catch(RuntimeException e)
    {
        log.error(""Failed flushing logs"",e);
    }
}
 ",TRUE,"package edu.brown.logging;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.log4j.Appender;
import org.apache.log4j.FileAppender;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggerRepository;

import edu.brown.hstore.HStore;
import edu.brown.hstore.HStoreConstants;
import edu.brown.hstore.HStoreSite;
import edu.brown.hstore.HStoreThreadManager;
import edu.brown.utils.CollectionUtil;
import edu.brown.utils.EventObservable;
import edu.brown.utils.EventObserver;
import edu.brown.utils.FileUtil;

/**
 * Hack to hook in log4j.properties
 * @author pavlo
 */
public abstract class LoggerUtil {

    private static final String LOG4J_FILENAME = ""log4j.properties"";
    private static File PROPERTIES_FILE = null;
    private static LoggerCheck REFRESH_CHECKER = null;
    private static Thread REFRESH_THREAD = null;
    private static long LAST_TIMESTAMP = 0;
    private static final EventObservable<Object> OBSERVABLE = new EventObservable<Object>();
    private static HStoreThreadManager THREAD_MANAGER;
    
    /**
     * Simple boolean object used to determine whether to output a log4j message.
     * When this object is attached to the LoggerUtil observerable, it will automatically
     * get updated when its corresponding logger's debug level changes.
     * I did this so that I didn't have to call LOG.isDebugEnabled() all over the place.
     * @author pavlo
     */
    public static class LoggerBoolean {
        /**
         * Whether the log output tracked by this object is set to enabled.
         * This will be updated automatically if this LoggerBoolean is attached
         * to the LoggerObserver managed by the LoggerUtil.
         */
        public boolean val;
    
        public LoggerBoolean() {
            this(false);
        }
        @Deprecated
        public LoggerBoolean(boolean val) {
            this.val = val;
        }
        public void set(boolean val) {
            this.val = val;
        }
        @Override
        public String toString() {
            return Boolean.toString(this.val);
        }
    }
    
    private static class LoggerObserver extends EventObserver<Object> {
        
        private final Logger logger;
        private final LoggerBoolean debug;
        private final LoggerBoolean trace;
        
        public LoggerObserver(Logger logger, LoggerBoolean debug, LoggerBoolean trace) {
            this.logger = logger;
            this.debug = debug;
            this.trace = trace;
            
            if (this.debug != null) this.debug.set(logger.isDebugEnabled());
            if (this.trace != null) this.trace.set(logger.isTraceEnabled());
        }
        
        @Override
        public void update(EventObservable<Object> o, Object arg) {
            if (this.debug != null) this.debug.set(this.logger.isDebugEnabled());
            if (this.trace != null) this.trace.set(this.logger.isTraceEnabled());
        }
    }
    
    private static class AtomicObserver extends EventObserver<Object> {
        
        private final Logger logger;
        private final AtomicBoolean debug;
        private final AtomicBoolean trace;
        
        public AtomicObserver(Logger logger, AtomicBoolean debug, AtomicBoolean trace) {
            this.logger = logger;
            this.debug = debug;
            this.trace = trace;
        }
        
        @Override
        public void update(EventObservable<Object> o, Object arg) {
            this.debug.lazySet(this.logger.isDebugEnabled());
            this.trace.lazySet(this.logger.isTraceEnabled());
        }
    }
    
    private static class LoggerCheck implements Runnable {
        private long interval;
        
        public LoggerCheck(long interval) {
            this.interval = interval;
        }
        
        public void run() {
            if (PROPERTIES_FILE == null) setupLogging();
            Thread self = Thread.currentThread();
            self.setName(HStoreConstants.THREAD_NAME_LOGGING);
            
            while (!self.isInterrupted()) {
                try {
                    Thread.sleep(this.interval);
                } catch (InterruptedException ex) {
                    break;
                }
                
                // HACK: Look for an HStoreSite so that we can set our name properly
                // This probably doesn't need to be synchronized
                if (THREAD_MANAGER == null) {
                    synchronized (LoggerUtil.class) {
                        if (THREAD_MANAGER == null) {
                            HStoreSite hstore_site = HStore.instance();
                            if (hstore_site != null) {
                                String name = HStoreThreadManager.getThreadName(hstore_site, HStoreConstants.THREAD_NAME_LOGGING);
                                self.setName(name);
                                THREAD_MANAGER = hstore_site.getThreadManager();
                                THREAD_MANAGER.registerProcessingThread();
                            }
                        }
                    } // SYNCH
                }
                
                // Refresh our configuration if the file has changed
                if (PROPERTIES_FILE != null && LAST_TIMESTAMP != PROPERTIES_FILE.lastModified()) {
                    loadConfiguration(PROPERTIES_FILE);
                    assert(PROPERTIES_FILE != null);
                    Logger.getRootLogger().info(""Refreshed log4j configuration ["" + PROPERTIES_FILE.getAbsolutePath() + ""]"");
                    LoggerUtil.OBSERVABLE.notifyObservers();
                }
            }
        }
    }
    
    public static synchronized void setupLogging() {
        if (PROPERTIES_FILE != null) return;
        
        // Hack for testing...
        List<String> paths = new ArrayList<String>();
        String log4jPath = System.getProperty(""log4j.configuration"", LOG4J_FILENAME); 
        paths.add(log4jPath);
//        System.err.println(log4jPath + "" -> "" + FileUtil.exists(log4jPath));
        
        for (String p : paths) {
            File file = new File(p);
            if (file.exists()) {
                loadConfiguration(file);
                break;
            }
        } // FOR
        // Hack! Load in the root directory one. This is just hack to remove the
        // warning message from FileUtil
        try {
            File findFile = FileUtil.findFile(LOG4J_FILENAME);
            if (findFile != null && findFile.exists()) loadConfiguration(findFile);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        LoggerUtil.refreshLogging(30000); // 180000l); // 3 min
    }
    
    protected static synchronized void loadConfiguration(File file) {
        org.apache.log4j.PropertyConfigurator.configure(file.getAbsolutePath());
        Logger.getRootLogger().debug(""Loaded log4j configuration file '"" + file.getAbsolutePath() + ""'"");
        PROPERTIES_FILE = file;
        LAST_TIMESTAMP = file.lastModified();
    }
    
    public static synchronized void refreshLogging(final long interval) {
        if (REFRESH_THREAD == null) {
            Logger.getRootLogger().debug(""Starting log4j refresh thread [update interval = "" + interval + ""]"");
            REFRESH_CHECKER = new LoggerCheck(interval);
            REFRESH_THREAD = new Thread(REFRESH_CHECKER);
            REFRESH_THREAD.setPriority(Thread.MIN_PRIORITY);
            REFRESH_THREAD.setDaemon(true);
            REFRESH_THREAD.start();
            
            // We need to update all of our observers the first time
            LoggerUtil.OBSERVABLE.notifyObservers();
        } else if (interval != REFRESH_CHECKER.interval) {
            REFRESH_CHECKER.interval = interval;
        }
    }
    
    /**
     * Flush the appenders for all of the active loggers
     */
    public static void flushAllLogs() {
        LoggerRepository loggerRepo = LogManager.getLoggerRepository();
        for (Logger logger : CollectionUtil.iterable(loggerRepo.getCurrentLoggers(), Logger.class)) {
            LoggerUtil.flushLogs(logger);
        } // FOR
    }
    
    /**
     * From http://stackoverflow.com/a/3187802/42171
     */
    public static void flushLogs(Logger logger) {
        Logger root = Logger.getRootLogger();
        Set<FileAppender> flushed = new HashSet<FileAppender>();
        try {
            for (Appender appender : CollectionUtil.iterable(logger.getAllAppenders(), Appender.class)) {
                if (appender instanceof FileAppender) {
                    FileAppender fileAppender = (FileAppender)appender;
                    synchronized (fileAppender) {
                        if (!flushed.contains(fileAppender) && !fileAppender.getImmediateFlush()) {
                            root.info(String.format(""Appender %s.%s is not doing an immediateFlush"",
                                      logger.getName(), appender.getName()));
                            fileAppender.setImmediateFlush(true);
                            logger.info(""FLUSH"");
                            fileAppender.setImmediateFlush(false);
                            flushed.add(fileAppender);
                        } else {
                            root.info(String.format(""Appender %s.%s is doing an immediateFlush"",
                                      logger.getName(), appender.getName()));
                        }
                    } // SYNCH
                } else {
                    root.debug(String.format(""Unable to flush non-file appender %s.%s"",
                               logger.getName(), appender.getName()));
                }
            } // FOR (appender)
        } catch (Throwable ex) {
            root.error(""Failed flushing logs for "" + logger, ex);
        }
    }
    
    /**
     * Add the LoggerBooleans to be automatically updated by the LoggerUtil thread.
     * @param logger
     * @param debug
     * @param trace
     */
    public static void attachObserver(Logger logger, LoggerBoolean debug, LoggerBoolean trace) {
        LoggerUtil.attachObserver(new LoggerObserver(logger, debug, trace));
    }
    
    public static void attachObserver(Logger logger, LoggerBoolean debug) {
        LoggerUtil.attachObserver(new LoggerObserver(logger, debug, null));
    }
    
    public static void attachObserver(Logger logger, AtomicBoolean debug, AtomicBoolean trace) {
        LoggerUtil.attachObserver(new AtomicObserver(logger, debug, trace));
    }
    
    public static void attachObserver(EventObserver<Object> observer) {
        observer.update(null, null);
        LoggerUtil.OBSERVABLE.addObserver(observer);
    }

}
","package edu.brown.logging;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.log4j.Appender;
import org.apache.log4j.FileAppender;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.spi.LoggerRepository;

import edu.brown.hstore.HStore;
import edu.brown.hstore.HStoreConstants;
import edu.brown.hstore.HStoreSite;
import edu.brown.hstore.HStoreThreadManager;
import edu.brown.utils.CollectionUtil;
import edu.brown.utils.EventObservable;
import edu.brown.utils.EventObserver;
import edu.brown.utils.FileUtil;

/**
 * Hack to hook in log4j.properties
 * @author pavlo
 */
public abstract class LoggerUtil {

    private static final String LOG4J_FILENAME = ""log4j.properties"";
    private static File PROPERTIES_FILE = null;
    private static LoggerCheck REFRESH_CHECKER = null;
    private static Thread REFRESH_THREAD = null;
    private static long LAST_TIMESTAMP = 0;
    private static final EventObservable<Object> OBSERVABLE = new EventObservable<Object>();
    private static HStoreThreadManager THREAD_MANAGER;
    
    /**
     * Simple boolean object used to determine whether to output a log4j message.
     * When this object is attached to the LoggerUtil observerable, it will automatically
     * get updated when its corresponding logger's debug level changes.
     * I did this so that I didn't have to call LOG.isDebugEnabled() all over the place.
     * @author pavlo
     */
    public static class LoggerBoolean {
        /**
         * Whether the log output tracked by this object is set to enabled.
         * This will be updated automatically if this LoggerBoolean is attached
         * to the LoggerObserver managed by the LoggerUtil.
         */
        public boolean val;
    
        public LoggerBoolean() {
            this(false);
        }
        @Deprecated
        public LoggerBoolean(boolean val) {
            this.val = val;
        }
        public void set(boolean val) {
            this.val = val;
        }
        @Override
        public String toString() {
            return Boolean.toString(this.val);
        }
    }
    
    private static class LoggerObserver extends EventObserver<Object> {
        
        private final Logger logger;
        private final LoggerBoolean debug;
        private final LoggerBoolean trace;
        
        public LoggerObserver(Logger logger, LoggerBoolean debug, LoggerBoolean trace) {
            this.logger = logger;
            this.debug = debug;
            this.trace = trace;
            
            if (this.debug != null) this.debug.set(logger.isDebugEnabled());
            if (this.trace != null) this.trace.set(logger.isTraceEnabled());
        }
        
        @Override
        public void update(EventObservable<Object> o, Object arg) {
            if (this.debug != null) this.debug.set(this.logger.isDebugEnabled());
            if (this.trace != null) this.trace.set(this.logger.isTraceEnabled());
        }
    }
    
    private static class AtomicObserver extends EventObserver<Object> {
        
        private final Logger logger;
        private final AtomicBoolean debug;
        private final AtomicBoolean trace;
        
        public AtomicObserver(Logger logger, AtomicBoolean debug, AtomicBoolean trace) {
            this.logger = logger;
            this.debug = debug;
            this.trace = trace;
        }
        
        @Override
        public void update(EventObservable<Object> o, Object arg) {
            this.debug.lazySet(this.logger.isDebugEnabled());
            this.trace.lazySet(this.logger.isTraceEnabled());
        }
    }
    
    private static class LoggerCheck implements Runnable {
        private long interval;
        
        public LoggerCheck(long interval) {
            this.interval = interval;
        }
        
        public void run() {
            if (PROPERTIES_FILE == null) setupLogging();
            Thread self = Thread.currentThread();
            self.setName(HStoreConstants.THREAD_NAME_LOGGING);
            
            while (!self.isInterrupted()) {
                try {
                    Thread.sleep(this.interval);
                } catch (InterruptedException ex) {
                    break;
                }
                
                // HACK: Look for an HStoreSite so that we can set our name properly
                // This probably doesn't need to be synchronized
                if (THREAD_MANAGER == null) {
                    synchronized (LoggerUtil.class) {
                        if (THREAD_MANAGER == null) {
                            HStoreSite hstore_site = HStore.instance();
                            if (hstore_site != null) {
                                String name = HStoreThreadManager.getThreadName(hstore_site, HStoreConstants.THREAD_NAME_LOGGING);
                                self.setName(name);
                                THREAD_MANAGER = hstore_site.getThreadManager();
                                THREAD_MANAGER.registerProcessingThread();
                            }
                        }
                    } // SYNCH
                }
                
                // Refresh our configuration if the file has changed
                if (PROPERTIES_FILE != null && LAST_TIMESTAMP != PROPERTIES_FILE.lastModified()) {
                    loadConfiguration(PROPERTIES_FILE);
                    assert(PROPERTIES_FILE != null);
                    Logger.getRootLogger().info(""Refreshed log4j configuration ["" + PROPERTIES_FILE.getAbsolutePath() + ""]"");
                    LoggerUtil.OBSERVABLE.notifyObservers();
                }
            }
        }
    }
    
    public static synchronized void setupLogging() {
        if (PROPERTIES_FILE != null) return;
        
        // Hack for testing...
        List<String> paths = new ArrayList<String>();
        String log4jPath = System.getProperty(""log4j.configuration"", LOG4J_FILENAME); 
        paths.add(log4jPath);
//        System.err.println(log4jPath + "" -> "" + FileUtil.exists(log4jPath));
        
        for (String p : paths) {
            File file = new File(p);
            if (file.exists()) {
                loadConfiguration(file);
                break;
            }
        } // FOR
        // Hack! Load in the root directory one. This is just hack to remove the
        // warning message from FileUtil
        try {
            File findFile = FileUtil.findFile(LOG4J_FILENAME);
            if (findFile != null && findFile.exists()) loadConfiguration(findFile);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        LoggerUtil.refreshLogging(30000); // 180000l); // 3 min
    }
    
    protected static synchronized void loadConfiguration(File file) {
        org.apache.log4j.PropertyConfigurator.configure(file.getAbsolutePath());
        Logger.getRootLogger().debug(""Loaded log4j configuration file '"" + file.getAbsolutePath() + ""'"");
        PROPERTIES_FILE = file;
        LAST_TIMESTAMP = file.lastModified();
    }
    
    public static synchronized void refreshLogging(final long interval) {
        if (REFRESH_THREAD == null) {
            Logger.getRootLogger().debug(""Starting log4j refresh thread [update interval = "" + interval + ""]"");
            REFRESH_CHECKER = new LoggerCheck(interval);
            REFRESH_THREAD = new Thread(REFRESH_CHECKER);
            REFRESH_THREAD.setPriority(Thread.MIN_PRIORITY);
            REFRESH_THREAD.setDaemon(true);
            REFRESH_THREAD.start();
            
            // We need to update all of our observers the first time
            LoggerUtil.OBSERVABLE.notifyObservers();
        } else if (interval != REFRESH_CHECKER.interval) {
            REFRESH_CHECKER.interval = interval;
        }
    }
    
    /**
     * Flush the appenders for all of the active loggers
     */
    public static void flushAllLogs() {
        LoggerRepository loggerRepo = LogManager.getLoggerRepository();
        for (Logger logger : CollectionUtil.iterable(loggerRepo.getCurrentLoggers(), Logger.class)) {
            LoggerUtil.flushLogs(logger);
        } // FOR
    }
    
    /**
     * From http://stackoverflow.com/a/3187802/42171
     */
    public static void flushLogs(Logger logger) {
        Logger root = Logger.getRootLogger();
        Set<FileAppender> flushed = new HashSet<FileAppender>();
        try {
            for (Appender appender : CollectionUtil.iterable(logger.getAllAppenders(), Appender.class)) {
                if (appender instanceof FileAppender) {
                    FileAppender fileAppender = (FileAppender)appender;
                    synchronized (fileAppender) {
                        if (!flushed.contains(fileAppender) && !fileAppender.getImmediateFlush()) {
                            root.info(String.format(""Appender %s.%s is not doing an immediateFlush"",
                                      logger.getName(), appender.getName()));
                            fileAppender.setImmediateFlush(true);
                            logger.info(""FLUSH"");
                            fileAppender.setImmediateFlush(false);
                            flushed.add(fileAppender);
                        } else {
                            root.info(String.format(""Appender %s.%s is doing an immediateFlush"",
                                      logger.getName(), appender.getName()));
                        }
                    } // SYNCH
                } else {
                    root.debug(String.format(""Unable to flush non-file appender %s.%s"",
                               logger.getName(), appender.getName()));
                }
            } // FOR (appender)
        } catch (Throwable ex) {
            root.error(""Failed flushing logs for "" + logger, ex);
        }
    }
    
    /**
     * Add the LoggerBooleans to be automatically updated by the LoggerUtil thread.
     * @param logger
     * @param debug
     * @param trace
     */
    public static void attachObserver(Logger logger, LoggerBoolean debug, LoggerBoolean trace) {
        LoggerUtil.attachObserver(new LoggerObserver(logger, debug, trace));
    }
    
    public static void attachObserver(Logger logger, LoggerBoolean debug) {
        LoggerUtil.attachObserver(new LoggerObserver(logger, debug, null));
    }
    
    public static void attachObserver(Logger logger, AtomicBoolean debug, AtomicBoolean trace) {
        LoggerUtil.attachObserver(new AtomicObserver(logger, debug, trace));
    }
    
    public static void attachObserver(EventObserver<Object> observer) {
        observer.update(null, null);
        LoggerUtil.OBSERVABLE.addObserver(observer);
    }

}
",TRUE,,3843
3825,InitialSO.csv3825.txt,InitialGit.csv3825.txt,4,"import collections


class TransformedDict(collections.MutableMapping):
    """"""A dictionary that applies an arbitrary key-altering
       function before accessing the keys""""""

    def __init__(self, *args, **kwargs):
        self.store = dict()
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self.__keytransform__(key)]

    def __setitem__(self, key, value):
        self.store[self.__keytransform__(key)] = value

    def __delitem__(self, key):
        del self.store[self.__keytransform__(key)]

    def __iter__(self):
        return iter(self.store)
    
    def __len__(self):
        return len(self.store)

    def __keytransform__(self, key):
        return key
 class MyTransformedDict(TransformedDict):

    def __keytransform__(self, key):
        return key.lower()


s = MyTransformedDict([('Test', 'test')])

assert s.get('TEST') is s['test']   # free get
assert 'TeSt' in s                  # free __contains__
                                    # free setdefault, __eq__, and so on

import pickle
assert pickle.loads(pickle.dumps(s)) == s
                                    # works too since we just use a normal dict
 dict ","dict collections.abc from collections.abc import MutableMapping


class TransformedDict(MutableMapping):
    """"""A dictionary that applies an arbitrary key-altering
       function before accessing the keys""""""

    def __init__(self, *args, **kwargs):
        self.store = dict()
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self._keytransform(key)]

    def __setitem__(self, key, value):
        self.store[self._keytransform(key)] = value

    def __delitem__(self, key):
        del self.store[self._keytransform(key)]

    def __iter__(self):
        return iter(self.store)
    
    def __len__(self):
        return len(self.store)

    def _keytransform(self, key):
        return key
 class MyTransformedDict(TransformedDict):

    def _keytransform(self, key):
        return key.lower()


s = MyTransformedDict([('Test', 'test')])

assert s.get('TEST') is s['test']   # free get
assert 'TeSt' in s                  # free __contains__
                                    # free setdefault, __eq__, and so on

import pickle
# works too since we just use a normal dict
assert pickle.loads(pickle.dumps(s)) == s
 dict dict ",FALSE,"import openpathsampling as paths

# based on http://stackoverflow.com/a/3387975
import collections
class TransformedDict(collections.MutableMapping):
    """"""A dictionary that applies an arbitrary key-altering
       function before accessing the keys""""""

    def __init__(self, hash_function, *args, **kwargs):
        self.store = dict()
        self.hash_representatives = dict()
        self.hash_function = hash_function
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self.hash_function(key)]

    def __setitem__(self, key, value):
        hashed = self.hash_function(key)
        if hashed not in self.hash_representatives:
            self.hash_representatives[hashed] = key
        self.store[hashed] = value

    def __delitem__(self, key):
        hashed = self.hash_function(key)
        del self.store[hashed]
        del self.hash_representatives[hashed]

    def __iter__(self):
        return iter(self.store)

    def __len__(self):
        return len(self.store)


class SnapshotByCoordinateDict(TransformedDict):
    def __init__(self, *args, **kwargs):
        hash_fcn = lambda x : x.coordinates.tostring()
        super(TransformedDict, self).__init__(hash_fcn, args, kwargs)


def shooting_point_analysis(steps, states):
    results = {}
    for step in steps:
        # TODO: this should in step.change.canonical.details
        details = step.change.canonical.trials[0].details
        try:
            shooting_snap = shooting_snapshot
        except AttributeError:
            # wrong kind of move
            pass
        except IndexError:
            # very wrong kind of move
            pass
        else:
            # easy to change how we define the key
            key = shooting_snap.coordinates.tostring()
            trial_traj = step.change.canonical.trials[0].trajectory
            init_traj = details.initial_trajectory
            shooting_traj = trial_traj.unique_subtrajectory(init_traj)
            endpoints = list(set([shooting_traj[0], shooting_snap[-1]]))
            # we use set in case there's only one frame (`first is last`)
            local = {}
            for state in states:
                winners = [snap for snap in endpoints if state(snap)]
                if len(winners) == 1:
                    # this is messy... there has to be a better way
                    try:
                        result_dict = results[key]
                    except KeyError:
                        results[key] = {state : 0 for state in states}
                        result_dict = results[key]
                    finally:
                        results[key][state] += 1
                elif len(winners) > 1:
                    print step.change
                    print winners
                    print trial_traj, init_traj, shooting_traj
                    raise RuntimeError
    
    return results

","import openpathsampling as paths
import collections
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# based on http://stackoverflow.com/a/3387975
class TransformedDict(collections.MutableMapping):
    """"""A dictionary that applies an arbitrary key-altering function before
    accessing the keys

    This implementation involves a particular hashing function. It is
    assumed that any two input objects which give the same hash are
    effectively identical, allowing later rehashing based on the same.
    """"""

    def __init__(self, hash_function, *args, **kwargs):
        self.store = dict()
        self.hash_representatives = dict()
        self.hash_function = hash_function
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self.hash_function(key)]

    def __setitem__(self, key, value):
        hashed = self.hash_function(key)
        if hashed not in self.hash_representatives:
            self.hash_representatives[hashed] = key
        self.store[hashed] = value

    def __delitem__(self, key):
        hashed = self.hash_function(key)
        del self.store[hashed]
        del self.hash_representatives[hashed]

    def __iter__(self):
        return iter(self.store)

    def __len__(self):
        return len(self.store)

    def rehash(self, new_hash):
        """"""Create a new TransformedDict with this data and new hash.

        It is up to the user to ensure that the mapping from the old hash to
        the new is a function (i.e., each entry from the old hash can be
        mapped directly onto the new hash).

        For example, this is used to map from a snapshot's coordinates to
        a collective variable based on the coordinates. However, if the
        orignal hash was based on coordinates, but the new hash included
        velocities, the resulting mapping would be invalid. It is up to the
        user to avoid such invalid remappings.
        """"""
        return TransformedDict(new_hash, 
                               {self.hash_representatives[k]: self.store[k] 
                                for k in self.store})


class SnapshotByCoordinateDict(TransformedDict):
    """"""TransformedDict that uses snapshot coordinates as keys.

    This is primarily used to have a unique key for shooting point analysis
    (e.g., committor analysis).
    """"""
    def __init__(self, *args, **kwargs):
        hash_fcn = lambda x : x.coordinates.tostring()
        super(SnapshotByCoordinateDict, self).__init__(hash_fcn, 
                                                       *args, **kwargs)


class ShootingPointAnalysis(SnapshotByCoordinateDict):
    """"""
    Container and methods for shooting point analysis.

    This is especially useful for analyzing committors, which is
    automatically done on a per-configuration basis, and can also be done
    as a histogram.

    Parameters
    ----------
    steps : iterable of :class:`.MCStep` or None
        input MC steps to analyze; if None, no analysis performed
    states : list of :class:`.Volume`
        volumes to consider as states for the analysis. For pandas output,
        these volumes must be named.
    """"""
    def __init__(self, steps, states):
        super(ShootingPointAnalysis, self).__init__()
        self.states = states
        if steps is not None:
            self.analyze(steps)

    def analyze(self, steps):
        """"""Analyze a list of steps, adding to internal results.

        Parameters
        ----------
        steps : iterable of :class:`.MCStep` or None
            MC steps to analyze
        """"""
        for step in steps:
            total = self.analyze_single_step(step)

    def analyze_single_step(self, step):
        """"""
        Analyzes final states from a path sampling step. Adds to internal
        results.

        Parameters
        ----------
        step : :class:`.MCStep`
            the step to analyze and add to this analysis

        Returns
        -------
        list of :class:`.Volume`
            the states which are identified as new final states from this
            move
        """"""
        key = self.step_key(step)
        if key is not None:
            details = step.change.canonical.details
            trial_traj = step.change.canonical.trials[0].trajectory
            init_traj = details.initial_trajectory
            test_points = [s for s in [trial_traj[0], trial_traj[-1]]
                           if s not in [init_traj[0], init_traj[-1]]]

            total = collections.Counter(
                {state: sum([int(state(pt)) for pt in test_points])
                            for state in self.states}
            )
            total_count = sum(total.values())
            # TODO: clarify assertion (at least one endpoint in state)
            assert total_count == 1 or total_count == 2
            try:
                self[key] += total
            except KeyError:
                self[key] = total
        else:
            total = {}

        return [s for s in total.keys() if total[s] > 0]

    @staticmethod
    def step_key(step):
        """"""
        Returns the key we use for hashing (the shooting snapshot).

        Parameters
        ----------
        step : :class:`.MCStep`
            the step to extract a shooting point from

        Returns
        -------
        :class:`.Snapshot` or None
            the shooting snapshot, or None if this step is not a shooting
            move.
        """"""
        key = None
        try:
            details = step.change.canonical.details
            shooting_snap = details.shooting_snapshot
        except AttributeError:
            # wrong kind of move (no shooting_snapshot)
            pass
        except IndexError:
            # very wrong kind of move (no trials!)
            pass
        else:
            # easy to change how we define the key
            key = shooting_snap
        return key

    @classmethod
    def from_individual_runs(cls, run_results, states=None):
        """"""Build shooting point analysis from pairs of shooting point to
        final state.

        Parameters
        ----------
        run_results : list of 2-tuples (:class:`.Snapshot`, :class:`.Volume`)
            the first element in each pair is the shooting point, the second
            is the final volume
        """"""
        if states is None:
            states = set(s[1] for s in run_results)
        analyzer = ShootingPointAnalysis(None, states)
        for step in run_results:
            key = step[0]
            total = collections.Counter({step[1] : 1})
            try:
                analyzer[key] += total
            except KeyError:
                analyzer[key] = total

        return analyzer

    def committor(self, state, label_function=None):
        """"""Calculate the (point-by-point) committor.

        This is for the point-by-point (per-configuration) committor, not
        for histograms. See `committor_histogram` for the histogram version.

        Parameters
        ----------
        state : :class:`.Volume`
            the committor is 1.0 if 100% of shots enter this state
        label_function : callable
            the keys for the dictionary that is returned are
            `label_function(snapshot)`; default `None` gives the snapshot as
            key.

        Returns
        -------
        dict :
            mapping labels given by label_function to the committor value
        """"""
        if label_function is None:
            label_function = lambda s : s
        results = {}
        for k in self:
            out_key = label_function(self.hash_representatives[k])
            counter_k = self.store[k]
            committor = float(counter_k[state]) / sum(counter_k.values())
            results[out_key] = committor
        return results

    @staticmethod
    def _get_key_dim(key):
        try:
            ndim = len(key)
        except TypeError:
            ndim = 1
        if ndim > 2 or ndim < 1:
            raise RuntimeError(""Histogram key dimension {0} > 2 or {0} < 1 "" 
                               + ""(key: {1})"".format(ndim, key))
        return ndim

    def committor_histogram(self, new_hash, state, bins=10):
        """"""Calculate the histogrammed version of the committor.

        Parameters
        ----------
        new_hash : callable
            values are histogrammed in bins based on new_hash(snapshot)
        state : :class:`.Volume`
            the committor is 1.0 if 100% of shots enter this state
        bins : see numpy.histogram
            bins input to numpy.histogram

        Returns
        -------
        tuple :
            hist, bins like numpy.histogram, where hist is the histogram
            count and bins is the bins output from numpy.histogram. 2-tuple
            in the case of 1D histogram, 3-tuple in the case of 2D histogram
        """"""
        rehashed = self.rehash(new_hash)
        r_store = rehashed.store
        count_all = {k : sum(r_store[k].values()) for k in r_store}
        count_state = {k : r_store[k][state] for k in r_store}
        ndim = self._get_key_dim(list(r_store.keys())[0])
        if ndim == 1:
            (all_hist, b) = np.histogram(list(count_all.keys()),
                                         weights=list(count_all.values()),
                                         bins=bins)
            (state_hist, b) = np.histogram(list(count_state.keys()),
                                           weights=list(count_state.values()),
                                           bins=bins)
            b_list = [b]
        elif ndim == 2:
            (all_hist, b_x, b_y) = np.histogram2d(
                x=[k[0] for k in count_all],
                y=[k[1] for k in count_all],
                weights=list(count_all.values()),
                bins=bins
            )
            (state_hist, b_x, b_y) = np.histogram2d(
                x=[k[0] for k in count_state],
                y=[k[1] for k in count_state],
                weights=list(count_state.values()),
                bins=bins
            )
            b_list = [b_x, b_y]
        # if all_hist is 0, state_hist is NaN: ignore warning, return NaN
        with np.errstate(divide='ignore', invalid='ignore'):
            state_frac = np.true_divide(state_hist, all_hist)
        return tuple([state_frac] + b_list)

    def to_pandas(self, label_function=None):
        """"""
        Pandas dataframe. Row for each configuration, column for each state.

        Parameters
        ----------
        label_function : callable
            takes snapshot, returns index to use for pandas.DataFrame
        """"""
        transposed = pd.DataFrame(self.store).transpose().to_dict()
        df = pd.DataFrame(transposed)
        df.columns = [s.name for s in transposed.keys()]
        if label_function is None:
            df.index = range(len(df.index))
        else:
            # TODO: is ordering guaranteed here?
            df.index = [label_function(self.hash_representatives[k])
                        for k in self.store]
        return df
",FALSE,,3844
3827,InitialSO.csv3827.txt,InitialGit.csv3827.txt,5,"    public void reload() {

    Intent intent = getIntent();
    overridePendingTransition(0, 0);
    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
    finish();

    overridePendingTransition(0, 0);
    startActivity(intent);
}
 ","public void reload() {
    Intent intent = getIntent();
    overridePendingTransition(0, 0);
    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
    finish();
    overridePendingTransition(0, 0);
    startActivity(intent);
}
 ",FALSE,"/*******************************************************************************
 * This file is part of RedReader.
 *
 * RedReader is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RedReader is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RedReader.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

package org.quantumbadger.redreader.activities;

import android.content.Intent;
import org.holoeverywhere.app.Activity;
import org.quantumbadger.redreader.cache.CacheManager;

import java.util.EnumSet;

public abstract class RefreshableActivity extends Activity {

	private boolean paused = false;
	private final EnumSet<RefreshableFragment> refreshOnResume = EnumSet.noneOf(RefreshableFragment.class);

	public enum RefreshableFragment {
		MAIN, MAIN_RELAYOUT, POSTS, COMMENTS, RESTART, ALL
	}

	@Override
	protected void onPause() {
		super.onPause();
		paused = true;
	}

	@Override
	protected void onResume() {

		super.onResume();

		paused = false;

		for(final RefreshableFragment f : refreshOnResume) {
			doRefreshNow(f, false);
		}

		refreshOnResume.clear();

		new Thread() {
			@Override
			public void run() {
				android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
				CacheManager.getInstance(RefreshableActivity.this).pruneCache();
			}
		}.start();
	}

	protected void doRefreshNow(RefreshableFragment which, boolean force) {

		if(which == RefreshableFragment.RESTART) {

			// http://stackoverflow.com/a/3419987/1526861
			final Intent intent = getIntent();
			overridePendingTransition(0, 0);
			intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
			finish();
			overridePendingTransition(0, 0);
			startActivity(intent);

		} else {
			doRefresh(which, force);
		}
	}

	protected abstract void doRefresh(RefreshableFragment which, boolean force);

	public final void requestRefresh(final RefreshableFragment which, final boolean force) {
		runOnUiThread(new Runnable() {
			public void run() {
				if(!paused) {
					doRefreshNow(which, force);
				} else {
					refreshOnResume.add(which); // TODO this doesn't remember ""force"" (but it doesn't really matter...)
				}
			}}
		);
	}
}
","/*******************************************************************************
 * This file is part of RedReader.
 *
 * RedReader is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RedReader is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RedReader.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

package org.quantumbadger.redreader.activities;

import android.content.Intent;
import org.holoeverywhere.app.Activity;

import java.util.EnumSet;

public abstract class RefreshableActivity extends Activity {

	private boolean paused = false;
	private final EnumSet<RefreshableFragment> refreshOnResume = EnumSet.noneOf(RefreshableFragment.class);

	public enum RefreshableFragment {
		MAIN, MAIN_RELAYOUT, POSTS, COMMENTS, RESTART, ALL
	}

	@Override
	protected void onPause() {
		super.onPause();
		paused = true;
	}

	@Override
	protected void onResume() {

		super.onResume();

		paused = false;

		for(final RefreshableFragment f : refreshOnResume) {
			doRefreshNow(f, false);
		}

		refreshOnResume.clear();
	}

	protected void doRefreshNow(RefreshableFragment which, boolean force) {

		if(which == RefreshableFragment.RESTART) {

			// http://stackoverflow.com/a/3419987/1526861
			final Intent intent = getIntent();
			overridePendingTransition(0, 0);
			intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
			finish();
			overridePendingTransition(0, 0);
			startActivity(intent);

		} else {
			doRefresh(which, force);
		}
	}

	protected abstract void doRefresh(RefreshableFragment which, boolean force);

	public final void requestRefresh(final RefreshableFragment which, final boolean force) {
		runOnUiThread(new Runnable() {
			public void run() {
				if(!paused) {
					doRefreshNow(which, force);
				} else {
					refreshOnResume.add(which); // TODO this doesn't remember ""force"" (but it doesn't really matter...)
				}
			}}
		);
	}
}
",FALSE,,3850
3828,InitialSO.csv3828.txt,InitialGit.csv3828.txt,4,"George Jempty's Matthew Flaschen's function modeString(array)
{
    if (array.length == 0)
        return null;

    var modeMap = {},
        maxEl = array[0],
        maxCount = 1;

    for(var i = 0; i < array.length; i++)
    {
        var el = array[i];

        if (modeMap[el] == null)
            modeMap[el] = 1;
        else
            modeMap[el]++;

        if (modeMap[el] > maxCount)
        {
            maxEl = el;
            maxCount = modeMap[el];
        }
        else if (modeMap[el] == maxCount)
        {
            maxEl += '&' + el;
            maxCount = modeMap[el];
        }
    }
    return maxEl;
}
 '&' '&' function modeArray(array)
{
    if (array.length == 0)
        return null;
    var modeMap = {},
        maxCount = 1, 
        modes = [array[0]];

    for(var i = 0; i < array.length; i++)
    {
        var el = array[i];

        if (modeMap[el] == null)
            modeMap[el] = 1;
        else
            modeMap[el]++;

        if (modeMap[el] > maxCount)
        {
            modes = [el];
            maxCount = modeMap[el];
        }
        else if (modeMap[el] == maxCount)
        {
            modes.push(el);
            maxCount = modeMap[el];
        }
    }
    return modes;
}
 ","George Jempty's Matthew Flaschen's function modeString(array) {
  if (array.length == 0) return null;

  var modeMap = {},
    maxEl = array[0],
    maxCount = 1;

  for (var i = 0; i < array.length; i++) {
    var el = array[i];

    if (modeMap[el] == null) modeMap[el] = 1;
    else modeMap[el]++;

    if (modeMap[el] > maxCount) {
      maxEl = el;
      maxCount = modeMap[el];
    } else if (modeMap[el] == maxCount) {
      maxEl += ""&"" + el;
      maxCount = modeMap[el];
    }
  }
  return maxEl;
}
 & & function modeArray(array) {
  if (array.length == 0) return null;
  var modeMap = {},
    maxCount = 1,
    modes = [];

  for (var i = 0; i < array.length; i++) {
    var el = array[i];

    if (modeMap[el] == null) modeMap[el] = 1;
    else modeMap[el]++;

    if (modeMap[el] > maxCount) {
      modes = [el];
      maxCount = modeMap[el];
    } else if (modeMap[el] == maxCount) {
      modes.push(el);
      maxCount = modeMap[el];
    }
  }
  return modes;
}
 ",FALSE,"/*! tablesorter math widget - beta testing
* Requires tablesorter v2.16+ and jQuery 1.7+
* by Rob Garrison
*/
/*jshint browser:true, jquery:true, unused:false */
/*global jQuery: false */
;(function($){
	""use strict"";

	var ts = $.tablesorter,
	math = {

		// get all of the row numerical values in an arry
		getRow : function(table, wo, $el, dataAttrib) {
			var txt,
				arry = [],
				$row = $el.closest('tr'),
				$cells = $row.children();
			if (!$row.hasClass(wo.filter_filteredRow || 'filtered')) {
				if (wo.math_ignore.length) {
					$cells = $cells.not('[' + dataAttrib + '=ignore]').not('[data-column=' + wo.math_ignore.join('],[data-column=') + ']');
				}
				arry = $cells.not($el).map(function(){
					txt = this.textContent || $(this).text();
					txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
					return isNaN(txt) ? 0 : txt;
				}).get();
			}
			return arry;
		},

		// get all of the column numerical values in an arry
		getColumn : function(table, wo, $el, type, dataAttrib){
			var i, txt, $t, len, mathAbove,
				arry = [],
				c = table.config,
				filtered = wo.filter_filteredRow || 'filtered',
				cIndex = parseInt( $el.attr('data-column'), 10 ),
				$rows = c.$table.children('tbody').children(),
				$row = $el.closest('tr');
			// make sure tfoot rows are AFTER the tbody rows
			// $rows.add( c.$table.children('tfoot').children() );
			if (type === 'above') {
				len = $rows.index($row);
				i = len;
				while (i >= 0) {
					$t = $rows.eq(i).children().filter('[data-column=' + cIndex + ']');
					mathAbove = $t.filter('[' + dataAttrib + '^=above]').length;
					// ignore filtered rows & rows with data-math=""ignore"" (and starting row)
					if ( ( !$rows.eq(i).hasClass(filtered) && $rows.eq(i).not('[' + dataAttrib + '=ignore]').length && i !== len ) || mathAbove && i !== len ) {
						// stop calculating ""above"", when encountering another ""above""
						if (mathAbove) {
							i = 0;
						} else if ($t.length) {
							txt = $t[0].textContent || $t.text();
							txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
							arry.push(isNaN(txt) ? 0 : txt);
						}
					}
					i--;
				}
			} else {
				$rows.each(function(){
					$t = $(this).children().filter('[data-column=' + cIndex + ']');
					if (!$(this).hasClass(filtered) && $t.not('[' + dataAttrib + '^=above],[' + dataAttrib + '^=col]').length && !$t.is($el)) {
						txt = ($t[0] ? $t[0].textContent : '') || $t.text();
						txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
						arry.push(isNaN(txt) ? 0 : txt);
					}
				});
			}
			return arry;
		},

		// get all of the column numerical values in an arry
		getAll : function(table, wo, dataAttrib){
			var txt, $t, col,
				arry = [],
				c = table.config,
				filtered = wo.filter_filteredRow || 'filtered',
				$rows = c.$table.children('tbody').children();
			$rows.each(function(){
				if (!$(this).hasClass(filtered)) {
					$(this).children().each(function(){
						$t = $(this);
						col = parseInt( $t.attr('data-column'), 10);
						if (!$t.filter('[' + dataAttrib + ']').length && $.inArray(col, wo.math_ignore) < 0) {
							txt = ($t[0] ? $t[0].textContent : '') || $t.text();
							txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
							arry.push(isNaN(txt) ? 0 : txt);
						}
					});
				}
			});
			return arry;
		},

		recalculate : function(table, c, wo, init){
			if (c && !wo.math_isUpdating) {

				// add data-column attributes to all table cells
				if (init) {
					ts.computeColumnIndex( c.$table.children('tbody').children() );
				}

				// data-attribute name (defaults to data-math)
				var dataAttrib = 'data-' + (wo.math_data || 'math'),

				// all non-info tbody cells
				$mathCells = c.$tbodies.find('[' + dataAttrib + ']');
				math.mathType( table, wo, $mathCells, wo.math_priority, dataAttrib );

				// only info tbody cells
				$mathCells = c.$table.find('.' + c.cssInfoBlock + ', tfoot').find('[' + dataAttrib + ']');
				math.mathType( table, wo, $mathCells, wo.math_priority, dataAttrib );

				// find the ""all"" total
				math.mathType( table, wo, c.$table.find('[' + dataAttrib + '^=all]'), ['all'], dataAttrib );

				wo.math_isUpdating = true;
				c.$table.trigger('update');
			}
		},

		mathType : function(table, wo, $cells, priority, dataAttrib) {
			if ($cells.length) {
				var formula, t, $t, arry, getAll,
					eq = ts.equations;
				if (priority[0] === 'all') {
					// no need to get all cells more than once
					getAll = math.getAll(table, wo, dataAttrib);
				}
				$.each( priority, function(i, type) {
					$cells.filter('[' + dataAttrib + '^=' + type + ']').each(function(){
						$t = $(this);
						formula = ($t.attr(dataAttrib) || '').replace(type + '-', '');
						arry = (type === ""row"") ? math.getRow(table, wo, $t, dataAttrib) :
							(type === ""all"") ? getAll : math.getColumn(table, wo, $t, type, dataAttrib);
						if (eq[formula]) {
							t = eq[formula](arry);
							if (table.config.debug && console && console.log) {
								console.log($t.attr(dataAttrib), arry, '=', t);
							}
							math.output( $t, wo, t, arry );
						}
					});
				});
			}
		},

		output : function($cell, wo, value, arry) {
			var result = ts.formatMask( wo.math_mask, value );
			if ($.isFunction(wo.math_complete)) {
				result = wo.math_complete($cell, wo, result, value, arry);
			}
			if (result !== false) {
				$cell.html(result);
			}
		}

	};

	// Modified from https://code.google.com/p/javascript-number-formatter/
	/**
	* @preserve IntegraXor Web SCADA - JavaScript Number Formatter
	* http:// www.integraxor.com/
	* author: KPL, KHL
	* (c)2011 ecava
	* Dual licensed under the MIT or GPL Version 2 licenses.
	*/
	ts.formatMask = function(m, v){
		var isNegative, result, decimal, group, pos_lead_zero, pos_trail_zero, pos_separator, part, szSep,
			integer, str, offset, i, l;
		if ( !m || isNaN(+v) ) {
			return v; // return as it is.
		}
		// convert any string to number according to formation sign.
		v = m.charAt(0) == '-'? -v : +v;
		isNegative = v < 0 ? v = -v : 0; // process only abs(), and turn on flag.

		// search for separator for grp & decimal, anything not digit, not +/- sign, not #.
		result = m.match(/[^\d\-\+#]/g);
		decimal = (result && result[result.length-1]) || '.'; // treat the right most symbol as decimal
		group = (result && result[1] && result[0]) || ',';  // treat the left most symbol as group separator

		// split the decimal for the format string if any.
		m = m.split( decimal );
		// Fix the decimal first, toFixed will auto fill trailing zero.
		v = v.toFixed( m[1] && m[1].length );
		v = +(v) + ''; // convert number to string to trim off *all* trailing decimal zero(es)

		// fill back any trailing zero according to format
		pos_trail_zero = m[1] && m[1].lastIndexOf('0'); // look for last zero in format
		part = v.split('.');
		// integer will get !part[1]
		if ( !part[1] || part[1] && part[1].length <= pos_trail_zero ) {
			v = (+v).toFixed( pos_trail_zero + 1 );
		}
		szSep = m[0].split( group ); // look for separator
		m[0] = szSep.join(''); // join back without separator for counting the pos of any leading 0.

		pos_lead_zero = m[0] && m[0].indexOf('0');
		if ( pos_lead_zero > -1 ) {
			while ( part[0].length < ( m[0].length - pos_lead_zero ) ) {
				part[0] = '0' + part[0];
			}
		} else if ( +part[0] === 0 ) {
			part[0] = '';
		}

		v = v.split('.');
		v[0] = part[0];

		// process the first group separator from decimal (.) only, the rest ignore.
		// get the length of the last slice of split result.
		pos_separator = ( szSep[1] && szSep[ szSep.length - 1 ].length );
		if (pos_separator) {
			integer = v[0];
			str = '';
			offset = integer.length % pos_separator;
			l = integer.length;
			for ( i = 0; i < l; i++ ) {
				str += integer.charAt(i); // ie6 only support charAt for sz.
				// -pos_separator so that won't trail separator on full length
				if ( !(( i - offset + 1 ) % pos_separator) && i < l - pos_separator ) {
					str += group;
				}
			}
			v[0] = str;
		}

		v[1] = ( m[1] && v[1] ) ? decimal + v[1] : """";
		return ( isNegative ? '-' : '' ) + v[0] + v[1]; // put back any negation and combine integer and fraction.
	};

	ts.equations = {
		count : function(arry) {
			return arry.length;
		},
		sum : function(arry) {
			var total = 0;
			$.each( arry, function(i) {
				total += arry[i];
			});
			return total;
		},
		mean : function(arry) {
			var total = ts.equations.sum( arry );
			return total / arry.length;
		},
		median : function(arry) {
			// https://gist.github.com/caseyjustus/1166258
			arry.sort( function(a,b){ return a - b; } );
			var half = Math.floor( arry.length / 2 );
			return (arry.length % 2) ? arry[half] : ( arry[half - 1] + arry[half] ) / 2.0;
		},
		mode : function(arry) {
			// http://stackoverflow.com/a/3451640/145346
			if ( arry.length === 0 ) { return 'none'; }
			var i, el,
				modeMap = {},
				maxCount = 1,
				modes = [arry[0]];
			for (i = 0; i < arry.length; i++) {
				el = arry[i];
				modeMap[el] = modeMap[el] ? modeMap[el] + 1 : 1;
				if ( modeMap[el] > maxCount ) {
					modes = [el];
					maxCount = modeMap[el];
				} else if (modeMap[el] === maxCount) {
					modes.push(el);
					maxCount = modeMap[el];
				}
			}
			// returns arry of modes if there is a tie
			return modes.sort( function(a,b){ return a - b; } );
		},
		max : function(arry) {
			return Math.max.apply( Math, arry );
		},
		min : function(arry) {
			return Math.min.apply( Math, arry );
		},
		range: function(arry) {
			var v = arry.sort(function(a,b){ return a - b; });
			return v[ arry.length - 1 ] - v[0];
		},
		// common variance equation
		// (not accessible via data-attribute setting)
		variance: function(arry, population) {
			var avg = ts.equations.mean( arry ),
				v = 0,
				i = arry.length;
			while (i--) {
				v += Math.pow( ( arry[i] - avg ), 2 );
			}
			v /= ( arry.length - (population ? 0 : 1) );
			return v;
		},
		// variance (population)
		varp : function(arry) {
			return ts.equations.variance(arry, true);
		},
		// variance (sample)
		vars : function(arry) {
			return ts.equations.variance(arry);
		},
		// standard deviation (sample)
		stdevs : function(arry) {
			var vars = ts.equations.variance(arry);
			return Math.sqrt( vars );
		},
		// standard deviation (population)
		stdevp : function(arry){
			var varp = ts.equations.variance(arry, true);
			return Math.sqrt( varp );
		}
	};

	// add new widget called repeatHeaders
	// ************************************
	ts.addWidget({
		id: ""math"",
		priority: 100,
		options: {
			math_data     : 'math',
			// column index to ignore
			math_ignore   : [],
			// mask info: https://code.google.com/p/javascript-number-formatter/
			math_mask     : '#,##0.00',
			// complete executed after each fucntion
			math_complete : null, // function($cell, wo, result, value, arry){ return result; },
			// order of calculation; ""all"" is last
			math_priority : [ 'row', 'above', 'col' ]
		},
		init : function(table, thisWidget, c, wo){
			c.$table
				.bind('tablesorter-initialized update updateRows addRows updateCell filterReset filterEnd '.split(' ').join('.tsmath '), function(e){
					if (!wo.math_isUpdating) {
						math.recalculate(table, c, wo, e.type === 'tablesorter-initialized');
					}
				})
				.bind('updateComplete.tsmath', function(){
					setTimeout(function(){
						wo.math_isUpdating = false;
					}, 500);
				});
			wo.math_isUpdating = false;
		},
		// this remove function is called when using the refreshWidgets method or when destroying the tablesorter plugin
		// this function only applies to tablesorter v2.4+
		remove: function(table, c, wo){
			$(table)
				.unbind('tablesorter-initialized update updateRows addRows updateCell filterReset filterEnd '.split(' ').join('.tsmath '))
				.find('[data-' + wo.math_data + ']').empty();
		}
	});

})(jQuery);","/*! tablesorter math widget - beta testing
* Requires tablesorter v2.16+ and jQuery 1.7+
* by Rob Garrison
*/
/*jshint browser:true, jquery:true, unused:false */
/*global jQuery: false */
;(function($){
	""use strict"";

	var ts = $.tablesorter,
	math = {

		// get all of the row numerical values in an arry
		getRow : function(table, wo, $el, dataAttrib) {
			var txt,
				arry = [],
				$row = $el.closest('tr'),
				$cells = $row.children();
			if (!$row.hasClass(wo.filter_filteredRow || 'filtered')) {
				if (wo.math_ignore.length) {
					$cells = $cells.not('[' + dataAttrib + '=ignore]').not('[data-column=' + wo.math_ignore.join('],[data-column=') + ']');
				}
				arry = $cells.not($el).map(function(){
					txt = this.textContent || $(this).text();
					txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
					return isNaN(txt) ? 0 : txt;
				}).get();
			}
			return arry;
		},

		// get all of the column numerical values in an arry
		getColumn : function(table, wo, $el, type, dataAttrib){
			var i, txt, $t, len, mathAbove,
				arry = [],
				c = table.config,
				filtered = wo.filter_filteredRow || 'filtered',
				cIndex = parseInt( $el.attr('data-column'), 10 ),
				$rows = c.$table.children('tbody').children(),
				$row = $el.closest('tr');
			// make sure tfoot rows are AFTER the tbody rows
			// $rows.add( c.$table.children('tfoot').children() );
			if (type === 'above') {
				len = $rows.index($row);
				i = len;
				while (i >= 0) {
					$t = $rows.eq(i).children().filter('[data-column=' + cIndex + ']');
					mathAbove = $t.filter('[' + dataAttrib + '^=above]').length;
					// ignore filtered rows & rows with data-math=""ignore"" (and starting row)
					if ( ( !$rows.eq(i).hasClass(filtered) && $rows.eq(i).not('[' + dataAttrib + '=ignore]').length && i !== len ) || mathAbove && i !== len ) {
						// stop calculating ""above"", when encountering another ""above""
						if (mathAbove) {
							i = 0;
						} else if ($t.length) {
							txt = $t[0].textContent || $t.text();
							txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
							arry.push(isNaN(txt) ? 0 : txt);
						}
					}
					i--;
				}
			} else {
				$rows.each(function(){
					$t = $(this).children().filter('[data-column=' + cIndex + ']');
					if (!$(this).hasClass(filtered) && $t.not('[' + dataAttrib + '^=above],[' + dataAttrib + '^=col]').length && !$t.is($el)) {
						txt = ($t[0] ? $t[0].textContent : '') || $t.text();
						txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
						arry.push(isNaN(txt) ? 0 : txt);
					}
				});
			}
			return arry;
		},

		// get all of the column numerical values in an arry
		getAll : function(table, wo, dataAttrib){
			var txt, $t, col,
				arry = [],
				c = table.config,
				filtered = wo.filter_filteredRow || 'filtered',
				$rows = c.$table.children('tbody').children();
			$rows.each(function(){
				if (!$(this).hasClass(filtered)) {
					$(this).children().each(function(){
						$t = $(this);
						col = parseInt( $t.attr('data-column'), 10);
						if (!$t.filter('[' + dataAttrib + ']').length && $.inArray(col, wo.math_ignore) < 0) {
							txt = ($t[0] ? $t[0].textContent : '') || $t.text();
							txt = ts.formatFloat(txt.replace(/[^\w,. \-()]/g, """"), table);
							arry.push(isNaN(txt) ? 0 : txt);
						}
					});
				}
			});
			return arry;
		},

		recalculate : function(table, c, wo, init){
			if (c && !wo.math_isUpdating) {

				// add data-column attributes to all table cells
				if (init) {
					ts.computeColumnIndex( c.$table.children('tbody').children() );
				}

				// data-attribute name (defaults to data-math)
				var dataAttrib = 'data-' + (wo.math_data || 'math'),

				// all non-info tbody cells
				$mathCells = c.$tbodies.find('[' + dataAttrib + ']');
				math.mathType( table, wo, $mathCells, wo.math_priority, dataAttrib );

				// only info tbody cells
				$mathCells = c.$table.find('.' + c.cssInfoBlock + ', tfoot').find('[' + dataAttrib + ']');
				math.mathType( table, wo, $mathCells, wo.math_priority, dataAttrib );

				// find the ""all"" total
				math.mathType( table, wo, c.$table.find('[' + dataAttrib + '^=all]'), ['all'], dataAttrib );

				wo.math_isUpdating = true;
				c.$table.trigger('update');
			}
		},

		mathType : function(table, wo, $cells, priority, dataAttrib) {
			if ($cells.length) {
				var formula, t, $t, arry, getAll,
					eq = ts.equations;
				if (priority[0] === 'all') {
					// no need to get all cells more than once
					getAll = math.getAll(table, wo, dataAttrib);
				}
				$.each( priority, function(i, type) {
					$cells.filter('[' + dataAttrib + '^=' + type + ']').each(function(){
						$t = $(this);
						formula = ($t.attr(dataAttrib) || '').replace(type + '-', '');
						arry = (type === ""row"") ? math.getRow(table, wo, $t, dataAttrib) :
							(type === ""all"") ? getAll : math.getColumn(table, wo, $t, type, dataAttrib);
						if (eq[formula]) {
							t = eq[formula](arry);
							if (table.config.debug && console && console.log) {
								console.log($t.attr(dataAttrib), arry, '=', t);
							}
							math.output( $t, wo, t, arry );
						}
					});
				});
			}
		},

		output : function($cell, wo, value, arry) {
			var result = ts.formatMask( wo.math_mask, value );
			if ($.isFunction(wo.math_complete)) {
				result = wo.math_complete($cell, wo, result, value, arry);
			}
			if (result !== false) {
				$cell.html(result);
			}
		}

	};

	// Modified from https://code.google.com/p/javascript-number-formatter/
	/**
	* @preserve IntegraXor Web SCADA - JavaScript Number Formatter
	* http:// www.integraxor.com/
	* author: KPL, KHL
	* (c)2011 ecava
	* Dual licensed under the MIT or GPL Version 2 licenses.
	*/
	ts.formatMask = function(m, v){
		var isNegative, result, decimal, group, pos_lead_zero, pos_trail_zero, pos_separator, part, szSep,
			integer, str, offset, i, l;
		if ( !m || isNaN(+v) ) {
			return v; // return as it is.
		}
		// convert any string to number according to formation sign.
		v = m.charAt(0) == '-'? -v : +v;
		isNegative = v < 0 ? v = -v : 0; // process only abs(), and turn on flag.

		// search for separator for grp & decimal, anything not digit, not +/- sign, not #.
		result = m.match(/[^\d\-\+#]/g);
		decimal = (result && result[result.length-1]) || '.'; // treat the right most symbol as decimal
		group = (result && result[1] && result[0]) || ',';  // treat the left most symbol as group separator

		// split the decimal for the format string if any.
		m = m.split( decimal );
		// Fix the decimal first, toFixed will auto fill trailing zero.
		v = v.toFixed( m[1] && m[1].length );
		v = +(v) + ''; // convert number to string to trim off *all* trailing decimal zero(es)

		// fill back any trailing zero according to format
		pos_trail_zero = m[1] && m[1].lastIndexOf('0'); // look for last zero in format
		part = v.split('.');
		// integer will get !part[1]
		if ( !part[1] || part[1] && part[1].length <= pos_trail_zero ) {
			v = (+v).toFixed( pos_trail_zero + 1 );
		}
		szSep = m[0].split( group ); // look for separator
		m[0] = szSep.join(''); // join back without separator for counting the pos of any leading 0.

		pos_lead_zero = m[0] && m[0].indexOf('0');
		if ( pos_lead_zero > -1 ) {
			while ( part[0].length < ( m[0].length - pos_lead_zero ) ) {
				part[0] = '0' + part[0];
			}
		} else if ( +part[0] === 0 ) {
			part[0] = '';
		}

		v = v.split('.');
		v[0] = part[0];

		// process the first group separator from decimal (.) only, the rest ignore.
		// get the length of the last slice of split result.
		pos_separator = ( szSep[1] && szSep[ szSep.length - 1 ].length );
		if (pos_separator) {
			integer = v[0];
			str = '';
			offset = integer.length % pos_separator;
			l = integer.length;
			for ( i = 0; i < l; i++ ) {
				str += integer.charAt(i); // ie6 only support charAt for sz.
				// -pos_separator so that won't trail separator on full length
				if ( !(( i - offset + 1 ) % pos_separator) && i < l - pos_separator ) {
					str += group;
				}
			}
			v[0] = str;
		}

		v[1] = ( m[1] && v[1] ) ? decimal + v[1] : """";
		return ( isNegative ? '-' : '' ) + v[0] + v[1]; // put back any negation and combine integer and fraction.
	};

	ts.equations = {
		count : function(arry) {
			return arry.length;
		},
		sum : function(arry) {
			var total = 0;
			$.each( arry, function(i) {
				total += arry[i];
			});
			return total;
		},
		mean : function(arry) {
			var total = ts.equations.sum( arry );
			return total / arry.length;
		},
		median : function(arry) {
			// https://gist.github.com/caseyjustus/1166258
			arry.sort( function(a,b){ return a - b; } );
			var half = Math.floor( arry.length / 2 );
			return (arry.length % 2) ? arry[half] : ( arry[half - 1] + arry[half] ) / 2.0;
		},
		mode : function(arry) {
			// http://stackoverflow.com/a/3451640/145346
			if ( arry.length === 0 ) { return 'none'; }
			var i, el,
				modeMap = {},
				maxCount = 1,
				modes = [arry[0]];
			for (i = 0; i < arry.length; i++) {
				el = arry[i];
				modeMap[el] = modeMap[el] ? modeMap[el] + 1 : 1;
				if ( modeMap[el] > maxCount ) {
					modes = [el];
					maxCount = modeMap[el];
				} else if (modeMap[el] === maxCount) {
					modes.push(el);
					maxCount = modeMap[el];
				}
			}
			// returns arry of modes if there is a tie
			return modes.sort( function(a,b){ return a - b; } );
		},
		max : function(arry) {
			return Math.max.apply( Math, arry );
		},
		min : function(arry) {
			return Math.min.apply( Math, arry );
		},
		range: function(arry) {
			var v = arry.sort(function(a,b){ return a - b; });
			return v[ arry.length - 1 ] - v[0];
		},
		// common variance equation
		// (not accessible via data-attribute setting)
		variance: function(arry, population) {
			var avg = ts.equations.mean( arry ),
				v = 0,
				i = arry.length;
			while (i--) {
				v += Math.pow( ( arry[i] - avg ), 2 );
			}
			v /= ( arry.length - (population ? 0 : 1) );
			return v;
		},
		// variance (population)
		varp : function(arry) {
			return ts.equations.variance(arry, true);
		},
		// variance (sample)
		vars : function(arry) {
			return ts.equations.variance(arry);
		},
		// standard deviation (sample)
		stdevs : function(arry) {
			var vars = ts.equations.variance(arry);
			return Math.sqrt( vars );
		},
		// standard deviation (population)
		stdevp : function(arry){
			var varp = ts.equations.variance(arry, true);
			return Math.sqrt( varp );
		}
	};

	// add new widget called repeatHeaders
	// ************************************
	ts.addWidget({
		id: ""math"",
		priority: 100,
		options: {
			math_data     : 'math',
			// column index to ignore
			math_ignore   : [],
			// mask info: https://code.google.com/p/javascript-number-formatter/
			math_mask     : '#,##0.00',
			// complete executed after each fucntion
			math_complete : null, // function($cell, wo, result, value, arry){ return result; },
			// order of calculation; ""all"" is last
			math_priority : [ 'row', 'above', 'col' ]
		},
		init : function(table, thisWidget, c, wo){
			c.$table
				.bind('tablesorter-initialized update updateRows addRows updateCell filterReset filterEnd '.split(' ').join('.tsmath '), function(e){
					if (!wo.math_isUpdating) {
						math.recalculate(table, c, wo, e.type === 'tablesorter-initialized');
					}
				})
				.bind('updateComplete.tsmath', function(){
					setTimeout(function(){
						wo.math_isUpdating = false;
					}, 500);
				});
			wo.math_isUpdating = false;
		},
		// this remove function is called when using the refreshWidgets method or when destroying the tablesorter plugin
		// this function only applies to tablesorter v2.4+
		remove: function(table, c, wo){
			$(table)
				.unbind('tablesorter-initialized update updateRows addRows updateCell filterReset filterEnd '.split(' ').join('.tsmath '))
				.find('[data-' + wo.math_data + ']').empty();
		}
	});

})(jQuery);",TRUE,,3853
3832,InitialSO.csv3832.txt,InitialGit.csv3832.txt,3,"__dict__ class FrozenClass(object):
    __isfrozen = False
    def __setattr__(self, key, value):
        if self.__isfrozen and not hasattr(self, key):
            raise TypeError( ""%r is a frozen class"" % self )
        object.__setattr__(self, key, value)
        
    def _freeze(self):
        self.__isfrozen = True
        
class Test(FrozenClass):
    def __init__(self):
        self.x = 42#
        self.y = 2**3
        
        self._freeze() # no new attributes after this point.

a,b = Test(), Test()
a.x = 10
b.z = 10 # fails
    
 ","__dict__ class FrozenClass(object):
    __isfrozen = False
    def __setattr__(self, key, value):
        if self.__isfrozen and not hasattr(self, key):
            raise TypeError( ""%r is a frozen class"" % self )
        object.__setattr__(self, key, value)

    def _freeze(self):
        self.__isfrozen = True

class Test(FrozenClass):
    def __init__(self):
        self.x = 42#
        self.y = 2**3

        self._freeze() # no new attributes after this point.

a,b = Test(), Test()
a.x = 10
b.z = 10 # fails
 ",FALSE,"#/***************************************************************************
# *   Copyright (c) Victor Titov (DeepSOIC)                                 *
# *                                           (vv.titov@gmail.com) 2016     *
# *                                                                         *
# *   This file is part of the FreeCAD CAx development system.              *
# *                                                                         *
# *   This library is free software; you can redistribute it and/or         *
# *   modify it under the terms of the GNU Library General Public           *
# *   License as published by the Free Software Foundation; either          *
# *   version 2 of the License, or (at your option) any later version.      *
# *                                                                         *
# *   This library  is distributed in the hope that it will be useful,      *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU Library General Public License for more details.                  *
# *                                                                         *
# *   You should have received a copy of the GNU Library General Public     *
# *   License along with this library; see the file COPYING.LIB. If not,    *
# *   write to the Free Software Foundation, Inc., 59 Temple Place,         *
# *   Suite 330, Boston, MA  02111-1307, USA                                *
# *                                                                         *
# ***************************************************************************/

# adapted from http://stackoverflow.com/a/3603824/6285007
class FrozenClass(object):
    '''FrozenClass: prevents adding new attributes to class outside of __init__'''
    __isfrozen = False
    def __setattr__(self, key, value):
        if self.__isfrozen and not hasattr(self, key):
            raise TypeError( ""{cls} has no attribute {attr}"".format(cls= self.__class__.__name__, attr= key) )
        object.__setattr__(self, key, value)

    def _freeze(self):
        self.__isfrozen = True

    def _unfreeze(self):
        self.__isfrozen = False
","#/***************************************************************************
# *   Copyright (c) Victor Titov (DeepSOIC)                                 *
# *                                           (vv.titov@gmail.com) 2016     *
# *                                                                         *
# *   This file is part of the FreeCAD CAx development system.              *
# *                                                                         *
# *   This library is free software; you can redistribute it and/or         *
# *   modify it under the terms of the GNU Library General Public           *
# *   License as published by the Free Software Foundation; either          *
# *   version 2 of the License, or (at your option) any later version.      *
# *                                                                         *
# *   This library  is distributed in the hope that it will be useful,      *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU Library General Public License for more details.                  *
# *                                                                         *
# *   You should have received a copy of the GNU Library General Public     *
# *   License along with this library; see the file COPYING.LIB. If not,    *
# *   write to the Free Software Foundation, Inc., 59 Temple Place,         *
# *   Suite 330, Boston, MA  02111-1307, USA                                *
# *                                                                         *
# ***************************************************************************/

# adapted from http://stackoverflow.com/a/3603824/6285007
class FrozenClass(object):
    '''FrozenClass: prevents adding new attributes to class outside of __init__'''
    __isfrozen = False
    def __setattr__(self, key, value):
        if self.__isfrozen and not hasattr(self, key):
            raise TypeError( ""{cls} has no attribute {attr}"".format(cls= self.__class__.__name__, attr= key) )
        object.__setattr__(self, key, value)

    def _freeze(self):
        self.__isfrozen = True

    def _unfreeze(self):
        self.__isfrozen = False
",TRUE,,3858
3836,InitialSO.csv3836.txt,InitialGit.csv3836.txt,5,"$("".overlayLink"").bind(""mouseenter mouseleave"",function(e){

/** the width and height of the current div **/
var w = $(this).width();
var h = $(this).height();

/** calculate the x and y to get an angle to the center of the div from that x and y. **/
/** gets the x value relative to the center of the DIV and ""normalize"" it **/
var x = (e.pageX - this.offsetLeft - (w/2)) * ( w > h ? (h/w) : 1 );
var y = (e.pageY - this.offsetTop  - (h/2)) * ( h > w ? (w/h) : 1 );

/** the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);**/
/** first calculate the angle of the point, 
 add 180 deg to get rid of the negative values
 divide by 90 to get the quadrant
 add 3 and do a modulo by 4  to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
var direction = Math.round((((Math.atan2(y, x) * (180 / Math.PI)) + 180 ) / 90 ) + 3 )  % 4;


/** do your animations here **/ 
switch(direction) {
 case 0:
  /** animations from the TOP **/
 break;
 case 1:
  /** animations from the RIGHT **/
 break;
 case 2:
  /** animations from the BOTTOM **/
 break;
 case 3:
  /** animations from the LEFT **/
 break;
}});
 var direction =  Math.round( Math.atan2(y, x) / 1.57079633 + 5 ) % 4
 ","$("".overlayLink"").bind(""mouseenter mouseleave"",function(e){

/** the width and height of the current div **/
var w = $(this).width();
var h = $(this).height();

/** calculate the x and y to get an angle to the center of the div from that x and y. **/
/** gets the x value relative to the center of the DIV and ""normalize"" it **/
var x = (e.pageX - this.offset().left - (w/2)) * ( w > h ? (h/w) : 1 );
var y = (e.pageY - this.offset().top  - (h/2)) * ( h > w ? (w/h) : 1 );

/** the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);**/
/** first calculate the angle of the point, 
 add 180 deg to get rid of the negative values
 divide by 90 to get the quadrant
 add 3 and do a modulo by 4  to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
var direction = Math.round((((Math.atan2(y, x) * (180 / Math.PI)) + 180 ) / 90 ) + 3 )  % 4;


/** do your animations here **/ 
switch(direction) {
 case 0:
  /** animations from the TOP **/
 break;
 case 1:
  /** animations from the RIGHT **/
 break;
 case 2:
  /** animations from the BOTTOM **/
 break;
 case 3:
  /** animations from the LEFT **/
 break;
}});
 var direction =  Math.round( Math.atan2(y, x) / 1.57079633 + 5 ) % 4
 ",FALSE,"(function( $, undefined ) {
		
	/*
	 * HoverDir object.
	 */
	$.HoverDir 				= function( options, element ) {
	
		this.$el	= $( element );
		
		this._init( options );
		
	};
	
	$.HoverDir.defaults 	= {
		hoverDelay	: 0,
		reverse		: false
	};
	
	$.HoverDir.prototype 	= {
		_init 				: function( options ) {
			
			this.options 		= $.extend( true, {}, $.HoverDir.defaults, options );
			
			// load the events
			this._loadEvents();
			
		},
		_loadEvents			: function() {
			
			var _self = this;
			
			this.$el.on( 'mouseenter.hoverdir, mouseleave.hoverdir', function( event ) {
				
				var $el			= $(this),
					evType		= event.type,
					$hoverElem	= $el.find( 'div' ),
					direction	= _self._getDir( $el, { x : event.pageX, y : event.pageY } ),
					hoverClasses= _self._getClasses( direction );
				
				$hoverElem.removeClass();
				
				if( evType === 'mouseenter' ) {
					
					$hoverElem.hide().addClass( hoverClasses.from );
					
					clearTimeout( _self.tmhover );
					
					_self.tmhover	= setTimeout( function() {
						
						$hoverElem.show( 0, function() {
							$(this).addClass( 'da-animate' ).addClass( hoverClasses.to );
						} );
						
					
					}, _self.options.hoverDelay );
					
				}
				else {
				
					$hoverElem.addClass( 'da-animate' );
					
					clearTimeout( _self.tmhover );
					
					$hoverElem.addClass( hoverClasses.from );
					
				}
					
			} );
			
		},
		// credits : http://stackoverflow.com/a/3647634
		_getDir				: function( $el, coordinates ) {
			
				/** the width and height of the current div **/
			var w = $el.width(),
				h = $el.height(),

				/** calculate the x and y to get an angle to the center of the div from that x and y. **/
				/** gets the x value relative to the center of the DIV and ""normalize"" it **/
				x = ( coordinates.x - $el.offset().left - ( w/2 )) * ( w > h ? ( h/w ) : 1 ),
				y = ( coordinates.y - $el.offset().top  - ( h/2 )) * ( h > w ? ( w/h ) : 1 ),
			
				/** the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);**/
				/** first calculate the angle of the point, 
				add 180 deg to get rid of the negative values
				divide by 90 to get the quadrant
				add 3 and do a modulo by 4  to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
				direction = Math.round( ( ( ( Math.atan2(y, x) * (180 / Math.PI) ) + 180 ) / 90 ) + 3 )  % 4;
			
			return direction;
			
		},
		_getClasses			: function( direction ) {
			
			var fromClass, toClass;
			
			switch( direction ) {
				case 0:
					// from top
					( !this.options.reverse ) ? fromClass = 'da-slideFromTop' : fromClass = 'da-slideFromBottom';
					toClass		= 'da-slideTop';
					break;
				case 1:
					// from right
					( !this.options.reverse ) ? fromClass = 'da-slideFromRight' : fromClass = 'da-slideFromLeft';
					toClass		= 'da-slideLeft';
					break;
				case 2:
					// from bottom
					( !this.options.reverse ) ? fromClass = 'da-slideFromBottom' : fromClass = 'da-slideFromTop';
					toClass		= 'da-slideTop';
					break;
				case 3:
					// from left
					( !this.options.reverse ) ? fromClass = 'da-slideFromLeft' : fromClass = 'da-slideFromRight';
					toClass		= 'da-slideLeft';
					break;
			};
			
			return { from : fromClass, to: toClass };
					
		}
	};
	
	var logError 			= function( message ) {
		if ( this.console ) {
			console.error( message );
		}
	};
	
	$.fn.hoverdir			= function( options ) {
	
		if ( typeof options === 'string' ) {
			
			var args = Array.prototype.slice.call( arguments, 1 );
			
			this.each(function() {
			
				var instance = $.data( this, 'hoverdir' );
				
				if ( !instance ) {
					logError( ""cannot call methods on hoverdir prior to initialization; "" +
					""attempted to call method '"" + options + ""'"" );
					return;
				}
				
				if ( !$.isFunction( instance[options] ) || options.charAt(0) === ""_"" ) {
					logError( ""no such method '"" + options + ""' for hoverdir instance"" );
					return;
				}
				
				instance[ options ].apply( instance, args );
			
			});
		
		} 
		else {
		
			this.each(function() {
			
				var instance = $.data( this, 'hoverdir' );
				if ( !instance ) {
					$.data( this, 'hoverdir', new $.HoverDir( options, this ) );
				}
			});
		
		}
		
		return this;
		
	};
	
})( jQuery );","(function( $, undefined ) {
		
	/*
	 * HoverDir object.
	 */
	$.HoverDir 				= function( options, element ) {
	
		this.$el	= $( element );
		
		this._init( options );
		
	};
	
	$.HoverDir.defaults 	= {
		hoverDelay	: 0,
		reverse		: false
	};
	
	$.HoverDir.prototype 	= {
		_init 				: function( options ) {
			
			this.options 		= $.extend( true, {}, $.HoverDir.defaults, options );
			
			// load the events
			this._loadEvents();
			
		},
		_loadEvents			: function() {
			
			var _self = this;
			
			this.$el.on( 'mouseenter.hoverdir, mouseleave.hoverdir', function( event ) {
				
				var $el			= $(this),
					evType		= event.type,
					$hoverElem	= $el.find( 'div' ),
					direction	= _self._getDir( $el, { x : event.pageX, y : event.pageY } ),
					hoverClasses= _self._getClasses( direction );
				
				$hoverElem.removeClass();
				
				if( evType === 'mouseenter' ) {
					
					$hoverElem.hide().addClass( hoverClasses.from );
					
					clearTimeout( _self.tmhover );
					
					_self.tmhover	= setTimeout( function() {
						
						$hoverElem.show( 0, function() {
							$(this).addClass( 'da-animate' ).addClass( hoverClasses.to );
						} );
						
					
					}, _self.options.hoverDelay );
					
				}
				else {
				
					$hoverElem.addClass( 'da-animate' );
					
					clearTimeout( _self.tmhover );
					
					$hoverElem.addClass( hoverClasses.from );
					
				}
					
			} );
			
		},
		// credits : http://stackoverflow.com/a/3647634
		_getDir				: function( $el, coordinates ) {
			
				/** the width and height of the current div **/
			var w = $el.width(),
				h = $el.height(),

				/** calculate the x and y to get an angle to the center of the div from that x and y. **/
				/** gets the x value relative to the center of the DIV and ""normalize"" it **/
				x = ( coordinates.x - $el.offset().left - ( w/2 )) * ( w > h ? ( h/w ) : 1 ),
				y = ( coordinates.y - $el.offset().top  - ( h/2 )) * ( h > w ? ( w/h ) : 1 ),
			
				/** the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);**/
				/** first calculate the angle of the point, 
				add 180 deg to get rid of the negative values
				divide by 90 to get the quadrant
				add 3 and do a modulo by 4  to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
				direction = Math.round( ( ( ( Math.atan2(y, x) * (180 / Math.PI) ) + 180 ) / 90 ) + 3 )  % 4;
			
			return direction;
			
		},
		_getClasses			: function( direction ) {
			
			var fromClass, toClass;
			
			switch( direction ) {
				case 0:
					// from top
					( !this.options.reverse ) ? fromClass = 'da-slideFromTop' : fromClass = 'da-slideFromBottom';
					toClass		= 'da-slideTop';
					break;
				case 1:
					// from right
					( !this.options.reverse ) ? fromClass = 'da-slideFromRight' : fromClass = 'da-slideFromLeft';
					toClass		= 'da-slideLeft';
					break;
				case 2:
					// from bottom
					( !this.options.reverse ) ? fromClass = 'da-slideFromBottom' : fromClass = 'da-slideFromTop';
					toClass		= 'da-slideTop';
					break;
				case 3:
					// from left
					( !this.options.reverse ) ? fromClass = 'da-slideFromLeft' : fromClass = 'da-slideFromRight';
					toClass		= 'da-slideLeft';
					break;
			};
			
			return { from : fromClass, to: toClass };
					
		}
	};
	
	var logError 			= function( message ) {
		if ( this.console ) {
			console.error( message );
		}
	};
	
	$.fn.hoverdir			= function( options ) {
	
		if ( typeof options === 'string' ) {
			
			var args = Array.prototype.slice.call( arguments, 1 );
			
			this.each(function() {
			
				var instance = $.data( this, 'hoverdir' );
				
				if ( !instance ) {
					logError( ""cannot call methods on hoverdir prior to initialization; "" +
					""attempted to call method '"" + options + ""'"" );
					return;
				}
				
				if ( !$.isFunction( instance[options] ) || options.charAt(0) === ""_"" ) {
					logError( ""no such method '"" + options + ""' for hoverdir instance"" );
					return;
				}
				
				instance[ options ].apply( instance, args );
			
			});
		
		} 
		else {
		
			this.each(function() {
			
				var instance = $.data( this, 'hoverdir' );
				if ( !instance ) {
					$.data( this, 'hoverdir', new $.HoverDir( options, this ) );
				}
			});
		
		}
		
		return this;
		
	};
	
})( jQuery );",TRUE,,3859
3838,InitialSO.csv3838.txt,InitialGit.csv3838.txt,11,"class assertMethodIsCalled(object):
    def __init__(self, obj, method):
        self.obj = obj
        self.method = method

    def called(self, *args, **kwargs):
        self.method_called = True
        self.orig_method(*args, **kwargs)

    def __enter__(self):
        self.orig_method = getattr(self.obj, self.method)
        setattr(self.obj, self.method, self.called)
        self.method_called = False

    def __exit__(self, exc_type, exc_value, traceback):
        assert getattr(self.obj, self.method) == self.called,
            ""method %s was modified during assertMethodIsCalled"" % self.method

        setattr(self.obj, self.method, self.orig_method)

        # If an exception was thrown within the block, we've already failed.
        if traceback is None:
            assert self.method_called,
                ""method %s of %s was not called"" % (self.method, self.obj)

class test(object):
    def a(self):
        print ""test""
    def b(self):
        self.a()

obj = test()
with assertMethodIsCalled(obj, ""a""):
    obj.b()
 ","class assertMethodIsCalled(object):
    def __init__(self, obj, method):
        self.obj = obj
        self.method = method

    def called(self, *args, **kwargs):
        self.method_called = True
        self.orig_method(*args, **kwargs)

    def __enter__(self):
        self.orig_method = getattr(self.obj, self.method)
        setattr(self.obj, self.method, self.called)
        self.method_called = False

    def __exit__(self, exc_type, exc_value, traceback):
        assert getattr(self.obj, self.method) == self.called,
            ""method %s was modified during assertMethodIsCalled"" % self.method

        setattr(self.obj, self.method, self.orig_method)

        # If an exception was thrown within the block, we've already failed.
        if traceback is None:
            assert self.method_called,
                ""method %s of %s was not called"" % (self.method, self.obj)

class test(object):
    def a(self):
        print ""test""
    def b(self):
        self.a()

obj = test()
with assertMethodIsCalled(obj, ""a""):
    obj.b()
 ",TRUE,"## Testing helpers (from http://stackoverflow.com/a/3829849/221390
class AssertMethodIsCalled(object):
    def __init__(self, obj, method):
        self.obj = obj
        self.method = method

    def called(self, *args, **kwargs):
        self.method_called = True
        self.orig_method(*args, **kwargs)

    def __enter__(self):
        self.orig_method = getattr(self.obj, self.method)
        setattr(self.obj, self.method, self.called)
        self.method_called = False

    def __exit__(self, exc_type, exc_value, traceback):
        assert getattr(self.obj, self.method) == self.called, ""method %s was modified during assertMethodIsCalled"" % self.method

        setattr(self.obj, self.method, self.orig_method)

        # If an exception was thrown within the block, we've already failed.
        if traceback is None:
            assert self.method_called, ""method %s of %s was not called"" % (self.method, self.obj)","## Testing helpers (from http://stackoverflow.com/a/3829849/221390
class AssertMethodIsCalled(object):
    def __init__(self, obj, method):
        self.obj = obj
        self.method = method

    def called(self, *args, **kwargs):
        self.method_called = True
        self.orig_method(*args, **kwargs)

    def __enter__(self):
        self.orig_method = getattr(self.obj, self.method)
        setattr(self.obj, self.method, self.called)
        self.method_called = False

    def __exit__(self, exc_type, exc_value, traceback):
        assert getattr(self.obj, self.method) == self.called, ""method %s was modified during assertMethodIsCalled"" % self.method

        setattr(self.obj, self.method, self.orig_method)

        # If an exception was thrown within the block, we've already failed.
        if traceback is None:
            assert self.method_called, ""method %s of %s was not called"" % (self.method, self.obj)",TRUE,,3860
3843,InitialSO.csv3843.txt,InitialGit.csv3843.txt,8,"/**
 * This function is to replace PHP's extremely buggy realpath().
 * @param string The original path, can be relative etc.
 * @return string The resolved path, it might not exist.
 */
function truepath($path){
    // whether $path is unix or not
    $unipath=strlen($path)==0 || $path{0}!='/';
    // attempts to detect if path is relative in which case, add cwd
    if(strpos($path,':')===false && $unipath)
        $path=getcwd().DIRECTORY_SEPARATOR.$path;
    // resolve path parts (single dot, double dot and double delimiters)
    $path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path);
    $parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen');
    $absolutes = array();
    foreach ($parts as $part) {
        if ('.'  == $part) continue;
        if ('..' == $part) {
            array_pop($absolutes);
        } else {
            $absolutes[] = $part;
        }
    }
    $path=implode(DIRECTORY_SEPARATOR, $absolutes);
    // resolve any symlinks
    if(file_exists($path) && linkinfo($path)>0)$path=readlink($path);
    // put initial separator that could have been lost
    $path=!$unipath ? '/'.$path : $path;
    return $path;
}
 realpath ","/**
 * This function is to replace PHP's extremely buggy realpath().
 * @param string The original path, can be relative etc.
 * @return string The resolved path, it might not exist.
 */
function truepath($path){
    // whether $path is unix or not
    $unipath=strlen($path)==0 || $path{0}!='/';
    // attempts to detect if path is relative in which case, add cwd
    if(strpos($path,':')===false && $unipath)
        $path=getcwd().DIRECTORY_SEPARATOR.$path;
    // resolve path parts (single dot, double dot and double delimiters)
    $path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path);
    $parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen');
    $absolutes = array();
    foreach ($parts as $part) {
        if ('.'  == $part) continue;
        if ('..' == $part) {
            array_pop($absolutes);
        } else {
            $absolutes[] = $part;
        }
    }
    $path=implode(DIRECTORY_SEPARATOR, $absolutes);
    // resolve any symlinks
    if(file_exists($path) && linkinfo($path)>0)$path=readlink($path);
    // put initial separator that could have been lost
    $path=!$unipath ? '/'.$path : $path;
    return $path;
}
 realpath ",TRUE,"<?php

/**
 * Miscellaneous plugin-wide functions.
 *
 * Various static functions to provide information to modules and other areas throughout the plugin.
 *
 * @package iThemes_Security
 *
 * @since   4.0.0
 */
final class ITSEC_Lib {

	/**
	 * Converts CIDR to ip range.
	 *
	 * Modified from function at http://stackoverflow.com/questions/4931721/getting-list-ips-from-cidr-notation-in-php
	 * as it was far more elegant than my own solution
	 *
	 * @since 4.0.0.0
	 *
	 * @param string $cidr cidr notation to convert
	 *
	 * @return array        range of ips returned
	 */
	public static function cidr_to_range( $cidr ) {

		$range = array();

		if ( strpos( $cidr, '/' ) ) {

			$cidr = explode( '/', $cidr );

			$range[] = long2ip( ( ip2long( $cidr[0] ) ) & ( ( - 1 << ( 32 - (int) $cidr[1] ) ) ) );
			$range[] = long2ip( ( ip2long( $cidr[0] ) ) + pow( 2, ( 32 - (int) $cidr[1] ) ) - 1 );

		} else { //if not a range just return the original ip

			$range[] = $cidr;

		}

		return $range;

	}

	/**
	 * Clear caches.
	 *
	 * Clears popular WordPress caching mechanisms.
	 *
	 * @since 4.0.0
	 *
	 * @param bool $page [optional] true to clear page cache
	 *
	 * @return void
	 */
	public static function clear_caches( $page = false ) {

		//clear APC Cache
		if ( function_exists( 'apc_store' ) ) {
			apc_clear_cache(); //Let's clear APC (if it exists) when big stuff is saved.
		}

		//clear w3 total cache or wp super cache
		if ( function_exists( 'w3tc_pgcache_flush' ) ) {

			if ( true == $page ) {
				w3tc_pgcache_flush();
				w3tc_minify_flush();
			}

			w3tc_dbcache_flush();
			w3tc_objectcache_flush();

		} else if ( function_exists( 'wp_cache_clear_cache' ) && true == $page ) {

			wp_cache_clear_cache();

		}

	}

	/**
	 * Creates appropriate database tables.
	 *
	 * Uses dbdelta to create database tables either on activation or in the event that one is missing.
	 *
	 * @since 4.0.0
	 *
	 * @return void
	 */
	public static function create_database_tables() {

		global $wpdb;

		$charset_collate = '';

		if ( ! empty( $wpdb->charset ) ) {
			$charset_collate = ""DEFAULT CHARACTER SET $wpdb->charset"";
		}

		if ( ! empty( $wpdb->collate ) ) {
			$charset_collate .= "" COLLATE $wpdb->collate"";
		}

		//Set up log table
		$tables = ""CREATE TABLE "" . $wpdb->prefix . ""itsec_log (
				log_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				log_type varchar(20) NOT NULL DEFAULT '',
				log_function varchar(255) NOT NULL DEFAULT '',
				log_priority int(2) NOT NULL DEFAULT 1,
				log_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				log_date_gmt datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				log_host varchar(20),
				log_username varchar(20),
				log_user bigint(20) UNSIGNED,
				log_url varchar(255),
				log_referrer varchar(255),
				log_data longtext NOT NULL,
				PRIMARY KEY  (log_id),
				KEY log_type (log_type),
				KEY log_date_gmt (log_date_gmt)
				) "" . $charset_collate . "";"";

		//set up lockout table
		$tables .= ""CREATE TABLE "" . $wpdb->prefix . ""itsec_lockouts (
				lockout_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				lockout_type varchar(20) NOT NULL,
				lockout_start datetime NOT NULL,
				lockout_start_gmt datetime NOT NULL,
				lockout_expire datetime NOT NULL,
				lockout_expire_gmt datetime NOT NULL,
				lockout_host varchar(20),
				lockout_user bigint(20) UNSIGNED,
				lockout_username varchar(20),
				lockout_active int(1) NOT NULL DEFAULT 1,
				PRIMARY KEY  (lockout_id),
				KEY lockout_expire_gmt (lockout_expire_gmt),
				KEY lockout_host (lockout_host),
				KEY lockout_user (lockout_user),
				KEY lockout_username (lockout_username),
				KEY lockout_active (lockout_active)
				) "" . $charset_collate . "";"";

		//set up temp table
		$tables .= ""CREATE TABLE "" . $wpdb->prefix . ""itsec_temp (
				temp_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				temp_type varchar(20) NOT NULL,
				temp_date datetime NOT NULL,
				temp_date_gmt datetime NOT NULL,
				temp_host varchar(20),
				temp_user bigint(20) UNSIGNED,
				temp_username varchar(20),
				PRIMARY KEY  (temp_id),
				KEY temp_date_gmt (temp_date_gmt),
				KEY temp_host (temp_host),
				KEY temp_user (temp_user),
				KEY temp_username (temp_username)
				) "" . $charset_collate . "";"";

		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
		@dbDelta( $tables );

	}

	/**
	 * Gets location of wp-config.php.
	 *
	 * Finds and returns path to wp-config.php
	 *
	 * @since 4.0.0
	 *
	 * @return string path to wp-config.php
	 * */
	public static function get_config() {

		if ( file_exists( trailingslashit( ABSPATH ) . 'wp-config.php' ) ) {

			return trailingslashit( ABSPATH ) . 'wp-config.php';

		} else {

			return trailingslashit( dirname( ABSPATH ) ) . 'wp-config.php';

		}

	}

	/**
	 * Gets current url
	 *
	 * Finds and returns current url.
	 *
	 * @since 4.3.0
	 *
	 * @return string current url
	 * */
	public static function get_current_url() {

		$page_url = 'http';

		if ( isset( $_SERVER[""HTTPS""] ) ) {

			if ( 'on' == $_SERVER[""HTTPS""] ) {
				$page_url .= ""s"";
			}

		}

		$page_url .= ""://"";

		if ( '80' != $_SERVER[""SERVER_PORT""] ) {

			$page_url .= $_SERVER[""SERVER_NAME""] . "":"" . $_SERVER[""SERVER_PORT""] . $_SERVER[""REQUEST_URI""];

		} else {

			$page_url .= $_SERVER[""SERVER_NAME""] . $_SERVER[""REQUEST_URI""];

		}

		return esc_url( $page_url );
	}

	/**
	 * Return primary domain from given url.
	 *
	 * Returns primary domain name (without subdomains) of given URL.
	 *
	 * @since 4.0.0
	 *
	 * @param string $url          URL to filter
	 *
	 * @return string domain name or '*' on error or domain mapped multisite
	 * */
	public static function get_domain( $url ) {
		if ( is_multisite() && function_exists( 'domain_mapping_warning' ) ) {
			return '*';
		}
		
		
		$host = parse_url( $url, PHP_URL_HOST );
		
		if ( false === $host ) {
			return '*';
		}
		if ( 'www.' == substr( $host, 0, 4 ) ) {
			return substr( $host, 4 );
		}
		
		$host_parts = explode( '.', $host );
		
		if ( count( $host_parts ) > 2 ) {
			$host_parts = array_slice( $host_parts, -2, 2 );
		}
		
		return implode( '.', $host_parts );
	}

	/**
	 * Get path to WordPress install.
	 *
	 * Get the absolute filesystem path to the root of the WordPress installation.
	 *
	 * @since 4.3.0
	 *
	 * @return string Full filesystem path to the root of the WordPress installation
	 */
	public static function get_home_path() {

		$home    = set_url_scheme( get_option( 'home' ), 'http' );
		$siteurl = set_url_scheme( get_option( 'siteurl' ), 'http' );

		if ( ! empty( $home ) && 0 !== strcasecmp( $home, $siteurl ) ) {

			$wp_path_rel_to_home = str_ireplace( $home, '', $siteurl ); /* $siteurl - $home */
			$pos                 = strripos( str_replace( '\\', '/', $_SERVER['SCRIPT_FILENAME'] ), trailingslashit( $wp_path_rel_to_home ) );

			if ( $pos === false ) {

				$home_path = dirname( $_SERVER['SCRIPT_FILENAME'] );

			} else {

				$home_path = substr( $_SERVER['SCRIPT_FILENAME'], 0, $pos );

			}

		} else {

			$home_path = ABSPATH;

		}

		return trailingslashit( str_replace( '\\', '/', $home_path ) );

	}

	/**
	 * Returns the root of the WordPress install.
	 *
	 * Get's the URI path to the WordPress installation.
	 *
	 * @since 4.0.6
	 *
	 * @return string the root folder
	 */
	public static function get_home_root() {

		//homeroot from wp_rewrite
		$home_root = parse_url( site_url() );

		if ( isset( $home_root['path'] ) ) {

			$home_root = trailingslashit( $home_root['path'] );

		} else {

			$home_root = '/';

		}

		return $home_root;

	}

	/**
	 * Gets location of .htaccess
	 *
	 * Finds and returns path to .htaccess or nginx.conf if appropriate
	 *
	 * @since 4.0.0
	 *
	 * @return string path to .htaccess
	 */
	public static function get_htaccess() {

		global $itsec_globals;

		if ( 'nginx' === ITSEC_Lib::get_server() ) {

			return $itsec_globals['settings']['nginx_file'];

		} else {

			return ITSEC_Lib::get_home_path() . '.htaccess';

		}

	}

	/**
	 * Returns the actual IP address of the user.
	 *
	 * Determines the user's IP address by returning the forwarded IP address if present or
	 * the direct IP address if not.
	 *
	 * @since 4.0.0
	 *
	 * @return  String The IP address of the user
	 */
	public static function get_ip() {

		global $itsec_globals;

		if ( isset( $itsec_globals['settings']['proxy_override'] ) && true === $itsec_globals['settings']['proxy_override'] ) {
			return esc_sql( $_SERVER['REMOTE_ADDR'] );
		}

		//Just get the headers if we can or else use the SERVER global
		if ( function_exists( 'apache_request_headers' ) ) {

			$headers = apache_request_headers();

		} else {

			$headers = $_SERVER;

		}

		//Get the forwarded IP if it exists
		if ( array_key_exists( 'X-Forwarded-For', $headers ) &&
		     (
			     filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ||
			     filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6 ) )
		) {

			$the_ip = $headers['X-Forwarded-For'];

		} elseif (
			array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ) &&
			(
				filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ||
				filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6 )
			)
		) {

			$the_ip = $headers['HTTP_X_FORWARDED_FOR'];

		} else if ( isset( $_SERVER['REMOTE_ADDR'] ) ) {

			$the_ip = $_SERVER['REMOTE_ADDR'];

		} else {
			$the_ip = '';
		}

		return esc_sql( $the_ip );

	}

	/**
	 * Gets PHP Memory Limit.
	 *
	 * Attempts to get the maximum amount of memory allowed for the application by the server.
	 *
	 * @since 4.0.0
	 *
	 * @return int php memory limit in megabytes
	 */
	public static function get_memory_limit() {

		return (int) ini_get( 'memory_limit' );

	}

	/**
	 * Returns the URL of the current module.
	 *
	 * Get's the full URL of the current module.
	 *
	 * @since 4.0.0
	 *
	 * @param string $file the module file from which to derive the path
	 *
	 * @return string the path of the current module
	 */
	public static function get_module_path( $file ) {

		global $itsec_globals;

		$path = str_replace( $itsec_globals['plugin_dir'], '', dirname( $file ) );
		$path = ltrim( str_replace( '\\', '/', $path ), '/' );

		return trailingslashit( trailingslashit( $itsec_globals['plugin_url'] ) . $path );

	}

	/**
	 * Returns a psuedo-random string of requested length.
	 *
	 * Builds a random string similar to the WordPress password functions.
	 *
	 * @since 4.0.0
	 *
	 * @param int  $length        how long the string should be (max 62)
	 * @param bool $base32        true if use only base32 characters to generate
	 * @param bool $special_chars whether to include special characters in generation
	 *
	 * @return string
	 */
	public static function get_random( $length, $base32 = false, $special_chars = false ) {

		if ( true === $base32 ) {

			$string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';

		} else {

			$string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

			if ( true === $special_chars ) {

				$string .= '_)(*&^%$#@!~`:;<>,.?/{}[]|';

			}

		}

		return substr( str_shuffle( $string ), mt_rand( 0, strlen( $string ) - $length ), $length );

	}

	/**
	 * Returns the server type of the plugin user.
	 *
	 * Attempts to figure out what http server the visiting user is running.
	 *
	 * @since 4.0.0
	 *
	 * @return string|bool server type the user is using of false if undetectable.
	 */
	public static function get_server() {

		//Allows to override server authentication for testing or other reasons.
		if ( defined( 'ITSEC_SERVER_OVERRIDE' ) ) {
			return ITSEC_SERVER_OVERRIDE;
		}

		$server_raw = strtolower( filter_var( $_SERVER['SERVER_SOFTWARE'], FILTER_SANITIZE_STRING ) );

		//figure out what server they're using
		if ( false !== strpos( $server_raw, 'apache' ) ) {

			return 'apache';

		} elseif ( false !== strpos( $server_raw, 'nginx' ) ) {

			return 'nginx';

		} elseif ( false !== strpos( $server_raw, 'litespeed' ) ) {

			return 'litespeed';

		} else { //unsupported server

			return false;

		}

	}

	/**
	 * Determine whether the server supports SSL (shared cert not supported.
	 *
	 * Attempts to retrieve an HTML version of the homepage in an effort to determine if SSL is available.
	 *
	 * @since 4.0.0
	 *
	 * @return bool true if ssl is supported or false
	 */
	public static function get_ssl() {

		$url = str_ireplace( 'http://', 'https://', get_bloginfo( 'url' ) );

		if ( function_exists( 'wp_http_supports' ) && wp_http_supports( array( 'ssl' ), $url ) ) {

			return true;

		} elseif ( function_exists( 'curl_init' ) ) {

			//use a manual CURL request to better account for self-signed certificates
			$timeout    = 5; //timeout for the request
			$site_title = trim( get_bloginfo() );

			$request = curl_init();

			curl_setopt( $request, CURLOPT_RETURNTRANSFER, true );
			curl_setopt( $request, CURLOPT_VERBOSE, false );
			curl_setopt( $request, CURLOPT_SSL_VERIFYPEER, false );
			curl_setopt( $request, CURLOPT_HEADER, true );
			curl_setopt( $request, CURLOPT_URL, $url );
			curl_setopt( $request, CURLOPT_RETURNTRANSFER, true );
			curl_setopt( $request, CURLOPT_CONNECTTIMEOUT, $timeout );

			$data = curl_exec( $request );

			$header_size = curl_getinfo( $request, CURLINFO_HEADER_SIZE );
			$http_code   = intval( curl_getinfo( $request, CURLINFO_HTTP_CODE ) );
			$body        = substr( $data, $header_size );

			preg_match( '/<title>(.+)<\/title>/', $body, $matches );

			if ( 200 == $http_code && isset( $matches[1] ) && false !== strpos( $matches[1], $site_title ) ) {

				return true;

			} else {

				return false;

			}

		}

		return false;

	}

	/**
	 * Converts IP with a netmask wildcards to one with * instead
	 *
	 * Allows use of wildcards in IP address by converting them to standard notation.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip ip to convert
	 *
	 * @return string     the converted ip
	 */
	public static function ip_mask_to_range( $ip ) {

		if ( strpos( $ip, '/' ) ) {

			$parts  = explode( '/', trim( $ip ) );
			$octets = array_reverse( explode( '.', trim( $parts[0] ) ) );

			if ( isset( $parts[1] ) && 0 < intval( $parts[1] ) ) {

				$wildcards = ( 32 - $parts[1] ) / 8;

				for ( $count = 0; $count < $wildcards; $count ++ ) {

					$octets[$count] = '[0-9]+';

				}

				return implode( '.', array_reverse( $octets ) );

			} else {

				return $ip;

			}

		}

		return $ip;

	}

	/**
	 * Converts IP with * wildcards to one with a netmask instead
	 *
	 * Attempts to create a standardized CIDR block from an IP using wildcards.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip ip to convert
	 *
	 * @return string     the converted ip
	 */
	public static function ip_wild_to_mask( $ip ) {

		$host_parts = array_reverse( explode( '.', trim( $ip ) ) );

		if ( strpos( $ip, '*' ) ) {

			$mask           = 32; //used to calculate netmask with wildcards
			$converted_host = str_replace( '*', '0', $ip );

			//convert hosts with wildcards to host with netmask and create rule lines
			foreach ( $host_parts as $part ) {

				if ( '*' === $part ) {
					$mask = $mask - 8;
				}

			}

			$converted_host = trim( $converted_host );

			//Apply a mask if we had to convert
			if ( 0 < $mask ) {
				$converted_host .= '/' . $mask;
			}

			return $converted_host;

		}

		return $ip;

	}

	/**
	 * Determine whether we're on the login page or not.
	 *
	 * Attempts to determine whether or not the user is on the WordPress dashboard login page.
	 *
	 * @since 4.0.0
	 *
	 * @return bool true if is login page else false
	 */
	public static function is_login_page() {

		return in_array( $GLOBALS['pagenow'], array( 'wp-login.php', 'wp-register.php' ) );

	}

	/**
	 * Checks jQuery version.
	 *
	 * Checks if the jquery version saved is vulnerable to http://bugs.jquery.com/ticket/9521
	 *
	 * @since 4.0.0
	 *
	 * @return mixed|bool true if known safe false if unsafe or null if untested
	 */
	public static function safe_jquery_version() {

		$jquery_version = get_site_option( 'itsec_jquery_version' );

		if ( false !== $jquery_version && version_compare( $jquery_version, '1.6.3', '>=' ) ) {

			return true;

		} elseif ( false === $jquery_version ) {

			return null;

		}

		return false;

	}

	/**
	 * Set a 404 error.
	 *
	 * Forces the given page to a WordPress 404 error.
	 *
	 * @since 4.0.0
	 *
	 * @return void
	 */
	public static function set_404() {

		global $wp_query;

		status_header( 404 );

		if ( function_exists( 'nocache_headers' ) ) {
			nocache_headers();
		}

		$wp_query->set_404();
		$page_404 = get_404_template();

		if ( 1 < strlen( $page_404 ) ) {

			include( $page_404 );

		} else {

			include( get_query_template( 'index' ) );

		}

		die();

	}

	/**
	 * Increases minimum memory limit.
	 *
	 * This function, adopted from builder, attempts to increase the minimum
	 * memory limit before heavy functions.
	 *
	 * @since 4.0.0
	 *
	 * @param int $new_memory_limit what the new memory limit should be
	 *
	 * @return void
	 */
	public static function set_minimum_memory_limit( $new_memory_limit ) {

		$memory_limit = @ini_get( 'memory_limit' );

		if ( - 1 < $memory_limit ) {

			$unit = strtolower( substr( $memory_limit, - 1 ) );

			$new_unit = strtolower( substr( $new_memory_limit, - 1 ) );

			if ( 'm' == $unit ) {

				$memory_limit *= 1048576;

			} else if ( 'g' == $unit ) {

				$memory_limit *= 1073741824;

			} else if ( 'k' == $unit ) {

				$memory_limit *= 1024;

			}

			if ( 'm' == $new_unit ) {

				$new_memory_limit *= 1048576;

			} else if ( 'g' == $new_unit ) {

				$new_memory_limit *= 1073741824;

			} else if ( 'k' == $new_unit ) {

				$new_memory_limit *= 1024;

			}

			if ( (int) $memory_limit < (int) $new_memory_limit ) {
				@ini_set( 'memory_limit', $new_memory_limit );
			}

		}

	}

	/**
	 * Checks if user exists.
	 *
	 * Checks to see if WordPress user with given id exists.
	 *
	 * @since 4.0.0
	 *
	 * @param int $user_id user id of user to check
	 *
	 * @return bool true if user exists otherwise false
	 *
	 * */
	public static function user_id_exists( $user_id ) {

		global $wpdb;

		//return false if username is null
		if ( '' == $user_id ) {
			return false;
		}

		//queary the user table to see if the user is there
		$saved_id = $wpdb->get_var( $wpdb->prepare( ""SELECT ID FROM `"" . $wpdb->users . ""` WHERE ID='%s';"", sanitize_text_field( $user_id ) ) );

		if ( $saved_id == $user_id ) {

			return true;

		} else {

			return false;

		}

	}

	/**
	 * Validates a list of ip addresses.
	 *
	 * Makes sure that the provided IP addresses are in fact valid IPV4 addresses.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip string of hosts to check
	 *
	 * @return array array of good hosts or false
	 */
	public static function validates_ip_address( $ip ) {
		$ip = trim( filter_var( $ip, FILTER_SANITIZE_STRING ) );
		
		if ( substr_count( $ip, '.' ) !== 3 ) {
			return false;
		}
		
		$has_cidr = ( false !== strpos( $ip, '/' ) );
		$has_wildcard = ( false !== strpos( $ip, '*' ) );
		
		if ( $has_cidr && $has_wildcard ) {
			return false;
		}
		
		$ip_digit_regex = '(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';
		$cidr_digit_regex = '(?:3[0-2]|2[0-9]|1[1-9]|[148])';
		
		$ip_regex = ""(?:$ip_digit_regex\.){3}$ip_digit_regex"";
		
		if ( $has_cidr ) {
			return (boolean) preg_match( ""{^$ip_regex/$cidr_digit_regex$}"", $ip );
		}
		
		if ( $has_wildcard ) {
			$wildcard_count = substr_count( $ip, '*' );
			
			if ( 1 === $wildcard_count ) {
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.){3}\*$}"", $ip );
			} else if ( 2 === $wildcard_count ) { 
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.){2}\*\.\*$}"", $ip );
			} else if ( 3 === $wildcard_count ) { 
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.)\*\.\*\.\*$}"", $ip );
			}
			
			return false;
		}
		
		return (boolean) preg_match( ""{^$ip_regex$}"", $ip );
	}
	
	/**
	 * Validates a file path
	 *
	 * Adapted from http://stackoverflow.com/questions/4049856/replace-phps-realpath/4050444#4050444 as a replacement for PHP's realpath
	 *
	 * @since 4.0.0
	 *
	 * @param string $path The original path, can be relative etc.
	 *
	 * @return bool true if the path is valid and writeable else false
	 */
	public static function validate_path( $path ) {

		// whether $path is unix or not
		$unipath = strlen( $path ) == 0 || $path{0} != '/';

		// attempts to detect if path is relative in which case, add cwd
		if ( false === strpos( $path, ':' ) && $unipath ) {
			$path = getcwd() . DIRECTORY_SEPARATOR . $path;
		}

		// resolve path parts (single dot, double dot and double delimiters)
		$path      = str_replace( array( '/', '\\' ), DIRECTORY_SEPARATOR, $path );
		$parts     = array_filter( explode( DIRECTORY_SEPARATOR, $path ), 'strlen' );
		$absolutes = array();

		foreach ( $parts as $part ) {

			if ( '.' == $part ) {
				continue;
			}

			if ( '..' == $part ) {

				array_pop( $absolutes );

			} else {

				$absolutes[] = $part;

			}

		}

		$path = implode( DIRECTORY_SEPARATOR, $absolutes );

		// resolve any symlinks
		if ( function_exists( 'linkinfo' ) ) { //linkinfo not available on Windows with PHP < 5.3.0

			if ( file_exists( $path ) && 0 < linkinfo( $path ) ) {
				$path = @readlink( $path );
			}

		} else {

			if ( file_exists( $path ) && 0 < linkinfo( $path ) ) {
				$path = @readlink( $path );
			}

		}

		// put initial separator that could have been lost
		$path = ! $unipath ? '/' . $path : $path;

		$test = @touch( $path . '/test.txt' );
		@unlink( $path . '/test.txt' );

		return $test;

	}

	/**
	 * Validates a URL
	 *
	 * Ensures the provided URL is a valid URL.
	 *
	 * @since 4.3.0
	 *
	 * @param string $url the url to validate
	 *
	 * @return bool true if valid url else false
	 */
	public static function validate_url( $url ) {

		$pattern = ""/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\/?/i"";

		return (bool) preg_match( $pattern, $url );

	}

}
","<?php

/**
 * Miscellaneous plugin-wide functions.
 *
 * Various static functions to provide information to modules and other areas throughout the plugin.
 *
 * @package iThemes_Security
 *
 * @since   4.0.0
 */
final class ITSEC_Lib {

	/**
	 * Converts CIDR to ip range.
	 *
	 * Modified from function at http://stackoverflow.com/questions/4931721/getting-list-ips-from-cidr-notation-in-php
	 * as it was far more elegant than my own solution
	 *
	 * @since 4.0.0.0
	 *
	 * @param string $cidr cidr notation to convert
	 *
	 * @return array        range of ips returned
	 */
	public static function cidr_to_range( $cidr ) {

		$range = array();

		if ( strpos( $cidr, '/' ) ) {

			$cidr = explode( '/', $cidr );

			$range[] = long2ip( ( ip2long( $cidr[0] ) ) & ( ( - 1 << ( 32 - (int) $cidr[1] ) ) ) );
			$range[] = long2ip( ( ip2long( $cidr[0] ) ) + pow( 2, ( 32 - (int) $cidr[1] ) ) - 1 );

		} else { //if not a range just return the original ip

			$range[] = $cidr;

		}

		return $range;

	}

	/**
	 * Clear caches.
	 *
	 * Clears popular WordPress caching mechanisms.
	 *
	 * @since 4.0.0
	 *
	 * @param bool $page [optional] true to clear page cache
	 *
	 * @return void
	 */
	public static function clear_caches( $page = false ) {

		//clear APC Cache
		if ( function_exists( 'apc_store' ) ) {
			apc_clear_cache(); //Let's clear APC (if it exists) when big stuff is saved.
		}

		//clear w3 total cache or wp super cache
		if ( function_exists( 'w3tc_pgcache_flush' ) ) {

			if ( true == $page ) {
				w3tc_pgcache_flush();
				w3tc_minify_flush();
			}

			w3tc_dbcache_flush();
			w3tc_objectcache_flush();

		} else if ( function_exists( 'wp_cache_clear_cache' ) && true == $page ) {

			wp_cache_clear_cache();

		}

	}

	/**
	 * Creates appropriate database tables.
	 *
	 * Uses dbdelta to create database tables either on activation or in the event that one is missing.
	 *
	 * @since 4.0.0
	 *
	 * @return void
	 */
	public static function create_database_tables() {

		global $wpdb;

		$charset_collate = '';

		if ( ! empty( $wpdb->charset ) ) {
			$charset_collate = ""DEFAULT CHARACTER SET $wpdb->charset"";
		}

		if ( ! empty( $wpdb->collate ) ) {
			$charset_collate .= "" COLLATE $wpdb->collate"";
		}

		//Set up log table
		$tables = ""CREATE TABLE "" . $wpdb->prefix . ""itsec_log (
				log_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				log_type varchar(20) NOT NULL DEFAULT '',
				log_function varchar(255) NOT NULL DEFAULT '',
				log_priority int(2) NOT NULL DEFAULT 1,
				log_date datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				log_date_gmt datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
				log_host varchar(20),
				log_username varchar(20),
				log_user bigint(20) UNSIGNED,
				log_url varchar(255),
				log_referrer varchar(255),
				log_data longtext NOT NULL,
				PRIMARY KEY  (log_id),
				KEY log_type (log_type),
				KEY log_date_gmt (log_date_gmt)
				) "" . $charset_collate . "";"";

		//set up lockout table
		$tables .= ""CREATE TABLE "" . $wpdb->prefix . ""itsec_lockouts (
				lockout_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				lockout_type varchar(20) NOT NULL,
				lockout_start datetime NOT NULL,
				lockout_start_gmt datetime NOT NULL,
				lockout_expire datetime NOT NULL,
				lockout_expire_gmt datetime NOT NULL,
				lockout_host varchar(20),
				lockout_user bigint(20) UNSIGNED,
				lockout_username varchar(20),
				lockout_active int(1) NOT NULL DEFAULT 1,
				PRIMARY KEY  (lockout_id),
				KEY lockout_expire_gmt (lockout_expire_gmt),
				KEY lockout_host (lockout_host),
				KEY lockout_user (lockout_user),
				KEY lockout_username (lockout_username),
				KEY lockout_active (lockout_active)
				) "" . $charset_collate . "";"";

		//set up temp table
		$tables .= ""CREATE TABLE "" . $wpdb->prefix . ""itsec_temp (
				temp_id bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
				temp_type varchar(20) NOT NULL,
				temp_date datetime NOT NULL,
				temp_date_gmt datetime NOT NULL,
				temp_host varchar(20),
				temp_user bigint(20) UNSIGNED,
				temp_username varchar(20),
				PRIMARY KEY  (temp_id),
				KEY temp_date_gmt (temp_date_gmt),
				KEY temp_host (temp_host),
				KEY temp_user (temp_user),
				KEY temp_username (temp_username)
				) "" . $charset_collate . "";"";

		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
		@dbDelta( $tables );

	}

	/**
	 * Gets location of wp-config.php.
	 *
	 * Finds and returns path to wp-config.php
	 *
	 * @since 4.0.0
	 *
	 * @return string path to wp-config.php
	 * */
	public static function get_config() {

		if ( file_exists( trailingslashit( ABSPATH ) . 'wp-config.php' ) ) {

			return trailingslashit( ABSPATH ) . 'wp-config.php';

		} else {

			return trailingslashit( dirname( ABSPATH ) ) . 'wp-config.php';

		}

	}

	/**
	 * Gets current url
	 *
	 * Finds and returns current url.
	 *
	 * @since 4.3.0
	 *
	 * @return string current url
	 * */
	public static function get_current_url() {

		$page_url = 'http';

		if ( isset( $_SERVER[""HTTPS""] ) ) {

			if ( 'on' == $_SERVER[""HTTPS""] ) {
				$page_url .= ""s"";
			}

		}

		$page_url .= ""://"";

		if ( '80' != $_SERVER[""SERVER_PORT""] ) {

			$page_url .= $_SERVER[""SERVER_NAME""] . "":"" . $_SERVER[""SERVER_PORT""] . $_SERVER[""REQUEST_URI""];

		} else {

			$page_url .= $_SERVER[""SERVER_NAME""] . $_SERVER[""REQUEST_URI""];

		}

		return esc_url( $page_url );
	}

	/**
	 * Return primary domain from given url.
	 *
	 * Returns primary domain name (without subdomains) of given URL.
	 *
	 * @since 4.0.0
	 *
	 * @param string $url          URL to filter
	 *
	 * @return string domain name or '*' on error or domain mapped multisite
	 * */
	public static function get_domain( $url ) {
		if ( is_multisite() && function_exists( 'domain_mapping_warning' ) ) {
			return '*';
		}
		
		
		$host = parse_url( $url, PHP_URL_HOST );
		
		if ( false === $host ) {
			return '*';
		}
		if ( 'www.' == substr( $host, 0, 4 ) ) {
			return substr( $host, 4 );
		}
		
		$host_parts = explode( '.', $host );
		
		if ( count( $host_parts ) > 2 ) {
			$host_parts = array_slice( $host_parts, -2, 2 );
		}
		
		return implode( '.', $host_parts );
	}

	/**
	 * Get path to WordPress install.
	 *
	 * Get the absolute filesystem path to the root of the WordPress installation.
	 *
	 * @since 4.3.0
	 *
	 * @return string Full filesystem path to the root of the WordPress installation
	 */
	public static function get_home_path() {

		$home    = set_url_scheme( get_option( 'home' ), 'http' );
		$siteurl = set_url_scheme( get_option( 'siteurl' ), 'http' );

		if ( ! empty( $home ) && 0 !== strcasecmp( $home, $siteurl ) ) {

			$wp_path_rel_to_home = str_ireplace( $home, '', $siteurl ); /* $siteurl - $home */
			$pos                 = strripos( str_replace( '\\', '/', $_SERVER['SCRIPT_FILENAME'] ), trailingslashit( $wp_path_rel_to_home ) );

			if ( $pos === false ) {

				$home_path = dirname( $_SERVER['SCRIPT_FILENAME'] );

			} else {

				$home_path = substr( $_SERVER['SCRIPT_FILENAME'], 0, $pos );

			}

		} else {

			$home_path = ABSPATH;

		}

		return trailingslashit( str_replace( '\\', '/', $home_path ) );

	}

	/**
	 * Returns the root of the WordPress install.
	 *
	 * Get's the URI path to the WordPress installation.
	 *
	 * @since 4.0.6
	 *
	 * @return string the root folder
	 */
	public static function get_home_root() {

		//homeroot from wp_rewrite
		$home_root = parse_url( site_url() );

		if ( isset( $home_root['path'] ) ) {

			$home_root = trailingslashit( $home_root['path'] );

		} else {

			$home_root = '/';

		}

		return $home_root;

	}

	/**
	 * Gets location of .htaccess
	 *
	 * Finds and returns path to .htaccess or nginx.conf if appropriate
	 *
	 * @since 4.0.0
	 *
	 * @return string path to .htaccess
	 */
	public static function get_htaccess() {

		global $itsec_globals;

		if ( 'nginx' === ITSEC_Lib::get_server() ) {

			return $itsec_globals['settings']['nginx_file'];

		} else {

			return ITSEC_Lib::get_home_path() . '.htaccess';

		}

	}

	/**
	 * Returns the actual IP address of the user.
	 *
	 * Determines the user's IP address by returning the forwarded IP address if present or
	 * the direct IP address if not.
	 *
	 * @since 4.0.0
	 *
	 * @return  String The IP address of the user
	 */
	public static function get_ip() {

		global $itsec_globals;

		if ( isset( $itsec_globals['settings']['proxy_override'] ) && true === $itsec_globals['settings']['proxy_override'] ) {
			return esc_sql( $_SERVER['REMOTE_ADDR'] );
		}

		//Just get the headers if we can or else use the SERVER global
		if ( function_exists( 'apache_request_headers' ) ) {

			$headers = apache_request_headers();

		} else {

			$headers = $_SERVER;

		}

		//Get the forwarded IP if it exists
		if ( array_key_exists( 'X-Forwarded-For', $headers ) &&
		     (
			     filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ||
			     filter_var( $headers['X-Forwarded-For'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6 ) )
		) {

			$the_ip = $headers['X-Forwarded-For'];

		} elseif (
			array_key_exists( 'HTTP_X_FORWARDED_FOR', $headers ) &&
			(
				filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 ) ||
				filter_var( $headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6 )
			)
		) {

			$the_ip = $headers['HTTP_X_FORWARDED_FOR'];

		} else if ( isset( $_SERVER['REMOTE_ADDR'] ) ) {

			$the_ip = $_SERVER['REMOTE_ADDR'];

		} else {
			$the_ip = '';
		}

		return esc_sql( $the_ip );

	}

	/**
	 * Gets PHP Memory Limit.
	 *
	 * Attempts to get the maximum amount of memory allowed for the application by the server.
	 *
	 * @since 4.0.0
	 *
	 * @return int php memory limit in megabytes
	 */
	public static function get_memory_limit() {

		return (int) ini_get( 'memory_limit' );

	}

	/**
	 * Returns the URL of the current module.
	 *
	 * Get's the full URL of the current module.
	 *
	 * @since 4.0.0
	 *
	 * @param string $file the module file from which to derive the path
	 *
	 * @return string the path of the current module
	 */
	public static function get_module_path( $file ) {

		global $itsec_globals;

		$path = str_replace( $itsec_globals['plugin_dir'], '', dirname( $file ) );
		$path = ltrim( str_replace( '\\', '/', $path ), '/' );

		return trailingslashit( trailingslashit( $itsec_globals['plugin_url'] ) . $path );

	}

	/**
	 * Returns a psuedo-random string of requested length.
	 *
	 * Builds a random string similar to the WordPress password functions.
	 *
	 * @since 4.0.0
	 *
	 * @param int  $length        how long the string should be (max 62)
	 * @param bool $base32        true if use only base32 characters to generate
	 * @param bool $special_chars whether to include special characters in generation
	 *
	 * @return string
	 */
	public static function get_random( $length, $base32 = false, $special_chars = false ) {

		if ( true === $base32 ) {

			$string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';

		} else {

			$string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

			if ( true === $special_chars ) {

				$string .= '_)(*&^%$#@!~`:;<>,.?/{}[]|';

			}

		}

		return substr( str_shuffle( $string ), mt_rand( 0, strlen( $string ) - $length ), $length );

	}

	/**
	 * Returns the server type of the plugin user.
	 *
	 * Attempts to figure out what http server the visiting user is running.
	 *
	 * @since 4.0.0
	 *
	 * @return string|bool server type the user is using of false if undetectable.
	 */
	public static function get_server() {

		//Allows to override server authentication for testing or other reasons.
		if ( defined( 'ITSEC_SERVER_OVERRIDE' ) ) {
			return ITSEC_SERVER_OVERRIDE;
		}

		$server_raw = strtolower( filter_var( $_SERVER['SERVER_SOFTWARE'], FILTER_SANITIZE_STRING ) );

		//figure out what server they're using
		if ( false !== strpos( $server_raw, 'apache' ) ) {

			return 'apache';

		} elseif ( false !== strpos( $server_raw, 'nginx' ) ) {

			return 'nginx';

		} elseif ( false !== strpos( $server_raw, 'litespeed' ) ) {

			return 'litespeed';

		} else { //unsupported server

			return false;

		}

	}

	/**
	 * Determine whether the server supports SSL (shared cert not supported.
	 *
	 * Attempts to retrieve an HTML version of the homepage in an effort to determine if SSL is available.
	 *
	 * @since 4.0.0
	 *
	 * @return bool true if ssl is supported or false
	 */
	public static function get_ssl() {

		$url = str_ireplace( 'http://', 'https://', get_bloginfo( 'url' ) );

		if ( function_exists( 'wp_http_supports' ) && wp_http_supports( array( 'ssl' ), $url ) ) {

			return true;

		} elseif ( function_exists( 'curl_init' ) ) {

			//use a manual CURL request to better account for self-signed certificates
			$timeout    = 5; //timeout for the request
			$site_title = trim( get_bloginfo() );

			$request = curl_init();

			curl_setopt( $request, CURLOPT_RETURNTRANSFER, true );
			curl_setopt( $request, CURLOPT_VERBOSE, false );
			curl_setopt( $request, CURLOPT_SSL_VERIFYPEER, false );
			curl_setopt( $request, CURLOPT_HEADER, true );
			curl_setopt( $request, CURLOPT_URL, $url );
			curl_setopt( $request, CURLOPT_RETURNTRANSFER, true );
			curl_setopt( $request, CURLOPT_CONNECTTIMEOUT, $timeout );

			$data = curl_exec( $request );

			$header_size = curl_getinfo( $request, CURLINFO_HEADER_SIZE );
			$http_code   = intval( curl_getinfo( $request, CURLINFO_HTTP_CODE ) );
			$body        = substr( $data, $header_size );

			preg_match( '/<title>(.+)<\/title>/', $body, $matches );

			if ( 200 == $http_code && isset( $matches[1] ) && false !== strpos( $matches[1], $site_title ) ) {

				return true;

			} else {

				return false;

			}

		}

		return false;

	}

	/**
	 * Converts IP with a netmask wildcards to one with * instead
	 *
	 * Allows use of wildcards in IP address by converting them to standard notation.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip ip to convert
	 *
	 * @return string     the converted ip
	 */
	public static function ip_mask_to_range( $ip ) {

		if ( strpos( $ip, '/' ) ) {

			$parts  = explode( '/', trim( $ip ) );
			$octets = array_reverse( explode( '.', trim( $parts[0] ) ) );

			if ( isset( $parts[1] ) && 0 < intval( $parts[1] ) ) {

				$wildcards = ( 32 - $parts[1] ) / 8;

				for ( $count = 0; $count < $wildcards; $count ++ ) {

					$octets[$count] = '[0-9]+';

				}

				return implode( '.', array_reverse( $octets ) );

			} else {

				return $ip;

			}

		}

		return $ip;

	}

	/**
	 * Converts IP with * wildcards to one with a netmask instead
	 *
	 * Attempts to create a standardized CIDR block from an IP using wildcards.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip ip to convert
	 *
	 * @return string     the converted ip
	 */
	public static function ip_wild_to_mask( $ip ) {

		$host_parts = array_reverse( explode( '.', trim( $ip ) ) );

		if ( strpos( $ip, '*' ) ) {

			$mask           = 32; //used to calculate netmask with wildcards
			$converted_host = str_replace( '*', '0', $ip );

			//convert hosts with wildcards to host with netmask and create rule lines
			foreach ( $host_parts as $part ) {

				if ( '*' === $part ) {
					$mask = $mask - 8;
				}

			}

			$converted_host = trim( $converted_host );

			//Apply a mask if we had to convert
			if ( 0 < $mask ) {
				$converted_host .= '/' . $mask;
			}

			return $converted_host;

		}

		return $ip;

	}

	/**
	 * Determine whether we're on the login page or not.
	 *
	 * Attempts to determine whether or not the user is on the WordPress dashboard login page.
	 *
	 * @since 4.0.0
	 *
	 * @return bool true if is login page else false
	 */
	public static function is_login_page() {

		return in_array( $GLOBALS['pagenow'], array( 'wp-login.php', 'wp-register.php' ) );

	}

	/**
	 * Checks jQuery version.
	 *
	 * Checks if the jquery version saved is vulnerable to http://bugs.jquery.com/ticket/9521
	 *
	 * @since 4.0.0
	 *
	 * @return mixed|bool true if known safe false if unsafe or null if untested
	 */
	public static function safe_jquery_version() {

		$jquery_version = get_site_option( 'itsec_jquery_version' );

		if ( false !== $jquery_version && version_compare( $jquery_version, '1.6.3', '>=' ) ) {

			return true;

		} elseif ( false === $jquery_version ) {

			return null;

		}

		return false;

	}

	/**
	 * Set a 404 error.
	 *
	 * Forces the given page to a WordPress 404 error.
	 *
	 * @since 4.0.0
	 *
	 * @return void
	 */
	public static function set_404() {

		global $wp_query;

		status_header( 404 );

		if ( function_exists( 'nocache_headers' ) ) {
			nocache_headers();
		}

		$wp_query->set_404();
		$page_404 = get_404_template();

		if ( 1 < strlen( $page_404 ) ) {

			include( $page_404 );

		} else {

			include( get_query_template( 'index' ) );

		}

		die();

	}

	/**
	 * Increases minimum memory limit.
	 *
	 * This function, adopted from builder, attempts to increase the minimum
	 * memory limit before heavy functions.
	 *
	 * @since 4.0.0
	 *
	 * @param int $new_memory_limit what the new memory limit should be
	 *
	 * @return void
	 */
	public static function set_minimum_memory_limit( $new_memory_limit ) {

		$memory_limit = @ini_get( 'memory_limit' );

		if ( - 1 < $memory_limit ) {

			$unit = strtolower( substr( $memory_limit, - 1 ) );

			$new_unit = strtolower( substr( $new_memory_limit, - 1 ) );

			if ( 'm' == $unit ) {

				$memory_limit *= 1048576;

			} else if ( 'g' == $unit ) {

				$memory_limit *= 1073741824;

			} else if ( 'k' == $unit ) {

				$memory_limit *= 1024;

			}

			if ( 'm' == $new_unit ) {

				$new_memory_limit *= 1048576;

			} else if ( 'g' == $new_unit ) {

				$new_memory_limit *= 1073741824;

			} else if ( 'k' == $new_unit ) {

				$new_memory_limit *= 1024;

			}

			if ( (int) $memory_limit < (int) $new_memory_limit ) {
				@ini_set( 'memory_limit', $new_memory_limit );
			}

		}

	}

	/**
	 * Checks if user exists.
	 *
	 * Checks to see if WordPress user with given id exists.
	 *
	 * @since 4.0.0
	 *
	 * @param int $user_id user id of user to check
	 *
	 * @return bool true if user exists otherwise false
	 *
	 * */
	public static function user_id_exists( $user_id ) {

		global $wpdb;

		//return false if username is null
		if ( '' == $user_id ) {
			return false;
		}

		//queary the user table to see if the user is there
		$saved_id = $wpdb->get_var( $wpdb->prepare( ""SELECT ID FROM `"" . $wpdb->users . ""` WHERE ID='%s';"", sanitize_text_field( $user_id ) ) );

		if ( $saved_id == $user_id ) {

			return true;

		} else {

			return false;

		}

	}

	/**
	 * Validates a list of ip addresses.
	 *
	 * Makes sure that the provided IP addresses are in fact valid IPV4 addresses.
	 *
	 * @since 4.0.0
	 *
	 * @param string $ip string of hosts to check
	 *
	 * @return array array of good hosts or false
	 */
	public static function validates_ip_address( $ip ) {
		$ip = trim( filter_var( $ip, FILTER_SANITIZE_STRING ) );
		
		if ( substr_count( $ip, '.' ) !== 3 ) {
			return false;
		}
		
		$has_cidr = ( false !== strpos( $ip, '/' ) );
		$has_wildcard = ( false !== strpos( $ip, '*' ) );
		
		if ( $has_cidr && $has_wildcard ) {
			return false;
		}
		
		$ip_digit_regex = '(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';
		$cidr_digit_regex = '(?:3[0-2]|2[0-9]|1[1-9]|[148])';
		
		$ip_regex = ""(?:$ip_digit_regex\.){3}$ip_digit_regex"";
		
		if ( $has_cidr ) {
			return (boolean) preg_match( ""{^$ip_regex/$cidr_digit_regex$}"", $ip );
		}
		
		if ( $has_wildcard ) {
			$wildcard_count = substr_count( $ip, '*' );
			
			if ( 1 === $wildcard_count ) {
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.){3}\*$}"", $ip );
			} else if ( 2 === $wildcard_count ) { 
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.){2}\*\.\*$}"", $ip );
			} else if ( 3 === $wildcard_count ) { 
				return (boolean) preg_match( ""{^(?:$ip_digit_regex\.)\*\.\*\.\*$}"", $ip );
			}
			
			return false;
		}
		
		return (boolean) preg_match( ""{^$ip_regex$}"", $ip );
	}
	
	/**
	 * Validates a file path
	 *
	 * Adapted from http://stackoverflow.com/questions/4049856/replace-phps-realpath/4050444#4050444 as a replacement for PHP's realpath
	 *
	 * @since 4.0.0
	 *
	 * @param string $path The original path, can be relative etc.
	 *
	 * @return bool true if the path is valid and writeable else false
	 */
	public static function validate_path( $path ) {

		// whether $path is unix or not
		$unipath = strlen( $path ) == 0 || $path{0} != '/';

		// attempts to detect if path is relative in which case, add cwd
		if ( false === strpos( $path, ':' ) && $unipath ) {
			$path = getcwd() . DIRECTORY_SEPARATOR . $path;
		}

		// resolve path parts (single dot, double dot and double delimiters)
		$path      = str_replace( array( '/', '\\' ), DIRECTORY_SEPARATOR, $path );
		$parts     = array_filter( explode( DIRECTORY_SEPARATOR, $path ), 'strlen' );
		$absolutes = array();

		foreach ( $parts as $part ) {

			if ( '.' == $part ) {
				continue;
			}

			if ( '..' == $part ) {

				array_pop( $absolutes );

			} else {

				$absolutes[] = $part;

			}

		}

		$path = implode( DIRECTORY_SEPARATOR, $absolutes );

		// resolve any symlinks
		if ( function_exists( 'linkinfo' ) ) { //linkinfo not available on Windows with PHP < 5.3.0

			if ( file_exists( $path ) && 0 < linkinfo( $path ) ) {
				$path = @readlink( $path );
			}

		} else {

			if ( file_exists( $path ) && 0 < linkinfo( $path ) ) {
				$path = @readlink( $path );
			}

		}

		// put initial separator that could have been lost
		$path = ! $unipath ? '/' . $path : $path;

		$test = @touch( $path . '/test.txt' );
		@unlink( $path . '/test.txt' );

		return $test;

	}

	/**
	 * Validates a URL
	 *
	 * Ensures the provided URL is a valid URL.
	 *
	 * @since 4.3.0
	 *
	 * @param string $url the url to validate
	 *
	 * @return bool true if valid url else false
	 */
	public static function validate_url( $url ) {

		$pattern = ""/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\/?/i"";

		return (bool) preg_match( $pattern, $url );

	}

}
",TRUE,,3861
3844,InitialSO.csv3844.txt,InitialGit.csv3844.txt,6,"private boolean isEqual(InputStream i1, InputStream i2) throws IOException {
    byte[] buf1 = new byte[64 *1024];
    byte[] buf2 = new byte[64 *1024];
    try {
        DataInputStream d2 = new DataInputStream(i2);
        int len;
        while ((len = i1.read(buf1)) > 0) {
            d2.readFully(buf2,0,len);
            for(int i=0;i<len;i++)
              if(buf1[i] != buf2[i]) return false;
        }
        return d2.read() < 0; // is the end of the second file also.
    } catch(EOFException ioe) {
        return false;
    } finally {
        i1.close();
        i2.close();
    }
}
 ","private boolean isEqual(InputStream i1, InputStream i2) throws IOException {
    byte[] buf1 = new byte[64 *1024];
    byte[] buf2 = new byte[64 *1024];
    try {
        DataInputStream d2 = new DataInputStream(i2);
        int len;
        while ((len = i1.read(buf1)) > 0) {
            d2.readFully(buf2,0,len);
            for(int i=0;i<len;i++)
              if(buf1[i] != buf2[i]) return false;
        }
        return d2.read() < 0; // is the end of the second file also.
    } catch(EOFException ioe) {
        return false;
    } finally {
        i1.close();
        i2.close();
    }
}
 ",TRUE,"/***
  Copyright (c) 2013 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    http://commonsware.com/Android
 */

package com.commonsware.android.secsvc;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.Signature;
import android.content.res.Resources.NotFoundException;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;

public class MainActivity extends Activity implements
    ServiceConnection, OnCheckedChangeListener {
  private static final String ACTION_SERVICE=
      ""com.commonsware.android.secsvc.SOMETHING"";
  private static final Intent INTENT_SERVICE=new Intent(ACTION_SERVICE);
  private CompoundButton verify=null;
  private View command=null;
  private View binding=null;
  private Intent serviceIntent=null;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    verify=(CompoundButton)findViewById(R.id.verify);
    verify.setOnCheckedChangeListener(this);
    
    command=findViewById(R.id.command);
    binding=findViewById(R.id.binding);
    
    serviceIntent=buildServiceIntent();
  }

  public void testCommand(View v) {
    startService(serviceIntent);
  }

  public void testBinding(View v) {
    bindService(serviceIntent, this, BIND_AUTO_CREATE);
  }

  @Override
  public void onCheckedChanged(CompoundButton arg0, boolean arg1) {
    serviceIntent=buildServiceIntent();

    command.setEnabled(serviceIntent != null);
    binding.setEnabled(serviceIntent != null);
  }

  @Override
  public void onServiceConnected(ComponentName arg0, IBinder arg1) {
    SomethingUseful binder=SomethingUseful.Stub.asInterface(arg1);

    try {
      binder.hi();
    }
    catch (RemoteException e) {
      Log.e(getClass().getSimpleName(),
            ""Exception communicating with remote service"", e);
    }

    unbindService(this);
  }

  @Override
  public void onServiceDisconnected(ComponentName arg0) {
    // no-op
  }

  Intent buildServiceIntent() {
    Intent result=null;

    if (verify.isChecked()) {
      PackageManager mgr=getPackageManager();

      for (ResolveInfo info : mgr.queryIntentServices(INTENT_SERVICE, 0)) {
        try {
          if (validate(info.serviceInfo.packageName,
                       R.raw.valid_signature)) {
            result=new Intent(INTENT_SERVICE);
            result.setComponent(new ComponentName(
                                                  info.serviceInfo.packageName,
                                                  info.serviceInfo.name));
          }
        }
        catch (Exception e) {
          Log.e(getClass().getSimpleName(),
                ""Exception finding valid service"", e);
        }
      }
    }
    else {
      result=INTENT_SERVICE;
    }

    return(result);
  }

  boolean validate(String pkg, int raw) throws NameNotFoundException,
                                       NotFoundException, IOException {
    PackageManager mgr=getPackageManager();
    PackageInfo pkgInfo=
        mgr.getPackageInfo(pkg, PackageManager.GET_SIGNATURES);
    Signature[] signatures=pkgInfo.signatures;
    byte[] local=signatures[0].toByteArray();

    return(isEqual(new ByteArrayInputStream(local),
                   getResources().openRawResource(raw)));
  }

  // from http://stackoverflow.com/a/4245881/115145

  private boolean isEqual(InputStream i1, InputStream i2)
                                                         throws IOException {
    byte[] buf1=new byte[1024];
    byte[] buf2=new byte[1024];

    try {
      DataInputStream d2=new DataInputStream(i2);
      int len;
      while ((len=i1.read(buf1)) > 0) {
        d2.readFully(buf2, 0, len);
        for (int i=0; i < len; i++)
          if (buf1[i] != buf2[i])
            return false;
      }
      return d2.read() < 0; // is the end of the second file
                            // also.
    }
    catch (EOFException ioe) {
      return false;
    }
    finally {
      i1.close();
      i2.close();
    }
  }
}
","/***
  Copyright (c) 2013 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    https://commonsware.com/Android
 */

package com.commonsware.android.secsvc;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.Signature;
import android.content.res.Resources.NotFoundException;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;

public class MainActivity extends Activity implements
    ServiceConnection, OnCheckedChangeListener {
  private static final String ACTION_SERVICE=
      ""com.commonsware.android.secsvc.SOMETHING"";
  private static final Intent INTENT_SERVICE=new Intent(ACTION_SERVICE);
  private CompoundButton verify=null;
  private View command=null;
  private View binding=null;
  private Intent serviceIntent=null;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    verify=(CompoundButton)findViewById(R.id.verify);
    verify.setOnCheckedChangeListener(this);
    
    command=findViewById(R.id.command);
    binding=findViewById(R.id.binding);
    
    serviceIntent=buildServiceIntent();
  }

  public void testCommand(View v) {
    startService(serviceIntent);
  }

  public void testBinding(View v) {
    bindService(serviceIntent, this, BIND_AUTO_CREATE);
  }

  @Override
  public void onCheckedChanged(CompoundButton arg0, boolean arg1) {
    serviceIntent=buildServiceIntent();

    command.setEnabled(serviceIntent != null);
    binding.setEnabled(serviceIntent != null);
  }

  @Override
  public void onServiceConnected(ComponentName arg0, IBinder arg1) {
    SomethingUseful binder=SomethingUseful.Stub.asInterface(arg1);

    try {
      binder.hi();
    }
    catch (RemoteException e) {
      Log.e(getClass().getSimpleName(),
            ""Exception communicating with remote service"", e);
    }

    unbindService(this);
  }

  @Override
  public void onServiceDisconnected(ComponentName arg0) {
    // no-op
  }

  Intent buildServiceIntent() {
    Intent result=null;

    if (verify.isChecked()) {
      PackageManager mgr=getPackageManager();

      for (ResolveInfo info : mgr.queryIntentServices(INTENT_SERVICE, 0)) {
        try {
          if (validate(info.serviceInfo.packageName,
                       R.raw.valid_signature)) {
            result=new Intent(INTENT_SERVICE);
            result.setComponent(new ComponentName(
                                                  info.serviceInfo.packageName,
                                                  info.serviceInfo.name));
            
            break;
          }
        }
        catch (Exception e) {
          Log.e(getClass().getSimpleName(),
                ""Exception finding valid service"", e);
        }
      }
    }
    else {
      result=INTENT_SERVICE;
    }

    return(result);
  }

  boolean validate(String pkg, int raw) throws NameNotFoundException,
                                       NotFoundException, IOException {
    PackageManager mgr=getPackageManager();
    PackageInfo pkgInfo=
        mgr.getPackageInfo(pkg, PackageManager.GET_SIGNATURES);
    Signature[] signatures=pkgInfo.signatures;
    byte[] local=signatures[0].toByteArray();

    return(isEqual(new ByteArrayInputStream(local),
                   getResources().openRawResource(raw)));
  }

  // from http://stackoverflow.com/a/4245881/115145

  private boolean isEqual(InputStream i1, InputStream i2)
                                                         throws IOException {
    byte[] buf1=new byte[1024];
    byte[] buf2=new byte[1024];

    try {
      DataInputStream d2=new DataInputStream(i2);
      int len;
      while ((len=i1.read(buf1)) >= 0) {
        d2.readFully(buf2, 0, len);
        for (int i=0; i < len; i++)
          if (buf1[i] != buf2[i])
            return false;
      }
      return d2.read() < 0; // is the end of the second file
                            // also.
    }
    catch (EOFException ioe) {
      return false;
    }
    finally {
      i1.close();
      i2.close();
    }
  }
}
",FALSE,,3863
3850,InitialSO.csv3850.txt,InitialGit.csv3850.txt,3,"contents() find() var getTextNodesIn = function(el) {
    return $(el).find("":not(iframe)"").addBack().contents().filter(function() {
        return this.nodeType == 3;
    });
};

getTextNodesIn(el);
 addBack() andSelf() andSelf() addBack() contents() includeWhitespaceNodes function getTextNodesIn(node, includeWhitespaceNodes) {
    var textNodes = [], nonWhitespaceMatcher = /\S/;

    function getTextNodes(node) {
        if (node.nodeType == 3) {
            if (includeWhitespaceNodes || nonWhitespaceMatcher.test(node.nodeValue)) {
                textNodes.push(node);
            }
        } else {
            for (var i = 0, len = node.childNodes.length; i < len; ++i) {
                getTextNodes(node.childNodes[i]);
            }
        }
    }

    getTextNodes(node);
    return textNodes;
}

getTextNodesIn(el);
 ","contents() find() var getTextNodesIn = function(el) {
    return $(el).find("":not(iframe)"").addBack().contents().filter(function() {
        return this.nodeType == 3;
    });
};

getTextNodesIn(el);
 addBack() andSelf() andSelf() addBack() contents() includeWhitespaceNodes function getTextNodesIn(node, includeWhitespaceNodes) {
    var textNodes = [], nonWhitespaceMatcher = /\S/;

    function getTextNodes(node) {
        if (node.nodeType == 3) {
            if (includeWhitespaceNodes || nonWhitespaceMatcher.test(node.nodeValue)) {
                textNodes.push(node);
            }
        } else {
            for (var i = 0, len = node.childNodes.length; i < len; ++i) {
                getTextNodes(node.childNodes[i]);
            }
        }
    }

    getTextNodes(node);
    return textNodes;
}

getTextNodesIn(el);
 ",TRUE,"(function(win, doc, $) {
    'use strict';

    var focusClass = 'focused';
    var noop = function(){};

    /*
        Plugin to create nav menus, show/hide delays, etc.
        Accessible by keyboard too!
    */
    $.fn.mozMenu = function(options) {

        var settings = $.extend({
            showDelay: 100,
            hideDelay: 100,
            fadeInSpeed: null,
            fadeOutSpeed: null,
            submenu: null,
            focusOnOpen: false,
            brickOnClick: false,
            onOpen: noop,
            onClose: noop
        }, options);

        var closeTimeout;
        var showTimeout;

        return this.each(function() {
            var $self = $(this);
            var $parent = $self.parent();
            var initialized;

            // Prevent the default behavior of the trigger element if this is set
            var brick = settings.brickOnClick;
            if(brick) {
                $self.on('click', function(e) {
                    if(typeof brick != 'function' || brick(e)) e.preventDefault();
                });
            }

            // Find the trigger element's submenu
            var $submenu = $self.submenu = (settings.submenu || $parent.find('.submenu'));

            // Provide the settings to both the submenu and item as either can be found independently
            // The settings for the current menu and the ""$.fn.mozMenu.$openMenu"" can be different
            $self.settings = $submenu.settings = settings;

            // Add a mouseenter / focus event to get the showing of the submenu in motion
            $self.on('mouseenter focus', function() {

                // If this is a fake focus set by us, ignore this
                if($submenu.ignoreFocus) return;

                // If no submenu, go
                if(!$submenu.length) {
                    clear(showTimeout);
                    if($.fn.mozMenu.$openMenu) closeSubmenu($.fn.mozMenu.$openMenu.submenu);
                    return;
                }

                // Lazy-initialize events that aren't needed until an item is entered.
                if(!initialized) {
                    initialized = 1;

                    // Add the close
                    var $closeButton = $('<button type=""button"" class=""submenu-close transparent"">\
                        <span class=""offscreen"">' + gettext('Close submenu') + '</span>\
                        <i aria-hidden=""true"" class=""icon-remove-sign""></i>\
                    </button>').appendTo($submenu);

                    // Hide the submenu when the main menu is blurred for hideDelay
                    $self.on('mouseleave focusout', function() {
                        clear(showTimeout);
                        closeSubmenu($submenu);
                    });

                    // Hide the submenu when the submenu is blurred for hideDelay
                    $submenu.on('mouseleave focusout', function(e) {
                        // ""focuseout"" is firing on child elements and sending off a bunch of moot
                        // close requests, so we stop that
                        if(e.type == 'focusout' && e.target != $submenu.get(0)) return;

                        clear(showTimeout);
                        closeSubmenu($submenu);
                    });

                    // Cancel the close timeout if moving from main menu item to submenu
                    $submenu.on('mouseenter focusin', function() {
                        clear(closeTimeout);
                    });

                    // Close if it's the last link and they press tab *or* the hit escape
                    $submenu.on('keyup', function(e) {
                        if(e.keyCode == 27) { // Escape
                            closeSubmenu($submenu);
                            $submenu.ignoreFocus = true;
                            setTimeout(function() { $submenu.ignoreFocus = false; }, 10);
                            $self[0].focus();
                        }
                    });

                    // Close button should close the submenu
                    $closeButton.on('click', function(){
                        closeSubmenu($submenu || $(this).parent());
                    });
                }

                // If there's an open submenu and it's not this one, close it
                // Used for tab navigation from submenu to the next menu item
                if($.fn.mozMenu.$openMenu && $.fn.mozMenu.$openMenu != $self) {
                    clear(showTimeout);
                    closeSubmenu($.fn.mozMenu.$openMenu.submenu);
                }
                else if($.fn.mozMenu.$openMenu == $self) {
                    clear(closeTimeout);
                }

                // Keep the open menu on this fn itself so only one menu can be open at any time,
                // regardless of the instance or menu group
                $.fn.mozMenu.$openMenu = $self;

                // Show my submenu after the showDelay
                showTimeout = setTimeout(function() {
                    // Setting z-index here so that current menu is always on top
                    $submenu.css('z-index', 99999).addClass('open').attr('aria-hidden', 'false').fadeIn($submenu.settings.fadeInSpeed);

                    // Find the first link for improved usability
                    if($submenu.settings.focusOnOpen) {
                        var firstLink = $submenu.find('a').get(0);
                        if(firstLink) {
                            try { // Putting in try/catch because of opacity/focus issues in IE
                                $(firstLink).addClass(focusClass) && firstLink.focus();
                            }
                            catch(e){
                                console.log('Menu focus exception! ', e);
                            }
                        }
                    }
                    $submenu.settings.onOpen();
                }, $submenu.settings.showDelay);
            });
        });

        // Gets the open parent
        function getOpenParent() {
            return $.fn.mozMenu.$openMenu.submenu;
        }

        // Clears the current timeout, interrupting fade-ins and outs as necessary
        function clear(timeout) {
            if(timeout) clearTimeout(timeout);
        }

        // Closes a given submenu
        function closeSubmenu($sub) {
            closeTimeout = setTimeout(function() {
                // Set the z-index to one less so another menu would get top spot if overlapping and opening
                if($sub) {
                    $sub.css('z-index', 99998)
                            .removeClass('open')
                            .attr('aria-hidden', 'true')
                            .fadeOut($sub.settings.fadeOutSpeed, function() {
                                $sub.settings.onClose();
                            });
                }
            }, $sub.settings.hideDelay);
        }
    };

    /*
        Plugin to listen for special keyboard keys and will fire actions based on them
    */
    $.fn.mozKeyboardNav = function(options) {
        var settings = $.extend({
            itemSelector: 'a',
            onEnterKey: noop,
            alwaysCollectItems: false
        }, options);

        var $selectedItem;

        return this.each(function() {

            var $items = $(this).find(settings.itemSelector);
            if(!$items.length) return;

            var $self = $(this);

            $self.on('keydown', function(e) {
                var code = e.keyCode;
                var charCode = e.charCode;
                var numberKeyStart = 49;

                // If we should always get fresh items, do so
                if(settings.alwaysCollectItems) {
                    var $items = $(this).find(settings.itemSelector);
                }

                // Up and down buttons
                if(code == 38 || code == 40) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Find currently selected item and clear
                    $selectedItem = $items.filter('.' + focusClass).removeClass(focusClass);

                    // Tricky...if they clicked elsewhere in the mean time, we may need to try to
                    // figure it out by activeElement
                    var index = $items.index($selectedItem);
                    var activeElementIndex = doc.activeElement && $items.index(doc.activeElement);
                    if(activeElementIndex > -1) {
                        index = activeElementIndex;
                    }
                    if(index < 0) {
                        index = 0;
                    }

                    // If nothing is currently selected, start with first no matter which key
                    var $next = $($items.get(index + 1));
                    var $prev = $($items.get(index - 1));

                    if(code == 38) {    // up
                        $prev.length && selectItem($prev);
                    }
                    else if(code == 40) {    // down
                        selectItem($next.length ? $next : $items.first());
                    }
                }
                // Number keys: 1, 2, 3, etc.
                else if(charCode >= numberKeyStart && charCode <= 57) {
                    var item = $items.get(charCode - numberKeyStart);
                    item && selectItem(item);
                }
                // Enter key
                else if(code == 13) {
                    settings.onEnterKey($selectedItem);
                }
            });

        });

        function selectItem(item) {
            $(item).addClass(focusClass).get(0).focus();
            $selectedItem = item;
        }

    };

    /*
        Plugin to listen for special keyboard keys and will fire actions based on them
    */
    $.fn.mozTogglers = function(options) {
        var settings = $.extend({
            onOpen: noop,
            slideCallback: noop,
            duration: 200 /* 400 is the default for jQuery */
        }, options);

        this.each(function() {
            var $self = $(this);
            var pieces = getTogglerComponents($self);
            var closedAttribute = 'data-closed';

            // Initialize open / close for the purpose of animation
            if($self.hasClass('closed')) {
                $self.attr(closedAttribute, 'true').removeClass('closed');
                pieces.$container.hide();
            }
            setIcon(pieces.$toggler, $self);

            // Add aria to indicate dropdown menu
            pieces.$toggler.attr('aria-haspopup', true);

            // Close on ESC
            $self.on('keyup', '.toggle-container', function(e) {
                e.preventDefault();
                e.stopPropagation();
                if(e.keyCode == 27) {
                    $(this).siblings('a').trigger('mdn:click').focus();
                };
            });

            // Click event to show/hide
            $self.on('click mdn:click', '.toggler', function(e) {
                e.preventDefault();
                e.stopPropagation();
                settings.onOpen.call(this);

                // If a true click, mark toggler as such so automated togger clicks (like toc) know not to
                // close without user consent
                if(e.type == 'click') {
                    $(this).attr('data-clicked', true);
                }

                // If I'm an accordion, close the other one
                var $parent = $self.closest('ol, ul');
                if($parent.hasClass('accordion')) {
                    var $current = $parent.find('> .current');
                    if($current.length && $current.get(0) != $self.get(0)) {
                        toggle($current, true);
                    }
                }

                // Open or close the item, set the icon, etc.
                toggle($self);
            });

            // The toggler can be initially opened via a data- attribute
            if($self.attr('data-default-state') == 'open') {
                toggle($self);
            }

            function toggle($li, forceClose) {
                var pieces = getTogglerComponents($li);

                if(!getState($li) || forceClose) {
                    $li.attr(closedAttribute, 'true').removeClass('current');
                    pieces.$container.attr('aria-expanded', false);
                    pieces.$container.slideUp(settings.duration, settings.slideCallback);
                }
                else {
                    $li.attr(closedAttribute, '').addClass('current');
                    pieces.$container.attr('aria-expanded', true);
                    pieces.$container.slideDown(settings.duration, settings.slideCallback);
                }
                setIcon(pieces.$toggler, $li);
            }

            function getTogglerComponents($li) {
                return {
                    $container: $li.find('> .toggle-container'),
                    $toggler: $li.find('> .toggler')
                };
            }

            function setIcon($tog, $li) {
                var openIcon = $tog.attr('data-open-icon') || 'icon-caret-right';
                var closedIcon = $tog.attr('data-closed-icon') || 'icon-caret-down';
                $tog.find('i').attr('class', (getState($li) ? openIcon : closedIcon));
            }

            function getState($li) {
                return $li.attr(closedAttribute);
            }
        });
    };

    /*
        Plugin to adds a native html5 contextmenu
        Callback passes two arguments, event.target and the menu-element
    */
    $.fn.mozContextMenu = function(callback) {
        return this.on('contextmenu', function(e) {
            callback(e.target, $('#' + $(this).attr('contextmenu')));
        });
    };

    /*
        Plugin to lazyload images
    */
    $.fn.mozLazyloadImage = function() {
        return this.each(function() {
            var $img = $('<img />');
            var alt = $(this).data('alt');
            $img.on('load', function() {
                $(this)
                    .attr('alt', alt)
                    .addClass('loaded');
            });
            $.each($(this).data(), function(name, value) {
                if (name !== 'alt') {
                    $img.attr(name, value);
                }
            });
            $(this).after($img).remove();
        });
    };

    /*
        Plugin to toggle button messages
    */
    $.fn.toggleMessage = function(options){
        var settings = $.extend({
            event: 'click',
            toggleCallback: noop
        }, options);

        return this.each(function(){
            $(this).on(settings.event, function(e){
                var $self = $(this);
                e.preventDefault();
                var currentMessage = $self.text();
                var alternateMessage = $self.attr('data-alternate-message');
                $self.attr('data-alternate-message', currentMessage)
                       .html(alternateMessage);
                settings.toggleCallback();
            });
        });
    };

    win.mdn.Notifier = (function() {
        // Hold onto the one tray
        var $tray;
        var defaults = {
            classes: '', // Classes to apply to the individual notification
            closable: false, // Should the ""x"" icon appear
            level: 'info', // Should the icon appear when a state is given
            duration: 3000, // How long should the item be shown?  '0' means the message needs to be removed manually or via the handle.
            url: null, // Should clicking the item go anywhere?
            onclick: null, // What should happen if they click on the notification?
            onclose: null // What should happen upon closing of individual notification?
        };

        var processedKey = 'data-processed';
        var defaultState = { state: 'info', className: 'info', iconName: 'icon-info-sign'  };
        var states = [
            { state: 'success', className: 'success', iconName: 'icon-smile' },
            { state: 'error', className: 'error', iconName: 'icon-frown' },
            { state: 'warning', className: 'warning', iconName: 'icon-warning-sign'  },
            defaultState
        ];
        var statesObj = {};
        $.each(states, function() {
            statesObj[this.state] = this;
        });

        // Closes an item
        function closeItem($item, callback) {
            $item.fadeOut(300, function() {
                $item.addClass('closed');
                callback && callback.apply($item, null);
            });
        }

        // Updates an item's HTML
        function updateMessageHTML($item, message) {
            $item.find('.notification-message').html(message);
        }

        // Enacts options upon an item, used by both discover and growl
        function applyOptions($item, options) {
            // Don't process a notification more than once
            if($item.attr(processedKey)) {
                return;
            }
            $item.attr(processedKey, true);

            // Populating notification content via vanilla JS so we don't lose any
            // attached events to elements within the message itself
            // The jQuery version is ugly: http://stackoverflow.com/a/4399718
            var $messageWrapper = $('<div class=""notification-message""></div>');
            var children = $item.get(0).childNodes;
            while(children && children.length) {
                $messageWrapper.get(0).appendChild(children[0]);
            }
            $messageWrapper.appendTo($item);

            // Add an icon if needed
            var icon = defaultState.iconName;
            if(statesObj[options.level]) {
                icon = statesObj[options.level].iconName;
            }
            if(options.level) {
                $item.addClass(options.level);
            }

            $item.prepend('<div class=""notification-img""><i aria-hidden=""true"" class=""'+ icon +'""></i></div>');

            // Add URL click event
            if(options.url) {
                $item.addClass('clickable').on('click', function() {
                    win.location = defaults.url
                });
            }

            // Add desired css class
            $item.addClass(options.classes);

            // Add item's close and click event if needed
            if(options.closable) {
                $('<button class=""close"" title=""' + gettext('Close notification') + '""><i class=""icon-remove"" aria-hidden=""true""></i></button>').on('click', function(e) {
                    e.stopPropagation();
                    e.preventDefault();

                    closeItem($item, options.onclose);
                }).appendTo($item);
            }

            // Click event for notifications
            if(options.onclick) {
                $item.addClass('clickable').on('click', options.onclick);
            }

            // Add automatic closer
            if(options.duration) setTimeout(function() {
                closeItem($item, options.onclose);
            }, options.duration);
        }

        // The actual Notifier object component
        return {
            // Finds notifications under a given parent,
            discover: function(parent) {
                var $notifications = $(parent || doc.body).find('.notification:not([' + processedKey + '])');
                $notifications.each(function() {
                    var $item = $(this);
                    applyOptions($item, $item.data());
                });

                return $notifications;
            },
            growl: function(message, options) {
                // Create the tray for the first message
                if(!$tray) {
                    $tray = $('<div class=""notification-tray"" role=""status"" aria-live=""polite""></div>').appendTo(doc.body);
                }

                // Merge options with defaults
                options = $.extend({}, defaults, options || {});

                // Create the growl message, add to tray
                var $item = $('<div class=""notification"">' + message + '</div>');

                // Apply options and format notification
                applyOptions($item, options);

                // Show within the container
                $item.prependTo($tray);

                // Return a handle for the growl item
                var handle = {
                    item: $item,
                    options: options,
                    updateMessage: function(message) {
                        updateMessageHTML(this.item, message);
                        return this;
                    },
                    close: function(delay, callback) {
                        $item = this.item;
                        delay = delay || options.duration;
                        callback = callback || options.onclose;

                        if(delay) {
                            setTimeout(function() {
                                closeItem($item, callback);
                            }, delay);
                        }
                        else {
                            closeItem($item, callback);
                        }
                        return this;
                    }
                };

                // Add success, fail, warning, and info methods to the handle
                $.each(states, function() {

                    var stateObj = this;
                    var state = this.state;
                    var className = this.className;
                    var iconName = this.iconName;
                    handle[state] = function(message, delay) {
                        var $item = handle.item;

                        $item.addClass(className);
                        $item.find('.notification-img i').attr('class', stateObj.iconName);

                        if(message) updateMessageHTML($item, message);
                        if(delay) this.close(delay);

                        return this;
                    };
                });

                return handle;
            }
        }
    })();

})(window, document, jQuery);
","(function(win, doc, $) {
    'use strict';

    var focusClass = 'focused';
    var noop = function(){};

    /*
        Plugin to create nav menus, show/hide delays, etc.
        Accessible by keyboard too!
    */
    $.fn.mozMenu = function(options) {

        var settings = $.extend({
            showDelay: 100,
            hideDelay: 100,
            fadeInSpeed: null,
            fadeOutSpeed: null,
            submenu: null,
            focusOnOpen: false,
            brickOnClick: false,
            onOpen: noop,
            onClose: noop
        }, options);

        var closeTimeout;
        var showTimeout;

        return this.each(function() {
            var $self = $(this);
            var $parent = $self.parent();
            var initialized;

            // Find the trigger element's submenu
            var $submenu = $self.submenu = (settings.submenu || $parent.find('.submenu'));

            // Prevent the default behavior of the trigger element if this is set
            var brick = settings.brickOnClick;
            if(brick && $submenu.length) {
                $self.on('click', function(e) {
                    if((typeof brick === 'function' && brick(e)) || brick) e.preventDefault();
                });
            }

            // Provide the settings to both the submenu and item as either can be found independently
            // The settings for the current menu and the ""$.fn.mozMenu.$openMenu"" can be different
            $self.settings = $submenu.settings = settings;

            // Add a mouseenter / focus event to get the showing of the submenu in motion
            var assumeMobile = false;
            $self.on('touchstart mouseenter focus', function(startEvent) {
                if(startEvent.type === 'touchstart') {
                    startEvent.stopImmediatePropagation();
                    if($self.submenu.length) {
                        startEvent.preventDefault();
                    }
                    assumeMobile = true;
                }

                // If this is a fake focus set by us, ignore this
                if($submenu.ignoreFocus) return;

                // If no submenu, go
                if(!$submenu.length) {
                    clear(showTimeout);
                    if($.fn.mozMenu.$openMenu) closeSubmenu($.fn.mozMenu.$openMenu.submenu);
                    return;
                }

                // Lazy-initialize events that aren't needed until an item is entered.
                if(!initialized) {
                    initialized = 1;

                    // Add the close
                    var $closeButton = $('<button type=""button"" class=""submenu-close transparent"">' +
                        '<span class=""offscreen"">' + gettext('Close submenu') + '</span>' +
                        '<i aria-hidden=""true"" class=""icon-remove-sign""></i>' +
                    '</button>').appendTo($submenu);

                    // Hide the submenu when the main menu is blurred for hideDelay
                    $self.on('mouseleave focusout', function() {
                        clear(showTimeout);
                        closeSubmenu($submenu);
                    });

                    // Hide the submenu when the submenu is blurred for hideDelay
                    $submenu.on('mouseleave focusout', function(e) {
                        // ""focuseout"" is firing on child elements and sending off a bunch of moot
                        // close requests, so we stop that
                        if(e.type === 'focusout' && e.target !== $submenu.get(0)) return;

                        clear(showTimeout);
                        closeSubmenu($submenu);
                    });

                    // Cancel the close timeout if moving from main menu item to submenu
                    if(!assumeMobile) {
                        $submenu.on('mouseenter focusin', function() {
                            clear(closeTimeout);
                        });
                    }

                    // Close if it's the last link and they press tab *or* the hit escape
                    $submenu.on('keyup', function(e) {
                        if(e.keyCode === 27) { // Escape
                            closeSubmenu($submenu);
                            $submenu.ignoreFocus = true;
                            setTimeout(function() { $submenu.ignoreFocus = false; }, 10);
                            $self[0].focus();
                        }
                    });

                    // Close button should close the submenu
                    $closeButton.on('click', function(){
                        closeSubmenu($submenu || $(this).parent());
                    });
                }

                // If there's an open submenu and it's not this one, close it
                // Used for tab navigation from submenu to the next menu item
                if($.fn.mozMenu.$openMenu && $.fn.mozMenu.$openMenu !== $self) {
                    clear(showTimeout);
                    closeSubmenu($.fn.mozMenu.$openMenu.submenu);
                }
                else if($.fn.mozMenu.$openMenu === $self) {
                    clear(closeTimeout);
                }

                // Keep the open menu on this fn itself so only one menu can be open at any time,
                // regardless of the instance or menu group
                $.fn.mozMenu.$openMenu = $self;

                // Show my submenu after the showDelay
                showTimeout = setTimeout(function() {
                    // Setting z-index here so that current menu is always on top
                    $submenu.css('z-index', 99999).addClass('open').attr('aria-hidden', 'false').fadeIn($submenu.settings.fadeInSpeed);

                    // Find the first link for improved usability
                    if($submenu.settings.focusOnOpen) {
                        var firstLink = $submenu.find('a').get(0);
                        if(firstLink) {
                            try { // Putting in try/catch because of opacity/focus issues in IE
                                $(firstLink).addClass(focusClass);
                                firstLink.focus();
                            }
                            catch(e){
                                console.log('Menu focus exception! ', e);
                            }
                        }
                    }
                    $submenu.settings.onOpen();
                }, $submenu.settings.showDelay);
            });
        });

        // Gets the open parent
        function getOpenParent() {
            return $.fn.mozMenu.$openMenu.submenu;
        }

        // Clears the current timeout, interrupting fade-ins and outs as necessary
        function clear(timeout) {
            if(timeout) clearTimeout(timeout);
        }

        // Closes a given submenu
        function closeSubmenu($sub) {
            closeTimeout = setTimeout(function() {
                // Set the z-index to one less so another menu would get top spot if overlapping and opening
                if($sub) {
                    $sub.css('z-index', 99998)
                            .removeClass('open')
                            .attr('aria-hidden', 'true')
                            .fadeOut($sub.settings.fadeOutSpeed, function() {
                                $sub.settings.onClose();
                            });
                }
            }, $sub.settings.hideDelay);
        }
    };

    /*
        Plugin to listen for special keyboard keys and will fire actions based on them
    */
    $.fn.mozKeyboardNav = function(options) {
        var settings = $.extend({
            itemSelector: 'a',
            onEnterKey: noop,
            alwaysCollectItems: false
        }, options);

        var $selectedItem;

        return this.each(function() {

            var $items = $(this).find(settings.itemSelector);
            if(!$items.length) return;

            var $self = $(this);

            $self.on('keydown', function(e) {
                var code = e.keyCode;
                var charCode = e.charCode;
                var numberKeyStart = 49;

                // If we should always get fresh items, do so
                if(settings.alwaysCollectItems) {
                    $items = $(this).find(settings.itemSelector);
                    $selectedItem = null;
                }

                // Up and down buttons
                if(code === 38 || code === 40) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Find currently selected item and clear
                    $selectedItem = $items.filter('.' + focusClass).removeClass(focusClass);

                    // Tricky...if they clicked elsewhere in the mean time, we may need to try to
                    // figure it out by activeElement
                    var index = $items.index($selectedItem);
                    var activeElementIndex = doc.activeElement && $items.index(doc.activeElement);
                    if(activeElementIndex > -1) {
                        index = activeElementIndex;
                    }
                    if(index < 0) {
                        index = 0;
                    }

                    // If nothing is currently selected, start with first no matter which key
                    var $next = $($items.get(index + 1));
                    var $prev = $($items.get(index - 1));

                    if(code === 38) {    // up
                        if($prev.length) selectItem($prev);
                    }
                    else if(code === 40) {    // down
                        selectItem($next.length ? $next : $items.first());
                    }
                }
                // Number keys: 1, 2, 3, etc.
                else if(charCode >= numberKeyStart && charCode <= 57) {
                    var item = $items.get(charCode - numberKeyStart);
                    if(item) selectItem(item);
                }
                // Enter key
                else if(code === 13) {
                    settings.onEnterKey($selectedItem);
                }
            });

        });

        function selectItem(item) {
            $(item).addClass(focusClass).get(0).focus();
            $selectedItem = item;
        }

    };

    /*
        Plugin to listen for special keyboard keys and will fire actions based on them
    */
    $.fn.mozTogglers = function(options) {
        var settings = $.extend({
            onOpen: noop,
            slideCallback: noop,
            duration: 200 /* 400 is the default for jQuery */
        }, options);

        this.each(function() {
            var $self = $(this);
            var pieces = getTogglerComponents($self);
            var closedAttribute = 'data-closed';

            // Initialize open / close for the purpose of animation
            if($self.hasClass('closed')) {
                $self.attr(closedAttribute, 'true').removeClass('closed');
                pieces.$container.hide();
            }
            setIcon(pieces.$toggler, $self);

            // Add aria to indicate dropdown menu
            pieces.$toggler.attr('aria-haspopup', true);

            // Close on ESC
            $self.on('keyup', '.toggle-container', function(e) {
                e.preventDefault();
                e.stopPropagation();
                if(e.keyCode === 27) {
                    $(this).siblings('a').trigger('mdn:click').focus();
                }
            });

            // Click event to show/hide
            $self.on('click mdn:click', '.toggler', function(e) {
                e.preventDefault();
                e.stopPropagation();
                settings.onOpen.call(this);

                // If a true click, mark toggler as such so automated togger clicks (like toc) know not to
                // close without user consent
                if(e.type === 'click') {
                    $(this).attr('data-clicked', true);
                }

                // If I'm an accordion, close the other one
                var $parent = $self.closest('ol, ul');
                if($parent.hasClass('accordion')) {
                    var $current = $parent.find('> .current');
                    if($current.length && $current.get(0) !== $self.get(0)) {
                        toggle($current, true);
                    }
                }

                // Open or close the item, set the icon, etc.
                toggle($self);
            });

            // The toggler can be initially opened via a data- attribute
            if($self.attr('data-default-state') === 'open') {
                toggle($self);
            }

            function toggle($li, forceClose) {
                var pieces = getTogglerComponents($li);

                if(!getState($li) || forceClose) {
                    $li.attr(closedAttribute, 'true').removeClass('current');
                    pieces.$container.attr('aria-expanded', false);
                    pieces.$container.slideUp(settings.duration, settings.slideCallback);
                }
                else {
                    $li.attr(closedAttribute, '').addClass('current');
                    pieces.$container.attr('aria-expanded', true);
                    pieces.$container.slideDown(settings.duration, settings.slideCallback);
                }
                setIcon(pieces.$toggler, $li);
            }

            function getTogglerComponents($li) {
                return {
                    $container: $li.find('> .toggle-container'),
                    $toggler: $li.find('> .toggler')
                };
            }

            function setIcon($tog, $li) {
                var openIcon = $tog.attr('data-open-icon') || 'icon-caret-right';
                var closedIcon = $tog.attr('data-closed-icon') || 'icon-caret-down';
                $tog.find('i').attr('class', (getState($li) ? openIcon : closedIcon));
            }

            function getState($li) {
                return $li.attr(closedAttribute);
            }
        });
    };

    /*
        Plugin to adds a native html5 contextmenu
        Callback passes two arguments, event.target and the menu-element
    */
    $.fn.mozContextMenu = function(callback) {
        return this.on('contextmenu', function(e) {
            callback(e.target, $('#' + $(this).attr('contextmenu')));
        });
    };

    /*
        Plugin to lazyload images
    */
    $.fn.mozLazyloadImage = function() {
        return this.each(function() {
            var $img = $('<img />');
            var alt = $(this).data('alt');
            $img.on('load', function() {
                $(this)
                    .attr('alt', alt)
                    .addClass('loaded');
            });
            $.each($(this).data(), function(name, value) {
                if (name !== 'alt') {
                    $img.attr(name, value);
                }
            });
            $(this).after($img).remove();
        });
    };

    /*
        Plugin to toggle button messages
    */
    $.fn.toggleMessage = function(options){
        var settings = $.extend({
            event: 'click',
            toggleCallback: noop
        }, options);

        return this.each(function(){
            $(this).on(settings.event, function(e){
                var $self = $(this);
                e.preventDefault();
                var currentMessage = $self.text();
                var alternateMessage = $self.attr('data-alternate-message');
                $self.attr('data-alternate-message', currentMessage)
                       .html(alternateMessage);
                settings.toggleCallback();
            });
        });
    };

    win.mdn.Notifier = (function() {
        // Hold onto the one tray
        var $tray;
        var defaults = {
            classes: '', // Classes to apply to the individual notification
            closable: false, // Should the ""x"" icon appear
            level: 'info', // Should the icon appear when a state is given
            duration: 3000, // How long should the item be shown?  '0' means the message needs to be removed manually or via the handle.
            url: null, // Should clicking the item go anywhere?
            onclick: null, // What should happen if they click on the notification?
            onclose: null // What should happen upon closing of individual notification?
        };

        var processedKey = 'data-processed';
        var defaultState = { state: 'info', className: 'info', iconName: 'icon-info-sign'  };
        var states = [
            { state: 'success', className: 'success', iconName: 'icon-smile' },
            { state: 'error', className: 'error', iconName: 'icon-frown' },
            { state: 'warning', className: 'warning', iconName: 'icon-warning-sign'  },
            defaultState
        ];
        var statesObj = {};
        $.each(states, function() {
            statesObj[this.state] = this;
        });

        // Closes an item
        function closeItem($item, callback) {
            $item.fadeOut(300, function() {
                $item.addClass('closed');
                if(callback) callback.apply($item, null);
            });
        }

        // Updates an item's HTML
        function updateMessageHTML($item, message) {
            $item.find('.notification-message').html(message);
        }

        // Enacts options upon an item, used by both discover and growl
        function applyOptions($item, options) {
            // Don't process a notification more than once
            if($item.attr(processedKey)) {
                return;
            }
            $item.attr(processedKey, true);

            // Populating notification content via vanilla JS so we don't lose any
            // attached events to elements within the message itself
            // The jQuery version is ugly: http://stackoverflow.com/a/4399718
            var $messageWrapper = $('<div class=""notification-message""></div>');
            var children = $item.get(0).childNodes;
            while(children && children.length) {
                $messageWrapper.get(0).appendChild(children[0]);
            }
            $messageWrapper.appendTo($item);

            // Add an icon if needed
            var icon = defaultState.iconName;
            if(statesObj[options.level]) {
                icon = statesObj[options.level].iconName;
            }
            if(options.level) {
                $item.addClass(options.level);
            }

            $item.prepend('<div class=""notification-img""><i aria-hidden=""true"" class=""'+ icon +'""></i></div>');

            // Add URL click event
            if(options.url) {
                $item.addClass('clickable').on('click', function() {
                    win.location = defaults.url;
                });
            }

            // Add desired css class
            $item.addClass(options.classes);

            // Add item's close and click event if needed
            if(options.closable) {
                $('<button class=""close"" title=""' + gettext('Close notification') + '""><i class=""icon-remove"" aria-hidden=""true""></i></button>').on('click', function(e) {
                    e.stopPropagation();
                    e.preventDefault();

                    closeItem($item, options.onclose);
                }).appendTo($item);
            }

            // Click event for notifications
            if(options.onclick) {
                $item.addClass('clickable').on('click', options.onclick);
            }

            // Add automatic closer
            if(options.duration) setTimeout(function() {
                closeItem($item, options.onclose);
            }, options.duration);
        }

        // The actual Notifier object component
        return {
            // Finds notifications under a given parent,
            discover: function(parent) {
                var $notifications = $(parent || doc.body).find('.notification:not([' + processedKey + '])');
                $notifications.each(function() {
                    var $item = $(this);
                    applyOptions($item, $item.data());
                });

                return $notifications;
            },
            growl: function(message, options) {
                // Create the tray for the first message
                if(!$tray) {
                    $tray = $('<div class=""notification-tray"" role=""status"" aria-live=""polite""></div>').appendTo(doc.body);
                }

                // Merge options with defaults
                options = $.extend({}, defaults, options || {});

                // Create the growl message, add to tray
                var $item = $('<div class=""notification"">' + message + '</div>');

                // Apply options and format notification
                applyOptions($item, options);

                // Show within the container
                $item.prependTo($tray);

                // Return a handle for the growl item
                var handle = {
                    item: $item,
                    options: options,
                    updateMessage: function(message) {
                        updateMessageHTML(this.item, message);
                        return this;
                    },
                    close: function(delay, callback) {
                        $item = this.item;
                        delay = delay || options.duration;
                        callback = callback || options.onclose;

                        if(delay) {
                            setTimeout(function() {
                                closeItem($item, callback);
                            }, delay);
                        }
                        else {
                            closeItem($item, callback);
                        }
                        return this;
                    }
                };

                // Add success, fail, warning, and info methods to the handle
                $.each(states, function() {

                    var stateObj = this;
                    var state = this.state;
                    var className = this.className;
                    var iconName = this.iconName;
                    handle[state] = function(message, delay) {
                        var $item = handle.item;

                        $item.addClass(className);
                        $item.find('.notification-img i').attr('class', stateObj.iconName);

                        if(message) updateMessageHTML($item, message);
                        if(delay) this.close(delay);

                        return this;
                    };
                });

                return handle;
            }
        };
    })();

})(window, document, jQuery);
",FALSE,,3868
3853,InitialSO.csv3853.txt,InitialGit.csv3853.txt,15,"import numpy as np

def main():
    # Generate some random data
    x = np.cumsum(np.random.random(1000) - 0.5)
    condition = np.abs(x) < 1
    
    # Print the start and stop indicies of each region where the absolute 
    # values of x are below 1, and the min and max of each of these regions
    for start, stop in contiguous_regions(condition):
        segment = x[start:stop]
        print start, stop
        print segment.min(), segment.max()

def contiguous_regions(condition):
    """"""Finds contiguous True regions of the boolean array ""condition"". Returns
    a 2D array where the first column is the start index of the region and the
    second column is the end index.""""""

    # Find the indicies of changes in ""condition""
    d = np.diff(condition)
    idx, = d.nonzero() 

    # We need to start things after the change in ""condition"". Therefore, 
    # we'll shift the index by 1 to the right.
    idx += 1

    if condition[0]:
        # If the start of condition is True prepend a 0
        idx = np.r_[0, idx]

    if condition[-1]:
        # If the end of condition is True, append the length of the array
        idx = np.r_[idx, condition.size] # Edit

    # Reshape the result into two columns
    idx.shape = (-1,2)
    return idx

main()
 ","import numpy as np

def main():
    # Generate some random data
    x = np.cumsum(np.random.random(1000) - 0.5)
    condition = np.abs(x) < 1
    
    # Print the start and stop indices of each region where the absolute 
    # values of x are below 1, and the min and max of each of these regions
    for start, stop in contiguous_regions(condition):
        segment = x[start:stop]
        print start, stop
        print segment.min(), segment.max()

def contiguous_regions(condition):
    """"""Finds contiguous True regions of the boolean array ""condition"". Returns
    a 2D array where the first column is the start index of the region and the
    second column is the end index.""""""

    # Find the indicies of changes in ""condition""
    d = np.diff(condition)
    idx, = d.nonzero() 

    # We need to start things after the change in ""condition"". Therefore, 
    # we'll shift the index by 1 to the right.
    idx += 1

    if condition[0]:
        # If the start of condition is True prepend a 0
        idx = np.r_[0, idx]

    if condition[-1]:
        # If the end of condition is True, append the length of the array
        idx = np.r_[idx, condition.size] # Edit

    # Reshape the result into two columns
    idx.shape = (-1,2)
    return idx

main()
 ",FALSE,"#!/usr/bin/env python
# File created on 22 Mar 2010
from __future__ import division

__author__ = ""Greg Caporaso""
__copyright__ = ""Copyright 2011, The QIIME Project""
__credits__ = [""Greg Caporaso"", ""Jose Antonio Navas Molina"", ""Daniel McDonald""]
__license__ = ""GPL""
__version__ = ""1.9.0-rc2""
__maintainer__ = ""Greg Caporaso""
__email__ = ""gregcaporaso@gmail.com""

from itertools import izip, cycle
from os.path import split, splitext, join
from os import makedirs

import numpy as np

from skbio.parse.sequences import parse_fastq
from skbio.sequence import DNA
from skbio.format.sequences import format_fastq_record

from qiime.format import (format_histogram_one_count,
                          format_split_libraries_fastq_log)
from qiime.parse import is_casava_v180_or_later
from qiime.hamming import decode_hamming_8
from qiime.golay import decode_golay_12
from qiime.util import qiime_open


class FastqParseError(Exception):
    pass


def get_illumina_qual_chars():
    # pulled from stack overflow (url wrapped over two lines):
    # http://stackoverflow.com/questions/5891453/
    # is-there-a-python-library-that-contains-a-list-of-all-the-ascii-characters
    return ['\t', '\n', '\r', ' ', '!', '""', '#', '$', '%', '&', ""'"", '(', ')',
            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7',
            '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E',
            'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
            'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a',
            'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}',
            '~']


def bad_chars_from_threshold(first_bad_char):
    if first_bad_char == '':
        return {}
    else:
        all_chars = get_illumina_qual_chars()
        first_bad_char_index = all_chars.index(first_bad_char)
        bad_chars = list(get_illumina_qual_chars()[:first_bad_char_index + 1])
        return {}.fromkeys(bad_chars)

def _contiguous_regions(condition):
    """"""Finds contiguous True regions of the boolean array ""condition"". Returns
    a 2D array where the first column is the start index of the region and the
    second column is the end index.

    This function was derived from SO:
    http://stackoverflow.com/a/4495197/579416
    """"""

    # Find the indicies of changes in ""condition""
    d = np.diff(condition)
    idx, = d.nonzero()

    # We need to start things after the change in ""condition"". Therefore,
    # we'll shift the index by 1 to the right.
    idx += 1

    if condition[0]:
        # If the start of condition is True prepend a 0
        idx = np.r_[0, idx]

    if condition[-1]:
        # If the end of condition is True, append the length of the array
        idx = np.r_[idx, condition.size] # Edit

    # Reshape the result into two columns
    idx.shape = (-1,2)
    return idx

def read_qual_score_filter(seq, qual, max_run_length, threshold):
    """"""slices illumina sequence and quality line based on quality filter
    """"""
    last_good_slice_end_pos = 0
    bad_run_length = 0
    mask = qual <= threshold
    for starts, ends in _contiguous_regions(mask):
        if ends - starts > max_run_length:
            return seq[:starts], qual[:starts]

    return seq, qual


def quality_filter_sequence(header,
                            sequence,
                            quality,
                            max_bad_run_length,
                            phred_quality_threshold,
                            min_per_read_length,
                            seq_max_N,
                            filter_bad_illumina_qual_digit):
    if filter_bad_illumina_qual_digit:
        h = header.split()[0]
        try:
            # this block is a little strange because each of these
            # can throw a ValueError. The same thing needs to be done
            # in either case, so it doesn't really make sense to split
            # into two separate try/excepts, particulary because that would
            # complicate the logic
            quality_char = header[h.index('#') + 1]
            illumina_quality_digit = int(quality_char)
        except ValueError:
            pass
        else:
            if illumina_quality_digit == 0:
                return 3, sequence, quality

    sequence, quality = read_qual_score_filter(sequence,
                                               quality,
                                               max_bad_run_length,
                                               phred_quality_threshold)

    if (len(sequence) < min_per_read_length):
        return 1, sequence, quality
    elif (sequence.count('N') > seq_max_N):
        return 2, sequence, quality
    else:
        return 0, sequence, quality


def check_header_match_pre180(header1, header2):

    # split on '#' and '/' to handle cases with and without the
    # Illumina quality digit
    header1 = header1.split('#')[0].split('/')[0]
    header2 = header2.split('#')[0].split('/')[0]

    return header1 == header2


def check_header_match_180_or_later(header1, header2):
    """""" Confirm headers are compatible in CASAVA 1.8.0 or later

        These contain information on the read number, so can differ
    """"""
    header1 = header1.split(':')
    header2 = header2.split(':')
    for e1, e2 in zip(header1, header2):
        if e1.split(' ')[0] != e2.split(' ')[0]:
            return False

    return True

BARCODE_DECODER_LOOKUP = {
    'golay_12': decode_golay_12,
    #'hamming_8':decode_hamming_8,
}


def correct_barcode(barcode, barcode_to_sample_id, correction_fn):
    """"""Correct barcode given barcode, dict of valid barcodes, and correction fn

       return value: (number of errors,
                      corrected barcode,
                      correction was attempted (bool),
                      sample id [None if can't be determined])

    """"""
    # Map the barcode if possible
    try:
        sample_id = barcode_to_sample_id[barcode]
    except KeyError:
        sample_id = None

    if sample_id is not None or correction_fn is None or 'N' in barcode:
        # barcode isn't corrected, either because is maps directly to
        # a sample ID, because we're not correcting barcodes, or because
        # it contains an 'N' character
        return 0, barcode, False, sample_id
    else:
        # correct the barcode
        corrected_barcode, num_errors = correction_fn(barcode)
        try:
            sample_id = barcode_to_sample_id[corrected_barcode]
        except KeyError:
            sample_id = None

        return num_errors, corrected_barcode, True, sample_id


def process_fastq_single_end_read_file_no_barcode(
        fastq_read_f,
        sample_id,
        store_unassigned=False,
        max_bad_run_length=0,
        phred_quality_threshold=2,
        min_per_read_length_fraction=0.75,
        rev_comp=False,
        seq_max_N=0,
        start_seq_id=0,
        filter_bad_illumina_qual_digit=False,
        log_f=None,
        histogram_f=None,
        phred_offset=None):
    """""" Quality filtering when a single sample has been run in a lane

        This code simulates a barcode file to allow us to re-use the quality
         filtering code when not demultiplexing. A post-split-libraries file
         is generated by assigning all sequences to sample_id
    """"""
    # simulate a barcode fastq file
    fake_barcodes = cycle([""@"", ""AAAAAAAAAAAA"", ""+"", ""CCCCCCCCCCCC""])
    # make a fake barcode mapping
    barcode_to_sample_id = {""AAAAAAAAAAAA"": sample_id}
    for e in process_fastq_single_end_read_file(
            fastq_read_f,
            fake_barcodes,
            barcode_to_sample_id,
            store_unassigned=store_unassigned,
            max_bad_run_length=max_bad_run_length,
            phred_quality_threshold=phred_quality_threshold,
            min_per_read_length_fraction=min_per_read_length_fraction,
            rev_comp=rev_comp,
            rev_comp_barcode=False,
            seq_max_N=seq_max_N,
            start_seq_id=start_seq_id,
            filter_bad_illumina_qual_digit=filter_bad_illumina_qual_digit,
            log_f=log_f,
            histogram_f=histogram_f,
            barcode_correction_fn=None,
            max_barcode_errors=0,
            strict_header_match=False,
            phred_offset=phred_offset):
        yield e


def process_fastq_single_end_read_file(fastq_read_f,
                                       fastq_barcode_f,
                                       barcode_to_sample_id,
                                       store_unassigned=False,
                                       max_bad_run_length=0,
                                       phred_quality_threshold=2,
                                       min_per_read_length_fraction=0.75,
                                       rev_comp=False,
                                       rev_comp_barcode=False,
                                       seq_max_N=0,
                                       start_seq_id=0,
                                       filter_bad_illumina_qual_digit=False,
                                       log_f=None,
                                       histogram_f=None,
                                       barcode_correction_fn=None,
                                       max_barcode_errors=1.5,
                                       strict_header_match=True,
                                       phred_offset=None):
    """"""parses fastq single-end read file
    """"""
    header_index = 0
    sequence_index = 1
    quality_index = 2

    seq_id = start_seq_id
    # grab the first lines and then seek back to the beginning of the file
    try:
        fastq_read_f_line1 = fastq_read_f.readline()
        fastq_read_f_line2 = fastq_read_f.readline()
        fastq_read_f.seek(0)
    except AttributeError:
        fastq_read_f_line1 = fastq_read_f[0]
        fastq_read_f_line2 = fastq_read_f[1]

    if phred_offset is None:
        post_casava_v180 = is_casava_v180_or_later(fastq_read_f_line1)
        if post_casava_v180:
            phred_offset = 33
        else:
            phred_offset = 64

    if phred_offset == 33:
        check_header_match_f = check_header_match_180_or_later
    elif phred_offset == 64:
        check_header_match_f = check_header_match_pre180
    else:
        raise ValueError(""Invalid PHRED offset: %d"" % phred_offset)

    # compute the barcode length, if they are all the same.
    # this is useful for selecting a subset of the barcode read
    # if it's too long (e.g., for technical reasons on the sequencer)
    barcode_lengths = set([len(bc)
                          for bc, sid in barcode_to_sample_id.items()])
    if len(barcode_lengths) == 1:
        barcode_length = barcode_lengths.pop()
    else:
        barcode_length = None

    # compute the minimum read length as a fraction of the length of the input
    # read
    min_per_read_length = min_per_read_length_fraction * \
        len(fastq_read_f_line2)

    # prep data for logging
    input_sequence_count = 0
    count_barcode_not_in_map = 0
    count_too_short = 0
    count_too_many_N = 0
    count_bad_illumina_qual_digit = 0
    count_barcode_errors_exceed_max = 0
    sequence_lengths = []
    seqs_per_sample_counts = {}
    for bc_data, read_data in izip(
            parse_fastq(fastq_barcode_f, strict=False, phred_offset=phred_offset),
            parse_fastq(fastq_read_f, strict=False, phred_offset=phred_offset)):
        input_sequence_count += 1
        # Confirm match between barcode and read headers
        if strict_header_match and \
           (not check_header_match_f(bc_data[header_index], read_data[header_index])):
            raise FastqParseError(""Headers of barcode and read do not match. Can't continue. ""
                                  ""Confirm that the barcode fastq and read fastq that you are ""
                                  ""passing match one another."")
        else:
            header = read_data[header_index]

        # Grab the barcode sequence
        if barcode_length:
            # because thirteen cycles are sometimes used for
            # techical reasons, this step looks only at the
            # first tweleve bases. note that the barcode is
            # rev-comp'ed after this step if requested since
            # the thirteen base is a technical artefact, not
            # barcode sequence.
            barcode = bc_data[sequence_index][:barcode_length]
        else:
            barcode = bc_data[sequence_index]
        if rev_comp_barcode:
            barcode = str(DNA(barcode).rc())
        # Grab the read sequence
        sequence = read_data[1]
        # Grab the read quality
        quality = read_data[2]

        # correct the barcode (if applicable) and map to sample id
        num_barcode_errors, corrected_barcode, correction_attempted, sample_id = \
            correct_barcode(
                barcode,
                barcode_to_sample_id,
                barcode_correction_fn)
        # skip samples with too many errors
        if (num_barcode_errors > max_barcode_errors):
            count_barcode_errors_exceed_max += 1
            continue

        # skip unassignable samples unless otherwise requested
        if sample_id is None:
            if not store_unassigned:
                count_barcode_not_in_map += 1
                continue
            else:
                sample_id = 'Unassigned'

        quality_filter_result, sequence, quality =\
            quality_filter_sequence(header,
                                    sequence,
                                    quality,
                                    max_bad_run_length,
                                    phred_quality_threshold,
                                    min_per_read_length,
                                    seq_max_N,
                                    filter_bad_illumina_qual_digit)

        # process quality result
        if quality_filter_result != 0:
            # if the quality filter didn't pass record why and
            # move on to the next record
            if quality_filter_result == 1:
                count_too_short += 1
            elif quality_filter_result == 2:
                count_too_many_N += 1
            elif quality_filter_result == 3:
                count_bad_illumina_qual_digit += 1
            else:
                raise ValueError(
                    ""Unknown quality filter result: %d"" %
                    quality_filter_result)
            continue

        sequence_lengths.append(len(sequence))

        try:
            seqs_per_sample_counts[sample_id] += 1
        except KeyError:
            seqs_per_sample_counts[sample_id] = 1

        if rev_comp:
            sequence = str(DNA(sequence).rc())
            quality = quality[::-1]

        fasta_header = '%s_%s %s orig_bc=%s new_bc=%s bc_diffs=%d' %\
            (sample_id, seq_id, header, barcode,
             corrected_barcode, num_barcode_errors)
        yield fasta_header, sequence, quality, seq_id
        seq_id += 1

    # Add sample IDs with zero counts to dictionary for logging
    for curr_sample_id in barcode_to_sample_id.values():
        if curr_sample_id not in seqs_per_sample_counts.keys():
            seqs_per_sample_counts[curr_sample_id] = 0

    if log_f is not None:
        log_str = format_split_libraries_fastq_log(count_barcode_not_in_map,
                                                   count_too_short,
                                                   count_too_many_N,
                                                   count_bad_illumina_qual_digit,
                                                   count_barcode_errors_exceed_max,
                                                   input_sequence_count,
                                                   sequence_lengths,
                                                   seqs_per_sample_counts)
        log_f.write(log_str)

    if len(sequence_lengths) and histogram_f is not None:
        counts, bin_edges = make_histograms(sequence_lengths)
        histogram_str = format_histogram_one_count(counts, bin_edges)
        histogram_f.write(histogram_str)
        histogram_f.write('\n--\n\n')


def make_histograms(lengths, binwidth=10):
    """"""Makes histogram data for pre and post lengths""""""
    min_len = min(lengths)
    max_len = max(lengths)
    floor = (min_len / binwidth) * binwidth
    ceil = ((max_len / binwidth) + 2) * binwidth
    bins = np.arange(floor, ceil, binwidth)
    hist, bin_edges = np.histogram(lengths, bins)
    return hist, bin_edges


def extract_reads_from_interleaved(
        input_fp, forward_id, reverse_id, output_dir):
    """"""Parses a single fastq file and creates two new files: forward and reverse, based on
    the two values (comma separated) in read_direction_identifiers

    input_fp: file path to input
    read_direction_identifiers: comma separated values to identify forward and reverse reads
    output_folder: file path to the output folder
    """"""
    forward_fp = join(output_dir, ""forward_reads.fastq"")
    reverse_fp = join(output_dir, ""reverse_reads.fastq"")
    ffp = open(forward_fp, 'w')
    rfp = open(reverse_fp, 'w')

    for label, seq, qual in parse_fastq(qiime_open(input_fp), strict=False):
        fastq_string = format_fastq_record(label, seq, qual)
        if forward_id in label:
            ffp.write(fastq_string)
        elif reverse_id in label and forward_id not in label:
            rfp.write(fastq_string)
        else:
            ffp.close()
            rfp.close()
            raise ValueError(""One of the input sequences doesn't have either identifier ""
                             ""or it has both.\nLabel: %s\nForward: %s\n Reverse: %s"" %
                             (label, forward_id, reverse_id))
    ffp.close()
    rfp.close()
","#!/usr/bin/env python
# File created on 22 Mar 2010
from __future__ import division

__author__ = ""Greg Caporaso""
__copyright__ = ""Copyright 2011, The QIIME Project""
__credits__ = [""Greg Caporaso"", ""Jose Antonio Navas Molina"", ""Daniel McDonald""]
__license__ = ""GPL""
__version__ = ""1.9.1-dev""
__maintainer__ = ""Greg Caporaso""
__email__ = ""gregcaporaso@gmail.com""

from itertools import izip, cycle
from os.path import split, splitext, join
from os import makedirs

import numpy as np

from skbio.parse.sequences import parse_fastq
from skbio.sequence import DNA
from skbio.format.sequences import format_fastq_record

from qiime.format import (format_histogram_one_count,
                          format_split_libraries_fastq_log)
from qiime.parse import is_casava_v180_or_later
from qiime.hamming import decode_hamming_8
from qiime.golay import decode_golay_12
from qiime.util import qiime_open


class FastqParseError(Exception):
    pass


def get_illumina_qual_chars():
    # pulled from stack overflow (url wrapped over two lines):
    # http://stackoverflow.com/questions/5891453/
    # is-there-a-python-library-that-contains-a-list-of-all-the-ascii-characters
    return ['\t', '\n', '\r', ' ', '!', '""', '#', '$', '%', '&', ""'"", '(', ')',
            '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7',
            '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E',
            'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
            'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']', '^', '_', '`', 'a',
            'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
            'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}',
            '~']


def bad_chars_from_threshold(first_bad_char):
    if first_bad_char == '':
        return {}
    else:
        all_chars = get_illumina_qual_chars()
        first_bad_char_index = all_chars.index(first_bad_char)
        bad_chars = list(get_illumina_qual_chars()[:first_bad_char_index + 1])
        return {}.fromkeys(bad_chars)

def _contiguous_regions(condition):
    """"""Finds contiguous True regions of the boolean array ""condition"". Returns
    a 2D array where the first column is the start index of the region and the
    second column is the end index.

    This function was derived from SO:
    http://stackoverflow.com/a/4495197/579416
    """"""

    # Find the indicies of changes in ""condition""
    d = np.diff(condition)
    idx, = d.nonzero()

    # We need to start things after the change in ""condition"". Therefore,
    # we'll shift the index by 1 to the right.
    idx += 1

    if condition[0]:
        # If the start of condition is True prepend a 0
        idx = np.r_[0, idx]

    if condition[-1]:
        # If the end of condition is True, append the length of the array
        idx = np.r_[idx, condition.size]

    # Reshape the result into two columns
    idx.shape = (-1,2)
    return idx

def read_qual_score_filter(seq, qual, max_run_length, threshold):
    """"""slices illumina sequence and quality line based on quality filter
    """"""
    last_good_slice_end_pos = 0
    bad_run_length = 0
    mask = qual <= threshold
    for starts, ends in _contiguous_regions(mask):
        if ends - starts > max_run_length:
            return seq[:starts], qual[:starts]

    return seq, qual


def quality_filter_sequence(header,
                            sequence,
                            quality,
                            max_bad_run_length,
                            phred_quality_threshold,
                            min_per_read_length,
                            seq_max_N,
                            filter_bad_illumina_qual_digit):
    if filter_bad_illumina_qual_digit:
        h = header.split()[0]
        try:
            # this block is a little strange because each of these
            # can throw a ValueError. The same thing needs to be done
            # in either case, so it doesn't really make sense to split
            # into two separate try/excepts, particulary because that would
            # complicate the logic
            quality_char = header[h.index('#') + 1]
            illumina_quality_digit = int(quality_char)
        except ValueError:
            pass
        else:
            if illumina_quality_digit == 0:
                return 3, sequence, quality

    sequence, quality = read_qual_score_filter(sequence,
                                               quality,
                                               max_bad_run_length,
                                               phred_quality_threshold)

    if (len(sequence) < min_per_read_length):
        return 1, sequence, quality
    elif (sequence.count('N') > seq_max_N):
        return 2, sequence, quality
    else:
        return 0, sequence, quality


def check_header_match_pre180(header1, header2):

    # split on '#' and '/' to handle cases with and without the
    # Illumina quality digit
    header1 = header1.split('#')[0].split('/')[0]
    header2 = header2.split('#')[0].split('/')[0]

    return header1 == header2


def check_header_match_180_or_later(header1, header2):
    """""" Confirm headers are compatible in CASAVA 1.8.0 or later

        These contain information on the read number, so can differ
    """"""
    header1 = header1.split(':')
    header2 = header2.split(':')
    for e1, e2 in zip(header1, header2):
        if e1.split(' ')[0] != e2.split(' ')[0]:
            return False

    return True

BARCODE_DECODER_LOOKUP = {
    'golay_12': decode_golay_12,
    #'hamming_8':decode_hamming_8,
}


def correct_barcode(barcode, barcode_to_sample_id, correction_fn):
    """"""Correct barcode given barcode, dict of valid barcodes, and correction fn

       return value: (number of errors,
                      corrected barcode,
                      correction was attempted (bool),
                      sample id [None if can't be determined])

    """"""
    # Map the barcode if possible
    try:
        sample_id = barcode_to_sample_id[barcode]
    except KeyError:
        sample_id = None

    if sample_id is not None or correction_fn is None or 'N' in barcode:
        # barcode isn't corrected, either because is maps directly to
        # a sample ID, because we're not correcting barcodes, or because
        # it contains an 'N' character
        return 0, barcode, False, sample_id
    else:
        # correct the barcode
        corrected_barcode, num_errors = correction_fn(barcode)
        try:
            sample_id = barcode_to_sample_id[corrected_barcode]
        except KeyError:
            sample_id = None

        return num_errors, corrected_barcode, True, sample_id


def process_fastq_single_end_read_file_no_barcode(
        fastq_read_f,
        sample_id,
        store_unassigned=False,
        max_bad_run_length=0,
        phred_quality_threshold=2,
        min_per_read_length_fraction=0.75,
        rev_comp=False,
        seq_max_N=0,
        start_seq_id=0,
        filter_bad_illumina_qual_digit=False,
        log_f=None,
        histogram_f=None,
        phred_offset=None):
    """""" Quality filtering when a single sample has been run in a lane

        This code simulates a barcode file to allow us to re-use the quality
         filtering code when not demultiplexing. A post-split-libraries file
         is generated by assigning all sequences to sample_id
    """"""
    # simulate a barcode fastq file
    fake_barcodes = cycle([""@"", ""AAAAAAAAAAAA"", ""+"", ""CCCCCCCCCCCC""])
    # make a fake barcode mapping
    barcode_to_sample_id = {""AAAAAAAAAAAA"": sample_id}
    for e in process_fastq_single_end_read_file(
            fastq_read_f,
            fake_barcodes,
            barcode_to_sample_id,
            store_unassigned=store_unassigned,
            max_bad_run_length=max_bad_run_length,
            phred_quality_threshold=phred_quality_threshold,
            min_per_read_length_fraction=min_per_read_length_fraction,
            rev_comp=rev_comp,
            rev_comp_barcode=False,
            seq_max_N=seq_max_N,
            start_seq_id=start_seq_id,
            filter_bad_illumina_qual_digit=filter_bad_illumina_qual_digit,
            log_f=log_f,
            histogram_f=histogram_f,
            barcode_correction_fn=None,
            max_barcode_errors=0,
            strict_header_match=False,
            phred_offset=phred_offset):
        yield e


def process_fastq_single_end_read_file(fastq_read_f,
                                       fastq_barcode_f,
                                       barcode_to_sample_id,
                                       store_unassigned=False,
                                       max_bad_run_length=0,
                                       phred_quality_threshold=2,
                                       min_per_read_length_fraction=0.75,
                                       rev_comp=False,
                                       rev_comp_barcode=False,
                                       seq_max_N=0,
                                       start_seq_id=0,
                                       filter_bad_illumina_qual_digit=False,
                                       log_f=None,
                                       histogram_f=None,
                                       barcode_correction_fn=None,
                                       max_barcode_errors=1.5,
                                       strict_header_match=True,
                                       phred_offset=None):
    """"""parses fastq single-end read file
    """"""
    header_index = 0
    sequence_index = 1
    quality_index = 2

    seq_id = start_seq_id
    # grab the first lines and then seek back to the beginning of the file
    try:
        fastq_read_f_line1 = fastq_read_f.readline()
        fastq_read_f_line2 = fastq_read_f.readline()
        fastq_read_f.seek(0)
    except AttributeError:
        fastq_read_f_line1 = fastq_read_f[0]
        fastq_read_f_line2 = fastq_read_f[1]

    if phred_offset is None:
        post_casava_v180 = is_casava_v180_or_later(fastq_read_f_line1)
        if post_casava_v180:
            phred_offset = 33
        else:
            phred_offset = 64

    if phred_offset == 33:
        check_header_match_f = check_header_match_180_or_later
    elif phred_offset == 64:
        check_header_match_f = check_header_match_pre180
    else:
        raise ValueError(""Invalid PHRED offset: %d"" % phred_offset)

    # compute the barcode length, if they are all the same.
    # this is useful for selecting a subset of the barcode read
    # if it's too long (e.g., for technical reasons on the sequencer)
    barcode_lengths = set([len(bc)
                          for bc, sid in barcode_to_sample_id.items()])
    if len(barcode_lengths) == 1:
        barcode_length = barcode_lengths.pop()
    else:
        barcode_length = None

    # compute the minimum read length as a fraction of the length of the input
    # read
    min_per_read_length = min_per_read_length_fraction * \
        len(fastq_read_f_line2)

    # prep data for logging
    input_sequence_count = 0
    count_barcode_not_in_map = 0
    count_too_short = 0
    count_too_many_N = 0
    count_bad_illumina_qual_digit = 0
    count_barcode_errors_exceed_max = 0
    sequence_lengths = []
    seqs_per_sample_counts = {}
    for bc_data, read_data in izip(
            parse_fastq(fastq_barcode_f, strict=False, phred_offset=phred_offset),
            parse_fastq(fastq_read_f, strict=False, phred_offset=phred_offset)):
        input_sequence_count += 1
        # Confirm match between barcode and read headers
        if strict_header_match and \
           (not check_header_match_f(bc_data[header_index], read_data[header_index])):
            raise FastqParseError(""Headers of barcode and read do not match. Can't continue. ""
                                  ""Confirm that the barcode fastq and read fastq that you are ""
                                  ""passing match one another."")
        else:
            header = read_data[header_index]

        # Grab the barcode sequence
        if barcode_length:
            # because thirteen cycles are sometimes used for
            # techical reasons, this step looks only at the
            # first tweleve bases. note that the barcode is
            # rev-comp'ed after this step if requested since
            # the thirteen base is a technical artefact, not
            # barcode sequence.
            barcode = bc_data[sequence_index][:barcode_length]
        else:
            barcode = bc_data[sequence_index]
        if rev_comp_barcode:
            barcode = str(DNA(barcode).rc())
        # Grab the read sequence
        sequence = read_data[1]
        # Grab the read quality
        quality = read_data[2]

        # correct the barcode (if applicable) and map to sample id
        num_barcode_errors, corrected_barcode, correction_attempted, sample_id = \
            correct_barcode(
                barcode,
                barcode_to_sample_id,
                barcode_correction_fn)
        # skip samples with too many errors
        if (num_barcode_errors > max_barcode_errors):
            count_barcode_errors_exceed_max += 1
            continue

        # skip unassignable samples unless otherwise requested
        if sample_id is None:
            if not store_unassigned:
                count_barcode_not_in_map += 1
                continue
            else:
                sample_id = 'Unassigned'

        quality_filter_result, sequence, quality =\
            quality_filter_sequence(header,
                                    sequence,
                                    quality,
                                    max_bad_run_length,
                                    phred_quality_threshold,
                                    min_per_read_length,
                                    seq_max_N,
                                    filter_bad_illumina_qual_digit)

        # process quality result
        if quality_filter_result != 0:
            # if the quality filter didn't pass record why and
            # move on to the next record
            if quality_filter_result == 1:
                count_too_short += 1
            elif quality_filter_result == 2:
                count_too_many_N += 1
            elif quality_filter_result == 3:
                count_bad_illumina_qual_digit += 1
            else:
                raise ValueError(
                    ""Unknown quality filter result: %d"" %
                    quality_filter_result)
            continue

        sequence_lengths.append(len(sequence))

        try:
            seqs_per_sample_counts[sample_id] += 1
        except KeyError:
            seqs_per_sample_counts[sample_id] = 1

        if rev_comp:
            sequence = str(DNA(sequence).rc())
            quality = quality[::-1]

        fasta_header = '%s_%s %s orig_bc=%s new_bc=%s bc_diffs=%d' %\
            (sample_id, seq_id, header, barcode,
             corrected_barcode, num_barcode_errors)
        yield fasta_header, sequence, quality, seq_id
        seq_id += 1

    # Add sample IDs with zero counts to dictionary for logging
    for curr_sample_id in barcode_to_sample_id.values():
        if curr_sample_id not in seqs_per_sample_counts.keys():
            seqs_per_sample_counts[curr_sample_id] = 0

    if log_f is not None:
        log_str = format_split_libraries_fastq_log(count_barcode_not_in_map,
                                                   count_too_short,
                                                   count_too_many_N,
                                                   count_bad_illumina_qual_digit,
                                                   count_barcode_errors_exceed_max,
                                                   input_sequence_count,
                                                   sequence_lengths,
                                                   seqs_per_sample_counts)
        log_f.write(log_str)

    if len(sequence_lengths) and histogram_f is not None:
        counts, bin_edges = make_histograms(sequence_lengths)
        histogram_str = format_histogram_one_count(counts, bin_edges)
        histogram_f.write(histogram_str)
        histogram_f.write('\n--\n\n')


def make_histograms(lengths, binwidth=10):
    """"""Makes histogram data for pre and post lengths""""""
    min_len = min(lengths)
    max_len = max(lengths)
    floor = (min_len / binwidth) * binwidth
    ceil = ((max_len / binwidth) + 2) * binwidth
    bins = np.arange(floor, ceil, binwidth)
    hist, bin_edges = np.histogram(lengths, bins)
    return hist, bin_edges


def extract_reads_from_interleaved(
        input_fp, forward_id, reverse_id, output_dir):
    """"""Parses a single fastq file and creates two new files: forward and reverse, based on
    the two values (comma separated) in read_direction_identifiers

    input_fp: file path to input
    read_direction_identifiers: comma separated values to identify forward and reverse reads
    output_folder: file path to the output folder
    """"""
    forward_fp = join(output_dir, ""forward_reads.fastq"")
    reverse_fp = join(output_dir, ""reverse_reads.fastq"")
    ffp = open(forward_fp, 'w')
    rfp = open(reverse_fp, 'w')

    for label, seq, qual in parse_fastq(qiime_open(input_fp), strict=False,
                                        enforce_qual_range=False):
        fastq_string = format_fastq_record(label, seq, qual)
        if forward_id in label:
            ffp.write(fastq_string)
        elif reverse_id in label and forward_id not in label:
            rfp.write(fastq_string)
        else:
            ffp.close()
            rfp.close()
            raise ValueError(""One of the input sequences doesn't have either identifier ""
                             ""or it has both.\nLabel: %s\nForward: %s\n Reverse: %s"" %
                             (label, forward_id, reverse_id))
    ffp.close()
    rfp.close()
",FALSE,,3871
3858,InitialSO.csv3858.txt,InitialGit.csv3858.txt,10,"$conn = mysql_connect(""localhost"", ""mysql_user"", ""mysql_password"");
mysql_select_db(""mydbname"");
$result = mysql_query(""SELECT * FROM myTable"");
//first get your sizes
$sizes = array();
$row = mysql_fetch_assoc($result);
foreach($row as $key=>$value){
    $sizes[$key] = strlen($key); //initialize to the size of the column name
}
while($row = mysql_fetch_assoc($result)){
    foreach($row as $key=>$value){
        $length = strlen($value);
        if($length > $sizes[$key]) $sizes[$key] = $length; // get largest result size
    }
}
mysql_data_seek($result, 0); //set your pointer back to the beginning.

//top of output
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";

// column names
$row = mysql_fetch_assoc($result);
foreach($row as $key=>$value){
    echo ""| "";
    echo str_pad($key,$sizes[$key]+1);
}
echo ""|\n"";

//line under column names
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";

//output data
do {
    foreach($row as $key=>$value){
        echo ""| "";
        echo str_pad($value,$sizes[$key]+1);
    }
    echo ""|\n"";
} while($row = mysql_fetch_assoc($result));

//bottom of output
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";
 ","$conn = mysql_connect(""localhost"", ""mysql_user"", ""mysql_password"");
mysql_select_db(""mydbname"");
$result = mysql_query(""SELECT * FROM myTable"");
//first get your sizes
$sizes = array();
$row = mysql_fetch_assoc($result);
foreach($row as $key=>$value){
    $sizes[$key] = strlen($key); //initialize to the size of the column name
}
while($row = mysql_fetch_assoc($result)){
    foreach($row as $key=>$value){
        $length = strlen($value);
        if($length > $sizes[$key]) $sizes[$key] = $length; // get largest result size
    }
}
mysql_data_seek($result, 0); //set your pointer back to the beginning.

//top of output
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";

// column names
$row = mysql_fetch_assoc($result);
foreach($row as $key=>$value){
    echo ""| "";
    echo str_pad($key,$sizes[$key]+1);
}
echo ""|\n"";

//line under column names
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";

//output data
do {
    foreach($row as $key=>$value){
        echo ""| "";
        echo str_pad($value,$sizes[$key]+1);
    }
    echo ""|\n"";
} while($row = mysql_fetch_assoc($result));

//bottom of output
foreach($sizes as $length){
    echo ""+"".str_pad("""",$length+2,""-"");
}
echo ""+\n"";
 ",TRUE,"<?php
class TextReportFormat extends ReportFormatBase {
	public static function display(&$report, &$request) {
		$page_template = array(
			'content'=>$report->renderReportPage('text/report','text/page')
		);
		
		header(""Content-type: text/plain"");
		header(""Pragma: no-cache"");
		header(""Expires: 0"");

		/**
		 * This code taken from Stack Overflow answer by ehudokai
		 * http://stackoverflow.com/a/4597190
		 */

		//first get your sizes
		$sizes = array();
		$first_row = $report->options['Rows'][0];
		foreach($first_row['values'] as $key=>$value){
			$key = $value['key'];
			$value = $value['raw_value'];
			
			//initialize to the size of the column name
			$sizes[$key] = strlen($key);
		}
		foreach($report->options['Rows'] as $row) {
			foreach($row['values'] as $key=>$value){
				$key = $value['key'];
				$value = $value['raw_value'];
				
				$length = strlen($value);
				if($length > $sizes[$key]) $sizes[$key] = $length; // get largest result size
			}
		}

		//top of output
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";

		// column names
		foreach($first_row['values'] as $key=>$value){
			$key = $value['key'];
			$value = $value['raw_value'];
			
			echo ""| "";
			echo str_pad($key,$sizes[$key]+1);
		}
		echo ""|\n"";

		//line under column names
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";

		//output data
		foreach($report->options['Rows'] as $row) {
			foreach($row['values'] as $key=>$value){
				$key = $value['key'];
				$value = $value['raw_value'];
				
				echo ""| "";
				echo str_pad($value,$sizes[$key]+1);
			}
			echo ""|\n"";
		}

		//bottom of output
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";
	}
}
","<?php
class TextReportFormat extends ReportFormatBase {
	public static function display(&$report, &$request) {
		header(""Content-type: text/plain"");
		header(""Pragma: no-cache"");
		header(""Expires: 0"");
		
		$report->use_cache = true;
		
		//run the report
		$report->run();
		
        if(!$report->options['DataSets']) return;
        
        foreach($report->options['DataSets'] as $i=>$dataset) {
			if(isset($dataset['title'])) echo $dataset['title'].""\n"";
			TextReportFormat::displayDataSet($dataset);
			
			// If this isn't the last dataset, add some spacing
			if($i < count($report->options['DataSets'])-1) {
				echo ""\n\n"";
			}
		}
    }
    
    protected static function displayDataSet($dataset) {
		/**
		 * This code taken from Stack Overflow answer by ehudokai
		 * http://stackoverflow.com/a/4597190
		 */

		//first get your sizes
		$sizes = array();
		$first_row = $dataset['rows'][0];
		foreach($first_row['values'] as $key=>$value){
			$key = $value->key;
			$value = $value->getValue();
			
			//initialize to the size of the column name
			$sizes[$key] = strlen($key);
		}
		foreach($dataset['rows'] as $row) {
			foreach($row['values'] as $key=>$value){
				$key = $value->key;
				$value = $value->getValue();
				
				$length = strlen($value);
				if($length > $sizes[$key]) $sizes[$key] = $length; // get largest result size
			}
		}

		//top of output
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";

		// column names
		foreach($first_row['values'] as $key=>$value){
			$key = $value->key;
			$value = $value->getValue();
			
			echo ""| "";
			echo str_pad($key,$sizes[$key]+1);
		}
		echo ""|\n"";

		//line under column names
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";

		//output data
		foreach($dataset['rows'] as $row) {
			foreach($row['values'] as $key=>$value){
				$key = $value->key;
				$value = $value->getValue();
				
				echo ""| "";
				echo str_pad($value,$sizes[$key]+1);
			}
			echo ""|\n"";
		}

		//bottom of output
		foreach($sizes as $length){
			echo ""+"".str_pad("""",$length+2,""-"");
		}
		echo ""+\n"";
	}
}
",FALSE,,3872
3859,InitialSO.csv3859.txt,InitialGit.csv3859.txt,7,"// First, checks if it isn't implemented yet.
if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
}
 ""{0} is dead, but {1} is alive! {0} {2}"".format(""ASP"", ""ASP.NET"") String if (!String.format) {
  String.format = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != 'undefined'
        ? args[number] 
        : match
      ;
    });
  };
}
 String.format('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET'); ","// First, checks if it isn't implemented yet.
if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
}
 ""{0} is dead, but {1} is alive! {0} {2}"".format(""ASP"", ""ASP.NET"") String if (!String.format) {
  String.format = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function(match, number) { 
      return typeof args[number] != 'undefined'
        ? args[number] 
        : match
      ;
    });
  };
}
 String.format('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET'); ",TRUE,"/**
 * Simplyfies AJAX requests for types
 *
 * @param {string} column A configured column in the form schema.name
 * @param {function} fn Callback on success
 * @param {object} data Additional data to pass
 */
function struct_ajax(column, fn, data) {
    if (!data) data = {};

    data['call'] = 'plugin_struct';
    data['column'] = column;
    data['id'] = JSINFO.id;
    data['ns'] = JSINFO.namespace;

    jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', data, fn, 'json')
        .fail(function (result) {
            if (result.responseJSON) {
                if (result.responseJSON.stacktrace) {
                    console.error(result.responseJSON.error + ""\n"" + result.responseJSON.stacktrace);
                }
                alert(result.responseJSON.error);
            } else {
                // some fatal error occured, get a text only version of the response
                alert(jQuery(result.responseText).text());
            }
        });
}

/**
 * @param {string} val
 * @return {Array}
 */
function split(val) {
    return val.split(/,\s*/);
}

/**
 * @param {string} term
 * @returns {string}
 */
function extractLast(term) {
    return split(term).pop();
}


/**
 * Replace numbered placeholders in a string with the given arguments
 *
 * Example formatString('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET');
 *
 * adapted from http://stackoverflow.com/a/4673436/3293343
 * @param format
 * @returns {*}
 */
function formatString(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined'
            ? args[number]
            : match
            ;
    });
}

/**
 * Custom onSelect handler for struct img button
 */
window.insertStructMedia = function (edid, mediaid, opts, align) {
    jQuery('#' + edid).val(mediaid).change();
};
","/**
 * Simplyfies AJAX requests for types
 *
 * @param {string} column A configured column in the form schema.name
 * @param {function} fn Callback on success
 * @param {object} data Additional data to pass
 */
function struct_ajax(column, fn, data) {
    if (!data) data = {};

    data['call'] = 'plugin_struct';
    data['column'] = column;
    data['id'] = JSINFO.id;
    data['ns'] = JSINFO.namespace;

    jQuery.post(DOKU_BASE + 'lib/exe/ajax.php', data, fn, 'json')
        .fail(function (result) {
            if (result.responseJSON) {
                if (result.responseJSON.stacktrace) {
                    console.error(result.responseJSON.error + ""\n"" + result.responseJSON.stacktrace);
                }
                alert(result.responseJSON.error);
            } else {
                // some fatal error occured, get a text only version of the response
                alert(jQuery(result.responseText).text());
            }
        });
}

/**
 * @param {string} val
 * @return {Array}
 */
function split(val) {
    return val.split(/,\s*/);
}

/**
 * @param {string} term
 * @returns {string}
 */
function extractLast(term) {
    return split(term).pop();
}


/**
 * Replace numbered placeholders in a string with the given arguments
 *
 * Example formatString('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET');
 *
 * adapted from http://stackoverflow.com/a/4673436/3293343
 * @param format
 * @returns {*}
 */
function formatString(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined'
            ? args[number]
            : match
            ;
    });
}

/**
 * Custom onSelect handler for struct img button
 */
window.insertStructMedia = function (edid, mediaid, opts, align) {
    jQuery('#' + edid).val(mediaid).change();
};
",TRUE,,3873
3860,InitialSO.csv3860.txt,InitialGit.csv3860.txt,3,"@+id/activityRoot final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > dpToPx(this, 200)) { // if more than 200 dp, it's probably a keyboard...
            // ... do something here
        }
     }
});
 public static float dpToPx(Context context, float valueInDp) {
    DisplayMetrics metrics = context.getResources().getDisplayMetrics();
    return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, valueInDp, metrics);
}
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }
    
    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ","@+id/activityRoot final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > dpToPx(this, 200)) { // if more than 200 dp, it's probably a keyboard...
            // ... do something here
        }
     }
});
 public static float dpToPx(Context context, float valueInDp) {
    DisplayMetrics metrics = context.getResources().getDisplayMetrics();
    return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, valueInDp, metrics);
}
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ",FALSE,"package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

// import additionally required classes for calculating screen height
import android.view.Display;
import android.graphics.Point;
import android.os.Build;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);

                            PluginResult result;

                            // cache properties for later use
                            int rootViewHeight = rootView.getRootView().getHeight();
                            int resultBottom = r.bottom;

                            // calculate screen height differently for android versions >= 21: Lollipop 5.x, Marshmallow 6.x
                            //http://stackoverflow.com/a/29257533/3642890 beware of nexus 5
                            int screenHeight;

                            if (Build.VERSION.SDK_INT >= 21) {
                                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();
                                Point size = new Point();
                                display.getSize(size);
                                screenHeight = size.y;
                            } else {
                                screenHeight = rootViewHeight;
                            }

                            int heightDiff = screenHeight - resultBottom;

                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                                String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);


                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


","package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

// import additionally required classes for calculating screen height
import android.view.Display;
import android.graphics.Point;
import android.os.Build;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);

                            PluginResult result;

                            // cache properties for later use
                            int rootViewHeight = rootView.getRootView().getHeight();
                            int resultBottom = r.bottom;

                            // calculate screen height differently for android versions >= 21: Lollipop 5.x, Marshmallow 6.x
                            //http://stackoverflow.com/a/29257533/3642890 beware of nexus 5
                            int screenHeight;

                            if (Build.VERSION.SDK_INT >= 21) {
                                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();
                                Point size = new Point();
                                display.getSize(size);
                                screenHeight = size.y;
                            } else {
                                screenHeight = rootViewHeight;
                            }

                            int heightDiff = screenHeight - resultBottom;

                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                                String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);


                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


",TRUE,,3874
3861,InitialSO.csv3861.txt,InitialGit.csv3861.txt,3,"final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > 100) { // if more than 100 pixels, its probably a keyboard...
            ... do something here
        }
     }
});
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }
    
    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ","@+id/activityRoot final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > dpToPx(this, 200)) { // if more than 200 dp, it's probably a keyboard...
            // ... do something here
        }
     }
});
 public static float dpToPx(Context context, float valueInDp) {
    DisplayMetrics metrics = context.getResources().getDisplayMetrics();
    return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, valueInDp, metrics);
}
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ",FALSE,"package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);
                            
                            PluginResult result;

                            int heightDiff = rootView.getRootView().getHeight() - r.bottom;
                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                            	String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);
                	
                	
                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


","package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);
                            
                            PluginResult result;

                            int heightDiff = rootView.getRootView().getHeight() - r.bottom;
                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                            	String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);
                	
                	
                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


",TRUE,,3876
3863,InitialSO.csv3863.txt,InitialGit.csv3863.txt,3,"final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > 100) { // if more than 100 pixels, its probably a keyboard...
            ... do something here
        }
     }
});
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }
    
    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ","@+id/activityRoot final View activityRootView = findViewById(R.id.activityRoot);
activityRootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        int heightDiff = activityRootView.getRootView().getHeight() - activityRootView.getHeight();
        if (heightDiff > dpToPx(this, 200)) { // if more than 200 dp, it's probably a keyboard...
            // ... do something here
        }
     }
});
 public static float dpToPx(Context context, float valueInDp) {
    DisplayMetrics metrics = context.getResources().getDisplayMetrics();
    return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, valueInDp, metrics);
}
 android:windowSoftInputMode=""adjustResize"" onMeasure() import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.widget.LinearLayout;

/*
 * LinearLayoutThatDetectsSoftKeyboard - a variant of LinearLayout that can detect when 
 * the soft keyboard is shown and hidden (something Android can't tell you, weirdly). 
 */

public class LinearLayoutThatDetectsSoftKeyboard extends LinearLayout {

    public LinearLayoutThatDetectsSoftKeyboard(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public interface Listener {
        public void onSoftKeyboardShown(boolean isShowing);
    }
    private Listener listener;
    public void setListener(Listener listener) {
        this.listener = listener;
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int height = MeasureSpec.getSize(heightMeasureSpec);
        Activity activity = (Activity)getContext();
        Rect rect = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
        int statusBarHeight = rect.top;
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();
        int diff = (screenHeight - statusBarHeight) - height;
        if (listener != null) {
            listener.onSoftKeyboardShown(diff>128); // assume all soft keyboards are at least 128 pixels high
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);       
    }

    }
 public class MyActivity extends Activity implements LinearLayoutThatDetectsSoftKeyboard.Listener {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ...
        LinearLayoutThatDetectsSoftKeyboard mainLayout = (LinearLayoutThatDetectsSoftKeyboard)findViewById(R.id.main);
        mainLayout.setListener(this);
        ...
    }


    @Override
    public void onSoftKeyboardShown(boolean isShowing) {
        // do whatever you need to do here
    }

    ...
}
 ",FALSE,"package com.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

public class IonicKeyboard extends CordovaPlugin{

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);

        //calculate density-independent pixels (dp)
        //http://developer.android.com/guide/practices/screens_support.html
        DisplayMetrics dm = new DisplayMetrics();
        cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
        final float density = dm.density;

        final CordovaWebView appView = webView;

        //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
        final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
        OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
            int previousHeightDiff = 0;
            @Override
            public void onGlobalLayout() {
                Rect r = new Rect();
                //r will be populated with the coordinates of your view that area still visible.
                rootView.getWindowVisibleDisplayFrame(r);

                int heightDiff = rootView.getRootView().getHeight() - (r.bottom - r.top);
                int pixelHeightDiff = (int)(heightDiff / density);
                if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                    appView.sendJavascript(""cordova.plugins.Keyboard.isVisible = true"");
                    appView.sendJavascript(""cordova.fireWindowEvent('native.keyboardshow', { 'keyboardHeight':"" + Integer.toString(pixelHeightDiff)+""});"");

                    //deprecated
                    appView.sendJavascript(""cordova.fireWindowEvent('native.showkeyboard', { 'keyboardHeight':"" + Integer.toString(pixelHeightDiff)+""});"");
                }
                else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                    appView.sendJavascript(""cordova.plugins.Keyboard.isVisible = false"");
                    appView.sendJavascript(""cordova.fireWindowEvent('native.keyboardhide')"");

                    //deprecated
                    appView.sendJavascript(""cordova.fireWindowEvent('native.hidekeyboard')"");
                }
                previousHeightDiff = pixelHeightDiff;
             }
        };

        rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}

","package com.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

public class IonicKeyboard extends CordovaPlugin{

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);

        //calculate density-independent pixels (dp)
        //http://developer.android.com/guide/practices/screens_support.html
        DisplayMetrics dm = new DisplayMetrics();
        cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
        final float density = dm.density;

        final CordovaWebView appView = webView;

        //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
        final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
        OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
            int previousHeightDiff = 0;
            @Override
            public void onGlobalLayout() {
                Rect r = new Rect();
                //r will be populated with the coordinates of your view that area still visible.
                rootView.getWindowVisibleDisplayFrame(r);

                int heightDiff = rootView.getRootView().getHeight() - (r.bottom - r.top);
                int pixelHeightDiff = (int)(heightDiff / density);
                if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                    appView.sendJavascript(""cordova.plugins.Keyboard.isVisible = true"");
                    appView.sendJavascript(""cordova.fireWindowEvent('native.keyboardshow', { 'keyboardHeight':"" + Integer.toString(pixelHeightDiff)+""});"");

                    //deprecated
                    appView.sendJavascript(""cordova.fireWindowEvent('native.showkeyboard', { 'keyboardHeight':"" + Integer.toString(pixelHeightDiff)+""});"");
                }
                else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                    appView.sendJavascript(""cordova.plugins.Keyboard.isVisible = false"");
                    appView.sendJavascript(""cordova.fireWindowEvent('native.keyboardhide')"");

                    //deprecated
                    appView.sendJavascript(""cordova.fireWindowEvent('native.hidekeyboard')"");
                }
                previousHeightDiff = pixelHeightDiff;
             }
        };

        rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}

",TRUE,,3878
3865,InitialSO.csv3865.txt,InitialGit.csv3865.txt,14,"scroll // left: 37, up: 38, right: 39, down: 40,
// spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
var keys = [37, 38, 39, 40];

function preventDefault(e) {
  e = e || window.event;
  if (e.preventDefault)
      e.preventDefault();
  e.returnValue = false;  
}

function keydown(e) {
    for (var i = keys.length; i--;) {
        if (e.keyCode === keys[i]) {
            preventDefault(e);
            return;
        }
    }
}

function wheel(e) {
  preventDefault(e);
}

function disable_scroll() {
  if (window.addEventListener) {
      window.addEventListener('DOMMouseScroll', wheel, false);
  }
  window.onmousewheel = document.onmousewheel = wheel;
  document.onkeydown = keydown;
}

function enable_scroll() {
    if (window.removeEventListener) {
        window.removeEventListener('DOMMouseScroll', wheel, false);
    }
    window.onmousewheel = document.onmousewheel = document.onkeydown = null;  
}
 ","scroll // left: 37, up: 38, right: 39, down: 40,
// spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
var keys = {37: 1, 38: 1, 39: 1, 40: 1};

function preventDefault(e) {
  e.preventDefault();
}

function preventDefaultForScrollKeys(e) {
  if (keys[e.keyCode]) {
    preventDefault(e);
    return false;
  }
}

// modern Chrome requires { passive: false } when adding event
var supportsPassive = false;
try {
  window.addEventListener(""test"", null, Object.defineProperty({}, 'passive', {
    get: function () { supportsPassive = true; } 
  }));
} catch(e) {}

var wheelOpt = supportsPassive ? { passive: false } : false;
var wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

// call this to Disable
function disableScroll() {
  window.addEventListener('DOMMouseScroll', preventDefault, false); // older FF
  window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
  window.addEventListener('touchmove', preventDefault, wheelOpt); // mobile
  window.addEventListener('keydown', preventDefaultForScrollKeys, false);
}

// call this to Enable
function enableScroll() {
  window.removeEventListener('DOMMouseScroll', preventDefault, false);
  window.removeEventListener(wheelEvent, preventDefault, wheelOpt); 
  window.removeEventListener('touchmove', preventDefault, wheelOpt);
  window.removeEventListener('keydown', preventDefaultForScrollKeys, false);
}
 ",FALSE,"
// based on: http://tympanus.net/Development/ArticleIntroEffects/index3.html

(function() {

    if ($('.post-template:not(.page)').length) {

        // detect if IE : from http://stackoverflow.com/a/16657946      
        var ie = (function(){
            var undef,rv = -1; // Return value assumes failure.
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf('MSIE ');
            var trident = ua.indexOf('Trident/');

            if (msie > 0) {
                // IE 10 or older => return version number
                rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            } else if (trident > 0) {
                // IE 11 (or newer) => return version number
                var rvNum = ua.indexOf('rv:');
                rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
            }

            return ((rv > -1) ? rv : undef);
        }());


        // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179                  
        // left: 37, up: 38, right: 39, down: 40,
        // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
        var keys = [32, 37, 38, 39, 40], wheelIter = 0;

        function preventDefault(e) {
            e = e || window.event;
            if (e.preventDefault)
            e.preventDefault();
            e.returnValue = false;  
        }

        function keydown(e) {
            for (var i = keys.length; i--;) {
                if (e.keyCode === keys[i]) {
                    preventDefault(e);
                    return;
                }
            }
        }

        function touchmove(e) {
            preventDefault(e);
        }

        function wheel(e) {
            // for IE 
            //if( ie ) {
                //preventDefault(e);
            //}
        }

        function disable_scroll() {
            window.onmousewheel = document.onmousewheel = wheel;
            document.onkeydown = keydown;
            document.body.ontouchmove = touchmove;
        }

        function enable_scroll() {
            window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;  
        }

        var docElem = window.document.documentElement,
            scrollVal,
            isRevealed, 
            noscroll,
            isAnimating,
            container = document.getElementById( 'notepad-post-container' ) || document,
            trigger = container.querySelector( 'button.trigger' );

        function scrollY() {
            return window.pageYOffset || docElem.scrollTop;
        }

        function scrollPage() {
            scrollVal = scrollY();
            
            if( noscroll && !ie ) {
                if( scrollVal < 0 ) return false;
                // keep it that way
                window.scrollTo( 0, 0 );
            }

            if( $(container).hasClass('notrans')) {
                $(container).removeClass('notrans');
                return false;
            }

            if( isAnimating ) {
                return false;
            }
            
            if( scrollVal <= 0 && isRevealed ) {
                toggle(0);
            }
            else if( scrollVal > 0 && !isRevealed ){
                toggle(1);
            }
        }

        function toggle( reveal ) {
            isAnimating = true;
            
            if( reveal ) {
                $(container).addClass('modify');
            }
            else {
                noscroll = true;
                disable_scroll();
                $(container).removeClass('modify');
            }

            // simulating the end of the transition:
            setTimeout( function() {
                isRevealed = !isRevealed;
                isAnimating = false;
                if( reveal ) {
                    noscroll = false;
                    enable_scroll();
                }
                BackgroundCheck.refresh();
            }, 600 );
        }

        // refreshing the page...
        var pageScroll = scrollY();
        noscroll = pageScroll === 0;

        disable_scroll();

        if( pageScroll ) {
            isRevealed = true;
            $(container).addClass('notrans');
            $(container).addClass('modify');
        }

        window.addEventListener( 'scroll', scrollPage );

        trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
    
    }

})();","
// based on: http://tympanus.net/Development/ArticleIntroEffects/index3.html

(function() {

    if ($('.post-template:not(.page)').length) {

        // detect if IE : from http://stackoverflow.com/a/16657946      
        var ie = (function(){
            var undef,rv = -1; // Return value assumes failure.
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf('MSIE ');
            var trident = ua.indexOf('Trident/');

            if (msie > 0) {
                // IE 10 or older => return version number
                rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            } else if (trident > 0) {
                // IE 11 (or newer) => return version number
                var rvNum = ua.indexOf('rv:');
                rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
            }

            return ((rv > -1) ? rv : undef);
        }());


        // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179                  
        // left: 37, up: 38, right: 39, down: 40,
        // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
        var keys = [32, 37, 38, 39, 40], wheelIter = 0;

        function preventDefault(e) {
            e = e || window.event;
            if (e.preventDefault)
            e.preventDefault();
            e.returnValue = false;  
        }

        function keydown(e) {
            for (var i = keys.length; i--;) {
                if (e.keyCode === keys[i]) {
                    preventDefault(e);
                    return;
                }
            }
        }

        function touchmove(e) {
            preventDefault(e);
        }

        function wheel(e) {
            // for IE 
            //if( ie ) {
                //preventDefault(e);
            //}
        }

        function disable_scroll() {
            window.onmousewheel = document.onmousewheel = wheel;
            document.onkeydown = keydown;
            document.body.ontouchmove = touchmove;
        }

        function enable_scroll() {
            window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;  
        }

        var docElem = window.document.documentElement,
            scrollVal,
            isRevealed, 
            noscroll,
            isAnimating,
            container = document.getElementById( 'notepad-post-container' ) || document,
            trigger = container.querySelector( 'button.trigger' );

        function scrollY() {
            return window.pageYOffset || docElem.scrollTop;
        }

        function scrollPage() {
            scrollVal = scrollY();
            
            if( noscroll && !ie ) {
                if( scrollVal < 0 ) return false;
                // keep it that way
                window.scrollTo( 0, 0 );
            }

            if( $(container).hasClass('notrans')) {
                $(container).removeClass('notrans');
                return false;
            }

            if( isAnimating ) {
                return false;
            }
            
            if( scrollVal <= 0 && isRevealed ) {
                toggle(0);
            }
            else if( scrollVal > 0 && !isRevealed ){
                toggle(1);
            }
        }

        function toggle( reveal ) {
            isAnimating = true;
            
            if( reveal ) {
                $(container).addClass('modify');
            }
            else {
                noscroll = true;
                disable_scroll();
                $(container).removeClass('modify');
            }

            // simulating the end of the transition:
            setTimeout( function() {
                isRevealed = !isRevealed;
                isAnimating = false;
                if( reveal ) {
                    noscroll = false;
                    enable_scroll();
                }
                BackgroundCheck.refresh();
            }, 600 );
        }

        // refreshing the page...
        var pageScroll = scrollY();
        noscroll = pageScroll === 0;

        disable_scroll();

        if( pageScroll ) {
            isRevealed = true;
            $(container).addClass('notrans');
            $(container).addClass('modify');
        }

        window.addEventListener( 'scroll', scrollPage );

        trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
    
    }

})();",TRUE,,3884
3868,InitialSO.csv3868.txt,InitialGit.csv3868.txt,15,"https int slashslash = url.indexOf(""//"") + 2;
domain = url.substring(slashslash, url.indexOf('/', slashslash));
    
 www URL.getHost() /**
 * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
 * 
 * @param url
 * @return
 */
public static String getHost(String url){
    if(url == null || url.length() == 0)
        return """";
    
    int doubleslash = url.indexOf(""//"");
    if(doubleslash == -1)
        doubleslash = 0;
    else
        doubleslash += 2;
    
    int end = url.indexOf('/', doubleslash);
    end = end >= 0 ? end : url.length();

    int port = url.indexOf(':', doubleslash);
    end = (port > 0 && port < end) ? port : end;
    
    return url.substring(doubleslash, end);
}


/**  Based on : http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3.3_r1/android/webkit/CookieManager.java#CookieManager.getBaseDomain%28java.lang.String%29
 * Get the base domain for a given host or url. E.g. mail.google.com will return google.com
 * @param host 
 * @return 
 */
public static String getBaseDomain(String url) {
    String host = getHost(url);
    
    int startIndex = 0;
    int nextIndex = host.indexOf('.');
    int lastIndex = host.lastIndexOf('.');
    while (nextIndex < lastIndex) {
        startIndex = nextIndex + 1;
        nextIndex = host.indexOf('.', startIndex);
    }
    if (startIndex > 0) {
        return host.substring(startIndex);
    } else {
        return host;
    }
}
 ","https int slashslash = url.indexOf(""//"") + 2;
domain = url.substring(slashslash, url.indexOf('/', slashslash));
 www URL.getHost() /**
 * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
 * 
 * @param url
 * @return
 */
public static String getHost(String url){
    if(url == null || url.length() == 0)
        return """";

    int doubleslash = url.indexOf(""//"");
    if(doubleslash == -1)
        doubleslash = 0;
    else
        doubleslash += 2;

    int end = url.indexOf('/', doubleslash);
    end = end >= 0 ? end : url.length();

    int port = url.indexOf(':', doubleslash);
    end = (port > 0 && port < end) ? port : end;

    return url.substring(doubleslash, end);
}


/**  Based on : http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3.3_r1/android/webkit/CookieManager.java#CookieManager.getBaseDomain%28java.lang.String%29
 * Get the base domain for a given host or url. E.g. mail.google.com will return google.com
 * @param host 
 * @return 
 */
public static String getBaseDomain(String url) {
    String host = getHost(url);

    int startIndex = 0;
    int nextIndex = host.indexOf('.');
    int lastIndex = host.lastIndexOf('.');
    while (nextIndex < lastIndex) {
        startIndex = nextIndex + 1;
        nextIndex = host.indexOf('.', startIndex);
    }
    if (startIndex > 0) {
        return host.substring(startIndex);
    } else {
        return host;
    }
}
 ",FALSE,"//
//  Copyright (c) 2014 VK.com
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the ""Software""), to deal in
//  the Software without restriction, including without limitation the rights to
//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//  the Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

package com.vk.sdk.util;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.Signature;
import android.support.annotation.Nullable;
import android.util.Log;

import com.vk.sdk.VKSdk;
import com.vk.sdk.api.VKParameters;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidParameterSpecException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Various useful functions
 */
public class VKUtil {
    /**
     * Breaks key=value&key=value string to map
     *
     * @param queryString string to explode
     * @return Key-value map of passed string
     */
    @Nullable
    public static Map<String, String> explodeQueryString(@Nullable String queryString) {
        if (queryString == null) {
            return null;
        }
        String[] keyValuePairs = queryString.split(""&"");
        HashMap<String, String> parameters = new HashMap<>(keyValuePairs.length);

        for (String keyValueString : keyValuePairs) {
            String[] keyValueArray = keyValueString.split(""="");
            parameters.put(keyValueArray[0], keyValueArray[1]);
        }
        return parameters;
    }

    /**
     * Reads content of file, and returns result as string
     *
     * @param filename path to file
     * @return Contents of file
     * @throws IOException
     */
    public static String fileToString(String filename) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        StringBuilder builder = new StringBuilder();
        String line;

        // For every line in the file, append it to the string builder
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        reader.close();

        return builder.toString();
    }

    /**
     * Saves passed string to file
     *
     * @param filename      path to file
     * @param stringToWrite string to save
     */
    public static void stringToFile(String filename, String stringToWrite) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
            writer.write(stringToWrite);
            writer.flush();
            writer.close();
        } catch (Exception ignored) {
        }
    }

    /**
     * Returns md5 hash of string
     *
     * @param s string to hash
     * @return md5 hash
     */
    public static String md5(final String s) {
        try {
            // Create MD5 Hash
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();

            // Create Hex String
            StringBuilder hexString = new StringBuilder();
            for (byte aMessageDigest : messageDigest) {
                String h = Integer.toHexString(0xFF & aMessageDigest);
                while (h.length() < 2)
                    h = ""0"" + h;
                hexString.append(h);
            }
            return hexString.toString();

        } catch (NoSuchAlgorithmException e) {
            if (VKSdk.DEBUG)
                e.printStackTrace();
        }
        return """";
    }

    /**
     * Get current certificate fingerprint
     *
     * @param ctx         context of application
     * @param packageName your package name
     * @return Base64 packed SHA fingerprint of your packet certificate
     */
    public static String[] getCertificateFingerprint(Context ctx, String packageName) {
        try {
	        if (ctx == null || ctx.getPackageManager() == null)
		        return null;
            PackageInfo info = ctx.getPackageManager().getPackageInfo(
                    packageName,
                    PackageManager.GET_SIGNATURES);
	        assert info.signatures != null;
	        String[] result = new String[info.signatures.length];
            int i = 0;
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(signature.toByteArray());
//                result[i++] = Base64.encodeToString(md.digest(), Base64.DEFAULT);
                result[i++] = toHex(md.digest());
            }
            return result;
        } catch (Exception e) {
            return null;
        }
    }

    private static String toHex(byte[] bytes) {
        BigInteger bi = new BigInteger(1, bytes);
        return String.format(""%0"" + (bytes.length << 1) + ""X"", bi);
    }

    /**
     * Builds map from list of strings
     *
     * @param args key-value pairs for build a map. Must be a multiple of 2
     * @return Result map. If args not multiple of 2, last argument will be ignored
     */
    public static Map<String, Object> mapFrom(Object... args) {
        if (args.length % 2 != 0) {
            if (VKSdk.DEBUG)
                Log.w(""VKUtil"", ""Params must be paired. Last one is ignored"");
        }
        LinkedHashMap<String, Object> result = new LinkedHashMap<>(args.length / 2);
        for (int i = 0; i + 1 < args.length; i += 2) {
            if (args[i] == null || args[i + 1] == null || !(args[i] instanceof String)) {
                if (VKSdk.DEBUG)
                    Log.e(""VK SDK"", ""Error while using mapFrom"", new InvalidParameterSpecException(""Key and value must be specified. Key must be string""));
                continue;
            }
            result.put((String) args[i], args[i + 1]);
        }
        return result;
    }

    public static VKParameters paramsFrom(Object... args) {
        return new VKParameters(mapFrom(args));
    }

    /**
     * Check if package installed
     *
     * @param context Context of current app
     * @param uri Package of application to check
     * @return true if passed package installed
     */
    public static boolean isAppInstalled(Context context, String uri) {
        PackageManager pm = context.getPackageManager();
        boolean appInstalled;
        try {
            assert pm != null;
            pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);
            appInstalled = true;
        } catch (PackageManager.NameNotFoundException e) {
            appInstalled = false;
        }
        return appInstalled;
    }
    /**
     * Check if action available installed
     *
     * @param context Context of current app
     * @param action Package of application to check
     * @return true if passed package installed
     */
    public static boolean isIntentAvailable(Context context, String action) {
        final PackageManager packageManager = context.getPackageManager();
        final Intent intent = new Intent(action);
        assert packageManager != null;
        List<ResolveInfo> list =
                packageManager.queryIntentActivities(intent,
                        PackageManager.MATCH_DEFAULT_ONLY);
        return list.size() > 0;
    }

    /**
     * Finds current application name
     * @param ctx context of application
     * @return Name of current application
     */
    public static String getApplicationName(Context ctx) {
        ApplicationInfo ai;
        try {
            Context appContext = ctx.getApplicationContext();
            assert appContext != null;
            final PackageManager pm = appContext.getPackageManager();
            assert pm != null;
            ai = pm.getApplicationInfo(ctx.getPackageName(), 0);
            return (String) (ai != null ? pm.getApplicationLabel(ai) : ""(unknown)"");
        } catch (Exception ignored) {
        }
        return null;
    }

    /**
     * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
     * Author: aioobe http://stackoverflow.com/a/4826122/1271424
     *
     * @param url url need to find host
     * @return host name of given url
     */
    public static String getHost(String url){
        if(url == null || url.length() == 0)
            return """";

        int doubleslash = url.indexOf(""//"");
        if(doubleslash == -1)
            doubleslash = 0;
        else
            doubleslash += 2;

        int end = url.indexOf('/', doubleslash);
        end = end >= 0 ? end : url.length();

        int port = url.indexOf(':', doubleslash);
        end = (port > 0 && port < end) ? port : end;

        return url.substring(doubleslash, end);
    }
}
","//
//  Copyright (c) 2014 VK.com
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the ""Software""), to deal in
//  the Software without restriction, including without limitation the rights to
//  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
//  the Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

package com.vk.sdk.util;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.Signature;
import android.support.annotation.Nullable;
import android.util.Log;

import com.vk.sdk.VKSdk;
import com.vk.sdk.api.VKParameters;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidParameterSpecException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Various useful functions
 */
public class VKUtil {
    /**
     * Breaks key=value&key=value string to map
     *
     * @param queryString string to explode
     * @return Key-value map of passed string
     */
    @Nullable
    public static Map<String, String> explodeQueryString(@Nullable String queryString) {
        if (queryString == null) {
            return null;
        }
        String[] keyValuePairs = queryString.split(""&"");
        HashMap<String, String> parameters = new HashMap<>(keyValuePairs.length);

        for (String keyValueString : keyValuePairs) {
            String[] keyValueArray = keyValueString.split(""="");
            parameters.put(keyValueArray[0], keyValueArray[1]);
        }
        return parameters;
    }

    /**
     * Reads content of file, and returns result as string
     *
     * @param filename path to file
     * @return Contents of file
     * @throws IOException
     */
    public static String fileToString(String filename) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));
        StringBuilder builder = new StringBuilder();
        String line;

        // For every line in the file, append it to the string builder
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        reader.close();

        return builder.toString();
    }

    /**
     * Saves passed string to file
     *
     * @param filename      path to file
     * @param stringToWrite string to save
     */
    public static void stringToFile(String filename, String stringToWrite) {
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
            writer.write(stringToWrite);
            writer.flush();
            writer.close();
        } catch (Exception ignored) {
        }
    }

    /**
     * Returns md5 hash of string
     *
     * @param s string to hash
     * @return md5 hash
     */
    public static String md5(final String s) {
        try {
            // Create MD5 Hash
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.update(s.getBytes());
            byte messageDigest[] = digest.digest();

            // Create Hex String
            StringBuilder hexString = new StringBuilder();
            for (byte aMessageDigest : messageDigest) {
                String h = Integer.toHexString(0xFF & aMessageDigest);
                while (h.length() < 2)
                    h = ""0"" + h;
                hexString.append(h);
            }
            return hexString.toString();

        } catch (NoSuchAlgorithmException e) {
            if (VKSdk.DEBUG)
                e.printStackTrace();
        }
        return """";
    }

    /**
     * Get current certificate fingerprint
     *
     * @param ctx         context of application
     * @param packageName your package name
     * @return Base64 packed SHA fingerprint of your packet certificate
     */
    public static String[] getCertificateFingerprint(Context ctx, String packageName) {
        try {
	        if (ctx == null || ctx.getPackageManager() == null)
		        return null;
            PackageInfo info = ctx.getPackageManager().getPackageInfo(
                    packageName,
                    PackageManager.GET_SIGNATURES);
	        assert info.signatures != null;
	        String[] result = new String[info.signatures.length];
            int i = 0;
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance(""SHA"");
                md.update(signature.toByteArray());
//                result[i++] = Base64.encodeToString(md.digest(), Base64.DEFAULT);
                result[i++] = toHex(md.digest());
            }
            return result;
        } catch (Exception e) {
            return null;
        }
    }

    private static String toHex(byte[] bytes) {
        BigInteger bi = new BigInteger(1, bytes);
        return String.format(""%0"" + (bytes.length << 1) + ""X"", bi);
    }

    /**
     * Builds map from list of strings
     *
     * @param args key-value pairs for build a map. Must be a multiple of 2
     * @return Result map. If args not multiple of 2, last argument will be ignored
     */
    public static Map<String, Object> mapFrom(Object... args) {
        if (args.length % 2 != 0) {
            if (VKSdk.DEBUG)
                Log.w(""VKUtil"", ""Params must be paired. Last one is ignored"");
        }
        LinkedHashMap<String, Object> result = new LinkedHashMap<>(args.length / 2);
        for (int i = 0; i + 1 < args.length; i += 2) {
            if (args[i] == null || args[i + 1] == null || !(args[i] instanceof String)) {
                if (VKSdk.DEBUG)
                    Log.e(""VK SDK"", ""Error while using mapFrom"", new InvalidParameterSpecException(""Key and value must be specified. Key must be string""));
                continue;
            }
            result.put((String) args[i], args[i + 1]);
        }
        return result;
    }

    public static VKParameters paramsFrom(Object... args) {
        return new VKParameters(mapFrom(args));
    }

    /**
     * Check if package installed
     *
     * @param context Context of current app
     * @param uri Package of application to check
     * @return true if passed package installed
     */
    public static boolean isAppInstalled(Context context, String uri) {
        PackageManager pm = context.getPackageManager();
        boolean appInstalled;
        try {
            assert pm != null;
            pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);
            appInstalled = true;
        } catch (PackageManager.NameNotFoundException e) {
            appInstalled = false;
        }
        return appInstalled;
    }
    /**
     * Check if action available installed
     *
     * @param context Context of current app
     * @param action Package of application to check
     * @return true if passed package installed
     */
    public static boolean isIntentAvailable(Context context, String action) {
        final PackageManager packageManager = context.getPackageManager();
        final Intent intent = new Intent(action);
        assert packageManager != null;
        List<ResolveInfo> list =
                packageManager.queryIntentActivities(intent,
                        PackageManager.MATCH_DEFAULT_ONLY);
        return list.size() > 0;
    }

    /**
     * Finds current application name
     * @param ctx context of application
     * @return Name of current application
     */
    public static String getApplicationName(Context ctx) {
        ApplicationInfo ai;
        try {
            Context appContext = ctx.getApplicationContext();
            assert appContext != null;
            final PackageManager pm = appContext.getPackageManager();
            assert pm != null;
            ai = pm.getApplicationInfo(ctx.getPackageName(), 0);
            return (String) (ai != null ? pm.getApplicationLabel(ai) : ""(unknown)"");
        } catch (Exception ignored) {
        }
        return null;
    }

    /**
     * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
     * Author: aioobe http://stackoverflow.com/a/4826122/1271424
     *
     * @param url url need to find host
     * @return host name of given url
     */
    public static String getHost(String url){
        if(url == null || url.length() == 0)
            return """";

        int doubleslash = url.indexOf(""//"");
        if(doubleslash == -1)
            doubleslash = 0;
        else
            doubleslash += 2;

        int end = url.indexOf('/', doubleslash);
        end = end >= 0 ? end : url.length();

        int port = url.indexOf(':', doubleslash);
        end = (port > 0 && port < end) ? port : end;

        return url.substring(doubleslash, end);
    }
}
",TRUE,,3887
3871,InitialSO.csv3871.txt,InitialGit.csv3871.txt,4,"fcntl select asyncproc Queue.get_nowait() import sys
from subprocess import PIPE, Popen
from threading  import Thread

try:
    from Queue import Queue, Empty
except ImportError:
    from queue import Queue, Empty  # python 3.x

ON_POSIX = 'posix' in sys.builtin_module_names

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)
q = Queue()
t = Thread(target=enqueue_output, args=(p.stdout, q))
t.daemon = True # thread dies with the program
t.start()

# ... do other things here

# read line without blocking
try:  line = q.get_nowait() # or q.get(timeout=.1)
except Empty:
    print('no output yet')
else: # got line
    # ... do something with line
 ","fcntl select asyncproc Queue.get_nowait() import sys
from subprocess import PIPE, Popen
from threading  import Thread

try:
    from queue import Queue, Empty
except ImportError:
    from Queue import Queue, Empty  # python 2.x

ON_POSIX = 'posix' in sys.builtin_module_names

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)
q = Queue()
t = Thread(target=enqueue_output, args=(p.stdout, q))
t.daemon = True # thread dies with the program
t.start()

# ... do other things here

# read line without blocking
try:  line = q.get_nowait() # or q.get(timeout=.1)
except Empty:
    print('no output yet')
else: # got line
    # ... do something with line
 ",FALSE,"import argparse
import os
import subprocess
import random
import zipfile
import numpy as np
import sys
import re
from util2 import logmsg
import Queue
import threading
from collections import defaultdict

def create_directory(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)

def logsumexp(a):
    #numpy has a logaddexp() but it only takes two values and that's stupid so
    #I'm just going to create my own logsumexp here.
    max_a = np.max(a)
    result = max_a + np.log(np.sum([np.exp(i-max_a) for i in a]))
    return result

def parse_args():
    parser = argparse.ArgumentParser(
      description='Concurrently run multiple chains of PhyloWGS.',
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--num-chains', dest='num_chains', default=10, type=int,
          help='Number of chains to run concurrently')
    parser.add_argument('-r', '--random-seeds', dest='random_seeds', default=[], type=list,
          help='Random seeds for initializing MCMC')
    parser.add_argument('-if', '--chain-inclusion-factor', dest='chain_inclusion_factor', default=1.5, type=float,
          help='Factor for determining which chains will be included in the output ""merged"" folder. ' \
               'Default is 1.5, meaning that the sum of the likelihoods of the trees found in each chain must ' \
               'be greater than 1.5x the maximum of that value across chains. Setting this value = inf ' \
               'includes all chains and setting it = 1 will include only the best chain.')
    parser.add_argument('-od', '--output-directory', dest='output_directory', default='', type=str,
          help='Directory where results from each chain will be saved. If directory does not exist, ' \
               'will attempt to create it here. (Default = ""working_directory/multievolve_chains"")')
    # Send unrecognized arguments to evolve.py.
    known_args, other_args = parser.parse_known_args()
    known_args = dict(known_args._get_kwargs())
    return known_args, other_args

def check_args(args):
    #Set default values for arguments that require function calls to calculate
    if not args['random_seeds']:
        random.seed(0)
        args['random_seeds'] = [random.randint(1,2**32) for i in range(args['num_chains'])]
    if not args['output_directory']:
        args['output_directory'] = os.path.join(os.getcwd(),""multievolve_chains"")
        create_directory(args['output_directory'])

    #Make sure the arguments make sense. Right now just have to check that the
    #list of random seeds, if this was provided by the user, has length = num_chains.
    if len(args['random_seeds']) != args['num_chains']:
        raise ValueError(""Must specify random seeds for every chain"")
    return args

def run_chains(args,evolve_args):
    '''
    Determine location of evolve.py (same directory as this script), location of the ssm
    and cnv files, and create the output directories for each chain. Create a subprocess
    for each chain so that they may all run at the same time.
    '''
    working_dir = os.getcwd()
    app_dir = os.path.dirname(os.path.realpath(__file__))
    processes = []
    out_dirs = []
    for chain_index in range(args['num_chains']):
        output_dir = os.path.join(args['output_directory'],""chain_""+str(chain_index))
        out_dirs.append(output_dir)
        create_directory(output_dir)
        process = run(args,evolve_args,chain_index,app_dir,working_dir,output_dir)
        processes.append(process)
    watch_chains(processes)
    return out_dirs

def run(args,evolve_args,chain_index,app_dir,working_dir,output_dir):
    '''
    Start a new subprocess for every call to evolve. Return the subprocess
    so that we can capture its outputs and see if it is complete.
    '''
    cmd = [
        sys.executable,
        os.path.join(app_dir, ""evolve.py""),
        '--output-dir', output_dir,
    ]
    cmd = cmd + list(evolve_args)
    logmsg(""Starting chain %s"" % chain_index)
    # bufsize=1 and universal_newlines=True open stdout in line-buffered text
    # mode, rather than binary stream.
    process = subprocess.Popen(cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,
        universal_newlines=True,
        close_fds=True,
        cwd=working_dir,
    )
    return process

def parse_status(line):
    status = {}
    fields = line.split(' ')
    for F in fields:
        K, V = F.split('=', 1)
        status[K] = V
    return status

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

def make_queues(processes):
    queues = []

    for P in processes:
        Q = Queue.Queue()
        T = threading.Thread(target=enqueue_output, args=(P.stdout, Q))
        T.daemon = True # Thread dies with program
        T.start()
        queues.append(Q)

    return queues

def watch_chains(processes):
    # Based on https://stackoverflow.com/a/4896288. TL;DR: non-blocking reads
    # from stdout on subprocesses are really painful. This is the cleanest and
    # most reliable mechanism I've come across for resolving them.
    num_chains = len(processes)
    last_lines_were_status = False
    status = {idx: {'status': 'initializing'} for idx in range(num_chains)}
    chain_stdout = defaultdict(list)
    delay = 0.5

    queues = make_queues(processes)
    while True:
        # All are done.
        if set([S['status'] for S in status.values()]) == set(['done']):
            break
        for chain_index, P, Q in zip(range(num_chains), processes, queues):
            if status[chain_index]['status'] == 'done':
                continue
            exit_code = processes[chain_index].poll()
            if exit_code is not None:
                # Note we still finish the rest of this loop iteration, which
                # lets us print the process' final output.
                status[chain_index] = {'status': 'done', 'exit_code': exit_code}

            try:
                line = Q.get(timeout=delay)
            except Queue.Empty:
                continue
            else:
                chain_stdout[chain_index].append(line.strip())

        for chain_index in sorted(chain_stdout.keys()):
            for line in chain_stdout[chain_index]:
                # Strip existing timestamp.
                if re.match(r'^\[\d{4}-', line):
                    line = line[line.index(']')+1:].strip()
                if line.startswith('iteration='):
                  status_line = parse_status(line)
                  status[chain_index] = parse_status(line)
                  status[chain_index]['status'] = 'running'
                  status[chain_index]['percent_complete'] = '{:.2f}%'.format(100 * float(status[chain_index]['trees_sampled']) / float(status[chain_index]['total_trees']))
                else:
                  logmsg(""chain={} {}"".format(chain_index, line))
                  last_lines_were_status = False
        chain_stdout = defaultdict(list)

        if last_lines_were_status and sys.stdout.isatty():
            print(""\033[2K\033[1A"" * (num_chains + 1)) # Move cursor up to line that starts telling us about chain progression. Want to overwrite those lines.
        for cidx in sorted(status.keys()):
            if status[cidx]['status'] == 'running':
                keys = ('trees_sampled', 'total_trees', 'percent_complete')
            elif status[cidx]['status'] == 'done':
                keys = ('exit_code',)
            else:
                keys = tuple()
            status_msg = ' '.join(['{}={}'.format(K, status[cidx][K]) for K in ('status',) + keys])
            logmsg('chain={} {}'.format(cidx, status_msg))
            last_lines_were_status = True

def determine_chains_to_merge(chain_dirs,chain_inclusion_factor):
    '''
    Examines all of the trees output by each chain and reports which chains should
    be merged. Chains will meet the criteria if the log(sum(all_tree_likelihoods))
    is within some factor of the maximum of that value across chains.
    '''
    logSumLHs = []
    for chain_dir in chain_dirs:
        logLHs = []
        tree_zip_file = zipfile.ZipFile(os.path.join(chain_dir,'trees.zip'), mode = 'r')
        for tree_name in tree_zip_file.namelist():
            if tree_name.startswith(""tree""):
                #the logged likelihood is in the names of the trees, just use that.
                logLHs.append(float(tree_name.split('_')[-1]))
        logSumLHs.append(logsumexp(logLHs))

    # Check below assumes that LLH < 0, which it should always be.
    logSumLHs = np.array(logSumLHs)
    assert np.all(logSumLHs < 0)
    bestLogSumLH = np.max(logSumLHs)
    chains_to_merge = [i for i,logSumLH in enumerate(logSumLHs) if logSumLH > (chain_inclusion_factor*bestLogSumLH)]
    return chains_to_merge

def merge_best_chains(args,chain_dirs,chains_to_merge):
    '''
    Determines which chains are the best and merges them together into one trees.zip
    file that can be input into write_results.
    A chain counts, for now, as being one of the best if the highest likelihood of all
    of it's trees is within 10% of the highest likelihood of all of the trees calculated
    across all chains.
    '''
    out_dir = os.path.join(args['output_directory'],'merged_best_chains')
    create_directory(out_dir)
    if os.path.isfile(os.path.join(out_dir,""trees.zip"")):
        logmsg(""Merged trees.zip file already exists. To create a new merged trees.zip, remove the existing one first."")
        return
    combined_tree_zipfile = zipfile.ZipFile(os.path.join(out_dir,""trees.zip""), mode='w', compression=zipfile.ZIP_DEFLATED, allowZip64=True)
    logmsg(""Merging best chains:"")
    tree_index = 0
    for chain_idx in chains_to_merge:
        logmsg(""  merging chain {} ..."".format(chain_idx))
        chain_dir = chain_dirs[chain_idx]
        this_zip = zipfile.ZipFile(os.path.join(chain_dir,""trees.zip""), mode='r')
        this_zips_files = this_zip.namelist()
        files_to_include = [(filename, this_zip.read(filename)) for filename in this_zips_files if filename.startswith(""tree"")]
        for file in files_to_include:
            #First we need to reindex the tree
            filename_components = file[0].split(""_"")
            filename_components[1] = str(tree_index)
            filename = ""_"".join(filename_components)
            combined_tree_zipfile.writestr(filename, file[1])
            tree_index += 1
    #Don't forget the ""params.json"" and ""cnv_logical_physical_mapping.json"" files. They should all be the same in each
    #chains zip file. So just take the last one used and insert it.
    combined_tree_zipfile.writestr(""cnv_logical_physical_mapping.json"", this_zip.read(""cnv_logical_physical_mapping.json""))
    combined_tree_zipfile.writestr(""params.json"", this_zip.read(""params.json""))
    logmsg(""Chain merging complete."")
    logmsg(""You can remove unneeded intermediate files via the shell command `rm /path/to/output/dir/multievolve_chains/chain_*/trees.zip`"")

def main():
    args,evolve_args = parse_args()
    check_args(args)
    chain_dirs = run_chains(args,evolve_args)
    chains_to_merge = determine_chains_to_merge(chain_dirs, args['chain_inclusion_factor'])
    merge_best_chains(args, chain_dirs, chains_to_merge)

if __name__ == ""__main__"":
    main()
","import argparse
import os
import subprocess
import zipfile
import numpy as np
import sys
import re
from util2 import logmsg
import Queue
import threading
import time
import scipy.misc
import hashlib
from collections import defaultdict

def create_directory(dirname):
    if not os.path.exists(dirname):
        os.makedirs(dirname)

def parse_args():
    parser = argparse.ArgumentParser(
      description='Concurrently run multiple MCMC chains of PhyloWGS. ' +
      'All options that evolve.py accepts may also be specified here. To list those arguments, run `%s evolve.py --help`.' % sys.executable,
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--num-chains', dest='num_chains', default=4, type=int,
          help='Number of chains to run concurrently')
    parser.add_argument('-r', '--random-seeds', dest='random_seeds', type=int, nargs='+',
          help='Space-separated random seeds with which to initialize each chain. Specify one for each chain.')
    parser.add_argument('-I', '--chain-inclusion-factor', dest='chain_inclusion_factor', default=1.1, type=float,
          help='Factor for determining which chains will be included in the output ""merged"" folder. ' \
               'Default is 1.1, meaning that the sum of the likelihoods of the trees found in each chain must ' \
               'be greater than 1.1x the maximum of that value across chains. Setting this value = inf ' \
               'includes all chains and setting it = 1 will include only the best chain.')
    parser.add_argument('-O', '--output-dir', dest='output_dir', default='chains',
          help='Directory where results from each chain will be saved. We will create it if it does not exist.')
    # Ideally, I wouldn't specify `ssm_file` or `cnv_file` as multievolve.py
    # arguments, since I don't need them here -- I just want to pass them
    # through to evolve.py. But then printing the help is confusing, as you
    # don't realize that you should pass them as arguments to multievolve. So,
    # I should specify them here -- otherwise, you can invoke multievolve.py
    # with no ssm_data.txt or cnv_data.txt, and it will dutifully invoke
    # multiple copies of evolve.py with no input files (with the evolve.py runs
    # immediately failing.
    #
    # Since --ssms and --cnvs are required, it would be better to make them
    # positional arguments. But this screws up parsing with parse_known_args()
    # -- it mixes up unknown and known arguments if I make ssm_file and cnv_file positional, then call
    # `python2 ../multievolve.py -n2 -s 5 -B 3 ../ssm_data.txt ../cnv_data.txt`.
    # To fix this, just make all known arguments for multievolve (required) optional arguments.
    #
    # Much of this mess arises from having a wrapper script to start multiple
    # chains. In a better world, evolve.py would natively support multiple
    # chains, with the user able to choose to have only a single chain if she
    # desires.
    parser.add_argument('--ssms', dest='ssm_file', required=True,
            help='File listing SSMs (simple somatic mutations, i.e., single nucleotide variants. For proper format, see README.md.')
    parser.add_argument('--cnvs',dest='cnv_file', required=True,
            help='File listing CNVs (copy number variations). For proper format, see README.md.')

    # Send unrecognized arguments to evolve.py.
    known_args, other_args = parser.parse_known_args()
    return dict(known_args._get_kwargs()), other_args

def check_args(args):
    args['output_dir'] = os.path.abspath(args['output_dir'])
    create_directory(args['output_dir'])

    #Make sure the arguments make sense. Right now just have to check that the
    #list of random seeds, if this was provided by the user, has length = num_chains.
    if args['random_seeds'] is not None and len(args['random_seeds']) != args['num_chains']:
        raise ValueError(""Must specify exactly one seed for each of %s chain(s). You specified %s seed(s)."" % (
            args['num_chains'], len(args['random_seeds'])))
    return args

def run_chains(args, other_args):
    '''
    Determine location of evolve.py (same directory as this script), location of the ssm
    and cnv files, and create the output directories for each chain. Create a subprocess
    for each chain so that they may all run at the same time.
    '''
    working_dir = os.getcwd()
    app_dir = os.path.dirname(os.path.realpath(__file__))
    processes = []
    out_dirs = []
    for chain_index in range(args['num_chains']):
        output_dir = os.path.join(args['output_dir'],""chain_""+str(chain_index))
        out_dirs.append(output_dir)
        create_directory(output_dir)
        process = run_chain(chain_index, args['ssm_file'], args['cnv_file'], app_dir, working_dir, output_dir, args['random_seeds'], other_args)
        processes.append(process)
    watch_chains(processes)
    return out_dirs

def run_chain(chain_index, ssm_fn, cna_fn, app_dir, working_dir, output_dir, seeds, other_args):
    '''
    Start a new subprocess for every call to evolve. Return the subprocess
    so that we can capture its outputs and see if it is complete.
    '''
    cmd = [
        sys.executable,
        os.path.join(app_dir, ""evolve.py""),
        '--output-dir', output_dir,
    ]
    if seeds is not None:
        cmd += ['--random-seed', str(seeds[chain_index])]
    cmd += [
        ssm_fn,
        cna_fn,
    ]
    cmd = cmd + list(other_args)

    logmsg(""Starting chain %s"" % chain_index)
    # bufsize=1 and universal_newlines=True open stdout in line-buffered text
    # mode, rather than binary stream.
    process = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,
        universal_newlines=True,
        close_fds=True,
        cwd=working_dir,
    )
    return process

def parse_status(line):
    status = {}
    fields = line.split(' ')
    for F in fields:
        K, V = F.split('=', 1)
        status[K] = V
    return status

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

def make_queues(processes):
    queues = []

    for P in processes:
        Q = Queue.Queue()
        T = threading.Thread(target=enqueue_output, args=(P.stdout, Q))
        T.daemon = True # Thread dies with program
        T.start()
        queues.append(Q)

    return queues

def watch_chains(processes):
    # Based on https://stackoverflow.com/a/4896288. TL;DR: non-blocking reads
    # from stdout on subprocesses are really painful. This is the cleanest and
    # most reliable mechanism I've come across for resolving them.
    num_chains = len(processes)
    last_lines_were_status = False
    status = {idx: {'status': 'initializing'} for idx in range(num_chains)}
    chain_stdout = defaultdict(list)
    delay = 0.05

    queues = make_queues(processes)
    while True:
        # All are done.
        if set([S['status'] for S in status.values()]) == set(['done']):
            break
        for chain_index, P, Q in zip(range(num_chains), processes, queues):
            if status[chain_index]['status'] == 'done':
                continue
            exit_code = processes[chain_index].poll()
            if exit_code is not None:
                # Note we still finish the rest of this loop iteration, which
                # lets us print the process' final output.
                status[chain_index] = {'status': 'done', 'exit_code': exit_code}

            while True:
                # Use loop so that we retrieve as many lines as are available
                # from the process.
                try:
                    line = Q.get(timeout=delay)
                except Queue.Empty:
                    break
                else:
                    chain_stdout[chain_index].append(line.strip())

        for chain_index in sorted(chain_stdout.keys()):
            for line in chain_stdout[chain_index]:
                # Strip existing timestamp.
                if re.match(r'^\[\d{4}-', line):
                    line = line[line.index(']')+1:].strip()
                if line.startswith('iteration='):
                    status_line = parse_status(line)
                    status[chain_index] = parse_status(line)
                    status[chain_index]['status'] = 'running'
                    status[chain_index]['percent_complete'] = '{:.2f}%'.format(100 * float(status[chain_index]['trees_sampled']) / float(status[chain_index]['total_trees']))
                else:
                    if len(line) > 0:
                        logmsg(""chain={} {}"".format(chain_index, line))
                        last_lines_were_status = False
        chain_stdout = defaultdict(list)

        if last_lines_were_status and sys.stdout.isatty():
            print(""\033[2K\033[1A"" * (num_chains + 1)) # Move cursor up to line that starts telling us about chain progression. Want to overwrite those lines.
        for cidx in sorted(status.keys()):
            if status[cidx]['status'] == 'running':
                keys = ('trees_sampled', 'total_trees', 'percent_complete')
            elif status[cidx]['status'] == 'done':
                keys = ('exit_code',)
            else:
                keys = tuple()
            status_msg = ' '.join(['{}={}'.format(K, status[cidx][K]) for K in ('status',) + keys])
            logmsg('chain={} {}'.format(cidx, status_msg))
            last_lines_were_status = True
        time.sleep(1)

def determine_chains_to_merge(chain_dirs,chain_inclusion_factor):
    '''
    Examines all of the trees output by each chain and reports which chains should
    be merged. Chains will meet the criteria if the log(sum(all_tree_likelihoods))
    is within some factor of the maximum of that value across chains.
    '''
    logSumLHs = []
    for chain_dir in chain_dirs:
        logLHs = []
        tree_zip_file = zipfile.ZipFile(os.path.join(chain_dir,'trees.zip'), mode = 'r')
        for tree_name in tree_zip_file.namelist():
            if tree_name.startswith(""tree""):
                #the logged likelihood is in the names of the trees, just use that.
                logLHs.append(float(tree_name.split('_')[-1]))
        logSumLHs.append(scipy.misc.logsumexp(logLHs))

    # Check below assumes that LLH < 0, which it should always be. We need this
    # assumption for the idea that a ""slightly worse"" chain has a ""slightly
    # more negative"" LH to work.
    logSumLHs = np.array(logSumLHs)
    assert np.all(logSumLHs < 0)
    bestLogSumLH = np.max(logSumLHs)

    included_chains = []
    excluded_chains = []
    for cidx, logsumlh in enumerate(logSumLHs):
        if logsumlh >= chain_inclusion_factor * bestLogSumLH:
            included_chains.append((cidx, logsumlh))
        else:
            excluded_chains.append((cidx, logsumlh))

    assert len(included_chains) >= 1
    return (included_chains, excluded_chains)

def merge_best_chains(out_dir, chain_dirs, included_chains, excluded_chains):
    '''
    Determines which chains are the best and merges them together into one trees.zip
    file that can be input into write_results.
    A chain counts, for now, as being one of the best if the highest likelihood of all
    of it's trees is within 10% of the highest likelihood of all of the trees calculated
    across all chains.
    '''
    combined_fn = os.path.join(out_dir,""trees.zip"")
    if os.path.isfile(combined_fn):
        logmsg(""Merged trees.zip file already exists. To create a new merged trees.zip, remove the existing one first."")
        return

    combined_tree_zipfile = zipfile.ZipFile(combined_fn, mode='w', compression=zipfile.ZIP_DEFLATED, allowZip64=True)
    logmsg(""Including chains {}"".format(' '.join(['{}={}'.format(cidx, logsumlh) for cidx, logsumlh in included_chains])))
    if len(excluded_chains) > 0:
        logmsg(""Excluding chains {}"".format(' '.join(['{}={}'.format(cidx, logsumlh) for cidx, logsumlh in excluded_chains])))
    else:
        logmsg('Not excluding any chains')
    tree_index = 0
    zip_paths = []
    others = defaultdict(dict)

    for chain_idx, _ in included_chains:
        chain_dir = chain_dirs[chain_idx]
        zip_path = os.path.abspath(os.path.join(chain_dir, 'trees.zip'))
        zip_paths.append(zip_path)
        this_zip = zipfile.ZipFile(zip_path, mode='r')
        this_zips_files = this_zip.namelist()

        is_tree_file = lambda fn: fn.startswith('tree')
        should_include_other = lambda fn: not fn.startswith('burnin')
        tree_fns  = [fn for fn in this_zips_files if is_tree_file(fn)]
        other_fns = [fn for fn in this_zips_files if not is_tree_file(fn) and should_include_other(fn)]

        for fn in tree_fns:
            F = this_zip.read(fn)
            filename_components = fn.split(""_"")
            # First we need to reindex the tree
            filename_components[1] = str(tree_index)
            fn = ""_"".join(filename_components)
            combined_tree_zipfile.writestr(fn, F)
            tree_index += 1

        for fn in other_fns:
            others[fn][chain_idx] = hashlib.sha256(this_zip.read(fn)).hexdigest()

    # Assume that any non-tree files are identical across individual trees.zip
    # files. But let's check this assumption.
    for fn in others.keys():
        assert len(set(others[fn].values())) == 1
        combined_tree_zipfile.writestr(fn, this_zip.read(fn))

    write_results_path = os.path.normpath(os.path.join(os.path.dirname(__file__), 'write_results.py'))
    logmsg(""Chain merging complete."")
    logmsg(""You may remove the following unneeded intermediate files: {}"".format(' '.join(zip_paths)))
    logmsg('To write JSON results, please run `{} {} {} {} {} {} {}`'.format(
        sys.executable,
        write_results_path,
        'run_name',
        combined_fn,
        'run_name.summ.json.gz',
        'run_name.muts.json.gz',
        'run_name.mutass.zip'
    ))

def main():
    args,evolve_args = parse_args()
    check_args(args)
    chain_dirs = run_chains(args,evolve_args)
    included_chains, excluded_chains = determine_chains_to_merge(chain_dirs, args['chain_inclusion_factor'])
    merge_best_chains(args['output_dir'], chain_dirs, included_chains, excluded_chains)

if __name__ == ""__main__"":
    main()
",FALSE,,3888
3872,InitialSO.csv3872.txt,InitialGit.csv3872.txt,12,".toggle() .toggle .toggle (function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));
 $('#test').clickToggle(function() {   
    $(this).animate({
        width: ""260px""
    }, 1500);
},
function() {
    $(this).animate({
        width: ""30px""
    }, 1500);
});
 ",".toggle() .toggle .toggle (function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));
 $('#test').clickToggle(function() {   
    $(this).animate({
        width: ""260px""
    }, 1500);
},
function() {
    $(this).animate({
        width: ""30px""
    }, 1500);
});
 ",TRUE,"/*************************************************************************
	(c) 2008-2012 Martin Wendt
 *************************************************************************/

/*******************************************************************************
 * jQuery.skinswitcher plugin.
 *
 * Change CSS include when combobox selection changes.
 * Copyright (c) 2012 Martin Wendt
 *
 * Usage:
	$(""select#skinswitcher"").skinswitcher({
		base: ""../src/"",
		choices: [{name: ""XP"", value: ""xp"", href: ""skin/ui.fancytree.css""},
				  {name: ""Vista"", value: ""vista"", href: ""skin-vista/ui.fancytree.css""},
				  {name: ""Lion"", value: ""lion"", href: ""skin-lion/ui.fancytree.css""}
				  ],
		init: ""lion""
	});
 */

(function( $ ) {
	var PLUGIN_NAME = ""skinswitcher"",
		defaultOptions = {
			/**RegEx that returns prefix, tag, and suffix of the CSS href.*/
			skinPattern: ""^(\W/skin-)().css$"",
			mode: ""combo"", // {String} mode 'combo' or 'radio'
			base: """",
			choices: []
		},
		methods = {
			init: function(options) {
				var opts = $.extend({}, defaultOptions, options),
					hrefs = [],
					$link = null,
					initialChoice = undefined;
				// Find <link> tag, figure out current setting and mark for
				// later access
				$.each(opts.choices, function(){
					hrefs.push(this.href.toLowerCase());
				});
				$(""head link"").each(function(){
					for(var i=0; i<hrefs.length; i++){
						if(this.href.toLowerCase().indexOf(hrefs[i]) >= 0){
							$link = $(this);
							$link.addClass(PLUGIN_NAME);
							initialChoice = opts.choices[i];
						}
					}
				});
				return this.each(function() {
					// Add options to dropdown list
					var $combo = $(this);
					$combo.empty();
					$.each(opts.choices, function(i, choice){
						var $opt = $(""<option>"", {
								text: choice.name,
								value: choice.value
							}).data(""choice"", choice);
						$combo.append($opt);
					});
					// Switch include
					$combo.change(function(){
						var choice = $("":selected"", this).data(""choice"");
						$(""link.skinswitcher"").attr(""href"", opts.base + choice.href);
					});
					if(opts.init){
						$combo.val(opts.init).change();
					}else if (initialChoice){
						// select combobox value to match current <link> tag
						// decouple this call to prevent IE6 exception
						setTimeout(function(){
							$combo.val(initialChoice.value);
						}, 100);
					}
				});
			},
			change: function(href) {
				this.val("""");
			},
			reset: function() {
				this.val("""");
			}
		};

	$.fn[PLUGIN_NAME] = function(method) {
		// Method calling logic
		if ( methods[method] ) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if ( typeof method === ""object"" || ! method ) {
			return methods.init.apply(this, arguments);
		} else {
			$.error(""Method "" +  method + "" does not exist on jQuery."" + PLUGIN_NAME);
		}
	};
})( jQuery );


/**
 * Replacement for $().toggle(func1, func2), which was deprecated with jQuery 1.8
 * and removed in 1.9.;
 * Taken from http://stackoverflow.com/a/4911660/19166
 * By Felix Kling
 */
(function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));


SAMPLE_BUTTON_DEFAULTS = {
	id: undefined,
	label: ""Sample"",
	newline: true,
	code: function(){ alert(""not implemented""); }
};
function addSampleButton(options)
{
	var opts = $.extend({}, SAMPLE_BUTTON_DEFAULTS, options),
		$container;
	$container = $(""<span>"", {
		""class"": ""sampleButtonContainer""
	});
	$(""<button>"", {
		id: opts.id,
		title: opts.tooltip,
		text: opts.label
	}).click(function(e){
		e.preventDefault();
		opts.code();
	}).appendTo($container);

	$(""<a>"", {
		text: ""Source code"",
		href: ""#"",
		""class"": ""showCode""
	}).appendTo($container)
	.click(function(e){
		try {
			prettyPrint();
		} catch (e) {
			alert(e);
		}
		var $pre = $container.find(""pre"");
		if($pre.is("":visible"")){
			$(this).text(""Source code"");
		}else{
			$(this).text(""Hide source"");
		}
		$pre.toggle(""slow"");
		return false;
	});
	var sourceCode = """" + opts.code;
	// Remove outer function(){ CODE }
//    sourceCode = sourceCode.match(/[]\{(.*)\}/);
	sourceCode = sourceCode.substring(
		sourceCode.indexOf(""{"") + 1,
		sourceCode.lastIndexOf(""}""));
//    sourceCode = $.trim(sourceCode);
	// Reduce tabs from 8 to 2 characters
	sourceCode = sourceCode.replace(/\t/g, ""  "");
	// Format code samples

	$(""<pre>"", {
		text: sourceCode,
		""class"": ""prettyprint""
	}).hide().appendTo($container);
	if(opts.newline){
		$container.append($(""<br>""));
	}
	if(opts.header){
		$(""<h5>"", {text: opts.header}).appendTo($(""p#sampleButtons""));
	}
	$container.appendTo($(""p#sampleButtons""));
}


function initCodeSamples()
{
	var $source = $(""#sourceCode"");
	$(""#codeExample"").clickToggle(
		function(){
			$source.show(""fast"");
			if( !this.old ){
				this.old = $(this).html();
				$.get(this.href, function(code){
					// Remove <!-- Start_Exclude [...] End_Exclude --> blocks:
					code = code.replace(/<!-- Start_Exclude(.|\n|\r)*?End_Exclude -->/gi, ""<!-- (Irrelevant source removed.) -->"");
					// Reduce tabs from 8 to 2 characters
					code = code.replace(/\t/g, ""  "");
					$source.text(code);
					// Format code samples
					try {
						prettyPrint();
					} catch (e) {
						alert(e);
					}
				}, ""html"");
			}
			$(this).html(""Hide source code"");
		},
		function(){
			$(this).html(this.old);
			$source.hide(""fast"");
		}
	);
	if(jQuery.ui){
		var info = ""Fancytree "" + jQuery.ui.fancytree.version
			+ "", jQuery UI "" + jQuery.ui.version
			+ "", jQuery "" + jQuery.fn.jquery;
/*
		info += ""\n<br>"";
		info += ""document.compatMode: "" + document.compatMode + ""\n"";
		for(e in jQuery.support){
			info += ""<br>\n"" + e + "": "" + jQuery.support[e];
		}
*/
		$(""p.sample-links"").after(""<p class='version-info'>"" + info + ""</p>"");
	}
}


var _gaq = _gaq || [];

$(function(){
	// Log to Google Analytics, when not running locally
	if ( document.URL.toLowerCase().indexOf(""wwwendt.de/"") >= 0 ) {
		_gaq.push([""_setAccount"", ""UA-316028-1""]);
		_gaq.push([""_trackPageview""]);

		(function() {
			var ga = document.createElement(""script""); ga.type = ""text/javascript""; ga.async = true;
			ga.src = (""https:"" == document.location.protocol ? ""https://ssl"" : ""http://www"") + "".google-analytics.com/ga.js"";
			var s = document.getElementsByTagName(""script"")[0]; s.parentNode.insertBefore(ga, s);
		})();
	}

	// Show some elements only, if (not) inside the Example Browser
	if (top.location == self.location){
		$("".hideOutsideFS"").hide();
	}else{
		$("".hideInsideFS"").hide();
	}
	initCodeSamples();

	$(""select#skinswitcher"").skinswitcher({
		base: ""../src/"",
		choices: [{name: ""XP"", value: ""xp"", href: ""skin-xp/ui.fancytree.css""},
				  {name: ""Vista (classic Dynatree)"", value: ""vista"", href: ""skin-vista/ui.fancytree.css""},
				  {name: ""Win7"", value: ""win7"", href: ""skin-win7/ui.fancytree.css""},
				  {name: ""Lion"", value: ""lion"", href: ""skin-lion/ui.fancytree.css""}
				  ]
//		init: ""lion""
	});

});
","/*************************************************************************
	(c) 2008-2012 Martin Wendt
 *************************************************************************/

/*******************************************************************************
 * jQuery.skinswitcher plugin.
 *
 * Change CSS include when combobox selection changes.
 * Copyright (c) 2012 Martin Wendt
 *
 * Usage:
	$(""select#skinswitcher"").skinswitcher({
		base: ""../src/"",
		choices: [{name: ""XP"", value: ""xp"", href: ""skin/ui.fancytree.css""},
				  {name: ""Vista"", value: ""vista"", href: ""skin-vista/ui.fancytree.css""},
				  {name: ""Lion"", value: ""lion"", href: ""skin-lion/ui.fancytree.css""}
				  ],
		init: ""lion""
	});
 */

(function( $ ) {
	var PLUGIN_NAME = ""skinswitcher"",
		defaultOptions = {
			/**RegEx that returns prefix, tag, and suffix of the CSS href.*/
			// skinPattern: ""^(\W/skin-)().css$"",
			// mode: ""combo"", // {String} mode 'combo' or 'radio'
			base: """",
			choices: []
			// extraChoices: []
		},
		methods = {
			init: function(options) {
				var i,
					opts = $.extend({}, defaultOptions, options),
					hrefs = [],
					$link = null,
					initialChoice = undefined;
				// $('').skinswitcher did not match a selector
				if( !this.length ){
					return this;
				}
				// Attach options to skinswitcher combobox for later access
				this.data(""options"", opts);
				// Find the <link> tag that is used to includes our skin CSS.
				// Add a class for later access.
				$.each(opts.choices, function(){
					hrefs.push(this.href.toLowerCase());
				});
				$(""head link"").each(function(){
					for(i=0; i<hrefs.length; i++){
						if(this.href.toLowerCase().indexOf(hrefs[i]) >= 0){
							$link = $(this);
							$link.addClass(PLUGIN_NAME);
							initialChoice = opts.choices[i];
						}
					}
				});
				if( !$link ){
					$link = $(""link."" + PLUGIN_NAME);
				}
				if( !$link.length ){
					$.error(""Unable to find <link> tag for skinswitcher. Either set `href` to a known skin url or add a `skinswitcher` class."");
				}
				//
				return this.each(function() {
					// Add options to dropdown list
					var $combo = $(this);
					$combo
						.empty()
						.skinswitcher(""addChoices"", opts.choices)
						.change(function(){
							var choice = $("":selected"", this).data(""choice"");
							$(""link."" + PLUGIN_NAME).attr(""href"", opts.base + choice.href);
						});
					// Find out initial selection
					if(opts.init){
						$combo.val(opts.init).change();
					}else if (initialChoice){
						// select combobox value to match current <link> tag
						// decouple this call to prevent IE6 exception
						setTimeout(function(){
							$combo.val(initialChoice.value);
						}, 100);
					}
				});
			},
			option: function(name, value) {
				var opts = this.data(""options"");
				if(typeof value !== ""undefined""){
					opts[name] = value;
					return this;
				}else{
					return opts[name];
				}
			},
			addChoices: function(choices) {
				var $combo = $(this);
				if( $.isPlainObject(choices) ){
					choices = [ choices ];
				}
				$.each(choices, function(i, choice){
					var $opt = $(""<option>"", {
							text: choice.name,
							value: choice.value
						}).data(""choice"", choice);
					$combo.append($opt);
				});
				return this;
			},
			change: function(value) {
				$(this).val(value).change();
				return this;
			},
			reset: function() {
				$(this).val("""").change();
				return this;
			}
		};

	$.fn[PLUGIN_NAME] = function(method) {
		// Method calling logic
		if ( methods[method] ) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if ( typeof method === ""object"" || ! method ) {
			return methods.init.apply(this, arguments);
		} else {
			$.error(""Method "" +  method + "" does not exist on jQuery."" + PLUGIN_NAME);
		}
	};
})( jQuery );


/**
 * Replacement for $().toggle(func1, func2), which was deprecated with jQuery 1.8
 * and removed in 1.9.;
 * Taken from http://stackoverflow.com/a/4911660/19166
 * By Felix Kling
 */
(function($) {
	$.fn.clickToggle = function(func1, func2) {
		var funcs = [func1, func2];
		this.data('toggleclicked', 0);
		this.click(function() {
			var data = $(this).data();
			var tc = data.toggleclicked;
			$.proxy(funcs[tc], this)();
			data.toggleclicked = (tc + 1) % 2;
		});
		return this;
	};
}(jQuery));


SAMPLE_BUTTON_DEFAULTS = {
	id: undefined,
	label: ""Sample"",
	newline: true,
	code: function(){ alert(""not implemented""); }
};
function addSampleButton(options)
{
	var opts = $.extend({}, SAMPLE_BUTTON_DEFAULTS, options),
		$buttonBar = $(""#sampleButtons""),
		$container = $(""<span />"", {
			""class"": ""sampleButtonContainer""
		});

	$(""<button />"", {
		id: opts.id,
		title: opts.tooltip,
		text: opts.label
	}).click(function(e){
		e.preventDefault();
		opts.code();
	}).appendTo($container);

	$(""<a />"", {
		text: ""Source code"",
		href: ""#"",
		""class"": ""showCode""
	}).appendTo($container)
	.click(function(e){
		try {
			prettyPrint();
		} catch (e) {
			alert(e);
		}
		var $pre = $container.find(""pre"");
		if($pre.is("":visible"")){
			$(this).text(""Source code"");
		}else{
			$(this).text(""Hide source"");
		}
		$pre.toggle(""slow"");
		return false;
	});
	var sourceCode = """" + opts.code;
	// Remove outer function(){ CODE }
//    sourceCode = sourceCode.match(/[]\{(.*)\}/);
	sourceCode = sourceCode.substring(
		sourceCode.indexOf(""{"") + 1,
		sourceCode.lastIndexOf(""}""));
//    sourceCode = $.trim(sourceCode);
	// Reduce tabs from 8 to 2 characters
	sourceCode = sourceCode.replace(/\t/g, ""  "");
	// Format code samples

	$(""<pre />"", {
		text: sourceCode,
		""class"": ""prettyprint""
	}).hide().appendTo($container);
	if(opts.newline){
		$container.append($(""<br />""));
	}
	if(opts.header){
		$(""<h5 />"", {text: opts.header}).appendTo($(""p#sampleButtons""));
	}
	if( !$(""#sampleButtons"").length ){
		$.error(""addSampleButton() needs a container with id #sampleButtons"");
	}
	$container.appendTo($buttonBar);
}


function initCodeSamples()
{
	var $source = $(""#sourceCode"");
	$(""#codeExample"").clickToggle(
		function(){
			$source.show(""fast"");
			if( !this.old ){
				this.old = $(this).html();
				$.get(this.href, function(code){
					// Remove <!-- Start_Exclude [...] End_Exclude --> blocks:
					code = code.replace(/<!-- Start_Exclude(.|\n|\r)*?End_Exclude -->/gi, ""<!-- (Irrelevant source removed.) -->"");
					// Reduce tabs from 8 to 2 characters
					code = code.replace(/\t/g, ""  "");
					$source.text(code);
					// Format code samples
					try {
						prettyPrint();
					} catch (e) {
						alert(e);
					}
				}, ""html"");
			}
			$(this).html(""Hide source code"");
		},
		function(){
			$(this).html(this.old);
			$source.hide(""fast"");
		}
	);
	if(jQuery.ui){
		var info = ""Fancytree "" + jQuery.ui.fancytree.version
			+ "", jQuery UI "" + jQuery.ui.version
			+ "", jQuery "" + jQuery.fn.jquery;
/*
		info += ""\n<br>"";
		info += ""document.compatMode: "" + document.compatMode + ""\n"";
		for(e in jQuery.support){
			info += ""<br>\n"" + e + "": "" + jQuery.support[e];
		}
*/
		$(""p.sample-links"").after(""<p class='version-info'>"" + info + ""</p>"");
	}
}


var _gaq = _gaq || [];

$(function(){
	// Log to Google Analytics, when not running locally
	if ( document.URL.toLowerCase().indexOf(""wwwendt.de/"") >= 0 ) {
		_gaq.push([""_setAccount"", ""UA-316028-1""]);
		_gaq.push([""_trackPageview""]);

		(function() {
			var ga = document.createElement(""script""); ga.type = ""text/javascript""; ga.async = true;
			ga.src = (""https:"" == document.location.protocol ? ""https://ssl"" : ""http://www"") + "".google-analytics.com/ga.js"";
			var s = document.getElementsByTagName(""script"")[0]; s.parentNode.insertBefore(ga, s);
		})();
	}

	// Show some elements only, if (not) inside the Example Browser
	if (top.location == self.location){
		$("".hideOutsideFS"").hide();
	}else{
		$("".hideInsideFS"").hide();
	}
	initCodeSamples();

	$(""select#skinswitcher"").skinswitcher({
		base: ""../src/"",
		choices: [{name: ""XP"", value: ""xp"", href: ""skin-xp/ui.fancytree.css""},
				  {name: ""Vista (classic Dynatree)"", value: ""vista"", href: ""skin-vista/ui.fancytree.css""},
				  {name: ""Win7"", value: ""win7"", href: ""skin-win7/ui.fancytree.css""},
				  {name: ""Win8"", value: ""win8"", href: ""skin-win8/ui.fancytree.css""},
				  {name: ""Win8-N"", value: ""win8n"", href: ""skin-win8-n/ui.fancytree.css""},
				  {name: ""Win8 xxl"", value: ""win8xxl"", href: ""skin-win8-xxl/ui.fancytree.css""},
				  {name: ""Lion"", value: ""lion"", href: ""skin-lion/ui.fancytree.css""}
				  ]
//		init: ""lion""
	})
	// .after($(""<label><input name='cbWide' type='checkbox'>Wide</label>""));
	// $(""[name=cbWide]"").on(""change"", function(e){
	// 	$("".fancytree-container"").toggleClass(""fancytree-ext-wide"", $(this).is("":checked""));
	// });
});
",FALSE,,3889
3873,InitialSO.csv3873.txt,InitialGit.csv3873.txt,12,".toggle() .toggle .toggle (function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));
 $('#test').clickToggle(function() {   
    $(this).animate({
        width: ""260px""
    }, 1500);
},
function() {
    $(this).animate({
        width: ""30px""
    }, 1500);
});
 ",".toggle() .toggle .toggle (function($) {
    $.fn.clickToggle = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));
 $('#test').clickToggle(function() {   
    $(this).animate({
        width: ""260px""
    }, 1500);
},
function() {
    $(this).animate({
        width: ""30px""
    }, 1500);
});
 ",TRUE,"/*************************************************************************
	(c) 2008-2012 Martin Wendt
 *************************************************************************/

/**
 * Replacement for $().toggle(func1, func2), which was deprecated with jQuery 1.8
 * and removed in 1.9.;
 * Taken from http://stackoverflow.com/a/4911660/19166
 * By Felix Kling
 */
(function($) {
	$.fn.clickToggle = function(func1, func2) {
		var funcs = [func1, func2];
		this.data('toggleclicked', 0);
		this.click(function() {
			var data = $(this).data();
			var tc = data.toggleclicked;
			$.proxy(funcs[tc], this)();
			data.toggleclicked = (tc + 1) % 2;
		});
		return this;
	};
}(jQuery));


function viewSourceCode()
{
	window.location = ""view-source:"" + window.location.href;
}


function initCodeSamples()
{
	var $source = $(""#sourceCode"");
	$(""#codeExample"").clickToggle(
		function(){
			$source.show(""fast"");
			if( !this.old ){
				this.old = $(this).html();
				$.get(this.href, function(code){
					// Remove <!-- Start_Exclude [...] End_Exclude --> blocks:
					code = code.replace(/<!-- Start_Exclude(.|\n|\r)*?End_Exclude -->/gi, ""<!-- (Irrelevant source removed.) -->"");
					// Reduce tabs from 8 to 2 characters
					code = code.replace(/\t/g, ""  "");
					$source.text(code);
					// Format code samples
					try {
						prettyPrint();
					} catch (e) {
						alert(e);
					}
				}, ""html"");
			}
			$(this).html(""Hide source code"");
		},
		function(){
			$(this).html(this.old);
			$source.hide(""fast"");
		}
	);
	if(jQuery.ui){
		var info = ""Dynatree "" + jQuery.ui.dynatree.version
			+ "", jQuery UI "" + jQuery.ui.version
			+ "", jQuery "" + jQuery.fn.jquery;
/*
		info += ""\n<br>"";
		info += ""document.compatMode: "" + document.compatMode + ""\n"";
		for(e in jQuery.support){
			info += ""<br>\n"" + e + "": "" + jQuery.support[e];
		}
*/
		$(""p.sample-links"").after(""<p class='version-info'>"" + info + ""</p>"");
	}
}


var _gaq = _gaq || [];

$(function(){
	// Log to Google Analytics, when not running locally
	if ( document.URL.toLowerCase().indexOf(""wwwendt.de/"") >= 0 ) {
		_gaq.push([""_setAccount"", ""UA-316028-1""]);
		_gaq.push([""_trackPageview""]);

		(function() {
			var ga = document.createElement(""script""); ga.type = ""text/javascript""; ga.async = true;
			ga.src = (""https:"" == document.location.protocol ? ""https://ssl"" : ""http://www"") + "".google-analytics.com/ga.js"";
			var s = document.getElementsByTagName(""script"")[0]; s.parentNode.insertBefore(ga, s);
		})();
	}

	// Show some elements only, if (not) inside the Example Browser
//  if (top.location == self.location){
	if (window.top == window.self){
		$("".hideOutsideFS"").hide();
	}else{
		$("".hideInsideFS"").hide();
	}
	initCodeSamples();
});
","/*************************************************************************
	(c) 2008-2012 Martin Wendt
 *************************************************************************/

/**
 * Replacement for $().toggle(func1, func2), which was deprecated with jQuery 1.8
 * and removed in 1.9.;
 * Taken from http://stackoverflow.com/a/4911660/19166
 * By Felix Kling
 */
(function($) {
	$.fn.clickToggle = function(func1, func2) {
		var funcs = [func1, func2];
		this.data('toggleclicked', 0);
		this.click(function() {
			var data = $(this).data();
			var tc = data.toggleclicked;
			$.proxy(funcs[tc], this)();
			data.toggleclicked = (tc + 1) % 2;
		});
		return this;
	};
}(jQuery));


function viewSourceCode()
{
	window.location = ""view-source:"" + window.location.href;
}


function initCodeSamples()
{
	var $source = $(""#sourceCode"");
	$(""#codeExample"").clickToggle(
		function(){
			$source.show(""fast"");
			if( !this.old ){
				this.old = $(this).html();
				$.get(this.href, function(code){
					// Remove <!-- Start_Exclude [...] End_Exclude --> blocks:
					code = code.replace(/<!-- Start_Exclude(.|\n|\r)*?End_Exclude -->/gi, ""<!-- (Irrelevant source removed.) -->"");
					// Reduce tabs from 8 to 2 characters
					code = code.replace(/\t/g, ""  "");
					$source.text(code);
					// Format code samples
					try {
						prettyPrint();
					} catch (e) {
						alert(e);
					}
				}, ""html"");
			}
			$(this).html(""Hide source code"");
		},
		function(){
			$(this).html(this.old);
			$source.hide(""fast"");
		}
	);
	if(jQuery.ui){
		var info = ""Dynatree "" + jQuery.ui.dynatree.version
			+ "", jQuery UI "" + jQuery.ui.version
			+ "", jQuery "" + jQuery.fn.jquery;
/*
		info += ""\n<br>"";
		info += ""document.compatMode: "" + document.compatMode + ""\n"";
		for(e in jQuery.support){
			info += ""<br>\n"" + e + "": "" + jQuery.support[e];
		}
*/
		$(""p.sample-links"").after(""<p class='version-info'>"" + info + ""</p>"");
	}
}


var _gaq = _gaq || [];

$(function(){
	// Log to Google Analytics, when not running locally
	if ( document.URL.toLowerCase().indexOf(""wwwendt.de/"") >= 0 ) {
		_gaq.push([""_setAccount"", ""UA-316028-1""]);
		_gaq.push([""_trackPageview""]);

		(function() {
			var ga = document.createElement(""script""); ga.type = ""text/javascript""; ga.async = true;
			ga.src = (""https:"" == document.location.protocol ? ""https://ssl"" : ""http://www"") + "".google-analytics.com/ga.js"";
			var s = document.getElementsByTagName(""script"")[0]; s.parentNode.insertBefore(ga, s);
		})();
	}

	// Show some elements only, if (not) inside the Example Browser
//  if (top.location == self.location){
	if (window.top == window.self){
		$("".hideOutsideFS"").hide();
	}else{
		$("".hideInsideFS"").hide();
	}
	initCodeSamples();
});
",TRUE,,3893
3874,InitialSO.csv3874.txt,InitialGit.csv3874.txt,6,"String storageState = Environment.getExternalStorageState();
        if(storageState.equals(Environment.MEDIA_MOUNTED)) {

            String path = Environment.getExternalStorageDirectory().getName() + File.separatorChar + ""Android/data/"" + MainActivity.this.getPackageName() + ""/files/"" + md5(upc) + "".jpg"";
            _photoFile = new File(path);
            try {
                if(_photoFile.exists() == false) {
                    _photoFile.getParentFile().mkdirs();
                    _photoFile.createNewFile();
                }

            } catch (IOException e) {
                Log.e(TAG, ""Could not create file."", e);
            }
            Log.i(TAG, path);

            _fileUri = Uri.fromFile(_photoFile);
            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE );
            intent.putExtra( MediaStore.EXTRA_OUTPUT, _fileUri);
            startActivityForResult(intent, TAKE_PICTURE);
        }   else {
            new AlertDialog.Builder(MainActivity.this)
            .setMessage(""External Storeage (SD Card) is required.\n\nCurrent state: "" + storageState)
            .setCancelable(true).create().show();
        }
 ","String storageState = Environment.getExternalStorageState();
        if(storageState.equals(Environment.MEDIA_MOUNTED)) {

            String path = Environment.getExternalStorageDirectory().getName() + File.separatorChar + ""Android/data/"" + MainActivity.this.getPackageName() + ""/files/"" + md5(upc) + "".jpg"";
            _photoFile = new File(path);
            try {
                if(_photoFile.exists() == false) {
                    _photoFile.getParentFile().mkdirs();
                    _photoFile.createNewFile();
                }

            } catch (IOException e) {
                Log.e(TAG, ""Could not create file."", e);
            }
            Log.i(TAG, path);

            _fileUri = Uri.fromFile(_photoFile);
            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE );
            intent.putExtra( MediaStore.EXTRA_OUTPUT, _fileUri);
            startActivityForResult(intent, TAKE_PICTURE);
        }   else {
            new AlertDialog.Builder(MainActivity.this)
            .setMessage(""External Storeage (SD Card) is required.\n\nCurrent state: "" + storageState)
            .setCancelable(true).create().show();
        }
 ",TRUE,"package org.wikimedia.commons.contributions;

import android.app.*;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import com.actionbarsherlock.app.SherlockFragment;
import org.wikimedia.commons.upload.ShareActivity;
import org.wikimedia.commons.upload.UploadService;

import java.io.File;
import java.io.IOException;
import java.util.Date;

public class ContributionController {
    private SherlockFragment fragment;
    private Activity activity;

    private final static int SELECT_FROM_GALLERY = 1;
    private final static int SELECT_FROM_CAMERA = 2;

    public ContributionController(SherlockFragment fragment) {
        this.fragment = fragment;
        this.activity = fragment.getActivity();
    }

    // See http://stackoverflow.com/a/5054673/17865 for why this is done
    private Uri lastGeneratedCaptureURI;

    private Uri reGenerateImageCaptureURI() {
        String storageState = Environment.getExternalStorageState();
        if(storageState.equals(Environment.MEDIA_MOUNTED)) {

            String path = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/Commons/images/"" + new Date().getTime() + "".jpg"";
            File _photoFile = new File(path);
            try {
                if(_photoFile.exists() == false) {
                    _photoFile.getParentFile().mkdirs();
                    _photoFile.createNewFile();
                }

            } catch (IOException e) {
                Log.e(""Commons"", ""Could not create file: "" + path, e);
            }

            return Uri.fromFile(_photoFile);
        }   else {
            throw new RuntimeException(""No external storage found!"");
        }
    }

    public void startCameraCapture() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        lastGeneratedCaptureURI = reGenerateImageCaptureURI();
        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, lastGeneratedCaptureURI);
        fragment.startActivityForResult(takePictureIntent, SELECT_FROM_CAMERA);
    }

    public void startGalleryPick() {
        Intent pickImageIntent = new Intent(Intent.ACTION_GET_CONTENT);
        pickImageIntent.setType(""image/*"");
        fragment.startActivityForResult(pickImageIntent, SELECT_FROM_GALLERY);
    }

    public void handleImagePicked(int requestCode, Intent data) {
        Intent shareIntent = new Intent(activity, ShareActivity.class);
        shareIntent.setAction(Intent.ACTION_SEND);
        switch(requestCode) {
            case SELECT_FROM_GALLERY:
                shareIntent.setType(activity.getContentResolver().getType(data.getData()));
                shareIntent.putExtra(Intent.EXTRA_STREAM, data.getData());
                shareIntent.putExtra(UploadService.EXTRA_SOURCE, Contribution.SOURCE_GALLERY);
                break;
            case SELECT_FROM_CAMERA:
                shareIntent.setType(""image/jpeg""); //FIXME: Find out appropriate mime type
                shareIntent.putExtra(Intent.EXTRA_STREAM, lastGeneratedCaptureURI);
                shareIntent.putExtra(UploadService.EXTRA_SOURCE, Contribution.SOURCE_CAMERA);
                break;
        }
        activity.startActivity(shareIntent);
    }

    public void saveState(Bundle outState) {
        outState.putParcelable(""lastGeneratedCaptureURI"", lastGeneratedCaptureURI);
    }

    public void loadState(Bundle savedInstanceState) {
        if(savedInstanceState != null) {
            lastGeneratedCaptureURI = (Uri) savedInstanceState.getParcelable(""lastGeneratedCaptureURI"");
        }
    }

}
","package fr.free.nrw.commons.contributions;

import android.app.*;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import com.actionbarsherlock.app.SherlockFragment;
import fr.free.nrw.commons.campaigns.Campaign;
import fr.free.nrw.commons.upload.ShareActivity;
import fr.free.nrw.commons.upload.UploadService;

import java.io.File;
import java.io.IOException;
import java.util.Date;

public class ContributionController {
    private SherlockFragment fragment;
    private Activity activity;
    private Campaign campaign;

    private final static int SELECT_FROM_GALLERY = 1;
    private final static int SELECT_FROM_CAMERA = 2;

    public ContributionController(SherlockFragment fragment, Campaign campaign) {
        this.fragment = fragment;
        this.activity = fragment.getActivity();
        this.campaign = campaign;
    }

    // See http://stackoverflow.com/a/5054673/17865 for why this is done
    private Uri lastGeneratedCaptureURI;

    private Uri reGenerateImageCaptureURI() {
        String storageState = Environment.getExternalStorageState();
        if(storageState.equals(Environment.MEDIA_MOUNTED)) {

            String path = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/Commons/images/"" + new Date().getTime() + "".jpg"";
            File _photoFile = new File(path);
            try {
                if(_photoFile.exists() == false) {
                    _photoFile.getParentFile().mkdirs();
                    _photoFile.createNewFile();
                }

            } catch (IOException e) {
                Log.e(""Commons"", ""Could not create file: "" + path, e);
            }

            return Uri.fromFile(_photoFile);
        }   else {
            throw new RuntimeException(""No external storage found!"");
        }
    }

    public void startCameraCapture() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        lastGeneratedCaptureURI = reGenerateImageCaptureURI();
        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, lastGeneratedCaptureURI);
        fragment.startActivityForResult(takePictureIntent, SELECT_FROM_CAMERA);
    }

    public void startGalleryPick() {
        Intent pickImageIntent = new Intent(Intent.ACTION_GET_CONTENT);
        pickImageIntent.setType(""image/*"");
        fragment.startActivityForResult(pickImageIntent, SELECT_FROM_GALLERY);
    }

    public void handleImagePicked(int requestCode, Intent data) {
        Intent shareIntent = new Intent(activity, ShareActivity.class);
        shareIntent.setAction(Intent.ACTION_SEND);
        shareIntent.putExtra(UploadService.EXTRA_CAMPAIGN, campaign);
        switch(requestCode) {
            case SELECT_FROM_GALLERY:
                shareIntent.setType(activity.getContentResolver().getType(data.getData()));
                shareIntent.putExtra(Intent.EXTRA_STREAM, data.getData());
                shareIntent.putExtra(UploadService.EXTRA_SOURCE, Contribution.SOURCE_GALLERY);
                break;
            case SELECT_FROM_CAMERA:
                shareIntent.setType(""image/jpeg""); //FIXME: Find out appropriate mime type
                shareIntent.putExtra(Intent.EXTRA_STREAM, lastGeneratedCaptureURI);
                shareIntent.putExtra(UploadService.EXTRA_SOURCE, Contribution.SOURCE_CAMERA);
                break;
        }
        activity.startActivity(shareIntent);
    }

    public void saveState(Bundle outState) {
        outState.putParcelable(""lastGeneratedCaptureURI"", lastGeneratedCaptureURI);
        outState.putSerializable(""campaign"", campaign);
    }

    public void loadState(Bundle savedInstanceState) {
        if(savedInstanceState != null) {
            lastGeneratedCaptureURI = (Uri) savedInstanceState.getParcelable(""lastGeneratedCaptureURI"");
            campaign = (Campaign) savedInstanceState.getSerializable(""campaign"");
        }
    }

}
",FALSE,,3896
3876,InitialSO.csv3876.txt,InitialGit.csv3876.txt,27,"// your query statement does not seem right..BTW
Cursor result = mContentResolver.query(...); 
// now, you return a CrossProcessCursorWrapper.
return new CrossProcessCursorWrapper(result);
 public class CrossProcessCursorWrapper extends CursorWrapper implements
        CrossProcessCursor {
    public CrossProcessCursorWrapper(Cursor cursor) {
        super(cursor);
    }

    @Override
    public CursorWindow getWindow() {
        return null;
    }

    @Override
    public void fillWindow(int position, CursorWindow window) {
        if (position < 0 || position > getCount()) {
            return;
        }
        window.acquireReference();
        try {
            moveToPosition(position - 1);
            window.clear();
            window.setStartPosition(position);
            int columnNum = getColumnCount();
            window.setNumColumns(columnNum);
            while (moveToNext() && window.allocRow()) {
                for (int i = 0; i < columnNum; i++) {
                    String field = getString(i);
                    if (field != null) {
                        if (!window.putString(field, getPosition(), i)) {
                            window.freeLastRow();
                            break;
                        }
                    } else {
                        if (!window.putNull(getPosition(), i)) {
                            window.freeLastRow();
                            break;
                        }
                    }
                }
            }
        } catch (IllegalStateException e) {
            // simply ignore it
        } finally {
            window.releaseReference();
        }
    }

    @Override
    public boolean onMove(int oldPosition, int newPosition) {
        return true;
    }
}
 ","// your query statement does not seem right..BTW
Cursor result = mContentResolver.query(...); 
// now, you return a CrossProcessCursorWrapper.
return new CrossProcessCursorWrapper(result);
 public class CrossProcessCursorWrapper extends CursorWrapper implements
        CrossProcessCursor {
    public CrossProcessCursorWrapper(Cursor cursor) {
        super(cursor);
    }

    @Override
    public CursorWindow getWindow() {
        return null;
    }

    @Override
    public void fillWindow(int position, CursorWindow window) {
        if (position < 0 || position > getCount()) {
            return;
        }
        window.acquireReference();
        try {
            moveToPosition(position - 1);
            window.clear();
            window.setStartPosition(position);
            int columnNum = getColumnCount();
            window.setNumColumns(columnNum);
            while (moveToNext() && window.allocRow()) {
                for (int i = 0; i < columnNum; i++) {
                    String field = getString(i);
                    if (field != null) {
                        if (!window.putString(field, getPosition(), i)) {
                            window.freeLastRow();
                            break;
                        }
                    } else {
                        if (!window.putNull(getPosition(), i)) {
                            window.freeLastRow();
                            break;
                        }
                    }
                }
            }
        } catch (IllegalStateException e) {
            // simply ignore it
        } finally {
            window.releaseReference();
        }
    }

    @Override
    public boolean onMove(int oldPosition, int newPosition) {
        return true;
    }
}
 ",TRUE,"/***
  Copyright (c) 2012 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Advanced Android Development_
    http://commonsware.com/AdvAndroid
 */

package com.commonsware.android.cpproxy.provider;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.database.CrossProcessCursor;
import android.database.Cursor;
import android.database.CursorWindow;
import android.database.CursorWrapper;
import android.net.Uri;

public abstract class AbstractCPProxy extends ContentProvider {
  abstract protected Uri convertUri(Uri uri);

  public AbstractCPProxy() {
    super();
  }

  @Override
  public boolean onCreate() {
    return(true);
  }

  @Override
  public Cursor query(Uri uri, String[] projection, String selection,
                      String[] selectionArgs, String sortOrder) {
    Cursor result=
        getContext().getContentResolver().query(convertUri(uri),
                                                projection, selection,
                                                selectionArgs,
                                                sortOrder);

    return(new CrossProcessCursorWrapper(result));
  }

  @Override
  public Uri insert(Uri uri, ContentValues values) {
    return(getContext().getContentResolver().insert(convertUri(uri),
                                                    values));
  }

  @Override
  public int update(Uri uri, ContentValues values, String selection,
                    String[] selectionArgs) {
    return(getContext().getContentResolver().update(convertUri(uri),
                                                    values, selection,
                                                    selectionArgs));
  }

  @Override
  public int delete(Uri uri, String selection, String[] selectionArgs) {
    return(getContext().getContentResolver().delete(convertUri(uri),
                                                    selection,
                                                    selectionArgs));
  }

  @Override
  public String getType(Uri uri) {
    return(getContext().getContentResolver().getType(convertUri(uri)));
  }

  // following from
  // http://stackoverflow.com/a/5243978/115145

  public class CrossProcessCursorWrapper extends CursorWrapper
      implements CrossProcessCursor {
    public CrossProcessCursorWrapper(Cursor cursor) {
      super(cursor);
    }

    @Override
    public CursorWindow getWindow() {
      return null;
    }

    @Override
    public void fillWindow(int position, CursorWindow window) {
      if (position < 0 || position > getCount()) {
        return;
      }
      window.acquireReference();
      try {
        moveToPosition(position - 1);
        window.clear();
        window.setStartPosition(position);
        int columnNum=getColumnCount();
        window.setNumColumns(columnNum);
        while (moveToNext() && window.allocRow()) {
          for (int i=0; i < columnNum; i++) {
            String field=getString(i);
            if (field != null) {
              if (!window.putString(field, getPosition(), i)) {
                window.freeLastRow();
                break;
              }
            }
            else {
              if (!window.putNull(getPosition(), i)) {
                window.freeLastRow();
                break;
              }
            }
          }
        }
      }
      catch (IllegalStateException e) {
        // simply ignore it
      }
      finally {
        window.releaseReference();
      }
    }

    @Override
    public boolean onMove(int oldPosition, int newPosition) {
      return true;
    }
  }
}","/***
  Copyright (c) 2012-2014 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    https://commonsware.com/Android
 */

package com.commonsware.android.cpproxy.provider;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.database.CrossProcessCursor;
import android.database.Cursor;
import android.database.CursorWindow;
import android.database.CursorWrapper;
import android.net.Uri;
import android.preference.PreferenceManager;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import com.commonsware.cwac.security.PermissionLint;
import com.commonsware.cwac.security.PermissionUtils;

public abstract class AbstractCPProxy extends ContentProvider {
  abstract protected Uri convertUri(Uri uri);

  private static final String PREFS_FIRST_RUN=""firstRun"";
  private static final String PREFS_TAINTED=""tainted"";
  private boolean tainted=false;

  public AbstractCPProxy() {
    super();
  }

  @Override
  public boolean onCreate() {
    SharedPreferences prefs=
        PreferenceManager.getDefaultSharedPreferences(getContext());

    if (prefs.getBoolean(PREFS_FIRST_RUN, true)) {
      SharedPreferences.Editor editor=
          prefs.edit().putBoolean(PREFS_FIRST_RUN, false);

      HashMap<PackageInfo, ArrayList<PermissionLint>> entries=
          PermissionUtils.checkCustomPermissions(getContext());

      for (Map.Entry<PackageInfo, ArrayList<PermissionLint>> entry : entries.entrySet()) {
        if (!""com.commonsware.android.cpproxy.consumer"".equals(entry.getKey().packageName)) {
          tainted=true;
          break;
        }
      }
      
      editor.putBoolean(PREFS_TAINTED, tainted).apply();
    }
    else {
      tainted=prefs.getBoolean(PREFS_TAINTED, true);
    }

    return(true);
  }

  @Override
  public Cursor query(Uri uri, String[] projection, String selection,
                      String[] selectionArgs, String sortOrder) {
    checkTainted();
    
    Cursor result=
        getContext().getContentResolver().query(convertUri(uri),
                                                projection, selection,
                                                selectionArgs,
                                                sortOrder);

    return(new CrossProcessCursorWrapper(result));
  }

  @Override
  public Uri insert(Uri uri, ContentValues values) {
    checkTainted();
    
    return(getContext().getContentResolver().insert(convertUri(uri),
                                                    values));
  }

  @Override
  public int update(Uri uri, ContentValues values, String selection,
                    String[] selectionArgs) {
    checkTainted();
    
    return(getContext().getContentResolver().update(convertUri(uri),
                                                    values, selection,
                                                    selectionArgs));
  }

  @Override
  public int delete(Uri uri, String selection, String[] selectionArgs) {
    checkTainted();
    
    return(getContext().getContentResolver().delete(convertUri(uri),
                                                    selection,
                                                    selectionArgs));
  }

  @Override
  public String getType(Uri uri) {
    checkTainted();
    
    return(getContext().getContentResolver().getType(convertUri(uri)));
  }
  
  private void checkTainted() {
    if (tainted) {
      throw new RuntimeException(getContext().getString(R.string.tainted_abort));
    }
  }

  // following from
  // http://stackoverflow.com/a/5243978/115145

  public class CrossProcessCursorWrapper extends CursorWrapper
      implements CrossProcessCursor {
    public CrossProcessCursorWrapper(Cursor cursor) {
      super(cursor);
    }

    @Override
    public CursorWindow getWindow() {
      return null;
    }

    @Override
    public void fillWindow(int position, CursorWindow window) {
      if (position < 0 || position > getCount()) {
        return;
      }
      window.acquireReference();
      try {
        moveToPosition(position - 1);
        window.clear();
        window.setStartPosition(position);
        int columnNum=getColumnCount();
        window.setNumColumns(columnNum);
        while (moveToNext() && window.allocRow()) {
          for (int i=0; i < columnNum; i++) {
            String field=getString(i);
            if (field != null) {
              if (!window.putString(field, getPosition(), i)) {
                window.freeLastRow();
                break;
              }
            }
            else {
              if (!window.putNull(getPosition(), i)) {
                window.freeLastRow();
                break;
              }
            }
          }
        }
      }
      catch (IllegalStateException e) {
        // simply ignore it
      }
      finally {
        window.releaseReference();
      }
    }

    @Override
    public boolean onMove(int oldPosition, int newPosition) {
      return true;
    }
  }
}",FALSE,,3901
3878,InitialSO.csv3878.txt,InitialGit.csv3878.txt,3,"format(""i can speak {language} since i was {age}"",{language:'javascript',age:10});

format(""i can speak {0} since i was {1}"",'javascript',10});
 var format = function (str, col) {
    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);

    return str.replace(/\{\{|\}\}|\{(\w+)\}/g, function (m, n) {
        if (m == ""{{"") { return ""{""; }
        if (m == ""}}"") { return ""}""; }
        return col[n];
    });
};
 ","format(""i can speak {language} since i was {age}"",{language:'javascript',age:10});

format(""i can speak {0} since i was {1}"",'javascript',10});
 var format = function (str, col) {
    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);

    return str.replace(/\{\{|\}\}|\{(\w+)\}/g, function (m, n) {
        if (m == ""{{"") { return ""{""; }
        if (m == ""}}"") { return ""}""; }
        return col[n];
    });
};
 ",TRUE,"// http://stackoverflow.com/questions/1038746/equivalent-of-string-format-in-jquery/5341855#5341855
String.prototype.format = function() { return formatstr(this, arguments) }
function formatstr(str, col) {
    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);
    var idx = 0;
    return str.replace(/%%|%s|%(\d+)\$s/g, function (m, n) {
        if (m == ""%%"") { return ""%""; }
        if (m == ""%s"") { return col[idx++]; }
        return col[n];
    });
};

function confirmDelete(message) {
    return (confirm(message) ? true : false);
}

function Dopop(link) {
    newin=window.open(link,'popup','width=500,height=400,toolbar=false,scrollbars=yes,resizeable=yes');
}

jQuery.fn.preventDoubleFormSubmit = function() {
    jQuery(this).submit(function() {
        if (this.beenSubmitted)
            return false;
        else
            this.beenSubmitted = true;
    });
};

function prefixOf (s, tok) {
    var index = s.indexOf(tok);
    return s.substring(0, index);
}
function suffixOf (s, tok) {
    var index = s.indexOf(tok);
    return s.substring(index + 1);
}
","// http://stackoverflow.com/questions/1038746/equivalent-of-string-format-in-jquery/5341855#5341855
String.prototype.format = function() { return formatstr(this, arguments) }
function formatstr(str, col) {
    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);
    var idx = 0;
    return str.replace(/%%|%s|%(\d+)\$s/g, function (m, n) {
        if (m == ""%%"") { return ""%""; }
        if (m == ""%s"") { return col[idx++]; }
        return col[n];
    });
};

function confirmDelete(message) {
    return (confirm(message) ? true : false);
}

function Dopop(link) {
    newin=window.open(link,'popup','width=500,height=400,toolbar=false,scrollbars=yes,resizeable=yes');
}

jQuery.fn.preventDoubleFormSubmit = function() {
    jQuery(this).submit(function() {
        if (this.beenSubmitted)
            return false;
        else
            this.beenSubmitted = true;
    });
};

function prefixOf (s, tok) {
    var index = s.indexOf(tok);
    return s.substring(0, index);
}
function suffixOf (s, tok) {
    var index = s.indexOf(tok);
    return s.substring(index + 1);
}
",TRUE,,3902
3884,InitialSO.csv3884.txt,InitialGit.csv3884.txt,6,"var log = Function.prototype.bind.call(console.log, console);
 log.apply(console, [""this"", ""is"", ""a"", ""test""]);
//-> ""thisisatest""
 console if (Function.prototype.bind && window.console && typeof console.log == ""object""){
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}
 Function.prototype.bind Array.prototype.forEach console.log ","var log = Function.prototype.bind.call(console.log, console);
log.apply(console, [""this"", ""is"", ""a"", ""test""]);
//-> ""thisisatest""
 console if (Function.prototype.bind && window.console && typeof console.log == ""object""){
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}
 Function.prototype.bind Array.prototype.forEach console.log ",FALSE,"'use strict';


$(function() {

	// Helper function for vertically aligning DOM elements
	// http://www.seodenver.com/simple-vertical-align-plugin-for-jquery/
	$.fn.vAlign = function() {
		return this.each(function(){
			var ah = $(this).height();
			var ph = $(this).parent().height();
			var mh = (ph - ah) / 2;
			$(this).css('margin-top', mh);
		});
	};

	$.fn.stretchFormtasticInputWidthToParent = function() {
		return this.each(function(){
			var p_width = $(this).closest(""form"").innerWidth();
			var p_padding = parseInt($(this).closest(""form"").css('padding-left') ,10) + parseInt($(this).closest('form').css('padding-right'), 10);
			var this_padding = parseInt($(this).css('padding-left'), 10) + parseInt($(this).css('padding-right'), 10);
			$(this).css('width', p_width - p_padding - this_padding);
		});
	};

	$('form.formtastic li.string input, form.formtastic textarea').stretchFormtasticInputWidthToParent();

	// Vertically center these paragraphs
	// Parent may need a min-height for this to work..
	$('ul.downplayed li div.content p').vAlign();

	// When a sandbox form is submitted..
	$(""form.sandbox"").submit(function(){

		var error_free = true;

		// Cycle through the forms required inputs
 		$(this).find(""input.required"").each(function() {

			// Remove any existing error styles from the input
			$(this).removeClass('error');

			// Tack the error style on if the input is empty..
			if ($(this).val() === '') {
				$(this).addClass('error');
				$(this).wiggle();
				error_free = false;
			}

		});

		return error_free;
	});

});

function clippyCopiedCallback() {
  $('#api_key_copied').fadeIn().delay(1000).fadeOut();

  // var b = $(""#clippy_tooltip_"" + a);
  // b.length != 0 && (b.attr(""title"", ""copied!"").trigger(""tipsy.reload""), setTimeout(function() {
  //   b.attr(""title"", ""copy to clipboard"")
  // },
  // 500))
}

// Logging function that accounts for browsers that don't have window.console
function log(){
  log.history = log.history || [];
  log.history.push(arguments);
  if(this.console){
    console.log( Array.prototype.slice.call(arguments)[0] );
  }
}

// Handle browsers that do console incorrectly (IE9 and below, see http://stackoverflow.com/a/5539378/7913)
if (Function.prototype.bind && console && typeof console.log === ""object"") {
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}

window.Docs = {

	shebang: function() {

		// If shebang has an operation nickname in it..
		// e.g. /docs/#!/words/get_search
		var fragments = $.param.fragment().split('/');
		fragments.shift(); // get rid of the bang

		switch (fragments.length) {
			case 1:
        if (fragments[0].length > 0) { // prevent matching ""#/""
          // Expand all operations for the resource and scroll to it
          var dom_id = 'resource_' + fragments[0];

          Docs.expandEndpointListForResource(fragments[0]);
          $(""#""+dom_id).slideto({highlight: false});
        }
				break;
			case 2:
				// Refer to the endpoint DOM element, e.g. #words_get_search

        // Expand Resource
        Docs.expandEndpointListForResource(fragments[0]);
        $(""#""+dom_id).slideto({highlight: false});

        // Expand operation
				var li_dom_id = fragments.join('_');
				var li_content_dom_id = li_dom_id + ""_content"";


				Docs.expandOperation($('#'+li_content_dom_id));
				$('#'+li_dom_id).slideto({highlight: false});
				break;
		}

	},

	toggleEndpointListForResource: function(resource) {
		var elem = $('li#resource_' + Docs.escapeResourceName(resource) + ' ul.endpoints');
		if (elem.is(':visible')) {
			Docs.collapseEndpointListForResource(resource);
		} else {
			Docs.expandEndpointListForResource(resource);
		}
	},

	// Expand resource
	expandEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideDown();
			return;
		}

		$('li#resource_' + resource).addClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideDown();
	},

	// Collapse resource and mark as explicitly closed
	collapseEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideUp();
			return;
		}

		$('li#resource_' + resource).removeClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideUp();
	},

	expandOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideDown();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.expandOperation($(this));
		});
	},

	collapseOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideUp();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.collapseOperation($(this));
		});
	},

	escapeResourceName: function(resource) {
		return resource.replace(/[!""#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g, ""\\$&"");
	},

	expandOperation: function(elem) {
		elem.slideDown();
	},

	collapseOperation: function(elem) {
		elem.slideUp();
	}
};
","'use strict';


$(function() {

	// Helper function for vertically aligning DOM elements
	// http://www.seodenver.com/simple-vertical-align-plugin-for-jquery/
	$.fn.vAlign = function() {
		return this.each(function(){
			var ah = $(this).height();
			var ph = $(this).parent().height();
			var mh = (ph - ah) / 2;
			$(this).css('margin-top', mh);
		});
	};

	$.fn.stretchFormtasticInputWidthToParent = function() {
		return this.each(function(){
			var p_width = $(this).closest(""form"").innerWidth();
			var p_padding = parseInt($(this).closest(""form"").css('padding-left') ,10) + parseInt($(this).closest('form').css('padding-right'), 10);
			var this_padding = parseInt($(this).css('padding-left'), 10) + parseInt($(this).css('padding-right'), 10);
			$(this).css('width', p_width - p_padding - this_padding);
		});
	};

	$('form.formtastic li.string input, form.formtastic textarea').stretchFormtasticInputWidthToParent();

	// Vertically center these paragraphs
	// Parent may need a min-height for this to work..
	$('ul.downplayed li div.content p').vAlign();

	// When a sandbox form is submitted..
	$(""form.sandbox"").submit(function(){

		var error_free = true;

		// Cycle through the forms required inputs
 		$(this).find(""input.required"").each(function() {

			// Remove any existing error styles from the input
			$(this).removeClass('error');

			// Tack the error style on if the input is empty..
			if ($(this).val() === '') {
				$(this).addClass('error');
				$(this).wiggle();
				error_free = false;
			}

		});

		return error_free;
	});

});

function clippyCopiedCallback() {
  $('#api_key_copied').fadeIn().delay(1000).fadeOut();

  // var b = $(""#clippy_tooltip_"" + a);
  // b.length != 0 && (b.attr(""title"", ""copied!"").trigger(""tipsy.reload""), setTimeout(function() {
  //   b.attr(""title"", ""copy to clipboard"")
  // },
  // 500))
}

// Logging function that accounts for browsers that don't have window.console
function log(){
  log.history = log.history || [];
  log.history.push(arguments);
  if(this.console){
    console.log( Array.prototype.slice.call(arguments)[0] );
  }
}

// Handle browsers that do console incorrectly (IE9 and below, see http://stackoverflow.com/a/5539378/7913)
if (Function.prototype.bind && console && typeof console.log === ""object"") {
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}

window.Docs = {

	shebang: function() {

		// If shebang has an operation nickname in it..
		// e.g. /docs/#!/words/get_search
		var fragments = $.param.fragment().split('/');
		fragments.shift(); // get rid of the bang

		switch (fragments.length) {
			case 1:
        if (fragments[0].length > 0) { // prevent matching ""#/""
          // Expand all operations for the resource and scroll to it
          var dom_id = 'resource_' + fragments[0];

          Docs.expandEndpointListForResource(fragments[0]);
          $(""#""+dom_id).slideto({highlight: false});
        }
				break;
			case 2:
				// Refer to the endpoint DOM element, e.g. #words_get_search

        // Expand Resource
        Docs.expandEndpointListForResource(fragments[0]);
        $(""#""+dom_id).slideto({highlight: false});

        // Expand operation
				var li_dom_id = fragments.join('_');
				var li_content_dom_id = li_dom_id + ""_content"";


				Docs.expandOperation($('#'+li_content_dom_id));
				$('#'+li_dom_id).slideto({highlight: false});
				break;
		}

	},

	toggleEndpointListForResource: function(resource) {
		var elem = $('li#resource_' + Docs.escapeResourceName(resource) + ' ul.endpoints');
		if (elem.is(':visible')) {
			Docs.collapseEndpointListForResource(resource);
		} else {
			Docs.expandEndpointListForResource(resource);
		}
	},

	// Expand resource
	expandEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideDown();
			return;
		}

		$('li#resource_' + resource).addClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideDown();
	},

	// Collapse resource and mark as explicitly closed
	collapseEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideUp();
			return;
		}

		$('li#resource_' + resource).removeClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideUp();
	},

	expandOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideDown();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.expandOperation($(this));
		});
	},

	collapseOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideUp();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.collapseOperation($(this));
		});
	},

	escapeResourceName: function(resource) {
		return resource.replace(/[!""#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g, ""\\$&"");
	},

	expandOperation: function(elem) {
		elem.slideDown();
	},

	collapseOperation: function(elem) {
		elem.slideUp();
	}
};
",TRUE,,3904
3887,InitialSO.csv3887.txt,InitialGit.csv3887.txt,6,"var log = Function.prototype.bind.call(console.log, console);
 log.apply(console, [""this"", ""is"", ""a"", ""test""]);
//-> ""thisisatest""
 console if (Function.prototype.bind && window.console && typeof console.log == ""object""){
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}
 Function.prototype.bind Array.prototype.forEach console.log ","var log = Function.prototype.bind.call(console.log, console);
log.apply(console, [""this"", ""is"", ""a"", ""test""]);
//-> ""thisisatest""
 console if (Function.prototype.bind && window.console && typeof console.log == ""object""){
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}
 Function.prototype.bind Array.prototype.forEach console.log ",FALSE,"$(function() {

	// Helper function for vertically aligning DOM elements
	// http://www.seodenver.com/simple-vertical-align-plugin-for-jquery/
	$.fn.vAlign = function() {
		return this.each(function(i){
		var ah = $(this).height();
		var ph = $(this).parent().height();
		var mh = (ph - ah) / 2;
		$(this).css('margin-top', mh);
		});
	};

	$.fn.stretchFormtasticInputWidthToParent = function() {
		return this.each(function(i){
		var p_width = $(this).closest(""form"").innerWidth();
		var p_padding = parseInt($(this).closest(""form"").css('padding-left') ,10) + parseInt($(this).closest(""form"").css('padding-right'), 10);
		var this_padding = parseInt($(this).css('padding-left'), 10) + parseInt($(this).css('padding-right'), 10);
		$(this).css('width', p_width - p_padding - this_padding);
		});
	};

	$('form.formtastic li.string input, form.formtastic textarea').stretchFormtasticInputWidthToParent();

	// Vertically center these paragraphs
	// Parent may need a min-height for this to work..
	$('ul.downplayed li div.content p').vAlign();

	// When a sandbox form is submitted..
	$(""form.sandbox"").submit(function(){

		var error_free = true;

		// Cycle through the forms required inputs
 		$(this).find(""input.required"").each(function() {

			// Remove any existing error styles from the input
			$(this).removeClass('error');

			// Tack the error style on if the input is empty..
			if ($(this).val() == '') {
				$(this).addClass('error');
				$(this).wiggle();
				error_free = false;
			}

		});

		return error_free;
	});

});

function clippyCopiedCallback(a) {
  $('#api_key_copied').fadeIn().delay(1000).fadeOut();

  // var b = $(""#clippy_tooltip_"" + a);
  // b.length != 0 && (b.attr(""title"", ""copied!"").trigger(""tipsy.reload""), setTimeout(function() {
  //   b.attr(""title"", ""copy to clipboard"")
  // },
  // 500))
}

// Logging function that accounts for browsers that don't have window.console
log = function(){
  log.history = log.history || [];
  log.history.push(arguments);
  if(this.console){
    console.log( Array.prototype.slice.call(arguments) );
  }
};

// Handle browsers that do console incorrectly (IE9 and below, see http://stackoverflow.com/a/5539378/7913)
if (Function.prototype.bind && console && typeof console.log == ""object"") {
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}

var Docs = {

	shebang: function() {

		// If shebang has an operation nickname in it..
		// e.g. /docs/#!/words/get_search
		var fragments = $.param.fragment().split('/');
		fragments.shift(); // get rid of the bang

		switch (fragments.length) {
			case 1:
				// Expand all operations for the resource and scroll to it
				log('shebang resource:' + fragments[0]);
				var dom_id = 'resource_' + fragments[0];

				Docs.expandEndpointListForResource(fragments[0]);
				$(""#""+dom_id).slideto({highlight: false});
				break;
			case 2:
				// Refer to the endpoint DOM element, e.g. #words_get_search
				log('shebang endpoint: ' + fragments.join('_'));

        // Expand Resource
        Docs.expandEndpointListForResource(fragments[0]);
        $(""#""+dom_id).slideto({highlight: false});

        // Expand operation
				var li_dom_id = fragments.join('_');
				var li_content_dom_id = li_dom_id + ""_content"";

        log(""li_dom_id "" + li_dom_id);
        log(""li_content_dom_id "" + li_content_dom_id);

				Docs.expandOperation($('#'+li_content_dom_id));
				$('#'+li_dom_id).slideto({highlight: false});
				break;
		}

	},

	toggleEndpointListForResource: function(resource) {
		var elem = $('li#resource_' + Docs.escapeResourceName(resource) + ' ul.endpoints');
		if (elem.is(':visible')) {
			Docs.collapseEndpointListForResource(resource);
		} else {
			Docs.expandEndpointListForResource(resource);
		}
	},

	// Expand resource
	expandEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideDown();
			return;
		}
		
		$('li#resource_' + resource).addClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideDown();
	},

	// Collapse resource and mark as explicitly closed
	collapseEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		$('li#resource_' + resource).removeClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideUp();
	},

	expandOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);
		
		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideDown();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.expandOperation($(this));
		});
	},

	collapseOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.collapseOperation($(this));
		});
	},

	escapeResourceName: function(resource) {
		return resource.replace(/[!""#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g, ""\\$&"");
	},

	expandOperation: function(elem) {
		elem.slideDown();
	},

	collapseOperation: function(elem) {
		elem.slideUp();
	}
};","$(function() {

	// Helper function for vertically aligning DOM elements
	// http://www.seodenver.com/simple-vertical-align-plugin-for-jquery/
	$.fn.vAlign = function() {
		return this.each(function(i){
		var ah = $(this).height();
		var ph = $(this).parent().height();
		var mh = (ph - ah) / 2;
		$(this).css('margin-top', mh);
		});
	};

	$.fn.stretchFormtasticInputWidthToParent = function() {
		return this.each(function(i){
		var p_width = $(this).closest(""form"").innerWidth();
		var p_padding = parseInt($(this).closest(""form"").css('padding-left') ,10) + parseInt($(this).closest(""form"").css('padding-right'), 10);
		var this_padding = parseInt($(this).css('padding-left'), 10) + parseInt($(this).css('padding-right'), 10);
		$(this).css('width', p_width - p_padding - this_padding);
		});
	};

	$('form.formtastic li.string input, form.formtastic textarea').stretchFormtasticInputWidthToParent();

	// Vertically center these paragraphs
	// Parent may need a min-height for this to work..
	$('ul.downplayed li div.content p').vAlign();

	// When a sandbox form is submitted..
	$(""form.sandbox"").submit(function(){

		var error_free = true;

		// Cycle through the forms required inputs
 		$(this).find(""input.required"").each(function() {

			// Remove any existing error styles from the input
			$(this).removeClass('error');

			// Tack the error style on if the input is empty..
			if ($(this).val() == '') {
				$(this).addClass('error');
				$(this).wiggle();
				error_free = false;
			}

		});

		return error_free;
	});

});

function clippyCopiedCallback(a) {
  $('#api_key_copied').fadeIn().delay(1000).fadeOut();

  // var b = $(""#clippy_tooltip_"" + a);
  // b.length != 0 && (b.attr(""title"", ""copied!"").trigger(""tipsy.reload""), setTimeout(function() {
  //   b.attr(""title"", ""copy to clipboard"")
  // },
  // 500))
}

// Logging function that accounts for browsers that don't have window.console
log = function(){
  log.history = log.history || [];
  log.history.push(arguments);
  if(this.console){
    console.log( Array.prototype.slice.call(arguments) );
  }
};

// Handle browsers that do console incorrectly (IE9 and below, see http://stackoverflow.com/a/5539378/7913)
if (Function.prototype.bind && console && typeof console.log == ""object"") {
    [
      ""log"",""info"",""warn"",""error"",""assert"",""dir"",""clear"",""profile"",""profileEnd""
    ].forEach(function (method) {
        console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
}

var Docs = {

	shebang: function() {

		// If shebang has an operation nickname in it..
		// e.g. /docs/#!/words/get_search
		var fragments = $.param.fragment().split('/');
		fragments.shift(); // get rid of the bang

		switch (fragments.length) {
			case 1:
				// Expand all operations for the resource and scroll to it
				log('shebang resource:' + fragments[0]);
				var dom_id = 'resource_' + fragments[0];

				Docs.expandEndpointListForResource(fragments[0]);
				$(""#""+dom_id).slideto({highlight: false});
				break;
			case 2:
				// Refer to the endpoint DOM element, e.g. #words_get_search
				log('shebang endpoint: ' + fragments.join('_'));

        // Expand Resource
        Docs.expandEndpointListForResource(fragments[0]);
        $(""#""+dom_id).slideto({highlight: false});

        // Expand operation
				var li_dom_id = fragments.join('_');
				var li_content_dom_id = li_dom_id + ""_content"";

        log(""li_dom_id "" + li_dom_id);
        log(""li_content_dom_id "" + li_content_dom_id);

				Docs.expandOperation($('#'+li_content_dom_id));
				$('#'+li_dom_id).slideto({highlight: false});
				break;
		}

	},

	toggleEndpointListForResource: function(resource) {
		var elem = $('li#resource_' + Docs.escapeResourceName(resource) + ' ul.endpoints');
		if (elem.is(':visible')) {
			Docs.collapseEndpointListForResource(resource);
		} else {
			Docs.expandEndpointListForResource(resource);
		}
	},

	// Expand resource
	expandEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		if (resource == '') {
			$('.resource ul.endpoints').slideDown();
			return;
		}
		
		$('li#resource_' + resource).addClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideDown();
	},

	// Collapse resource and mark as explicitly closed
	collapseEndpointListForResource: function(resource) {
		var resource = Docs.escapeResourceName(resource);
		$('li#resource_' + resource).removeClass('active');

		var elem = $('li#resource_' + resource + ' ul.endpoints');
		elem.slideUp();
	},

	expandOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);
		
		if (resource == '') {
			$('.resource ul.endpoints li.operation div.content').slideDown();
			return;
		}

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.expandOperation($(this));
		});
	},

	collapseOperationsForResource: function(resource) {
		// Make sure the resource container is open..
		Docs.expandEndpointListForResource(resource);

		$('li#resource_' + Docs.escapeResourceName(resource) + ' li.operation div.content').each(function() {
			Docs.collapseOperation($(this));
		});
	},

	escapeResourceName: function(resource) {
		return resource.replace(/[!""#$%&'()*+,.\/:;<=>?@\[\\\]\^`{|}~]/g, ""\\$&"");
	},

	expandOperation: function(elem) {
		elem.slideDown();
	},

	collapseOperation: function(elem) {
		elem.slideUp();
	}
};",TRUE,,3909
3888,InitialSO.csv3888.txt,InitialGit.csv3888.txt,5,"rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
 UNQUITED_LITERAL rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
str = '""';
 NAME's regex regex ([^/]|(?<!\\)(?<=\\)/)*
 / \/ \\/     case 'UNQUOTED_LITERAL': 
    case 'QUOTED_LITERAL': {
        this._js =  ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")"";
        break;
    }
 var clazz = function() {
    if (clazz.__) return delete(clazz.__);
    this.constructor = clazz;
    if(constructor)
        constructor.apply(this, arguments);
};
 (keyword, const), (id, ructor) inherits in herits ","rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
 UNQUITED_LITERAL rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
str = '""';
 NAME's regex regex ([^/]|(?<!\\)(?<=\\)/)*
 / \/ \\/     case 'UNQUOTED_LITERAL': 
    case 'QUOTED_LITERAL': {
        this._js =  ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")"";
        break;
    }
 var clazz = function() {
    if (clazz.__) return delete(clazz.__);
    this.constructor = clazz;
    if(constructor)
        constructor.apply(this, arguments);
};
 (keyword, const), (id, ructor) inherits in herits ",TRUE,"# -*- coding: utf-8 -*-
""""""Tests for jslex.""""""
# originally from https://bitbucket.org/ned/jslex
from __future__ import unicode_literals

from django.test import TestCase
from django.utils.jslex import JsLexer, prepare_js_for_gettext


class JsTokensTest(TestCase):
    LEX_CASES = [
        # ids
        (""a ABC $ _ a123"", [""id a"", ""id ABC"", ""id $"", ""id _"", ""id a123""]),
        (""\\u1234 abc\\u0020 \\u0065_\\u0067"", [""id \\u1234"", ""id abc\\u0020"", ""id \\u0065_\\u0067""]),
        # numbers
        (""123 1.234 0.123e-3 0 1E+40 1e1 .123"", [""dnum 123"", ""dnum 1.234"", ""dnum 0.123e-3"", ""dnum 0"", ""dnum 1E+40"", ""dnum 1e1"", ""dnum .123""]),
        (""0x1 0xabCD 0XABcd"", [""hnum 0x1"", ""hnum 0xabCD"", ""hnum 0XABcd""]),
        (""010 0377 090"", [""onum 010"", ""onum 0377"", ""dnum 0"", ""dnum 90""]),
        (""0xa123ghi"", [""hnum 0xa123"", ""id ghi""]),
        # keywords
        (""function Function FUNCTION"", [""keyword function"", ""id Function"", ""id FUNCTION""]),
        (""const constructor in inherits"", [""keyword const"", ""id constructor"", ""keyword in"", ""id inherits""]),
        (""true true_enough"", [""reserved true"", ""id true_enough""]),
        # strings
        (''' 'hello' ""hello"" ''', [""string 'hello'"", 'string ""hello""']),
        (r"""""" 'don\'t' ""don\""t"" '""' ""'"" '\'' ""\"""" """""",
         [r""""""string 'don\'t'"""""", r'''string ""don\""t""''', r""""""string '""'"""""", r'''string ""'""''', r""""""string '\''"""""", r'''string ""\""""''']),
        (r'""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""', [r'string ""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""']),
        # comments
        (""a//b"", [""id a"", ""linecomment //b""]),
        (""/****/a/=2//hello"", [""comment /****/"", ""id a"", ""punct /="", ""dnum 2"", ""linecomment //hello""]),
        (""/*\n * Header\n */\na=1;"", [""comment /*\n * Header\n */"", ""id a"", ""punct ="", ""dnum 1"", ""punct ;""]),
        # punctuation
        (""a+++b"", [""id a"", ""punct ++"", ""punct +"", ""id b""]),
        # regex
        (r""a=/a*/,1"", [""id a"", ""punct ="", ""regex /a*/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*[^/]+/,1"", [""id a"", ""punct ="", ""regex /a*[^/]+/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*\[^/,1"", [""id a"", ""punct ="", r""regex /a*\[^/"", ""punct ,"", ""dnum 1""]),
        (r""a=/\//,1"", [""id a"", ""punct ="", r""regex /\//"", ""punct ,"", ""dnum 1""]),

        # next two are from http://www.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions
        (""""""for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct :"", ""regex /x:3;x<5;y</g"", ""punct /"", ""id i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),
        (""""""for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct /"", ""id x"", ""punct :"", ""dnum 3"", ""punct ;"", ""id x"", ""punct <"", ""dnum 5"",
            ""punct ;"", ""id y"", ""punct <"", ""regex /g/i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),

        # Various ""illegal"" regexes that are valid according to the std.
        (r""""""/????/, /++++/, /[----]/ """""", [""regex /????/"", ""punct ,"", ""regex /++++/"", ""punct ,"", ""regex /[----]/""]),

        # Stress cases from http://stackoverflow.com/questions/5533925/what-javascript-constructs-does-jslex-incorrectly-lex/5573409#5573409
        (r""""""/\[/"""""", [r""""""regex /\[/""""""]),
        (r""""""/[i]/"""""", [r""""""regex /[i]/""""""]),
        (r""""""/[\]]/"""""", [r""""""regex /[\]]/""""""]),
        (r""""""/a[\]]/"""""", [r""""""regex /a[\]]/""""""]),
        (r""""""/a[\]]b/"""""", [r""""""regex /a[\]]b/""""""]),
        (r""""""/[\]/]/gi"""""", [r""""""regex /[\]/]/gi""""""]),
        (r""""""/\[[^\]]+\]/gi"""""", [r""""""regex /\[[^\]]+\]/gi""""""]),
        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
        """""",
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""", ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",
         ""punct }"", ""punct ;""
         ]),

        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
            str = '""';
        """""",
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""", ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",
         ""punct }"", ""punct ;"",
         ""id str"", ""punct ="", """"""string '""'"""""", ""punct ;"",
         ]),

        (r"""""" this._js = ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")""; """""",
         [""keyword this"", ""punct ."", ""id _js"", ""punct ="", r'''string ""e.str(\""""''', ""punct +"", ""keyword this"", ""punct ."",
          ""id value"", ""punct ."", ""id replace"", ""punct ("", r""regex /\\/g"", ""punct ,"", r'string ""\\\\""', ""punct )"",
          ""punct ."", ""id replace"", ""punct ("", r'regex /""/g', ""punct ,"", r'string ""\\\""""', ""punct )"", ""punct +"",
          r'string ""\"")""', ""punct ;""]),
    ]


def make_function(input, toks):
    def test_func(self):
        lexer = JsLexer()
        result = [""%s %s"" % (name, tok) for name, tok in lexer.lex(input) if name != 'ws']
        self.assertListEqual(result, toks)
    return test_func

for i, (input, toks) in enumerate(JsTokensTest.LEX_CASES):
    setattr(JsTokensTest, ""test_case_%d"" % i, make_function(input, toks))


GETTEXT_CASES = (
    (
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """""",
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """"""
    ), (
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """""",
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """"""
    ), (
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """""",
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """"""
    ), (
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = 'He\x23llo \'th/foo/ere\'';
            s = 'slash quote \"", just quote ""';
        """""",
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = ""He\x23llo \'th/foo/ere\'"";
            s = ""slash quote \"", just quote \"""";
        """"""
    ), (
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";/hello/;
        """""",
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";""REGEX"";
        """"""
    ), (
        r""""""
            var regex = /pattern/;
            var regex2 = /matter/gm;
            var regex3 = /[*/]+/gm.foo(""hey"");
        """""",
        r""""""
            var regex = ""REGEX"";
            var regex2 = ""REGEX"";
            var regex3 = ""REGEX"".foo(""hey"");
        """"""
    ), (
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}
        """""",
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:""REGEX""/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y<""REGEX"") {xyz(x++);}
        """"""
    ), (
        """"""
            \\u1234xyz = gettext('Hello there');
        """""", r""""""
            Uu1234xyz = gettext(""Hello there"");
        """"""
    )
)


class JsToCForGettextTest(TestCase):
    pass


def make_function(js, c):
    def test_func(self):
        self.assertMultiLineEqual(prepare_js_for_gettext(js), c)
    return test_func

for i, pair in enumerate(GETTEXT_CASES):
    setattr(JsToCForGettextTest, ""test_case_%d"" % i, make_function(*pair))
","# -*- coding: utf-8 -*-
""""""Tests for jslex.""""""
# originally from https://bitbucket.org/ned/jslex
from __future__ import unicode_literals

from django.test import TestCase
from django.utils.jslex import JsLexer, prepare_js_for_gettext


class JsTokensTest(TestCase):
    LEX_CASES = [
        # ids
        (""a ABC $ _ a123"", [""id a"", ""id ABC"", ""id $"", ""id _"", ""id a123""]),
        (""\\u1234 abc\\u0020 \\u0065_\\u0067"", [""id \\u1234"", ""id abc\\u0020"", ""id \\u0065_\\u0067""]),
        # numbers
        (""123 1.234 0.123e-3 0 1E+40 1e1 .123"", [""dnum 123"", ""dnum 1.234"", ""dnum 0.123e-3"", ""dnum 0"", ""dnum 1E+40"", ""dnum 1e1"", ""dnum .123""]),
        (""0x1 0xabCD 0XABcd"", [""hnum 0x1"", ""hnum 0xabCD"", ""hnum 0XABcd""]),
        (""010 0377 090"", [""onum 010"", ""onum 0377"", ""dnum 0"", ""dnum 90""]),
        (""0xa123ghi"", [""hnum 0xa123"", ""id ghi""]),
        # keywords
        (""function Function FUNCTION"", [""keyword function"", ""id Function"", ""id FUNCTION""]),
        (""const constructor in inherits"", [""keyword const"", ""id constructor"", ""keyword in"", ""id inherits""]),
        (""true true_enough"", [""reserved true"", ""id true_enough""]),
        # strings
        (''' 'hello' ""hello"" ''', [""string 'hello'"", 'string ""hello""']),
        (r"""""" 'don\'t' ""don\""t"" '""' ""'"" '\'' ""\"""" """""",
         [r""""""string 'don\'t'"""""", r'''string ""don\""t""''', r""""""string '""'"""""", r'''string ""'""''', r""""""string '\''"""""", r'''string ""\""""''']),
        (r'""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""', [r'string ""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""']),
        # comments
        (""a//b"", [""id a"", ""linecomment //b""]),
        (""/****/a/=2//hello"", [""comment /****/"", ""id a"", ""punct /="", ""dnum 2"", ""linecomment //hello""]),
        (""/*\n * Header\n */\na=1;"", [""comment /*\n * Header\n */"", ""id a"", ""punct ="", ""dnum 1"", ""punct ;""]),
        # punctuation
        (""a+++b"", [""id a"", ""punct ++"", ""punct +"", ""id b""]),
        # regex
        (r""a=/a*/,1"", [""id a"", ""punct ="", ""regex /a*/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*[^/]+/,1"", [""id a"", ""punct ="", ""regex /a*[^/]+/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*\[^/,1"", [""id a"", ""punct ="", r""regex /a*\[^/"", ""punct ,"", ""dnum 1""]),
        (r""a=/\//,1"", [""id a"", ""punct ="", r""regex /\//"", ""punct ,"", ""dnum 1""]),

        # next two are from http://www.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions
        (""""""for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct :"", ""regex /x:3;x<5;y</g"", ""punct /"", ""id i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),
        (""""""for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct /"", ""id x"", ""punct :"", ""dnum 3"", ""punct ;"", ""id x"", ""punct <"", ""dnum 5"",
            ""punct ;"", ""id y"", ""punct <"", ""regex /g/i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),

        # Various ""illegal"" regexes that are valid according to the std.
        (r""""""/????/, /++++/, /[----]/ """""", [""regex /????/"", ""punct ,"", ""regex /++++/"", ""punct ,"", ""regex /[----]/""]),

        # Stress cases from http://stackoverflow.com/questions/5533925/what-javascript-constructs-does-jslex-incorrectly-lex/5573409#5573409
        (r""""""/\[/"""""", [r""""""regex /\[/""""""]),
        (r""""""/[i]/"""""", [r""""""regex /[i]/""""""]),
        (r""""""/[\]]/"""""", [r""""""regex /[\]]/""""""]),
        (r""""""/a[\]]/"""""", [r""""""regex /a[\]]/""""""]),
        (r""""""/a[\]]b/"""""", [r""""""regex /a[\]]b/""""""]),
        (r""""""/[\]/]/gi"""""", [r""""""regex /[\]/]/gi""""""]),
        (r""""""/\[[^\]]+\]/gi"""""", [r""""""regex /\[[^\]]+\]/gi""""""]),
        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
        """""",
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""", ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",
         ""punct }"", ""punct ;""
         ]),

        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
            str = '""';
        """""",
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""", ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",
         ""punct }"", ""punct ;"",
         ""id str"", ""punct ="", """"""string '""'"""""", ""punct ;"",
         ]),

        (r"""""" this._js = ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")""; """""",
         [""keyword this"", ""punct ."", ""id _js"", ""punct ="", r'''string ""e.str(\""""''', ""punct +"", ""keyword this"", ""punct ."",
          ""id value"", ""punct ."", ""id replace"", ""punct ("", r""regex /\\/g"", ""punct ,"", r'string ""\\\\""', ""punct )"",
          ""punct ."", ""id replace"", ""punct ("", r'regex /""/g', ""punct ,"", r'string ""\\\""""', ""punct )"", ""punct +"",
          r'string ""\"")""', ""punct ;""]),
    ]


def make_function(input, toks):
    def test_func(self):
        lexer = JsLexer()
        result = [""%s %s"" % (name, tok) for name, tok in lexer.lex(input) if name != 'ws']
        self.assertListEqual(result, toks)
    return test_func

for i, (input, toks) in enumerate(JsTokensTest.LEX_CASES):
    setattr(JsTokensTest, ""test_case_%d"" % i, make_function(input, toks))


GETTEXT_CASES = (
    (
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """""",
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """"""
    ), (
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """""",
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """"""
    ), (
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """""",
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """"""
    ), (
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = 'He\x23llo \'th/foo/ere\'';
            s = 'slash quote \"", just quote ""';
        """""",
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = ""He\x23llo \'th/foo/ere\'"";
            s = ""slash quote \"", just quote \"""";
        """"""
    ), (
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";/hello/;
        """""",
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";""REGEX"";
        """"""
    ), (
        r""""""
            var regex = /pattern/;
            var regex2 = /matter/gm;
            var regex3 = /[*/]+/gm.foo(""hey"");
        """""",
        r""""""
            var regex = ""REGEX"";
            var regex2 = ""REGEX"";
            var regex3 = ""REGEX"".foo(""hey"");
        """"""
    ), (
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}
        """""",
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:""REGEX""/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y<""REGEX"") {xyz(x++);}
        """"""
    ), (
        """"""
            \\u1234xyz = gettext('Hello there');
        """""", r""""""
            Uu1234xyz = gettext(""Hello there"");
        """"""
    )
)


class JsToCForGettextTest(TestCase):
    pass


def make_function(js, c):
    def test_func(self):
        self.assertMultiLineEqual(prepare_js_for_gettext(js), c)
    return test_func

for i, pair in enumerate(GETTEXT_CASES):
    setattr(JsToCForGettextTest, ""test_case_%d"" % i, make_function(*pair))
",TRUE,,3910
3889,InitialSO.csv3889.txt,InitialGit.csv3889.txt,5,"rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
 UNQUITED_LITERAL rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
str = '""';
 NAME's regex regex ([^/]|(?<!\\)(?<=\\)/)*
 / \/ \\/     case 'UNQUOTED_LITERAL': 
    case 'QUOTED_LITERAL': {
        this._js =  ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")"";
        break;
    }
 var clazz = function() {
    if (clazz.__) return delete(clazz.__);
    this.constructor = clazz;
    if(constructor)
        constructor.apply(this, arguments);
};
 (keyword, const), (id, ructor) inherits in herits ","rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
 UNQUITED_LITERAL rexl.re = {
  NAME: /^(?!\d)(?:\w)+|^""(?:[^""]|"""")+""/,
  UNQUOTED_LITERAL: /^@(?:(?!\d)(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
  QUOTED_LITERAL: /^'(?:[^']|'')*'/,
  NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
  SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
};
str = '""';
 NAME's regex regex ([^/]|(?<!\\)(?<=\\)/)*
 / \/ \\/     case 'UNQUOTED_LITERAL': 
    case 'QUOTED_LITERAL': {
        this._js =  ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")"";
        break;
    }
 var clazz = function() {
    if (clazz.__) return delete(clazz.__);
    this.constructor = clazz;
    if(constructor)
        constructor.apply(this, arguments);
};
 (keyword, const), (id, ructor) inherits in herits ",TRUE,"# -*- coding: utf-8 -*-
""""""Tests for jslex.""""""
# originally from https://bitbucket.org/ned/jslex
from __future__ import unicode_literals

from django.test import SimpleTestCase
from django.utils.jslex import JsLexer, prepare_js_for_gettext


class JsTokensTest(SimpleTestCase):
    LEX_CASES = [
        # ids
        (""a ABC $ _ a123"", [""id a"", ""id ABC"", ""id $"", ""id _"", ""id a123""]),
        (""\\u1234 abc\\u0020 \\u0065_\\u0067"", [""id \\u1234"", ""id abc\\u0020"", ""id \\u0065_\\u0067""]),
        # numbers
        (""123 1.234 0.123e-3 0 1E+40 1e1 .123"", [
            ""dnum 123"", ""dnum 1.234"", ""dnum 0.123e-3"", ""dnum 0"", ""dnum 1E+40"",
            ""dnum 1e1"", ""dnum .123"",
        ]),
        (""0x1 0xabCD 0XABcd"", [""hnum 0x1"", ""hnum 0xabCD"", ""hnum 0XABcd""]),
        (""010 0377 090"", [""onum 010"", ""onum 0377"", ""dnum 0"", ""dnum 90""]),
        (""0xa123ghi"", [""hnum 0xa123"", ""id ghi""]),
        # keywords
        (""function Function FUNCTION"", [""keyword function"", ""id Function"", ""id FUNCTION""]),
        (""const constructor in inherits"", [""keyword const"", ""id constructor"", ""keyword in"", ""id inherits""]),
        (""true true_enough"", [""reserved true"", ""id true_enough""]),
        # strings
        (''' 'hello' ""hello"" ''', [""string 'hello'"", 'string ""hello""']),
        (r"""""" 'don\'t' ""don\""t"" '""' ""'"" '\'' ""\"""" """""", [
            r""""""string 'don\'t'"""""", r'''string ""don\""t""''', r""""""string '""'"""""",
            r'''string ""'""''', r""""""string '\''"""""", r'''string ""\""""'''
        ]),
        (r'""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""', [r'string ""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""']),
        # comments
        (""a//b"", [""id a"", ""linecomment //b""]),
        (""/****/a/=2//hello"", [""comment /****/"", ""id a"", ""punct /="", ""dnum 2"", ""linecomment //hello""]),
        (""/*\n * Header\n */\na=1;"", [""comment /*\n * Header\n */"", ""id a"", ""punct ="", ""dnum 1"", ""punct ;""]),
        # punctuation
        (""a+++b"", [""id a"", ""punct ++"", ""punct +"", ""id b""]),
        # regex
        (r""a=/a*/,1"", [""id a"", ""punct ="", ""regex /a*/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*[^/]+/,1"", [""id a"", ""punct ="", ""regex /a*[^/]+/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*\[^/,1"", [""id a"", ""punct ="", r""regex /a*\[^/"", ""punct ,"", ""dnum 1""]),
        (r""a=/\//,1"", [""id a"", ""punct ="", r""regex /\//"", ""punct ,"", ""dnum 1""]),

        # next two are from http://www.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions
        (""""""for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct :"", ""regex /x:3;x<5;y</g"", ""punct /"", ""id i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),
        (""""""for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct /"", ""id x"", ""punct :"", ""dnum 3"", ""punct ;"", ""id x"", ""punct <"", ""dnum 5"",
            ""punct ;"", ""id y"", ""punct <"", ""regex /g/i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),

        # Various ""illegal"" regexes that are valid according to the std.
        (r""""""/????/, /++++/, /[----]/ """""", [""regex /????/"", ""punct ,"", ""regex /++++/"", ""punct ,"", ""regex /[----]/""]),

        # Stress cases from http://stackoverflow.com/questions/5533925/what-javascript-constructs-does-jslex-incorrectly-lex/5573409#5573409  # NOQA
        (r""""""/\[/"""""", [r""""""regex /\[/""""""]),
        (r""""""/[i]/"""""", [r""""""regex /[i]/""""""]),
        (r""""""/[\]]/"""""", [r""""""regex /[\]]/""""""]),
        (r""""""/a[\]]/"""""", [r""""""regex /a[\]]/""""""]),
        (r""""""/a[\]]b/"""""", [r""""""regex /a[\]]b/""""""]),
        (r""""""/[\]/]/gi"""""", [r""""""regex /[\]/]/gi""""""]),
        (r""""""/\[[^\]]+\]/gi"""""", [r""""""regex /\[[^\]]+\]/gi""""""]),
        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
        """""",  # NOQA
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""",
         ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",  # NOQA
         ""punct }"", ""punct ;""
         ]),

        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
            str = '""';
        """""",  # NOQA
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""",
         ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",   # NOQA
         ""punct }"", ""punct ;"",
         ""id str"", ""punct ="", """"""string '""'"""""", ""punct ;"",
         ]),

        (r"""""" this._js = ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")""; """""",
         [""keyword this"", ""punct ."", ""id _js"", ""punct ="", r'''string ""e.str(\""""''', ""punct +"", ""keyword this"",
          ""punct ."", ""id value"", ""punct ."", ""id replace"", ""punct ("", r""regex /\\/g"", ""punct ,"", r'string ""\\\\""',
          ""punct )"",
          ""punct ."", ""id replace"", ""punct ("", r'regex /""/g', ""punct ,"", r'string ""\\\""""', ""punct )"", ""punct +"",
          r'string ""\"")""', ""punct ;""]),
    ]


def make_function(input, toks):
    def test_func(self):
        lexer = JsLexer()
        result = [""%s %s"" % (name, tok) for name, tok in lexer.lex(input) if name != 'ws']
        self.assertListEqual(result, toks)
    return test_func

for i, (input, toks) in enumerate(JsTokensTest.LEX_CASES):
    setattr(JsTokensTest, ""test_case_%d"" % i, make_function(input, toks))


GETTEXT_CASES = (
    (
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """""",
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """"""
    ), (
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """""",
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """"""
    ), (
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """""",
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """"""
    ), (
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = 'He\x23llo \'th/foo/ere\'';
            s = 'slash quote \"", just quote ""';
        """""",
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = ""He\x23llo \'th/foo/ere\'"";
            s = ""slash quote \"", just quote \"""";
        """"""
    ), (
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";/hello/;
        """""",
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";""REGEX"";
        """"""
    ), (
        r""""""
            var regex = /pattern/;
            var regex2 = /matter/gm;
            var regex3 = /[*/]+/gm.foo(""hey"");
        """""",
        r""""""
            var regex = ""REGEX"";
            var regex2 = ""REGEX"";
            var regex3 = ""REGEX"".foo(""hey"");
        """"""
    ), (
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}
        """""",
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:""REGEX""/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y<""REGEX"") {xyz(x++);}
        """"""
    ), (
        """"""
            \\u1234xyz = gettext('Hello there');
        """""", r""""""
            Uu1234xyz = gettext(""Hello there"");
        """"""
    )
)


class JsToCForGettextTest(SimpleTestCase):
    pass


def make_function(js, c):
    def test_func(self):
        self.assertMultiLineEqual(prepare_js_for_gettext(js), c)
    return test_func

for i, pair in enumerate(GETTEXT_CASES):
    setattr(JsToCForGettextTest, ""test_case_%d"" % i, make_function(*pair))
","# -*- coding: utf-8 -*-
""""""Tests for jslex.""""""
# originally from https://bitbucket.org/ned/jslex
from __future__ import unicode_literals

from django.test import SimpleTestCase
from django.utils.jslex import JsLexer, prepare_js_for_gettext


class JsTokensTest(SimpleTestCase):
    LEX_CASES = [
        # ids
        (""a ABC $ _ a123"", [""id a"", ""id ABC"", ""id $"", ""id _"", ""id a123""]),
        (""\\u1234 abc\\u0020 \\u0065_\\u0067"", [""id \\u1234"", ""id abc\\u0020"", ""id \\u0065_\\u0067""]),
        # numbers
        (""123 1.234 0.123e-3 0 1E+40 1e1 .123"", [
            ""dnum 123"", ""dnum 1.234"", ""dnum 0.123e-3"", ""dnum 0"", ""dnum 1E+40"",
            ""dnum 1e1"", ""dnum .123"",
        ]),
        (""0x1 0xabCD 0XABcd"", [""hnum 0x1"", ""hnum 0xabCD"", ""hnum 0XABcd""]),
        (""010 0377 090"", [""onum 010"", ""onum 0377"", ""dnum 0"", ""dnum 90""]),
        (""0xa123ghi"", [""hnum 0xa123"", ""id ghi""]),
        # keywords
        (""function Function FUNCTION"", [""keyword function"", ""id Function"", ""id FUNCTION""]),
        (""const constructor in inherits"", [""keyword const"", ""id constructor"", ""keyword in"", ""id inherits""]),
        (""true true_enough"", [""reserved true"", ""id true_enough""]),
        # strings
        (''' 'hello' ""hello"" ''', [""string 'hello'"", 'string ""hello""']),
        (r"""""" 'don\'t' ""don\""t"" '""' ""'"" '\'' ""\"""" """""", [
            r""""""string 'don\'t'"""""", r'''string ""don\""t""''', r""""""string '""'"""""",
            r'''string ""'""''', r""""""string '\''"""""", r'''string ""\""""'''
        ]),
        (r'""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""', [r'string ""ƃuıxǝ⅂ ʇdıɹɔsɐʌɐſ\""""']),
        # comments
        (""a//b"", [""id a"", ""linecomment //b""]),
        (""/****/a/=2//hello"", [""comment /****/"", ""id a"", ""punct /="", ""dnum 2"", ""linecomment //hello""]),
        (""/*\n * Header\n */\na=1;"", [""comment /*\n * Header\n */"", ""id a"", ""punct ="", ""dnum 1"", ""punct ;""]),
        # punctuation
        (""a+++b"", [""id a"", ""punct ++"", ""punct +"", ""id b""]),
        # regex
        (r""a=/a*/,1"", [""id a"", ""punct ="", ""regex /a*/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*[^/]+/,1"", [""id a"", ""punct ="", ""regex /a*[^/]+/"", ""punct ,"", ""dnum 1""]),
        (r""a=/a*\[^/,1"", [""id a"", ""punct ="", r""regex /a*\[^/"", ""punct ,"", ""dnum 1""]),
        (r""a=/\//,1"", [""id a"", ""punct ="", r""regex /\//"", ""punct ,"", ""dnum 1""]),

        # next two are from http://www.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions
        (""""""for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct :"", ""regex /x:3;x<5;y</g"", ""punct /"", ""id i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),
        (""""""for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}"""""",
            [""keyword for"", ""punct ("", ""keyword var"", ""id x"", ""punct ="", ""id a"", ""keyword in"",
            ""id foo"", ""punct &&"", 'string ""</x>""', ""punct ||"", ""id mot"", ""punct ?"", ""id z"",
            ""punct /"", ""id x"", ""punct :"", ""dnum 3"", ""punct ;"", ""id x"", ""punct <"", ""dnum 5"",
            ""punct ;"", ""id y"", ""punct <"", ""regex /g/i"", ""punct )"", ""punct {"",
            ""id xyz"", ""punct ("", ""id x"", ""punct ++"", ""punct )"", ""punct ;"", ""punct }""]),

        # Various ""illegal"" regexes that are valid according to the std.
        (r""""""/????/, /++++/, /[----]/ """""", [""regex /????/"", ""punct ,"", ""regex /++++/"", ""punct ,"", ""regex /[----]/""]),

        # Stress cases from http://stackoverflow.com/questions/5533925/what-javascript-constructs-does-jslex-incorrectly-lex/5573409#5573409  # NOQA
        (r""""""/\[/"""""", [r""""""regex /\[/""""""]),
        (r""""""/[i]/"""""", [r""""""regex /[i]/""""""]),
        (r""""""/[\]]/"""""", [r""""""regex /[\]]/""""""]),
        (r""""""/a[\]]/"""""", [r""""""regex /a[\]]/""""""]),
        (r""""""/a[\]]b/"""""", [r""""""regex /a[\]]b/""""""]),
        (r""""""/[\]/]/gi"""""", [r""""""regex /[\]/]/gi""""""]),
        (r""""""/\[[^\]]+\]/gi"""""", [r""""""regex /\[[^\]]+\]/gi""""""]),
        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
        """""",  # NOQA
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""",
         ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",  # NOQA
         ""punct }"", ""punct ;""
         ]),

        (""""""
            rexl.re = {
            NAME: /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/,
            UNQUOTED_LITERAL: /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/,
            QUOTED_LITERAL: /^'(?:[^']|'')*'/,
            NUMERIC_LITERAL: /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/,
            SYMBOL: /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/
            };
            str = '""';
        """""",  # NOQA
        [""id rexl"", ""punct ."", ""id re"", ""punct ="", ""punct {"",
         ""id NAME"", ""punct :"", r""""""regex /^(?![0-9])(?:\w)+|^""(?:[^""]|"""")+""/"""""", ""punct ,"",
         ""id UNQUOTED_LITERAL"", ""punct :"", r""""""regex /^@(?:(?![0-9])(?:\w|\:)+|^""(?:[^""]|"""")+"")\[[^\]]+\]/"""""",
         ""punct ,"",
         ""id QUOTED_LITERAL"", ""punct :"", r""""""regex /^'(?:[^']|'')*'/"""""", ""punct ,"",
         ""id NUMERIC_LITERAL"", ""punct :"", r""""""regex /^[0-9]+(?:\.[0-9]*(?:[eE][-+][0-9]+)?)?/"""""", ""punct ,"",
         ""id SYMBOL"", ""punct :"", r""""""regex /^(?:==|=|<>|<=|<|>=|>|!~~|!~|~~|~|!==|!=|!~=|!~|!|&|\||\.|\:|,|\(|\)|\[|\]|\{|\}|\?|\:|;|@|\^|\/\+|\/|\*|\+|-)/"""""",   # NOQA
         ""punct }"", ""punct ;"",
         ""id str"", ""punct ="", """"""string '""'"""""", ""punct ;"",
         ]),

        (r"""""" this._js = ""e.str(\"""" + this.value.replace(/\\/g, ""\\\\"").replace(/""/g, ""\\\"""") + ""\"")""; """""",
         [""keyword this"", ""punct ."", ""id _js"", ""punct ="", r'''string ""e.str(\""""''', ""punct +"", ""keyword this"",
          ""punct ."", ""id value"", ""punct ."", ""id replace"", ""punct ("", r""regex /\\/g"", ""punct ,"", r'string ""\\\\""',
          ""punct )"",
          ""punct ."", ""id replace"", ""punct ("", r'regex /""/g', ""punct ,"", r'string ""\\\""""', ""punct )"", ""punct +"",
          r'string ""\"")""', ""punct ;""]),
    ]


def make_function(input, toks):
    def test_func(self):
        lexer = JsLexer()
        result = [""%s %s"" % (name, tok) for name, tok in lexer.lex(input) if name != 'ws']
        self.assertListEqual(result, toks)
    return test_func

for i, (input, toks) in enumerate(JsTokensTest.LEX_CASES):
    setattr(JsTokensTest, ""test_case_%d"" % i, make_function(input, toks))


GETTEXT_CASES = (
    (
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """""",
        r""""""
            a = 1; /* /[0-9]+/ */
            b = 0x2a0b / 1; // /[0-9]+/
            c = 3;
        """"""
    ), (
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """""",
        r""""""
            a = 1.234e-5;
            /*
             * /[0-9+/
             */
            b = .0123;
        """"""
    ), (
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """""",
        r""""""
            x = y / z;
            alert(gettext(""hello""));
            x /= 3;
        """"""
    ), (
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = 'He\x23llo \'th/foo/ere\'';
            s = 'slash quote \"", just quote ""';
        """""",
        r""""""
            s = ""Hello \""th/foo/ere\"""";
            s = ""He\x23llo \'th/foo/ere\'"";
            s = ""slash quote \"", just quote \"""";
        """"""
    ), (
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";/hello/;
        """""",
        r""""""
            s = ""Line continuation\
            continued /hello/ still the string"";""REGEX"";
        """"""
    ), (
        r""""""
            var regex = /pattern/;
            var regex2 = /matter/gm;
            var regex3 = /[*/]+/gm.foo(""hey"");
        """""",
        r""""""
            var regex = ""REGEX"";
            var regex2 = ""REGEX"";
            var regex3 = ""REGEX"".foo(""hey"");
        """"""
    ), (
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:/x:3;x<5;y</g/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y</g/i) {xyz(x++);}
        """""",
        r""""""
            for (var x = a in foo && ""</x>"" || mot ? z:""REGEX""/i) {xyz(x++);}
            for (var x = a in foo && ""</x>"" || mot ? z/x:3;x<5;y<""REGEX"") {xyz(x++);}
        """"""
    ), (
        """"""
            \\u1234xyz = gettext('Hello there');
        """""", r""""""
            Uu1234xyz = gettext(""Hello there"");
        """"""
    )
)


class JsToCForGettextTest(SimpleTestCase):
    pass


def make_function(js, c):
    def test_func(self):
        self.assertMultiLineEqual(prepare_js_for_gettext(js), c)
    return test_func

for i, pair in enumerate(GETTEXT_CASES):
    setattr(JsToCForGettextTest, ""test_case_%d"" % i, make_function(*pair))
",TRUE,,3911
3893,InitialSO.csv3893.txt,InitialGit.csv3893.txt,12,"function componentToHex(c) {
    var hex = c.toString(16);
    return hex.length == 1 ? ""0"" + hex : hex;
}
    
function rgbToHex(r, g, b) {
    return ""#"" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

alert( rgbToHex(0, 51, 255) ); // #0033ff
 function hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

alert( hexToRgb(""#0033ff"").g ); // ""51"";
 rgbToHex() function rgbToHex(r, g, b) {
    return ""#"" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}
 hexToRgb() function hexToRgb(hex) {
    // Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
        return r + r + g + g + b + b;
    });

    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

alert( hexToRgb(""#0033ff"").g ); // ""51"";
alert( hexToRgb(""#03f"").g ); // ""51"";
 ","rgbToHex r g b function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? ""0"" + hex : hex;
}

function rgbToHex(r, g, b) {
  return ""#"" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

alert(rgbToHex(0, 51, 255)); // #0033ff function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}

alert(hexToRgb(""#0033ff"").g); // ""51""; rgbToHex() function rgbToHex(r, g, b) {
  return ""#"" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

alert(rgbToHex(0, 51, 255)); // #0033ff hexToRgb() function hexToRgb(hex) {
  // Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
    return r + r + g + g + b + b;
  });

  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}

alert(hexToRgb(""#0033ff"").g); // ""51"";
alert(hexToRgb(""#03f"").g); // ""51""; ",FALSE,"/* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* MIT license: http://opensource.org/licenses/MIT
/* GitHub : https://github.com/VincentGarreau/particles.js
/* How to use? : Check the GitHub README
/* v1.0.3
/* ----------------------------------------------- */

function launchParticlesJS(tag_id, params){

  var canvas_el = document.querySelector('#'+tag_id+' > canvas');

  /* particles.js variables with default values */
  pJS = {
    canvas: {
      el: canvas_el,
      w: canvas_el.offsetWidth,
      h: canvas_el.offsetHeight
    },
    particles: {
      color: '#fff',
      shape: 'circle',
      opacity: 1,
      size: 2.5,
      size_random: true,
      nb: 200,
      line_linked: {
        enable_auto: true,
        distance: 100,
        color: '#fff',
        opacity: 1,
        width: 1,
        condensed_mode: {
          enable: true,
          rotateX: 65000,
          rotateY: 65000
        }
      },
      anim: {
        enable: true,
          speed: 1
      },
      array: []
    },
    interactivity: {
      enable: true,
      mouse: {
        distance: 100
      },
      detect_on: 'canvas',
      mode: 'grab',
      line_linked: {
        opacity: 1
      },
      events: {
        onclick: {
          enable: true,
          mode: 'push',
          nb: 4
        }
      }
    },
    retina_detect: false,
    fn: {
      vendors:{
        interactivity: {}
      }
    }
  };

  /* params settings */
  if(params){
    if(params.particles){
      var paramsForParticles = params.particles;
      if(paramsForParticles.color) pJS.particles.color = paramsForParticles.color;
      if(paramsForParticles.shape) pJS.particles.shape = paramsForParticles.shape;
      if(paramsForParticles.opacity) pJS.particles.opacity = paramsForParticles.opacity;
      if(paramsForParticles.size) pJS.particles.size = paramsForParticles.size;
      if(paramsForParticles.size_random == false) pJS.particles.size_random = paramsForParticles.size_random;
      if(paramsForParticles.nb) pJS.particles.nb = paramsForParticles.nb;
      if(paramsForParticles.line_linked){
        var paramsForLineLinked = paramsForParticles.line_linked;
        if(paramsForLineLinked.enable_auto == false) pJS.particles.line_linked.enable_auto = paramsForLineLinked.enable_auto;
        if(paramsForLineLinked.distance) pJS.particles.line_linked.distance = paramsForLineLinked.distance;
        if(paramsForLineLinked.color) pJS.particles.line_linked.color = paramsForLineLinked.color;
        if(paramsForLineLinked.opacity) pJS.particles.line_linked.opacity = paramsForLineLinked.opacity;
        if(paramsForLineLinked.width) pJS.particles.line_linked.width = paramsForLineLinked.width;
        if(paramsForLineLinked.condensed_mode){
          var paramsForCondensedMode = paramsForLineLinked.condensed_mode;
          if(paramsForCondensedMode.enable == false) pJS.particles.line_linked.condensed_mode.enable = paramsForCondensedMode.enable;
          if(paramsForCondensedMode.rotateX) pJS.particles.line_linked.condensed_mode.rotateX = paramsForCondensedMode.rotateX;
          if(paramsForCondensedMode.rotateY) pJS.particles.line_linked.condensed_mode.rotateY = paramsForCondensedMode.rotateY;
        }
      }
      if(paramsForParticles.anim){
        var paramsForAnim = paramsForParticles.anim;
        if(paramsForAnim.enable == false) pJS.particles.anim.enable = paramsForAnim.enable;
        if(paramsForAnim.speed) pJS.particles.anim.speed = paramsForAnim.speed;
      }
    }
    if(params.interactivity){
      var paramsForInteractivity = params.interactivity;
      if(paramsForInteractivity.enable == false) pJS.interactivity.enable = paramsForInteractivity.enable;
      if(paramsForInteractivity.mouse){
        if(paramsForInteractivity.mouse.distance) pJS.interactivity.mouse.distance = paramsForInteractivity.mouse.distance;
      }
      if(paramsForInteractivity.detect_on) pJS.interactivity.detect_on = paramsForInteractivity.detect_on;
      if(paramsForInteractivity.mode) pJS.interactivity.mode = paramsForInteractivity.mode;
      if(paramsForInteractivity.line_linked){
        if(paramsForInteractivity.line_linked.opacity) pJS.interactivity.line_linked.opacity = paramsForInteractivity.line_linked.opacity;
      }
      if(paramsForInteractivity.events){
        var paramsForEvents = paramsForInteractivity.events;
        if(paramsForEvents.onclick){
          var paramsForOnclick = paramsForEvents.onclick;
          if(paramsForOnclick.enable == false) pJS.interactivity.events.onclick.enable = false;
          if(paramsForOnclick.mode != 'push') pJS.interactivity.events.onclick.mode = paramsForOnclick.mode;
          if(paramsForOnclick.nb) pJS.interactivity.events.onclick.nb = paramsForOnclick.nb;
        }
      }
    }
    pJS.retina_detect = params.retina_detect;
  }

  /* convert hex colors to rgb */
  pJS.particles.color_rgb = hexToRgb(pJS.particles.color);
  pJS.particles.line_linked.color_rgb_line = hexToRgb(pJS.particles.line_linked.color);

  /* detect retina */
  if(pJS.retina_detect && window.devicePixelRatio > 1){
    pJS.retina = true;
  
    pJS.canvas.pxratio = window.devicePixelRatio
    pJS.canvas.w = pJS.canvas.el.offsetWidth * pJS.canvas.pxratio;
    pJS.canvas.h = pJS.canvas.el.offsetHeight * pJS.canvas.pxratio;
    pJS.particles.anim.speed = pJS.particles.anim.speed * pJS.canvas.pxratio;
    pJS.particles.line_linked.distance = pJS.particles.line_linked.distance * pJS.canvas.pxratio;
    pJS.particles.line_linked.width = pJS.particles.line_linked.width * pJS.canvas.pxratio;
    pJS.interactivity.mouse.distance = pJS.interactivity.mouse.distance * pJS.canvas.pxratio;
  }


  /* ---------- CANVAS functions ------------ */

  pJS.fn.canvasInit = function(){
    pJS.canvas.ctx = pJS.canvas.el.getContext('2d');
  };

  pJS.fn.canvasSize = function(){
    pJS.canvas.el.width = pJS.canvas.w;
    pJS.canvas.el.height = pJS.canvas.h;

    window.onresize = function(){
      if(pJS){
        pJS.canvas.w = pJS.canvas.el.offsetWidth;
        pJS.canvas.h = pJS.canvas.el.offsetHeight;

        /* resize canvas */
        if(pJS.retina){
          pJS.canvas.w *= pJS.canvas.pxratio;
          pJS.canvas.h *= pJS.canvas.pxratio;
        }

        pJS.canvas.el.width = pJS.canvas.w;
        pJS.canvas.el.height = pJS.canvas.h;

        /* repaint canvas */
        pJS.fn.canvasPaint();
        if(!pJS.particles.anim.enable){
          pJS.fn.particlesRemove();
          pJS.fn.canvasRemove();
          launchParticles();
        }
      }
    }
  };

  pJS.fn.canvasPaint = function(){
    pJS.canvas.ctx.fillRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };

  pJS.fn.canvasRemove = function(){
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  }


  /* --------- PARTICLES functions ----------- */

  pJS.fn.particle = function(color, opacity, position){

    /* position */
    this.x = position ? position.x : Math.random() * pJS.canvas.w;
    this.y = position ? position.y : Math.random() * pJS.canvas.h;

    /* size */
    this.radius = (pJS.particles.size_random ? Math.random() : 1) * pJS.particles.size;
    if (pJS.retina) this.radius *= pJS.canvas.pxratio;

    /* color */
    this.color = color;

    /* opacity */
    this.opacity = opacity;

    /* animation - velocity for speed */
    this.vx = -.5 + Math.random();
    this.vy = -.5 + Math.random();

    /* draw function */
    this.draw = function(){
      pJS.canvas.ctx.fillStyle = 'rgba('+this.color.r+','+this.color.g+','+this.color.b+','+this.opacity+')';
      pJS.canvas.ctx.beginPath();

      switch(pJS.particles.shape){
        case 'circle':
          pJS.canvas.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
        break;

        case 'edge':
          pJS.canvas.ctx.rect(this.x, this.y, this.radius*2, this.radius*2);
        break;

        case 'triangle':
          pJS.canvas.ctx.moveTo(this.x,this.y-this.radius);
          pJS.canvas.ctx.lineTo(this.x+this.radius,this.y+this.radius);
          pJS.canvas.ctx.lineTo(this.x-this.radius,this.y+this.radius);
          pJS.canvas.ctx.closePath();
        break;
      }

      pJS.canvas.ctx.fill();
    }

  };

  pJS.fn.particlesCreate = function(){
    for(var i = 0; i < pJS.particles.nb; i++) {
      pJS.particles.array.push(new pJS.fn.particle(pJS.particles.color_rgb, pJS.particles.opacity));
    }
  };

  pJS.fn.particlesAnimate = function(){
    for(var i = 0; i < pJS.particles.array.length; i++){
      /* the particle */
      var p = pJS.particles.array[i];

      /* move the particle */
      p.x += p.vx * (pJS.particles.anim.speed/2);
      p.y += p.vy * (pJS.particles.anim.speed/2);

      /* change particle position if it is out of canvas */
      if(p.x - p.radius > pJS.canvas.w) p.x = p.radius;
      else if(p.x + p.radius < 0) p.x = pJS.canvas.w + p.radius;
      if(p.y - p.radius > pJS.canvas.h) p.y = p.radius;
      else if(p.y + p.radius < 0) p.y = pJS.canvas.h + p.radius;

      /* Check distance between each particle and mouse position */
      for(var j = i + 1; j < pJS.particles.array.length; j++){
        var p2 = pJS.particles.array[j];

        /* link particles if enable */
        if(pJS.particles.line_linked.enable_auto){
          pJS.fn.vendors.distanceParticles(p,p2);
        }

        /* set interactivity if enable */
        if(pJS.interactivity.enable){

          /* interactivity mode */
          switch(pJS.interactivity.mode){
            case 'grab':
              pJS.fn.vendors.interactivity.grabParticles(p,p2);
            break;
          }

        }


      }
    }
  };

  pJS.fn.particlesDraw = function(){
    /* clear canvas */
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);

    /* move particles */
    pJS.fn.particlesAnimate();

    /* draw each particle */
    for(var i = 0; i < pJS.particles.array.length; i++){
      var p = pJS.particles.array[i];
      p.draw('rgba('+p.color.r+','+p.color.g+','+p.color.b+','+p.opacity+')');
    }

  };

  pJS.fn.particlesRemove = function(){
    pJS.particles.array = [];
  };


  /* ---------- VENDORS functions ------------ */

  pJS.fn.vendors.distanceParticles = function(p1, p2){

    var dx = p1.x - p2.x,
      dy = p1.y - p2.y,
      dist = Math.sqrt(dx*dx + dy*dy);

    /* Check distance between particle and mouse mos */
    if(dist <= pJS.particles.line_linked.distance) {

      /* draw the line */
      var color_line = pJS.particles.line_linked.color_rgb_line;
      pJS.canvas.ctx.beginPath();
      pJS.canvas.ctx.strokeStyle = 'rgba('+color_line.r+','+color_line.g+','+color_line.b+','+ (pJS.particles.line_linked.opacity-dist/pJS.particles.line_linked.distance) +')';
      pJS.canvas.ctx.moveTo(p1.x, p1.y);
      pJS.canvas.ctx.lineTo(p2.x, p2.y);
      pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
      pJS.canvas.ctx.stroke();
      pJS.canvas.ctx.closePath();

      /* condensed particles */
      if(pJS.particles.line_linked.condensed_mode.enable){
        var dx = p1.x - p2.x,
            dy = p1.y - p2.y,
            ax = dx/(pJS.particles.line_linked.condensed_mode.rotateX*1000),
            ay = dy/(pJS.particles.line_linked.condensed_mode.rotateY*1000);
        p2.vx += ax;
        p2.vy += ay;
      }

    }
  };

  pJS.fn.vendors.interactivity.listeners = function(){

    /* init el */
    if(pJS.interactivity.detect_on == 'window'){
      var detect_el = window;
    }else{
      var detect_el = pJS.canvas.el;
    }

    /* el on mousemove */
    detect_el.onmousemove = function(e){

      if(detect_el == window){
        var pos_x = e.clientX,
            pos_y = e.clientY;
      }
      else{
        var pos_x = e.offsetX||e.clientX,
            pos_y = e.offsetY||e.clientY;
      }

      if(pJS){

        pJS.interactivity.mouse.pos_x = pos_x;
        pJS.interactivity.mouse.pos_y = pos_y;

        if(pJS.retina){
          pJS.interactivity.mouse.pos_x *= pJS.canvas.pxratio;
          pJS.interactivity.mouse.pos_y *= pJS.canvas.pxratio;
        }

        pJS.interactivity.status = 'mousemove';
      }

    };

    /* el on onmouseleave */
    detect_el.onmouseleave = function(e){

      if(pJS){
        pJS.interactivity.mouse.pos_x = 0;
        pJS.interactivity.mouse.pos_y = 0;
        pJS.interactivity.status = 'mouseleave';
      }

    };

    /* el on onclick */
    if(pJS.interactivity.events.onclick.enable){
      switch(pJS.interactivity.events.onclick.mode){
        case 'push':
          detect_el.onclick = function(e){
            if(pJS){
              for(var i = 0; i < pJS.interactivity.events.onclick.nb; i++){
                pJS.particles.array.push(
                  new pJS.fn.particle(
                    pJS.particles.color_rgb,
                    pJS.particles.opacity,
                    {
                      'x': pJS.interactivity.mouse.pos_x,
                      'y': pJS.interactivity.mouse.pos_y
                    }
                  )
                )
              }
            }
          }
        break;

        case 'remove':
          detect_el.onclick = function(e){
            pJS.particles.array.splice(0, pJS.interactivity.events.onclick.nb);
          }
        break;
      }
    }
  };


  pJS.fn.vendors.interactivity.grabParticles = function(p1, p2){
    var dx = p1.x - p2.x,
        dy = p1.y - p2.y,
        dist = Math.sqrt(dx*dx + dy*dy);

    var dx_mouse = p1.x - pJS.interactivity.mouse.pos_x,
        dy_mouse = p1.y - pJS.interactivity.mouse.pos_y,
        dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse);

    /* Check distance between 2 particles + Check distance between 1 particle and mouse position */
    if(dist <= pJS.particles.line_linked.distance && dist_mouse <= pJS.interactivity.mouse.distance && pJS.interactivity.status == 'mousemove'){
      /* Draw the line */
      var color_line = pJS.particles.line_linked.color_rgb_line;
      pJS.canvas.ctx.beginPath();
      pJS.canvas.ctx.strokeStyle = 'rgba('+color_line.r+','+color_line.g+','+color_line.b+','+ (pJS.interactivity.line_linked.opacity-dist_mouse/pJS.interactivity.mouse.distance) +')';
      pJS.canvas.ctx.moveTo(p1.x, p1.y);
      pJS.canvas.ctx.lineTo(pJS.interactivity.mouse.pos_x, pJS.interactivity.mouse.pos_y);
      pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
      pJS.canvas.ctx.stroke();
      pJS.canvas.ctx.closePath();
    }
  };

  pJS.fn.vendors.destroy = function(){
    cancelAnimationFrame(pJS.fn.requestAnimFrame);
    canvas_el.remove();
    delete pJS;
  };


  /* --------- LAUNCH ----------- */

  function launchParticles(){
    pJS.fn.canvasInit();
    pJS.fn.canvasSize();
    pJS.fn.canvasPaint();
    pJS.fn.particlesCreate();
    pJS.fn.particlesDraw();
  };


  function launchAnimation(){
    pJS.fn.particlesDraw();
    pJS.fn.requestAnimFrame = requestAnimFrame(launchAnimation);
  };


  launchParticles();

  if(pJS.particles.anim.enable){
    launchAnimation();
  }

  if(pJS.interactivity.enable){
    pJS.fn.vendors.interactivity.listeners();
  }


};

/* --- VENDORS --- */

window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame    ||
    window.oRequestAnimationFrame      ||
    window.msRequestAnimationFrame     ||
    function(callback){
      window.setTimeout(callback, 1000 / 60);
    };
})();

window.cancelRequestAnimFrame = ( function() {
  return window.cancelAnimationFrame         ||
    window.webkitCancelRequestAnimationFrame ||
    window.mozCancelRequestAnimationFrame    ||
    window.oCancelRequestAnimationFrame      ||
    window.msCancelRequestAnimationFrame     ||
    clearTimeout
} )();

function hexToRgb(hex){
  // By Tim Down - http://stackoverflow.com/a/5624139/3493650
  // Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
     return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
  } : null;
};


/* --- LAUNCH --- */

window.particlesJS = function(tag_id, params){

  /* no string id? so it's object params, and set the id with default id */
  if(typeof(tag_id) != 'string'){
    params = tag_id;
    tag_id = 'particles-js';
  }

  /* no id? set the id to default id */
  if(!tag_id){
    tag_id = 'particles-js';
  }

  /* create canvas element */
  var canvas_el = document.createElement('canvas');

  /* set size canvas */
  canvas_el.style.width = ""100%"";
  canvas_el.style.height = ""100%"";

  /* append canvas */
  var canvas = document.getElementById(tag_id).appendChild(canvas_el);

  /* launch particle.js */
  if(canvas != null){
    launchParticlesJS(tag_id, params);
  }

};","/* -----------------------------------------------
/* Author : Vincent Garreau  - vincentgarreau.com
/* MIT license: http://opensource.org/licenses/MIT
/* GitHub : https://github.com/VincentGarreau/particles.js
/* How to use? : Check the GitHub README
/* v1.0.3
/* ----------------------------------------------- */

function launchParticlesJS(tag_id, params){

  var canvas_el = document.querySelector('#'+tag_id+' > canvas');

  /* particles.js variables with default values */
  pJS = {
    canvas: {
      el: canvas_el,
      w: canvas_el.offsetWidth,
      h: canvas_el.offsetHeight
    },
    particles: {
      color: '#fff',
      shape: 'circle',
      opacity: 1,
      size: 2.5,
      size_random: true,
      nb: 200,
      line_linked: {
        enable_auto: true,
        distance: 100,
        color: '#fff',
        opacity: 1,
        width: 1,
        condensed_mode: {
          enable: true,
          rotateX: 65000,
          rotateY: 65000
        }
      },
      anim: {
        enable: true,
          speed: 1
      },
      array: []
    },
    interactivity: {
      enable: true,
      mouse: {
        distance: 100
      },
      detect_on: 'canvas',
      mode: 'grab',
      line_linked: {
        opacity: 1
      },
      events: {
        onclick: {
          enable: true,
          mode: 'push',
          nb: 4
        }
      }
    },
    retina_detect: false,
    fn: {
      vendors:{
        interactivity: {}
      }
    }
  };

  /* params settings */
  if(params){
    if(params.particles){
      var paramsForParticles = params.particles;
      if(paramsForParticles.color) pJS.particles.color = paramsForParticles.color;
      if(paramsForParticles.shape) pJS.particles.shape = paramsForParticles.shape;
      if(paramsForParticles.opacity) pJS.particles.opacity = paramsForParticles.opacity;
      if(paramsForParticles.size) pJS.particles.size = paramsForParticles.size;
      if(paramsForParticles.size_random == false) pJS.particles.size_random = paramsForParticles.size_random;
      if(paramsForParticles.nb) pJS.particles.nb = paramsForParticles.nb;
      if(paramsForParticles.line_linked){
        var paramsForLineLinked = paramsForParticles.line_linked;
        if(paramsForLineLinked.enable_auto == false) pJS.particles.line_linked.enable_auto = paramsForLineLinked.enable_auto;
        if(paramsForLineLinked.distance) pJS.particles.line_linked.distance = paramsForLineLinked.distance;
        if(paramsForLineLinked.color) pJS.particles.line_linked.color = paramsForLineLinked.color;
        if(paramsForLineLinked.opacity) pJS.particles.line_linked.opacity = paramsForLineLinked.opacity;
        if(paramsForLineLinked.width) pJS.particles.line_linked.width = paramsForLineLinked.width;
        if(paramsForLineLinked.condensed_mode){
          var paramsForCondensedMode = paramsForLineLinked.condensed_mode;
          if(paramsForCondensedMode.enable == false) pJS.particles.line_linked.condensed_mode.enable = paramsForCondensedMode.enable;
          if(paramsForCondensedMode.rotateX) pJS.particles.line_linked.condensed_mode.rotateX = paramsForCondensedMode.rotateX;
          if(paramsForCondensedMode.rotateY) pJS.particles.line_linked.condensed_mode.rotateY = paramsForCondensedMode.rotateY;
        }
      }
      if(paramsForParticles.anim){
        var paramsForAnim = paramsForParticles.anim;
        if(paramsForAnim.enable == false) pJS.particles.anim.enable = paramsForAnim.enable;
        if(paramsForAnim.speed) pJS.particles.anim.speed = paramsForAnim.speed;
      }
    }
    if(params.interactivity){
      var paramsForInteractivity = params.interactivity;
      if(paramsForInteractivity.enable == false) pJS.interactivity.enable = paramsForInteractivity.enable;
      if(paramsForInteractivity.mouse){
        if(paramsForInteractivity.mouse.distance) pJS.interactivity.mouse.distance = paramsForInteractivity.mouse.distance;
      }
      if(paramsForInteractivity.detect_on) pJS.interactivity.detect_on = paramsForInteractivity.detect_on;
      if(paramsForInteractivity.mode) pJS.interactivity.mode = paramsForInteractivity.mode;
      if(paramsForInteractivity.line_linked){
        if(paramsForInteractivity.line_linked.opacity) pJS.interactivity.line_linked.opacity = paramsForInteractivity.line_linked.opacity;
      }
      if(paramsForInteractivity.events){
        var paramsForEvents = paramsForInteractivity.events;
        if(paramsForEvents.onclick){
          var paramsForOnclick = paramsForEvents.onclick;
          if(paramsForOnclick.enable == false) pJS.interactivity.events.onclick.enable = false;
          if(paramsForOnclick.mode != 'push') pJS.interactivity.events.onclick.mode = paramsForOnclick.mode;
          if(paramsForOnclick.nb) pJS.interactivity.events.onclick.nb = paramsForOnclick.nb;
        }
      }
    }
    pJS.retina_detect = params.retina_detect;
  }

  /* convert hex colors to rgb */
  pJS.particles.color_rgb = hexToRgb(pJS.particles.color);
  pJS.particles.line_linked.color_rgb_line = hexToRgb(pJS.particles.line_linked.color);

  /* detect retina */
  if(pJS.retina_detect && window.devicePixelRatio > 1){
    pJS.retina = true;
  
    pJS.canvas.pxratio = window.devicePixelRatio
    pJS.canvas.w = pJS.canvas.el.offsetWidth * pJS.canvas.pxratio;
    pJS.canvas.h = pJS.canvas.el.offsetHeight * pJS.canvas.pxratio;
    pJS.particles.anim.speed = pJS.particles.anim.speed * pJS.canvas.pxratio;
    pJS.particles.line_linked.distance = pJS.particles.line_linked.distance * pJS.canvas.pxratio;
    pJS.particles.line_linked.width = pJS.particles.line_linked.width * pJS.canvas.pxratio;
    pJS.interactivity.mouse.distance = pJS.interactivity.mouse.distance * pJS.canvas.pxratio;
  }


  /* ---------- CANVAS functions ------------ */

  pJS.fn.canvasInit = function(){
    pJS.canvas.ctx = pJS.canvas.el.getContext('2d');
  };

  pJS.fn.canvasSize = function(){
    pJS.canvas.el.width = pJS.canvas.w;
    pJS.canvas.el.height = pJS.canvas.h;

    window.onresize = function(){
      if(pJS){
        pJS.canvas.w = pJS.canvas.el.offsetWidth;
        pJS.canvas.h = pJS.canvas.el.offsetHeight;

        /* resize canvas */
        if(pJS.retina){
          pJS.canvas.w *= pJS.canvas.pxratio;
          pJS.canvas.h *= pJS.canvas.pxratio;
        }

        pJS.canvas.el.width = pJS.canvas.w;
        pJS.canvas.el.height = pJS.canvas.h;

        /* repaint canvas */
        pJS.fn.canvasPaint();
        if(!pJS.particles.anim.enable){
          pJS.fn.particlesRemove();
          pJS.fn.canvasRemove();
          launchParticles();
        }
      }
    }
  };

  pJS.fn.canvasPaint = function(){
    pJS.canvas.ctx.fillRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  };

  pJS.fn.canvasRemove = function(){
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);
  }


  /* --------- PARTICLES functions ----------- */

  pJS.fn.particle = function(color, opacity, position){

    /* position */
    this.x = position ? position.x : Math.random() * pJS.canvas.w;
    this.y = position ? position.y : Math.random() * pJS.canvas.h;

    /* size */
    this.radius = (pJS.particles.size_random ? Math.random() : 1) * pJS.particles.size;
    if (pJS.retina) this.radius *= pJS.canvas.pxratio;

    /* color */
    this.color = color;

    /* opacity */
    this.opacity = opacity;

    /* animation - velocity for speed */
    this.vx = -.5 + Math.random();
    this.vy = -.5 + Math.random();

    /* draw function */
    this.draw = function(){
      pJS.canvas.ctx.fillStyle = 'rgba('+this.color.r+','+this.color.g+','+this.color.b+','+this.opacity+')';
      pJS.canvas.ctx.beginPath();

      switch(pJS.particles.shape){
        case 'circle':
          pJS.canvas.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
        break;

        case 'edge':
          pJS.canvas.ctx.rect(this.x, this.y, this.radius*2, this.radius*2);
        break;

        case 'triangle':
          pJS.canvas.ctx.moveTo(this.x,this.y-this.radius);
          pJS.canvas.ctx.lineTo(this.x+this.radius,this.y+this.radius);
          pJS.canvas.ctx.lineTo(this.x-this.radius,this.y+this.radius);
          pJS.canvas.ctx.closePath();
        break;
      }

      pJS.canvas.ctx.fill();
    }

  };

  pJS.fn.particlesCreate = function(){
    for(var i = 0; i < pJS.particles.nb; i++) {
      pJS.particles.array.push(new pJS.fn.particle(pJS.particles.color_rgb, pJS.particles.opacity));
    }
  };

  pJS.fn.particlesAnimate = function(){
    for(var i = 0; i < pJS.particles.array.length; i++){
      /* the particle */
      var p = pJS.particles.array[i];

      /* move the particle */
      p.x += p.vx * (pJS.particles.anim.speed/2);
      p.y += p.vy * (pJS.particles.anim.speed/2);

      /* change particle position if it is out of canvas */
      if(p.x - p.radius > pJS.canvas.w) p.x = p.radius;
      else if(p.x + p.radius < 0) p.x = pJS.canvas.w + p.radius;
      if(p.y - p.radius > pJS.canvas.h) p.y = p.radius;
      else if(p.y + p.radius < 0) p.y = pJS.canvas.h + p.radius;

      /* Check distance between each particle and mouse position */
      for(var j = i + 1; j < pJS.particles.array.length; j++){
        var p2 = pJS.particles.array[j];

        /* link particles if enable */
        if(pJS.particles.line_linked.enable_auto){
          pJS.fn.vendors.distanceParticles(p,p2);
        }

        /* set interactivity if enable */
        if(pJS.interactivity.enable){

          /* interactivity mode */
          switch(pJS.interactivity.mode){
            case 'grab':
              pJS.fn.vendors.interactivity.grabParticles(p,p2);
            break;
          }

        }


      }
    }
  };

  pJS.fn.particlesDraw = function(){
    /* clear canvas */
    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);

    /* move particles */
    pJS.fn.particlesAnimate();

    /* draw each particle */
    for(var i = 0; i < pJS.particles.array.length; i++){
      var p = pJS.particles.array[i];
      p.draw('rgba('+p.color.r+','+p.color.g+','+p.color.b+','+p.opacity+')');
    }

  };

  pJS.fn.particlesRemove = function(){
    pJS.particles.array = [];
  };


  /* ---------- VENDORS functions ------------ */

  pJS.fn.vendors.distanceParticles = function(p1, p2){

    var dx = p1.x - p2.x,
      dy = p1.y - p2.y,
      dist = Math.sqrt(dx*dx + dy*dy);

    /* Check distance between particle and mouse mos */
    if(dist <= pJS.particles.line_linked.distance) {

      /* draw the line */
      var color_line = pJS.particles.line_linked.color_rgb_line;
      pJS.canvas.ctx.beginPath();
      pJS.canvas.ctx.strokeStyle = 'rgba('+color_line.r+','+color_line.g+','+color_line.b+','+ (pJS.particles.line_linked.opacity-dist/pJS.particles.line_linked.distance) +')';
      pJS.canvas.ctx.moveTo(p1.x, p1.y);
      pJS.canvas.ctx.lineTo(p2.x, p2.y);
      pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
      pJS.canvas.ctx.stroke();
      pJS.canvas.ctx.closePath();

      /* condensed particles */
      if(pJS.particles.line_linked.condensed_mode.enable){
        var dx = p1.x - p2.x,
            dy = p1.y - p2.y,
            ax = dx/(pJS.particles.line_linked.condensed_mode.rotateX*1000),
            ay = dy/(pJS.particles.line_linked.condensed_mode.rotateY*1000);
        p2.vx += ax;
        p2.vy += ay;
      }

    }
  };

  pJS.fn.vendors.interactivity.listeners = function(){

    /* init el */
    if(pJS.interactivity.detect_on == 'window'){
      var detect_el = window;
    }else{
      var detect_el = pJS.canvas.el;
    }

    /* el on mousemove */
    detect_el.onmousemove = function(e){

      if(detect_el == window){
        var pos_x = e.clientX,
            pos_y = e.clientY;
      }
      else{
        var pos_x = e.offsetX||e.clientX,
            pos_y = e.offsetY||e.clientY;
      }

      if(pJS){

        pJS.interactivity.mouse.pos_x = pos_x;
        pJS.interactivity.mouse.pos_y = pos_y;

        if(pJS.retina){
          pJS.interactivity.mouse.pos_x *= pJS.canvas.pxratio;
          pJS.interactivity.mouse.pos_y *= pJS.canvas.pxratio;
        }

        pJS.interactivity.status = 'mousemove';
      }

    };

    /* el on onmouseleave */
    detect_el.onmouseleave = function(e){

      if(pJS){
        pJS.interactivity.mouse.pos_x = 0;
        pJS.interactivity.mouse.pos_y = 0;
        pJS.interactivity.status = 'mouseleave';
      }

    };

    /* el on onclick */
    if(pJS.interactivity.events.onclick.enable){
      switch(pJS.interactivity.events.onclick.mode){
        case 'push':
          detect_el.onclick = function(e){
            if(pJS){
              for(var i = 0; i < pJS.interactivity.events.onclick.nb; i++){
                pJS.particles.array.push(
                  new pJS.fn.particle(
                    pJS.particles.color_rgb,
                    pJS.particles.opacity,
                    {
                      'x': pJS.interactivity.mouse.pos_x,
                      'y': pJS.interactivity.mouse.pos_y
                    }
                  )
                )
              }
            }
          }
        break;

        case 'remove':
          detect_el.onclick = function(e){
            pJS.particles.array.splice(0, pJS.interactivity.events.onclick.nb);
          }
        break;
      }
    }
  };


  pJS.fn.vendors.interactivity.grabParticles = function(p1, p2){
    var dx = p1.x - p2.x,
        dy = p1.y - p2.y,
        dist = Math.sqrt(dx*dx + dy*dy);

    var dx_mouse = p1.x - pJS.interactivity.mouse.pos_x,
        dy_mouse = p1.y - pJS.interactivity.mouse.pos_y,
        dist_mouse = Math.sqrt(dx_mouse*dx_mouse + dy_mouse*dy_mouse);

    /* Check distance between 2 particles + Check distance between 1 particle and mouse position */
    if(dist <= pJS.particles.line_linked.distance && dist_mouse <= pJS.interactivity.mouse.distance && pJS.interactivity.status == 'mousemove'){
      /* Draw the line */
      var color_line = pJS.particles.line_linked.color_rgb_line;
      pJS.canvas.ctx.beginPath();
      pJS.canvas.ctx.strokeStyle = 'rgba('+color_line.r+','+color_line.g+','+color_line.b+','+ (pJS.interactivity.line_linked.opacity-dist_mouse/pJS.interactivity.mouse.distance) +')';
      pJS.canvas.ctx.moveTo(p1.x, p1.y);
      pJS.canvas.ctx.lineTo(pJS.interactivity.mouse.pos_x, pJS.interactivity.mouse.pos_y);
      pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;
      pJS.canvas.ctx.stroke();
      pJS.canvas.ctx.closePath();
    }
  };

  pJS.fn.vendors.destroy = function(){
    cancelAnimationFrame(pJS.fn.requestAnimFrame);
    canvas_el.remove();
    delete pJS;
  };


  /* --------- LAUNCH ----------- */

  function launchParticles(){
    pJS.fn.canvasInit();
    pJS.fn.canvasSize();
    pJS.fn.canvasPaint();
    pJS.fn.particlesCreate();
    pJS.fn.particlesDraw();
  };


  function launchAnimation(){
    pJS.fn.particlesDraw();
    pJS.fn.requestAnimFrame = requestAnimFrame(launchAnimation);
  };


  launchParticles();

  if(pJS.particles.anim.enable){
    launchAnimation();
  }

  if(pJS.interactivity.enable){
    pJS.fn.vendors.interactivity.listeners();
  }


};

/* --- VENDORS --- */

window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame    ||
    window.oRequestAnimationFrame      ||
    window.msRequestAnimationFrame     ||
    function(callback){
      window.setTimeout(callback, 1000 / 60);
    };
})();

window.cancelRequestAnimFrame = ( function() {
  return window.cancelAnimationFrame         ||
    window.webkitCancelRequestAnimationFrame ||
    window.mozCancelRequestAnimationFrame    ||
    window.oCancelRequestAnimationFrame      ||
    window.msCancelRequestAnimationFrame     ||
    clearTimeout
} )();

function hexToRgb(hex){
  // By Tim Down - http://stackoverflow.com/a/5624139/3493650
  // Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function(m, r, g, b) {
     return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
  } : null;
};


/* --- LAUNCH --- */

window.particlesJS = function(tag_id, params){

  /* no string id? so it's object params, and set the id with default id */
  if(typeof(tag_id) != 'string'){
    params = tag_id;
    tag_id = 'particles-js';
  }

  /* no id? set the id to default id */
  if(!tag_id){
    tag_id = 'particles-js';
  }

  /* create canvas element */
  var canvas_el = document.createElement('canvas');

  /* set size canvas */
  canvas_el.style.width = ""100%"";
  canvas_el.style.height = ""100%"";

  /* append canvas */
  var canvas = document.getElementById(tag_id).appendChild(canvas_el);

  /* launch particle.js */
  if(canvas != null){
    launchParticlesJS(tag_id, params);
  }

};",TRUE,,3912
3896,InitialSO.csv3896.txt,InitialGit.csv3896.txt,3,"(function(){
    var cookies;

    function readCookie(name,c,C,i){
        if(cookies){ return cookies[name]; }

        c = document.cookie.split('; ');
        cookies = {};

        for(i=c.length-1; i>=0; i--){
           C = c[i].split('=');
           cookies[C[0]] = C[1];
        }

        return cookies[name];
    }

    window.readCookie = readCookie; // or expose it however you want
})();
 .forEach 120 bytes function read_cookie(k,r){return(r=RegExp('(^|; )'+encodeURIComponent(k)+'=([^;]*)').exec(document.cookie))?r[2]:null;}
 110 bytes 90 bytes encodeURIComponent 73 bytes 82 bytes readCookie 102 bytes encodeURIComponent function C(k){return(document.cookie.match('(^|; )'+k+'=([^;]*)')||0)[2]}
 ","(function(){
    var cookies;

    function readCookie(name,c,C,i){
        if(cookies){ return cookies[name]; }

        c = document.cookie.split('; ');
        cookies = {};

        for(i=c.length-1; i>=0; i--){
           C = c[i].split('=');
           cookies[C[0]] = C[1];
        }

        return cookies[name];
    }

    window.readCookie = readCookie; // or expose it however you want
})();
 .forEach 120 bytes function read_cookie(k,r){return(r=RegExp('(^|; )'+encodeURIComponent(k)+'=([^;]*)').exec(document.cookie))?r[2]:null;}
 110 bytes 90 bytes encodeURIComponent 73 bytes 82 bytes readCookie 102 bytes encodeURIComponent function C(k){return(document.cookie.match('(^|; )'+k+'=([^;]*)')||0)[2]}
 ",TRUE,"// UTILS + MISC  ///////////////////////////////////////////////////////

window.aboutIITC = function() {
  var v = (script_info.script && script_info.script.version || script_info.dateTimeVersion) + ' ['+script_info.buildName+']';
  if (typeof android !== 'undefined' && android && android.getVersionName) {
    v += '[IITC Mobile '+android.getVersionName()+']';
  }

  var plugins = '<ul>';
  for (var i in bootPlugins) {
    var info = bootPlugins[i].info;
    if (info) {
      var pname = info.script && info.script.name || info.pluginId;
      if (pname.substr(0,13) == 'IITC plugin: ' || pname.substr(0,13) == 'IITC Plugin: ') {
        pname = pname.substr(13);
      }
      var pvers = info.script && info.script.version || info.dateTimeVersion;

      var ptext = pname + ' - ' + pvers;
      if (info.buildName != script_info.buildName) {
        ptext += ' ['+(info.buildName||'<i>non-standard plugin</i>')+']';
      }

      plugins += '<li>'+ptext+'</li>';
    } else {
      // no 'info' property of the plugin setup function - old plugin wrapper code
      // could attempt to find the ""window.plugin.NAME = function() {};"" line it's likely to have..?
      plugins += '<li>(unknown plugin: index '+i+')</li>';
    }
  }
  plugins += '</ul>';

  var attrib = '@@INCLUDEMD:ATTRIBUTION.md@@';
  var contrib = '@@INCLUDEMD:CONTRIBS.md@@'

  var a = ''
  + '  <div><b>About IITC</b></div> '
  + '  <div>Ingress Intel Total Conversion</div> '
  + '  <hr>'
  + '  <div>'
  + '    <a href=""http://iitc.jonatkins.com/"" target=""_blank"">IITC Homepage</a><br />'
  + '     On the script’s homepage you can:'
  + '     <ul>'
  + '       <li>Find Updates</li>'
  + '       <li>Get Plugins</li>'
  + '       <li>Report Bugs</li>'
  + '       <li>Contribute!</li>'
  + '     </ul>'
  + '  </div>'
  + '  <div>'
  + '    MapQuest OSM tiles Courtesy of <a href=""http://www.mapquest.com/"" target=""_blank"">MapQuest</a> <img src=""https://developer.mapquest.com/content/osm/mq_logo.png"">'
  + '  </div>'
  + '  <hr>'
  + '  <div>Version: ' + v + '</div>'
  + '  <div>Plugins: ' + plugins + '</div>'
  + '  <hr>'
  + '  <div>' + attrib + '</div>'
  + '  <hr>'
  + '  <div>' + contrib + '</div>';

  dialog({
    title: 'IITC ' + v,
    html: a,
    dialogClass: 'ui-dialog-aboutIITC'
  });
}


window.layerGroupLength = function(layerGroup) {
  var layersCount = 0;
  var layers = layerGroup._layers;
  if (layers)
    layersCount = Object.keys(layers).length;
  return layersCount;
}

// retrieves parameter from the URL?query=string.
window.getURLParam = function(param) {
  var items = window.location.search.substr(1).split('&');
  if (items == """") return """";

  for (var i=0; i<items.length; i++) {
    var item = items[i].split('=');

    if (item[0] == param) {
      var val = item.length==1 ? '' : decodeURIComponent (item[1].replace(/\+/g,' '));
      return val;
    }
  }

  return '';
}

// read cookie by name.
// http://stackoverflow.com/a/5639455/1684530 by cwolves
window.readCookie = function(name){
  var C, i, c = document.cookie.split('; ');
  var cookies = {};
  for(i=c.length-1; i>=0; i--){
    C = c[i].split('=');
    cookies[C[0]] = unescape(C[1]);
  }
  return cookies[name];
}

window.writeCookie = function(name, val) {
  var d = new Date(Date.now() + 10 * 365 * 24 * 60 * 60 * 1000).toUTCString();
  document.cookie = name + ""="" + val + '; expires='+d+'; path=/';
}

window.eraseCookie = function(name) {
  document.cookie = name + '=; expires=Thu, 1 Jan 1970 00:00:00 GMT; path=/';
}

//certain values were stored in cookies, but we're better off using localStorage instead - make it easy to convert
window.convertCookieToLocalStorage = function(name) {
  var cookie=readCookie(name);
  if(cookie !== undefined) {
    console.log('converting cookie '+name+' to localStorage');
    if(localStorage[name] === undefined) {
      localStorage[name] = cookie;
    }
    eraseCookie(name);
  }
}

// add thousand separators to given number.
// http://stackoverflow.com/a/1990590/1684530 by Doug Neiner.
window.digits = function(d) {
  // U+2009 - Thin Space. Recommended for use as a thousands separator...
  // https://en.wikipedia.org/wiki/Space_(punctuation)#Table_of_spaces
  return (d+"""").replace(/(\d)(?=(\d\d\d)+(?!\d))/g, ""$1&#8201;"");
}


window.zeroPad = function(number,pad) {
  number = number.toString();
  var zeros = pad - number.length;
  return Array(zeros>0?zeros+1:0).join(""0"") + number;
}


// converts javascript timestamps to HH:mm:ss format if it was today;
// otherwise it returns YYYY-MM-DD
window.unixTimeToString = function(time, full) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  var time = d.toLocaleTimeString();
//  var time = zeroPad(d.getHours(),2)+':'+zeroPad(d.getMinutes(),2)+':'+zeroPad(d.getSeconds(),2);
  var date = d.getFullYear()+'-'+zeroPad(d.getMonth()+1,2)+'-'+zeroPad(d.getDate(),2);
  if(typeof full !== 'undefined' && full) return date + ' ' + time;
  if(d.toDateString() == new Date().toDateString())
    return time;
  else
    return date;
}

// converts a javascript time to a precise date and time (optionally with millisecond precision)
// formatted in ISO-style YYYY-MM-DD hh:mm:ss.mmm - but using local timezone
window.unixTimeToDateTimeString = function(time, millisecond) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  return d.getFullYear()+'-'+zeroPad(d.getMonth()+1,2)+'-'+zeroPad(d.getDate(),2)
    +' '+zeroPad(d.getHours(),2)+':'+zeroPad(d.getMinutes(),2)+':'+zeroPad(d.getSeconds(),2)+(millisecond?'.'+zeroPad(d.getMilliseconds(),3):'');
}

window.unixTimeToHHmm = function(time) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  var h = '' + d.getHours(); h = h.length === 1 ? '0' + h : h;
  var s = '' + d.getMinutes(); s = s.length === 1 ? '0' + s : s;
  return  h + ':' + s;
}

window.formatInterval = function(seconds,maxTerms) {

  var d = Math.floor(seconds / 86400);
  var h = Math.floor((seconds % 86400) / 3600);
  var m = Math.floor((seconds % 3600) / 60);
  var s = seconds % 60;

  var terms = [];
  if (d > 0) terms.push(d+'天');
  if (h > 0) terms.push(h+'時');
  if (m > 0) terms.push(m+'分');
  if (s > 0 || terms.length==0) terms.push(s+'秒');

  if (maxTerms) terms = terms.slice(0,maxTerms);

  return terms.join(' ');
}


window.rangeLinkClick = function() {
  if(window.portalRangeIndicator)
    window.map.fitBounds(window.portalRangeIndicator.getBounds());
  if(window.isSmartphone())
    window.show('map');
}

window.showPortalPosLinks = function(lat, lng, name) {
  var encoded_name = 'undefined';
  if(name !== undefined) {
    encoded_name = encodeURIComponent(name);
  }

  if (typeof android !== 'undefined' && android && android.intentPosLink) {
    android.intentPosLink(lat, lng, map.getZoom(), name, true);
  } else {
    var qrcode = '<div id=""qrcode""></div>';
    var script = '<script>$(\'#qrcode\').qrcode({text:\'GEO:'+lat+','+lng+'\'});</script>';
    var gmaps = '<a href=""https://maps.google.com/maps?ll='+lat+','+lng+'&q='+lat+','+lng+'%20('+encoded_name+')"">Google Maps</a>';
    var bingmaps = '<a href=""http://www.bing.com/maps/?v=2&cp='+lat+'~'+lng+'&lvl=16&sp=Point.'+lat+'_'+lng+'_'+encoded_name+'___"">Bing Maps</a>';
    var osm = '<a href=""http://www.openstreetmap.org/?mlat='+lat+'&mlon='+lng+'&zoom=16"">OpenStreetMap</a>';
    var latLng = '<span>&lt;' + lat + ',' + lng +'&gt;</span>';
    dialog({
      html: '<div style=""text-align: center;"">' + qrcode + script + gmaps + '; ' + bingmaps + '; ' + osm + '<br />' + latLng + '</div>',
      title: name,
      id: 'poslinks'
    });
  }
}

window.isTouchDevice = function() {
  return 'ontouchstart' in window // works on most browsers
      || 'onmsgesturechange' in window; // works on ie10
};

window.androidCopy = function(text) {
  if(typeof android === 'undefined' || !android || !android.copy)
    return true; // i.e. execute other actions
  else
    android.copy(text);
  return false;
}

window.androidPermalink = function() {
  if(typeof android === 'undefined' || !android || !android.intentPosLink)
    return true; // i.e. execute other actions

  var center = map.getCenter();
  android.intentPosLink(center.lat, center.lng, map.getZoom(), ""Selected map view"", false);
  return false;
}



window.getMinPortalLevel = function() {
  var z = map.getZoom();
  z = getDataZoomForMapZoom(z);
  return getMapZoomTileParameters(z).level;
}

// returns number of pixels left to scroll down before reaching the
// bottom. Works similar to the native scrollTop function.
window.scrollBottom = function(elm) {
  if(typeof elm === 'string') elm = $(elm);
  return elm.get(0).scrollHeight - elm.innerHeight() - elm.scrollTop();
}

window.zoomToAndShowPortal = function(guid, latlng) {
  map.setView(latlng, 17);
  // if the data is available, render it immediately. Otherwise defer
  // until it becomes available.
  if(window.portals[guid])
    renderPortalDetails(guid);
  else
    urlPortal = guid;
}

window.selectPortalByLatLng = function(lat, lng) {
  if(lng === undefined && lat instanceof Array) {
    lng = lat[1];
    lat = lat[0];
  } else if(lng === undefined && lat instanceof L.LatLng) {
    lng = lat.lng;
    lat = lat.lat;
  }
  for(var guid in window.portals) {
    var latlng = window.portals[guid].getLatLng();
    if(latlng.lat == lat && latlng.lng == lng) {
      renderPortalDetails(guid);
      return;
    }
  }

  // not currently visible
  urlPortalLL = [lat, lng];
  map.setView(urlPortalLL, 17);
};

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
}

// http://stackoverflow.com/a/646643/1684530 by Bergi and CMS
if (typeof String.prototype.startsWith !== 'function') {
  String.prototype.startsWith = function (str){
    return this.slice(0, str.length) === str;
  };
}

// escape a javascript string, so quotes and backslashes are escaped with a backslash
// (for strings passed as parameters to html onclick=""..."" for example)
window.escapeJavascriptString = function(str) {
  return (str+'').replace(/[\\""']/g,'\\$&');
}

//escape special characters, such as tags
window.escapeHtmlSpecialChars = function(str) {
  var div = document.createElement(div);
  var text = document.createTextNode(str);
  div.appendChild(text);
  return div.innerHTML;
}

window.prettyEnergy = function(nrg) {
  return nrg> 1000 ? Math.round(nrg/1000) + ' k': nrg;
}

window.setPermaLink = function(elm) {
  var c = map.getCenter();
  var lat = Math.round(c.lat*1E6)/1E6;
  var lng = Math.round(c.lng*1E6)/1E6;
  var qry = 'll='+lat+','+lng+'&z=' + map.getZoom();
  $(elm).attr('href',  '/intel?' + qry);
}

window.uniqueArray = function(arr) {
  return $.grep(arr, function(v, i) {
    return $.inArray(v, arr) === i;
  });
}

window.genFourColumnTable = function(blocks) {
  var t = $.map(blocks, function(detail, index) {
    if(!detail) return '';
    var title = detail[2] ? ' title=""'+escapeHtmlSpecialChars(detail[2]) + '""' : '';
    if(index % 2 === 0)
      return '<tr><td'+title+'>'+detail[1]+'</td><th'+title+'>'+detail[0]+'</th>';
    else
      return '    <th'+title+'>'+detail[0]+'</th><td'+title+'>'+detail[1]+'</td></tr>';
  }).join('');
  if(t.length % 2 === 1) t + '<td></td><td></td></tr>';
  return t;
}


// converts given text with newlines (\n) and tabs (\t) to a HTML
// table automatically.
window.convertTextToTableMagic = function(text) {
  // check if it should be converted to a table
  if(!text.match(/\t/)) return text.replace(/\n/g, '<br>');

  var data = [];
  var columnCount = 0;

  // parse data
  var rows = text.split('\n');
  $.each(rows, function(i, row) {
    data[i] = row.split('\t');
    if(data[i].length > columnCount) columnCount = data[i].length;
  });

  // build the table
  var table = '<table>';
  $.each(data, function(i, row) {
    table += '<tr>';
    $.each(data[i], function(k, cell) {
      var attributes = '';
      if(k === 0 && data[i].length < columnCount) {
        attributes = ' colspan=""'+(columnCount - data[i].length + 1)+'""';
      }
      table += '<td'+attributes+'>'+cell+'</td>';
    });
    table += '</tr>';
  });
  table += '</table>';
  return table;
}

// Given 3 sets of points in an array[3]{lat, lng} returns the area of the triangle
window.calcTriArea = function(p) {
  return Math.abs((p[0].lat*(p[1].lng-p[2].lng)+p[1].lat*(p[2].lng-p[0].lng)+p[2].lat*(p[0].lng-p[1].lng))/2);
}

// Update layerGroups display status to window.overlayStatus and localStorage 'ingress.intelmap.layergroupdisplayed'
window.updateDisplayedLayerGroup = function(name, display) {
  overlayStatus[name] = display;
  localStorage['ingress.intelmap.layergroupdisplayed'] = JSON.stringify(overlayStatus);
}

// Read layerGroup status from window.overlayStatus if it was added to map,
// read from cookie if it has not added to map yet.
// return 'defaultDisplay' if both overlayStatus and cookie didn't have the record
window.isLayerGroupDisplayed = function(name, defaultDisplay) {
  if(typeof(overlayStatus[name]) !== 'undefined') return overlayStatus[name];

  convertCookieToLocalStorage('ingress.intelmap.layergroupdisplayed');
  var layersJSON = localStorage['ingress.intelmap.layergroupdisplayed'];
  if(!layersJSON) return defaultDisplay;

  var layers = JSON.parse(layersJSON);
  // keep latest overlayStatus
  overlayStatus = $.extend(layers, overlayStatus);
  if(typeof(overlayStatus[name]) === 'undefined') return defaultDisplay;
  return overlayStatus[name];
}

window.addLayerGroup = function(name, layerGroup, defaultDisplay) {
  if (defaultDisplay === undefined) defaultDisplay = true;

  if(isLayerGroupDisplayed(name, defaultDisplay)) map.addLayer(layerGroup);
  layerChooser.addOverlay(layerGroup, name);
}

window.clampLat = function(lat) {
  // the map projection used does not handle above approx +- 85 degrees north/south of the equator
  if (lat > 85.051128)
    lat = 85.051128;
  else if (lat < -85.051128)
    lat = -85.051128;
  return lat;
}

window.clampLng = function(lng) {
  if (lng > 179.999999)
    lng = 179.999999;
  else if (lng < -180.0)
    lng = -180.0;
  return lng;
}


window.clampLatLng = function(latlng) {
  return new L.LatLng ( clampLat(latlng.lat), clampLng(latlng.lng) );
}

window.clampLatLngBounds = function(bounds) {
  return new L.LatLngBounds ( clampLatLng(bounds.getSouthWest()), clampLatLng(bounds.getNorthEast()) );
}

window.getGenericMarkerSvg = function(color) {
  var markerTemplate = '@@INCLUDESTRING:images/marker-icon.svg.template@@';

  return markerTemplate.replace(/%COLOR%/g, color);
}

window.getGenericMarkerIcon = function(color,className) {
  return L.divIcon({
    iconSize: new L.Point(25, 41),
    iconAnchor: new L.Point(12, 41),
    html: getGenericMarkerSvg(color),
    className: className || 'leaflet-iitc-divicon-generic-marker'
  });
}

window.createGenericMarker = function(ll,color,options) {
  options = options || {};

  var markerOpt = $.extend({
    icon: getGenericMarkerIcon(color || '#a24ac3')
  }, options);

  return L.marker(ll, markerOpt);
}



// Fix Leaflet: handle touchcancel events in Draggable
L.Draggable.prototype._onDownOrig = L.Draggable.prototype._onDown;
L.Draggable.prototype._onDown = function(e) {
  L.Draggable.prototype._onDownOrig.apply(this, arguments);

  if(e.type === ""touchstart"") {
    L.DomEvent.on(document, ""touchcancel"", this._onUp, this);
  }
}

","// UTILS + MISC  ///////////////////////////////////////////////////////

window.aboutIITC = function() {
  var v = (script_info.script && script_info.script.version || script_info.dateTimeVersion) + ' ['+script_info.buildName+']';
  if (typeof android !== 'undefined' && android && android.getVersionName) {
    v += '[IITC Mobile '+android.getVersionName()+']';
  }

  var plugins = '<ul>';
  for (var i in bootPlugins) {
    var info = bootPlugins[i].info;
    if (info) {
      var pname = info.script && info.script.name || info.pluginId;
      if (pname.substr(0,13) == 'IITC plugin: ' || pname.substr(0,13) == 'IITC Plugin: ') {
        pname = pname.substr(13);
      }
      var pvers = info.script && info.script.version || info.dateTimeVersion;

      var ptext = pname + ' - ' + pvers;
      if (info.buildName != script_info.buildName) {
        ptext += ' ['+(info.buildName||'<i>non-standard plugin</i>')+']';
      }

      plugins += '<li>'+ptext+'</li>';
    } else {
      // no 'info' property of the plugin setup function - old plugin wrapper code
      // could attempt to find the ""window.plugin.NAME = function() {};"" line it's likely to have..?
      plugins += '<li>(unknown plugin: index '+i+')</li>';
    }
  }
  plugins += '</ul>';

  var attrib = '@@INCLUDEMD:ATTRIBUTION.md@@';
  var contrib = '@@INCLUDEMD:CONTRIBS.md@@'

  var a = ''
  + '  <div><b>About IITC</b></div> '
  + '  <div>Ingress Intel Total Conversion</div> '
  + '  <hr>'
  + '  <div>'
  + '    <a href=""http://iitc.me/"" target=""_blank"">IITC Homepage</a><br />'
  + '     On the script’s homepage you can:'
  + '     <ul>'
  + '       <li>Find Updates</li>'
  + '       <li>Get Plugins</li>'
  + '       <li>Report Bugs</li>'
  + '       <li>Contribute!</li>'
  + '     </ul>'
  + '  </div>'
  + '  <div>'
  + '    MapQuest OSM tiles Courtesy of <a href=""http://www.mapquest.com/"" target=""_blank"">MapQuest</a> <img src=""https://developer.mapquest.com/content/osm/mq_logo.png"">'
  + '  </div>'
  + '  <hr>'
  + '  <div>Version: ' + v + '</div>'
  + '  <div>Plugins: ' + plugins + '</div>'
  + '  <hr>'
  + '  <div>' + attrib + '</div>'
  + '  <hr>'
  + '  <div>' + contrib + '</div>';

  dialog({
    title: 'IITC ' + v,
    html: a,
    dialogClass: 'ui-dialog-aboutIITC'
  });
}


window.layerGroupLength = function(layerGroup) {
  var layersCount = 0;
  var layers = layerGroup._layers;
  if (layers)
    layersCount = Object.keys(layers).length;
  return layersCount;
}

// retrieves parameter from the URL?query=string.
window.getURLParam = function(param) {
  var items = window.location.search.substr(1).split('&');
  if (items == """") return """";

  for (var i=0; i<items.length; i++) {
    var item = items[i].split('=');

    if (item[0] == param) {
      var val = item.length==1 ? '' : decodeURIComponent (item[1].replace(/\+/g,' '));
      return val;
    }
  }

  return '';
}

// read cookie by name.
// http://stackoverflow.com/a/5639455/1684530 by cwolves
window.readCookie = function(name){
  var C, i, c = document.cookie.split('; ');
  var cookies = {};
  for(i=c.length-1; i>=0; i--){
    C = c[i].split('=');
    cookies[C[0]] = unescape(C[1]);
  }
  return cookies[name];
}

window.writeCookie = function(name, val) {
  var d = new Date(Date.now() + 10 * 365 * 24 * 60 * 60 * 1000).toUTCString();
  document.cookie = name + ""="" + val + '; expires='+d+'; path=/';
}

window.eraseCookie = function(name) {
  document.cookie = name + '=; expires=Thu, 1 Jan 1970 00:00:00 GMT; path=/';
}

//certain values were stored in cookies, but we're better off using localStorage instead - make it easy to convert
window.convertCookieToLocalStorage = function(name) {
  var cookie=readCookie(name);
  if(cookie !== undefined) {
    console.log('converting cookie '+name+' to localStorage');
    if(localStorage[name] === undefined) {
      localStorage[name] = cookie;
    }
    eraseCookie(name);
  }
}

// add thousand separators to given number.
// http://stackoverflow.com/a/1990590/1684530 by Doug Neiner.
window.digits = function(d) {
  // U+2009 - Thin Space. Recommended for use as a thousands separator...
  // https://en.wikipedia.org/wiki/Space_(punctuation)#Table_of_spaces
  return (d+"""").replace(/(\d)(?=(\d\d\d)+(?!\d))/g, ""$1&#8201;"");
}


window.zeroPad = function(number,pad) {
  number = number.toString();
  var zeros = pad - number.length;
  return Array(zeros>0?zeros+1:0).join(""0"") + number;
}


// converts javascript timestamps to HH:mm:ss format if it was today;
// otherwise it returns YYYY-MM-DD
window.unixTimeToString = function(time, full) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  var time = d.toLocaleTimeString();
//  var time = zeroPad(d.getHours(),2)+':'+zeroPad(d.getMinutes(),2)+':'+zeroPad(d.getSeconds(),2);
  var date = d.getFullYear()+'-'+zeroPad(d.getMonth()+1,2)+'-'+zeroPad(d.getDate(),2);
  if(typeof full !== 'undefined' && full) return date + ' ' + time;
  if(d.toDateString() == new Date().toDateString())
    return time;
  else
    return date;
}

// converts a javascript time to a precise date and time (optionally with millisecond precision)
// formatted in ISO-style YYYY-MM-DD hh:mm:ss.mmm - but using local timezone
window.unixTimeToDateTimeString = function(time, millisecond) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  return d.getFullYear()+'-'+zeroPad(d.getMonth()+1,2)+'-'+zeroPad(d.getDate(),2)
    +' '+zeroPad(d.getHours(),2)+':'+zeroPad(d.getMinutes(),2)+':'+zeroPad(d.getSeconds(),2)+(millisecond?'.'+zeroPad(d.getMilliseconds(),3):'');
}

window.unixTimeToHHmm = function(time) {
  if(!time) return null;
  var d = new Date(typeof time === 'string' ? parseInt(time) : time);
  var h = '' + d.getHours(); h = h.length === 1 ? '0' + h : h;
  var s = '' + d.getMinutes(); s = s.length === 1 ? '0' + s : s;
  return  h + ':' + s;
}

window.formatInterval = function(seconds,maxTerms) {

  var d = Math.floor(seconds / 86400);
  var h = Math.floor((seconds % 86400) / 3600);
  var m = Math.floor((seconds % 3600) / 60);
  var s = seconds % 60;

  var terms = [];
  if (d > 0) terms.push(d+'天');
  if (h > 0) terms.push(h+'時');
  if (m > 0) terms.push(m+'分');
  if (s > 0 || terms.length==0) terms.push(s+'秒');

  if (maxTerms) terms = terms.slice(0,maxTerms);

  return terms.join(' ');
}


window.rangeLinkClick = function() {
  if(window.portalRangeIndicator)
    window.map.fitBounds(window.portalRangeIndicator.getBounds());
  if(window.isSmartphone())
    window.show('map');
}

window.showPortalPosLinks = function(lat, lng, name) {
  var encoded_name = 'undefined';
  if(name !== undefined) {
    encoded_name = encodeURIComponent(name);
  }

  if (typeof android !== 'undefined' && android && android.intentPosLink) {
    android.intentPosLink(lat, lng, map.getZoom(), name, true);
  } else {
    var qrcode = '<div id=""qrcode""></div>';
    var script = '<script>$(\'#qrcode\').qrcode({text:\'GEO:'+lat+','+lng+'\'});</script>';
    var gmaps = '<a href=""https://maps.google.com/maps?ll='+lat+','+lng+'&q='+lat+','+lng+'%20('+encoded_name+')"">Google Maps</a>';
    var bingmaps = '<a href=""http://www.bing.com/maps/?v=2&cp='+lat+'~'+lng+'&lvl=16&sp=Point.'+lat+'_'+lng+'_'+encoded_name+'___"">Bing Maps</a>';
    var osm = '<a href=""http://www.openstreetmap.org/?mlat='+lat+'&mlon='+lng+'&zoom=16"">OpenStreetMap</a>';
    var latLng = '<span>&lt;' + lat + ',' + lng +'&gt;</span>';
    dialog({
      html: '<div style=""text-align: center;"">' + qrcode + script + gmaps + '; ' + bingmaps + '; ' + osm + '<br />' + latLng + '</div>',
      title: name,
      id: 'poslinks'
    });
  }
}

window.isTouchDevice = function() {
  return 'ontouchstart' in window // works on most browsers
      || 'onmsgesturechange' in window; // works on ie10
};

window.androidCopy = function(text) {
  if(typeof android === 'undefined' || !android || !android.copy)
    return true; // i.e. execute other actions
  else
    android.copy(text);
  return false;
}

window.androidPermalink = function() {
  if(typeof android === 'undefined' || !android || !android.intentPosLink)
    return true; // i.e. execute other actions

  var center = map.getCenter();
  android.intentPosLink(center.lat, center.lng, map.getZoom(), ""Selected map view"", false);
  return false;
}



window.getMinPortalLevel = function() {
  var z = map.getZoom();
  z = getDataZoomForMapZoom(z);
  return getMapZoomTileParameters(z).level;
}

// returns number of pixels left to scroll down before reaching the
// bottom. Works similar to the native scrollTop function.
window.scrollBottom = function(elm) {
  if(typeof elm === 'string') elm = $(elm);
  return elm.get(0).scrollHeight - elm.innerHeight() - elm.scrollTop();
}

window.zoomToAndShowPortal = function(guid, latlng) {
  map.setView(latlng, 17);
  // if the data is available, render it immediately. Otherwise defer
  // until it becomes available.
  if(window.portals[guid])
    renderPortalDetails(guid);
  else
    urlPortal = guid;
}

window.selectPortalByLatLng = function(lat, lng) {
  if(lng === undefined && lat instanceof Array) {
    lng = lat[1];
    lat = lat[0];
  } else if(lng === undefined && lat instanceof L.LatLng) {
    lng = lat.lng;
    lat = lat.lat;
  }
  for(var guid in window.portals) {
    var latlng = window.portals[guid].getLatLng();
    if(latlng.lat == lat && latlng.lng == lng) {
      renderPortalDetails(guid);
      return;
    }
  }

  // not currently visible
  urlPortalLL = [lat, lng];
  map.setView(urlPortalLL, 17);
};

String.prototype.capitalize = function() {
    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();
}

// http://stackoverflow.com/a/646643/1684530 by Bergi and CMS
if (typeof String.prototype.startsWith !== 'function') {
  String.prototype.startsWith = function (str){
    return this.slice(0, str.length) === str;
  };
}

// escape a javascript string, so quotes and backslashes are escaped with a backslash
// (for strings passed as parameters to html onclick=""..."" for example)
window.escapeJavascriptString = function(str) {
  return (str+'').replace(/[\\""']/g,'\\$&');
}

//escape special characters, such as tags
window.escapeHtmlSpecialChars = function(str) {
  var div = document.createElement(div);
  var text = document.createTextNode(str);
  div.appendChild(text);
  return div.innerHTML;
}

window.prettyEnergy = function(nrg) {
  return nrg> 1000 ? Math.round(nrg/1000) + ' k': nrg;
}

window.setPermaLink = function(elm) {
  var c = map.getCenter();
  var lat = Math.round(c.lat*1E6)/1E6;
  var lng = Math.round(c.lng*1E6)/1E6;
  var qry = 'll='+lat+','+lng+'&z=' + map.getZoom();
  $(elm).attr('href',  '/intel?' + qry);
}

window.uniqueArray = function(arr) {
  return $.grep(arr, function(v, i) {
    return $.inArray(v, arr) === i;
  });
}

window.genFourColumnTable = function(blocks) {
  var t = $.map(blocks, function(detail, index) {
    if(!detail) return '';
    var title = detail[2] ? ' title=""'+escapeHtmlSpecialChars(detail[2]) + '""' : '';
    if(index % 2 === 0)
      return '<tr><td'+title+'>'+detail[1]+'</td><th'+title+'>'+detail[0]+'</th>';
    else
      return '    <th'+title+'>'+detail[0]+'</th><td'+title+'>'+detail[1]+'</td></tr>';
  }).join('');
  if(t.length % 2 === 1) t + '<td></td><td></td></tr>';
  return t;
}


// converts given text with newlines (\n) and tabs (\t) to a HTML
// table automatically.
window.convertTextToTableMagic = function(text) {
  // check if it should be converted to a table
  if(!text.match(/\t/)) return text.replace(/\n/g, '<br>');

  var data = [];
  var columnCount = 0;

  // parse data
  var rows = text.split('\n');
  $.each(rows, function(i, row) {
    data[i] = row.split('\t');
    if(data[i].length > columnCount) columnCount = data[i].length;
  });

  // build the table
  var table = '<table>';
  $.each(data, function(i, row) {
    table += '<tr>';
    $.each(data[i], function(k, cell) {
      var attributes = '';
      if(k === 0 && data[i].length < columnCount) {
        attributes = ' colspan=""'+(columnCount - data[i].length + 1)+'""';
      }
      table += '<td'+attributes+'>'+cell+'</td>';
    });
    table += '</tr>';
  });
  table += '</table>';
  return table;
}

// Given 3 sets of points in an array[3]{lat, lng} returns the area of the triangle
window.calcTriArea = function(p) {
  return Math.abs((p[0].lat*(p[1].lng-p[2].lng)+p[1].lat*(p[2].lng-p[0].lng)+p[2].lat*(p[0].lng-p[1].lng))/2);
}

// Update layerGroups display status to window.overlayStatus and localStorage 'ingress.intelmap.layergroupdisplayed'
window.updateDisplayedLayerGroup = function(name, display) {
  overlayStatus[name] = display;
  localStorage['ingress.intelmap.layergroupdisplayed'] = JSON.stringify(overlayStatus);
}

// Read layerGroup status from window.overlayStatus if it was added to map,
// read from cookie if it has not added to map yet.
// return 'defaultDisplay' if both overlayStatus and cookie didn't have the record
window.isLayerGroupDisplayed = function(name, defaultDisplay) {
  if(typeof(overlayStatus[name]) !== 'undefined') return overlayStatus[name];

  convertCookieToLocalStorage('ingress.intelmap.layergroupdisplayed');
  var layersJSON = localStorage['ingress.intelmap.layergroupdisplayed'];
  if(!layersJSON) return defaultDisplay;

  var layers = JSON.parse(layersJSON);
  // keep latest overlayStatus
  overlayStatus = $.extend(layers, overlayStatus);
  if(typeof(overlayStatus[name]) === 'undefined') return defaultDisplay;
  return overlayStatus[name];
}

window.addLayerGroup = function(name, layerGroup, defaultDisplay) {
  if (defaultDisplay === undefined) defaultDisplay = true;

  if(isLayerGroupDisplayed(name, defaultDisplay)) map.addLayer(layerGroup);
  layerChooser.addOverlay(layerGroup, name);
}

window.removeLayerGroup = function(layerGroup) {
  if(!layerChooser._layers[layerGroup._leaflet_id]) throw('Layer was not found');
  // removing the layer will set it's default visibility to false (store if layer gets added again)
  var name = layerChooser._layers[layerGroup._leaflet_id].name;
  var enabled = isLayerGroupDisplayed(name);
  map.removeLayer(layerGroup);
  layerChooser.removeLayer(layerGroup);
  updateDisplayedLayerGroup(name, enabled);
};

window.clampLat = function(lat) {
  // the map projection used does not handle above approx +- 85 degrees north/south of the equator
  if (lat > 85.051128)
    lat = 85.051128;
  else if (lat < -85.051128)
    lat = -85.051128;
  return lat;
}

window.clampLng = function(lng) {
  if (lng > 179.999999)
    lng = 179.999999;
  else if (lng < -180.0)
    lng = -180.0;
  return lng;
}


window.clampLatLng = function(latlng) {
  return new L.LatLng ( clampLat(latlng.lat), clampLng(latlng.lng) );
}

window.clampLatLngBounds = function(bounds) {
  return new L.LatLngBounds ( clampLatLng(bounds.getSouthWest()), clampLatLng(bounds.getNorthEast()) );
}

window.getGenericMarkerSvg = function(color) {
  var markerTemplate = '@@INCLUDESTRING:images/marker-icon.svg.template@@';

  return markerTemplate.replace(/%COLOR%/g, color);
}

window.getGenericMarkerIcon = function(color,className) {
  return L.divIcon({
    iconSize: new L.Point(25, 41),
    iconAnchor: new L.Point(12, 41),
    html: getGenericMarkerSvg(color),
    className: className || 'leaflet-iitc-divicon-generic-marker'
  });
}

window.createGenericMarker = function(ll,color,options) {
  options = options || {};

  var markerOpt = $.extend({
    icon: getGenericMarkerIcon(color || '#a24ac3')
  }, options);

  return L.marker(ll, markerOpt);
}



// Fix Leaflet: handle touchcancel events in Draggable
L.Draggable.prototype._onDownOrig = L.Draggable.prototype._onDown;
L.Draggable.prototype._onDown = function(e) {
  L.Draggable.prototype._onDownOrig.apply(this, arguments);

  if(e.type === ""touchstart"") {
    L.DomEvent.on(document, ""touchcancel"", this._onUp, this);
  }
}

",FALSE,,3913
3901,InitialSO.csv3901.txt,InitialGit.csv3901.txt,6,"var fs = require('fs');
var walk = function(dir, done) {
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) return done(err);
    var pending = list.length;
    if (!pending) return done(null, results);
    list.forEach(function(file) {
      file = dir + '/' + file;
      fs.stat(file, function(err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function(err, res) {
            results = results.concat(res);
            if (!--pending) done(null, results);
          });
        } else {
          results.push(file);
          if (!--pending) done(null, results);
        }
      });
    });
  });
};
 var fs = require('fs');
var walk = function(dir, done) {
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) return done(err);
    var i = 0;
    (function next() {
      var file = list[i++];
      if (!file) return done(null, results);
      file = dir + '/' + file;
      fs.stat(file, function(err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function(err, res) {
            results = results.concat(res);
            next();
          });
        } else {
          results.push(file);
          next();
        }
      });
    })();
  });
};
 walk(process.env.HOME, function(err, results) {
  if (err) throw err;
  console.log(results);
});
 ","var fs = require('fs');
var path = require('path');
var walk = function(dir, done) {
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) return done(err);
    var pending = list.length;
    if (!pending) return done(null, results);
    list.forEach(function(file) {
      file = path.resolve(dir, file);
      fs.stat(file, function(err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function(err, res) {
            results = results.concat(res);
            if (!--pending) done(null, results);
          });
        } else {
          results.push(file);
          if (!--pending) done(null, results);
        }
      });
    });
  });
};
 var fs = require('fs');
var path = require('path');
var walk = function(dir, done) {
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) return done(err);
    var i = 0;
    (function next() {
      var file = list[i++];
      if (!file) return done(null, results);
      file = path.resolve(dir, file);
      fs.stat(file, function(err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function(err, res) {
            results = results.concat(res);
            next();
          });
        } else {
          results.push(file);
          next();
        }
      });
    })();
  });
};
 walk(process.env.HOME, function(err, results) {
  if (err) throw err;
  console.log(results);
});
 ",FALSE,"var fs = require('fs'),
  util = require('util'),
  Util = require('./util');


var INVALID_FILE_TYPES = /.(DS_Store|ini|db|@SynoEAStream)$/i;



/**
 * @constructor
 */
function FileThingy(opts) {
  this.sourceDir = opts.sourceDir || this.help();
}


// Extend FileThingy with Util Class.
util.inherits(FileThingy, Util);


/**
 * @type {Object<>}
 * @private
 */
FileThingy.prototype.structure_ = {};


/**
 * @type {Array<Object<>>}
 * @private
 */
FileThingy.prototype.discarded_ = [];


// TODO: Make this generic enough to accept different renaming recipes.
FileThingy.prototype.getDirName = function(oldName) {
  // Yellowstone and Grand Teton_2 ~to~ Yellowstone and Grand Teton
  var newName = String(oldName);
  newName = oldName.replace(/_\d/g, '').trim(); 
  if (newName.slice(-1) !== '/') {
    newName += '/';
  }
  return newName; 
};


// TODO: Make this generic enough to accept different renaming recipes.
FileThingy.prototype.getFileName = function(fileName, timeStamp) {
  // Default Recipe - takes the final digits and extension only.
  var re = /.*\D(\d.\w)/;
  var newName = fileName.replace(re, '$1').toLowerCase();
  return timeStamp + ""."" + newName;
};


FileThingy.prototype.process = function() {
  for (directory in this.structure_) {
    console.log('New Directory', directory);
    this.structure_[directory].forEach(function(file) {
      console.log('\t', file.name)
    });
  }
};


/**
 * Nice IIFE taken from here: http://stackoverflow.com/a/5827895.
 */
FileThingy.prototype.walk = function(dir, done) {
  var self = this;
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) self.complain(err);
    var i = 0;
    (function next() {
      var item = list[i++];
      if (!item) return done(null, results);
      file = dir + item;

      // Check if the file is invalid, if so, discard.
      if (INVALID_FILE_TYPES.test(item)) {
        self.discarded_.push({name: item, path: dir});
        return next();
      }

      fs.stat(file, function(err, stat) {
        /**
         * If this is a directory, then repeat.
         */

        if (stat && stat.isDirectory()) {
          self.walk(file + '/', function(err, res) {
            next();
          });

        /**
         * If it is a file, append to the new structure_.
         */
        } else {

          // 1. Look to see if there is a directory for this file.
          // 2. If there is a directory, append the file.
          // 3. If there is NOT a directory, create one, and then append the file.

          var curDir;
          var structure = self.structure_;
          var timeStamp = stat.mtime.getTime() || + new Date;

          /**
           * This is NOT the root directory, therefore keep it.
           */

          if (dir !== self.sourceDir) {
            curDir = (structure[dir]) ? structure[dir] : structure[dir] = [];


          /**
           * This is the root directory, either (1), extract a new directory
           * name from the file, or (2), just rename the file and keep at the 
           * root level - the default is (1).
           */

          } else {
            var newDir = self.getDirName(dir);
            if (!structure[newDir]) structure[newDir] = [];
            curDir = structure[newDir];
          }

          var fileName = self.getFileName(item, timeStamp);
          // TODO: Is the `dir` right for `path`???
          curDir.push({path: dir, name: fileName});

          
          next();
        }
      });
    })();
  });
};


/**
 * Exposes FileThingy Contructor.
 */
module.exports = FileThingy;","var fs = require('fs'),
    util = require('util'),
    Log = require('./log'),
    Queue = require('./queue'),
    Util = require('./util');



/**
 * @param {Object} opts Options object.
 * @constructor
 * @extends {Util}
 */
function FileThingy(opts) {
  /**
   * Check for an optional file limit flag.
   * @type {?number}
   */
  this.fileLimit = opts.fileLimit || null;

  /**
   * Check for an optional file limit flag.
   * @type {?boolean}
   */
  this.shouldLog = opts.shouldLog || false;

  /**
   * Without a Source Directory, there is nothing to do - so show help if one
   * wasn't provided.
   * @type {?string}
   */
  this.sourceDir = opts.sourceDir || this.help();

  /**
   * Target Directory where the files and directories should be placed.
   * @type {?string}
   */
  this.targetDir = opts.targetDir || this.help();
}


/** FileThingy extends Util Class. */
util.inherits(FileThingy, Util);


/**
 * @type {Array.<Object>} List of files (and their paths) to discard.
 */
FileThingy.prototype.discarded = [];


/**
 * @type {number} File count. Initially set to zero.
 */
FileThingy.prototype.fileCount = 0;


/**
 * @type {Array.<string>} List of files to ignore.
 */
FileThingy.prototype.ignored = [];


/**
 * @type {Log} Log Class Instance.
 */
FileThingy.prototype.log = new Log();


/**
 * @type {Queue} File Queue Instance;
 */
FileThingy.prototype.queue = new Queue(this.fileLimit);


/**
 * Stores the directory structure for processing.
 * @enum {Object}
 */
FileThingy.prototype.structure = {};


/**
 * @const
 * @type {RegExp} Invalid directory names.
 */
FileThingy.prototype.INVALID_DIRECTORY_TYPES = /^(@eaDir)$/i;


/**
 * @const
 * @type {RegExp} File extensions for files that should be discared/skipped.
 */
FileThingy.prototype.INVALID_FILE_TYPES = /.(DS_Store|ini|db|@SynoEAStream)$/i;


/**
 * @const
 * @type {Array<string>}
 */
FileThingy.prototype.SAFE_ERRORS = [
  'EEXIST' // File or Directory already exists
];


/**
 * @const
 * @type {Array<string>}
 */
FileThingy.prototype.UNSAFE_ERRORS = [
  'ENOENT' // Directory does NOT exist.
];


/**
 * Copies files from the source to the target, renaming based on the structure
 * determined by the initial crawl.
 * @param {string} source Path to the original file to copy.
 * @param {string} target New path and name of file.
 * @param {function(string)} cb Callback with optional error to fire when done.
 */
FileThingy.prototype.copyFile = function(source, target, cb) {
  var self = this;

  var readFile = fs.createReadStream(source);
  readFile.on('error', function(err) {
    done(err);
  });

  var writeFile = fs.createWriteStream(target);
  writeFile.on('error', function(err) {
    done(err);
  });

  writeFile.on('close', function(ex) {
    done();
  });

  readFile.pipe(writeFile);

  function done(err) {
    if (err) {
      self.log.error('There was an error copying the file:\t' + err);
    } else {
      self.log.message('Successfully copied:\t' + target);
    }
    cb(err);
  }
};


/**
 * Crawl the directory(s) recursively, creating a new directory structure based
 * on file and directory Recipes provided.
 *
 * Nice IIFE taken from here: http://stackoverflow.com/a/5827895.
 * @param {string} dir The directory to crawl.
 * @param {function(string)} done Callback function to fire when done.
 * @public
 */
FileThingy.prototype.crawl = function(dir, done) {
  var self = this;

  /**
   * Reads the directory asynchronously.
   */
  fs.readdir(dir, function(err, list) {
    if (err) self.complain(err);
    var i = 0;
    (function next() {
      var item = list[i++];
      if (!item) return done(null);
      var file = dir + item;

      /**
       * Runs a file-system `stat` on the file or directory, providing
       * lower-level information about the file or directory.
       */
      fs.stat(file, function(err, stat) {

        if (err) {
          self.ignored.push(file);
          return next();
        }

        /**
         * If this is a directory, then repeat the process.
         */

        if (stat && stat.isDirectory()) {

          /**
           * Checks if the directory should be ignored, if so, it is skipped.
           */
          if (self.INVALID_DIRECTORY_TYPES.test(item)) {
            return next();
          }

          /**
           * Perform a recursive directory read.
           */

          self.crawl(self.addSlash(file), function(err, res) {
            if (err) self.complain(err);
            next();
          });

        } else {

          /**
           * Increment the filecount for statistical information.
           */
          self.fileCount++;

          /**
           * Checks if the file is invalid, if so, it is discarded.
           */
          if (self.INVALID_FILE_TYPES.test(item)) {
            self.discarded.push({name: item, path: dir});
            return next();
          }

          /**
           * 1. Look to see if there is a directory for this file.
           * 2. If there is a directory, append the file.
           * 3. If there is NOT a directory, create one, and then append the
           *     file.
           */

          var curDir;
          var structure = self.structure;

          if (dir !== self.sourceDir) {

            /**
             * This is NOT the root directory, therefore keep it.
             */

            curDir = dir;

          } else {

            /**
             * This IS the root directory, either (1), extract a new directory
             * name from the file, or (2), just rename the file and keep at the
             * root level - the default is (1).
             */

            curDir = item;

          }

          /**
           * Rename the file and add it to the proper directory.
           */

          // TODO: `mtime` returns an ugly timestamp - should be truncated.
          var timeStamp = ((stat.mtime.getTime() || + new Date) / 1000);
          var newName = self.getFileName_(item, timeStamp);

          var fileObject = {
            oldPath: dir,
            oldName: item,
            newName: newName
          };

          /**
           * Save a reference to the original file and path so we can find it
           * when we are processing it.
           */

          self.getDirName_(curDir, function(err, dirName) {
            if (err) {
              self.complain('There was a problem renaming the directory:\t',
                  curDir);
            }

            /**
             * If a directory could be extracted from the name, then add this
             * file to the `UNSORTED` directory.
             */
            dirName = dirName || 'UNSORTED';

            /**
             * Add this file to the proper directory index in the new structure.
             */
            structure[dirName] = structure[dirName] || [];
            structure[dirName].push(fileObject);

            next();
          });
        }
      });
    })();
  });
};


/**
 * Generates a new directory based on a Recipe. If no Recipe is available,
 *     generates a directory name based on the default Recipe.
 * @param {string} oldName Original name of file or directory.
 * @param {function(boolean, string)} done Callback to fire when done.
 * @return {string} Newly generated directory name.
 * @private
 */
FileThingy.prototype.getDirName_ = function(oldName, done) {
  var newName = '';
  var re = /(.*\D)(\d+.\w+)/; // Should be CONST

  var rawName = String(oldName);
  var parts = this.chopSlash(rawName).split('/');
  rawName = parts.pop().trim();

  /**
   * Strips the file extension, if one exists.
   * If we are extrating a suitable directory name from the file, then it's
   * not uncommon to have to do this.
   *
   * TODO: Use NODE to do this better.
   */
  rawName.replace(re, function(match, p1, p2) {
    newName = p1 || p2;
  });

  newName = newName || rawName;
  if (!newName) {
    return done(true);
  }

  /**
   * Default Recipe: Merge Duplicates
   * Yellowstone and Grand Teton_2 ~to~ Yellowstone and Grand Teton
   */
  return done(null, newName
    .replace(/[\W]*$/, '') // Strips Non-Word Chars at the end.
    .replace(/^.*_[\d]+$/, '') // Combine Duplicate Dirs, ie DIR_1, DIR_2.
    .trim());
};


/**
 * Generates a new file name based on a Recipe. If no Recipe is available, it
 *     generates a file name based on the default Recipe.
 *     TODO: Make this generic enough to accept different renaming recipes.
 * @param {string} fileName Name of file to rename.
 * @param {?string} prepend Optional string to prepend to file name.
 * @return {string} Newly generated file name.
 * @private
 */
FileThingy.prototype.getFileName_ = function(fileName, prepend) {
  // Default Recipe - takes the final digits and extension only.
  var re = /.*\D(\d.\w)/;
  var newName = fileName.replace(re, '$1').toLowerCase();
  return prepend ? prepend + '.' + newName : newName;
};


/**
 * Process the new directory structure, creating new directories and renaming
 * files.
 *
 * NOTE: This SHOULD be asynchronous, from here on, or it can be very slow.
 * TODO: It's NOT asynchronous now, MAKE it asynchronous.
 *
 * 1. Takes a directory from the  new directory structure, and attempts to
 *     create it.
 * 2. Starts adding files to the new directory. If the ""delete"" flag was sent,
 *     then the file will be ""moved"", not ""copied"".
 *
 * @param {function(string)} done Callback to fire when done.
 */
FileThingy.prototype.process = function(done) {
  var self = this;
  this.processDirectories(function(err) {
    self.log.message('Done processing directories.');
    self.processFiles(function(msg) {
      if (err) {
        self.log.error('EMFILE: Too many files open at once.');
        return done(err);
      }
      self.queue.execute(function(msg) {
        done(msg);
      });
    });
  });
};


/**
 * Adds a function for creating a directory to the queue.
 * @param {function} done Callback to fire when all directories have been
 *     processed.
 */
FileThingy.prototype.processDirectories = function(done) {
  var dirs = Object.keys(this.structure);
  var target = this.targetDir;
  var self = this;

  var i = 0;
  (function next() {
    var dir = dirs[i++];
    if (!dir) {
      return done();
    }
    var path = target + dir;
    fs.mkdir(path, function(err) {
      if (err && self.SAFE_ERRORS.indexOf(err.code) === -1) {
        if (err.code === 'ENOENT') {
          self.log.error('The Target directory does not exist, or you do not ' +
              'have permission to write to it.');
        } else {
          self.log.error(err);
        }
      } else {
        self.log.message('Done adding directory:\t' + path);
      }
      next();
    });
  })();
};


/**
 * Adds a function for moving / renaming a file to the queue.
 * @param {function} done Callback to fire when all directories have been
 *     processed.
 */
FileThingy.prototype.processFiles = function(done) {
  var dirs = Object.keys(this.structure);
  var target = this.targetDir;
  var self = this;

  dirs.forEach(function(dir) {
    var files = self.structure[dir];
    var path = target + dir;

    var i = 0;
    (function next() {
      var file = files[i++];
      if (!file) {
        self.log.message('Done queuing files for:\t' + dir);
        return done(null);
      }
      var fpath = path + '/' + file.newName;
      self.queue.addFile(function(cb) {
        self.copyFile(file.oldPath + file.oldName, fpath, cb);
      }, next());
    })();
  });
};


/**
 * Exposes FileThingy Contructor.
 */
module.exports = FileThingy;
",FALSE,,3923
3902,InitialSO.csv3902.txt,InitialGit.csv3902.txt,22,"# coding: utf-8
import csv
D = {'name':u'马克','pinyin':u'mǎkè'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = csv.DictWriter(f,sorted(D.keys()))
w.writeheader()
w.writerow({k:v.encode('utf8') for k,v in D.items()})
f.close()
 # coding: utf-8
import csv
import cStringIO
import codecs

class DictUnicodeWriter(object):

    def __init__(self, f, fieldnames, dialect=csv.excel, encoding=""utf-8"", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, D):
        self.writer.writerow({k:v.encode(""utf-8"") for k,v in D.items()})
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode(""utf-8"")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for D in rows:
            self.writerow(D)

    def writeheader(self):
        self.writer.writeheader()

D1 = {'name':u'马克','pinyin':u'Mǎkè'}
D2 = {'name':u'美国','pinyin':u'Měiguó'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = DictUnicodeWriter(f,sorted(D.keys()))
w.writeheader()
w.writerows([D1,D2])
f.close()
 ","# coding: utf-8
import csv
D = {'name':u'马克','pinyin':u'mǎkè'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = csv.DictWriter(f,sorted(D.keys()))
w.writeheader()
w.writerow({k:v.encode('utf8') for k,v in D.items()})
f.close()
 # coding: utf-8
import csv
import cStringIO
import codecs

class DictUnicodeWriter(object):

    def __init__(self, f, fieldnames, dialect=csv.excel, encoding=""utf-8"", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, D):
        self.writer.writerow({k:v.encode(""utf-8"") for k,v in D.items()})
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode(""utf-8"")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for D in rows:
            self.writerow(D)

    def writeheader(self):
        self.writer.writeheader()

D1 = {'name':u'马克','pinyin':u'Mǎkè'}
D2 = {'name':u'美国','pinyin':u'Měiguó'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = DictUnicodeWriter(f,sorted(D.keys()))
w.writeheader()
w.writerows([D1,D2])
f.close()
 # coding: utf-8
import unicodecsv as csv

D = {u'name':u'马克',u'pinyin':u'mǎkè'}

with open('out.csv','wb') as f:
    w = csv.DictWriter(f,fieldnames=sorted(D.keys()),encoding='utf-8-sig')
    w.writeheader()
    w.writerow(D)
 # coding: utf-8
import csv

D = {u'name':u'马克',u'pinyin':u'mǎkè'}

# Use newline='' instead of 'wb' in Python 3.
with open('out.csv','w',encoding='utf-8-sig',newline='') as f:
    w = csv.DictWriter(f,fieldnames=sorted(D.keys()))
    w.writeheader()
    w.writerow(D)
 ",FALSE,"# coding: utf-8
import csv
import cStringIO
import codecs

_sample_article_name = 'Social_network'
_sample_category_name = 'Category:21st-century_aviation_accidents_and_incidents'

def wikipedia_query(query_params):
	""""""
	An extremely basic wrapper for the wikitools api.
	""""""
	from wikitools import wiki, api
	site = wiki.Wiki() # This defaults to en.wikipedia.org
	request = api.APIRequest(site, query_params)
	result = request.query()
	return result[query_params['action']]

def page_revisions(page_title, rvlimit=5000, debug=False):
	""""""
	Given the proper name of a page on Wikipedia, this will return
	basic identifying information all revisions. Each revision entry
	will inclue the original page title, the user who made the 
	revision, the timestamp of the revision (in seconds since the
	UNIX epoch - 1/1/1970), and the unique revision id for the
	page.
	""""""
	import dateutil.parser
	import calendar
	if debug:
		print ""Getting revisions for page '%s'."" % page_title
	result = wikipedia_query({'action': 'query', 
								'titles': page_title, 
								'prop': 'revisions', 
								'rvlimit': str(rvlimit)})
	revisions = []
	if result and 'pages' in result.keys():
		page_number = result['pages'].keys()[0]
		revisions = result['pages'][page_number]['revisions']
		revisions = sorted(revisions, key=lambda revision: revision['timestamp'])
		if debug:
			print ""~~@ Found %d revisions."" % len(revisions)
		for i, revision in enumerate(revisions):
			# The timestamp as supplied by wikitools is in the standard ISO 
			# timestamp format. We may want to use this more flexibly in Python, 
			# so we'll convert it to number of seconds since the UNIX epoch.
			iso_timestamp = revision['timestamp']
			py_timestamp = dateutil.parser.parse(iso_timestamp)
			seconds_since_epoch = calendar.timegm(py_timestamp.timetuple())
			revisions[i] = {'title': page_title, 
							'user': revision['user'], 
							'timestamp': str(seconds_since_epoch), 
							'revid': str(revision['revid'])}
	return revisions

def category_pages(category_title, depth=1, debug=False):
	""""""
	Given the proper name of a category on Wikipedia, this will return
	a list of all proper page titles (not categories) found within that
	category. With 'depth' set to 1 (default), this will return only
	the pages found immediately within the given category. If depth is
	2, pages belonging to the subcategories will also be included.

	*** Be very cautious with setting depth higher than 2, as the number
	of pages and sub-categories grows exponentially with depth.
	""""""
	params = {'action': 'query', 
				'list': 'categorymembers', 
				'cmtitle': category_title, 
				'cmtype': 'page',
				'cmlimit': '500'}
	if debug:
		print ""Querying Wikipedia for sub-pages of '%s'..."" % (category_title)
		print ""Depth = %d"" % depth
	results = wikipedia_query(params)
	pages = []
	if 'categorymembers' in results.keys() and len(results['categorymembers']) > 0:
		if debug:
			print ""Found %d sub-pages!"" % (len(results['categorymembers']))
		pages = [page['title'] for page in results['categorymembers']]
		if depth > 1:
			subcategories = category_subcategories(category_title, debug=debug)
			for subcategory in subcategories:
				pages += category_pages(subcategory, depth=depth - 1, debug=debug)
				if depth > 2:
					subsubcategories = category_subcategories(subcategory, debug=debug)
					for subsubcategory in subsubcategories:
						if subsubcategory not in subcategories:
							subcategories.append(subsubcategory)
	return pages

def category_subcategories(category_title, debug=False):
	""""""
	Given the proper name of a category on Wikipedia, this
	will return a list of the titles only of all sub-categories. If
	there are no sub-categories, the list returned is empty. 
	""""""
	params = {'action': 'query',
				'list': 'categorymembers',
				'cmtitle': category_title,
				'cmtype': 'subcat',
				'cmlimit': '500'}
	if debug:
		print ""Querying Wikipedia for sub-categories of '%s'..."" % (category_title)
	results = wikipedia_query(params)
	subcategories = []
	if 'categorymembers' in results.keys() and len(results['categorymembers']) > 0:
		if debug:
			print ""Found %d sub-categories!"" % (len(results['categorymembers']))
		subcategories = [category['title'] for category in results['categorymembers']]
	return subcategories
		

class DictUnicodeWriter(object):
	""""""
	Code borrowed from http://stackoverflow.com/a/5838817
	""""""
	def __init__(self, f, fieldnames, dialect=csv.excel, encoding=""utf-8"", **kwds):
		# Redirect output to a queue
		self.queue = cStringIO.StringIO()
		self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
		self.stream = f
		self.encoder = codecs.getincrementalencoder(encoding)()

	def writerow(self, D):
		self.writer.writerow({k:v.encode(""utf-8"") for k,v in D.items()})
		# Fetch UTF-8 output from the queue ...
		data = self.queue.getvalue()
		data = data.decode(""utf-8"")
		# ... and reencode it into the target encoding
		data = self.encoder.encode(data)
		# write to the target stream
		self.stream.write(data)
		# empty queue
		self.queue.truncate(0)
	
	def writerows(self, rows):
		for D in rows:
			self.writerow(D)
	
	def writeheader(self):
		self.writer.writeheader()

		
def main():
	pages = category_pages(_sample_category_name, depth=2, debug=True)
	all_revisions = []
	for page in pages[:2]:
		all_revisions += page_revisions(page, debug=True)
	csv_file = open(_sample_category_name + "".csv"", ""wb"")
	# Below two line taken from http://stackoverflow.com/a/583881
	# BOM (optional...Excel needs it to open UTF-8 file properly)
	csv_file.write(u'\ufeff'.encode('utf8'))
	dw = DictUnicodeWriter(csv_file, 
							['title', 'user', 'timestamp', 'revid'],
							delimiter=',',
							quotechar='""')
	dw.writeheader()
	dw.writerows(all_revisions)
	csv_file.close()

if __name__ == ""__main__"":
	main()
","# coding: utf-8
from wikitools import wiki, api
import csv
import cStringIO
import codecs
import dateutil.parser
import calendar

_sample_article_name = 'Social_network'
_sample_category_name = 'Category:21st-century_aviation_accidents_and_incidents'

def wikipedia_query(query_params):
	""""""
	An extremely basic wrapper for the wikitools api.
	""""""
	site = wiki.Wiki() # This defaults to en.wikipedia.org
	request = api.APIRequest(site, query_params)
	result = request.query()
	return result[query_params['action']]

def page_revisions(page_title, page_id=-1, rvlimit=5000, debug=False):
	""""""
	Given a dictionary containing the title and pageid of a page 
	on Wikipedia, this will return basic identifying information 
	for all revisions. Each revision entry will inclue the 
	original page title and pageid, the user who made the revision, the 
	timestamp of the revision (in seconds since the UNIX epoch 
	- 1/1/1970), and the unique revision id for the page.
	""""""
	if debug:
		print ""Getting revisions for page '%s' (%d)."" % (page_title, page_id)
	result = wikipedia_query({'action': 'query', 
								'titles': page_title, 
								'prop': 'revisions', 
								'rvprop': 'ids|timestamp|user|userid',
								'rvlimit': str(rvlimit)})
	revisions = []
	if result and 'pages' in result.keys():
		page_number = result['pages'].keys()[0]
		revisions = result['pages'][page_number]['revisions']
		revisions = sorted(revisions, key=lambda revision: revision['timestamp'])
		if debug:
			print ""~~@ Found %d revisions."" % len(revisions)
		for i, revision in enumerate(revisions):
			# The timestamp as supplied by wikitools is in the standard ISO 
			# timestamp format. We may want to use this more flexibly in Python, 
			# so we'll convert it to number of seconds since the UNIX epoch.
			iso_timestamp = revision['timestamp']
			py_timestamp = dateutil.parser.parse(iso_timestamp)
			seconds_since_epoch = calendar.timegm(py_timestamp.timetuple())
			if 'userhidden' in revision.keys():
				revision['user'] = ""userhidden""
				revision['userid'] = ''
			if 'userid' in revision.keys() and revision['userid'] == 0 and 'anon' in revision.keys():
				# Then we'll take the user, which contains an IP address,
				# and re-format it from vvv.xxx.yyy.zzz to 
				# vvvxxxyyyzzz0000000000
				ip = revision['user']
				revision['userid'] = ''.join(['0'*(3-len(octet))+octet for octet in ip.split('.')]) + ""0000000000""
			revisions[i] = {'title': page_title, 
							'pageid': str(page_id),
							'user': revision['user'], 
							'userid': str(revision['userid']),
							'timestamp': str(seconds_since_epoch), 
							'revid': str(revision['revid'])}
	return revisions

def crawl_category(category_title, depth=1, debug=False):
	""""""
	Given the proper name of a category on Wikipedia, this will return
	a list comprised of the category given along with all sub-categories 
	found therein. With a depth > 1, this will explore that many 
	sublevels of sub-categories for each category found. 
	""""""
	explored_categories = set()
	categories_to_explore = set([category_title])
#	print repr(categories_to_explore)
	while depth > 0:
		subcategories = set()
		for category in categories_to_explore:
			if category not in explored_categories:
#				print ""Exploring category '%s'..."" % category
				new_subcategories = category_subcategories(category, debug=debug)
				if debug:
					print ""Found %d subcategories of '%s':"" % (len(new_subcategories), category)
					for ns in new_subcategories:
						print ""  %s"" % ns
				subcategories.update(new_subcategories)
#				categories_to_explore.remove(category)
				explored_categories.add(category)
			else:
				if debug:
					print ""'%s' has already been explored!"" % category
				pass
		categories_to_explore = set(subcategories)
		depth = depth - 1
	return list(explored_categories.union(categories_to_explore))

def category_pages(category_title, debug=False):
	""""""
	Given the proper name of a category on Wikipedia, this will return
	a list of all proper page titles (not categories) found within that
	category.
	""""""
	params = {'action': 'query', 
				'list': 'categorymembers', 
				'cmtitle': category_title, 
				'cmtype': 'page',
				'cmlimit': '500'}
	if debug:
		print ""Querying Wikipedia for sub-pages of '%s'..."" % (category_title)
	results = wikipedia_query(params)
	pages = []
	if 'categorymembers' in results.keys() and len(results['categorymembers']) > 0:
		if debug:
			print ""Found %d sub-pages!"" % (len(results['categorymembers']))
		pages = [{'title': page['title'], 'pageid': page['pageid']} for page in results['categorymembers']]
	return pages

def category_subcategories(category_title, debug=False):
	""""""
	Given the proper name of a category on Wikipedia, this
	will return a list of the titles only of all sub-categories. If
	there are no sub-categories, the list returned is empty. 
	""""""
	params = {'action': 'query',
				'list': 'categorymembers',
				'cmtitle': category_title,
				'cmtype': 'subcat',
				'cmlimit': '500'}
	if debug:
		print ""Querying Wikipedia for sub-categories of '%s'..."" % (category_title)
	results = wikipedia_query(params)
	subcategories = []
	if 'categorymembers' in results.keys() and len(results['categorymembers']) > 0:
		if debug:
			print ""Found %d sub-categories!"" % (len(results['categorymembers']))
		subcategories = [category['title'] for category in results['categorymembers']]
	return subcategories
		

class DictUnicodeWriter(object):
	""""""
	Code borrowed from http://stackoverflow.com/a/5838817
	""""""
	def __init__(self, f, fieldnames, dialect=csv.excel, encoding=""utf-8"", **kwds):
		# Redirect output to a queue
		self.queue = cStringIO.StringIO()
		self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
		self.stream = f
		self.encoder = codecs.getincrementalencoder(encoding)()

	def writerow(self, D):
		self.writer.writerow({k:v.encode(""utf-8"") for k,v in D.items()})
		# Fetch UTF-8 output from the queue ...
		data = self.queue.getvalue()
		data = data.decode(""utf-8"")
		# ... and reencode it into the target encoding
		data = self.encoder.encode(data)
		# write to the target stream
		self.stream.write(data)
		# empty queue
		self.queue.truncate(0)
	
	def writerows(self, rows):
		for D in rows:
			self.writerow(D)
	
	def writeheader(self):
		self.writer.writeheader()

		
def main():
	category_name = ''
	while category_name == '':
		category_name = raw_input(""Enter a category name: "")
	category_name = unicode(""Category:"" + category_name)
	category_depth = -1
	while category_depth <= 0: 
		try:
			category_depth = int(raw_input(""Enter a traversal depth (integer >= 1): ""))
		except ValueError:
			print ""Please enter an integer greater than or equal to 1.""

	# First we find all categories and sub-categories
	all_categories = crawl_category(category_name, depth=category_depth, debug=True)			
	
	# Next we find all pages that exist in each of those category 
	# pages
	pages = []
	for category in all_categories:
		new_pages = category_pages(category, debug=True)
		for page in new_pages:
			if page not in pages:
				pages.append(page)

	# Next we get the revision history for each one of those pages
	all_revisions = []
	for page in pages:
		all_revisions += page_revisions(page_title=page['title'], 
										page_id=page['pageid'], debug=True)
	
	# Now we dump it all to a CSV file with Unicode support
	csv_filename = category_name + ""-depth"" + str(category_depth) + "".csv""
	print ""Writing revisions to file '%s'."" % csv_filename
	csv_file = open(csv_filename, ""wb"")
	# Below two line taken from http://stackoverflow.com/a/583881
	# BOM (optional...Excel needs it to open UTF-8 file properly)
	csv_file.write(u'\ufeff'.encode('utf8'))
	dw = DictUnicodeWriter(csv_file, 
							['pageid', 'userid', 'title', 'user', 'timestamp', 'revid'],
							delimiter=',',
							quotechar='""')
#	dw.writeheader()
	dw.writerows(all_revisions)
	csv_file.close()

if __name__ == ""__main__"":
	main()
",FALSE,,3924
3904,InitialSO.csv3904.txt,InitialGit.csv3904.txt,15,"canvas.offsetLeft/Top div position: relative offsetParent function relMouseCoords(event){
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;
    
    do{
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while(currentElement = currentElement.offsetParent)
    
    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;
    
    return {x:canvasX, y:canvasY}
}
HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
 coords = canvas.relMouseCoords(event);
canvasX = coords.x;
canvasY = coords.y;
 ","canvas.offsetLeft/Top div position: relative offsetParent function relMouseCoords(event){
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;

    do{
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while(currentElement = currentElement.offsetParent)

    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;

    return {x:canvasX, y:canvasY}
}
HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
 coords = canvas.relMouseCoords(event);
canvasX = coords.x;
canvasY = coords.y;
 ",FALSE,"
var settings = {};
settings.icons = [
   'images/ico-tree.svg'
  ,'images/ico-boat.png'
  ,'images/ico-waves.png'
];

settings.controller = {
  click_radius2: 15*25
  ,click_time: 500
};

settings.renderer = {
  scroll_factor: 1/8
}/* island-graph.js
 *    manage internal representation of the map
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 var graph = (function(){

  var structure = [
    {icon:'images/ico-tree.svg', x:0, y:0}
  ];

  var _allInside = function(x, y, w, h, callback){
    for(var i=0;i<structure.length;i++){
      var o = structure[i];
      if(o.x >= x && o.x <= x+w && o.y >= y && o.y <= y+h){
        callback(o);
      }
    }
  }

  var _init = function(){

  }
  return {
    init:_init
    ,allInside:_allInside
  };
})();
/* util-canvas.js
 *    low level canvas management. including auto resize,
 *    image loading and display
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var canvas = document.getElementById(""screen"");

var util_canvas = (function() {
  var context = canvas.getContext(""2d"");
  

  var _fit_canvas = function() {
    var w_pad = 10;
    var h_pad = 10;
    var aspect = 4/3;
    var controls = document.getElementById(""control"");

    return function() {
      var usable_w = window.innerWidth - controls.offsetWidth - w_pad;
      var usable_h = window.innerHeight - controls.offsetHeight - h_pad;

      if(usable_w < usable_h * aspect) {
        canvas.width = usable_w;
        canvas.height = usable_w / aspect;
      }
      else {
        canvas.width = usable_h * aspect;
        canvas.height = usable_h;
      }
    }
  }

  var _relativeDraw = function(img, x, y, w, h) {
    var scale = canvas.width;
    var rx = x * scale;
    var ry = y * scale;
    var rw = w * scale;
    var rh = h * scale;

    return context.drawImage(img,rx-rw/2,ry-rh/2,rw,rh);
  }

  var _init = function(){
    var fit_canvas_func = _fit_canvas();
    window.addEventListener('resize', fit_canvas_func);
    fit_canvas_func();
  }

  var _clear = function(color){
    context.fillStyle = color;
    context.fillRect(0,0,canvas.width,canvas.height);
  }

  return {
     relativeDraw:_relativeDraw
    ,init:_init
    ,clear:_clear
  };
})();
/* renderer.js
 *    manage the view. call for image loading and drawing as required by
 *    renderer's state and the island graph
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 var renderer = (function(){

  var view_pos = {x: -50, y:-50};
  var view_size = {x: 100, y:100};
  var view_padding = 100;
  var view_icons_size = 1/10;

  var image_cache = {};

  var _preloadImage = function(path){
    var img = new Image();
    img.onload = _draw;
    img.src = path;
    image_cache[path] = img;
  }

  var _getImage = function(path){
    if(typeof image_cache[path] === 'undefined'){
      //we didn't load this image so it must be a mistake
      return null;
    }
    return image_cache[path];
  }

  var _draw_island = function(island){
    var x = island.x-view_pos.x;
    var y = island.y-view_pos.y;
    util_canvas.relativeDraw(_getImage(island.icon), x/view_size.x,
                                                     y/view_size.y,
                                                     view_icons_size,
                                                     view_icons_size);
  }

  var _draw = function(){
    util_canvas.clear('#AAAAFF');
    graph.allInside(view_pos.x-view_padding,
                    view_pos.y-view_padding,
                    view_size.x+2*view_padding,
                    view_size.y+2*view_padding,
                    _draw_island);
  }

  var _scroll = function(dx, dy){
    view_pos.x += dx * settings.renderer.scroll_factor;
    view_pos.y += dy * settings.renderer.scroll_factor;
    _draw();
  }

  var _init = function(){
    for(var i=0;i<settings.icons.length;i++){
      _preloadImage(settings.icons[i]);
    }
    window.addEventListener('resize', _draw);
  }

  return {
     init: _init
    ,draw: _draw
    ,scroll: _scroll
  };
})();
/* controller.js
 *    collection of functions to put in html onclick
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/*
source: http://stackoverflow.com/questions/55677/5932203#5932203
*/
function relMouseCoords(event){
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;

    do{
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while(currentElement = currentElement.offsetParent)

    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;

    return {x:canvasX, y:canvasY}
}
HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
/*
  end source
*/
var click_data = {time:0, x:0, y:0};
var AAAA = null;

function init(){
  util_canvas.init();
  graph.init();
  renderer.init();

  canvas.addEventListener('mousedown', function(e){
    var coords = canvas.relMouseCoords(e);
    click_data.time = e.timeStamp;
    click_data.x = coords.x;
    click_data.y = coords.y;
  });

  canvas.addEventListener('mouseup', function(e){
    var coords = canvas.relMouseCoords(e);
    var dx = click_data.x - coords.x;
    var dy = click_data.y - coords.y;
    if(e.timeStamp - click_data.time < settings.controller.click_time &&
            dx*dx+dy*dy<settings.controller.click_radius2){
      console.log(""click event!"");
    }
    click_data.time = 0;
    click_data.x = 0;
    click_data.y = 0;
  });

  canvas.addEventListener('mousemove', function(e){
    var coords = canvas.relMouseCoords(e);
    var dx = click_data.x - coords.x;
    var dy = click_data.y - coords.y;
    if(click_data.time != 0){
      renderer.scroll(dx, dy);
      click_data.x = coords.x;
      click_data.y = coords.y;
    }
  });
  canvas.addEventListener('mouseout', function(e){
    click_data.time = 0;
    click_data.x = 0;
    click_data.y = 0;
  });
};

window.onload = init;
","
var settings = {};
settings.icons = [
   'images/ico-tree.svg'
  ,'images/ico-boat.png'
  ,'images/ico-waves.png'
];

settings.controller = {
  click_radius2: 15*25
  ,click_time: 500
};

settings.renderer = {
  scroll_factor: 1/8
}/* island-graph.js
 *    manage internal representation of the map
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
 var graph = (function(){

  var structure = [
    {icon:'images/ico-tree.svg', x:0, y:0}
  ];

  var _allInside = function(x, y, w, h, callback){
    for(var i=0;i<structure.length;i++){
      var o = structure[i];
      if(o.x >= x && o.x <= x+w && o.y >= y && o.y <= y+h){
        callback(o);
      }
    }
  }

  var _init = function(){

  }
  return {
    init:_init
    ,allInside:_allInside
  };
})();
/* util-canvas.js
 *    low level canvas management. including auto resize,
 *    image loading and display
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var canvas = document.getElementById(""screen"");

var util_canvas = (function() {
  var context = canvas.getContext(""2d"");
  

  var _fit_canvas = function() {
    var w_pad = 10;
    var h_pad = 10;
    var aspect = 4/3;
    var controls = document.getElementById(""control"");

    return function() {
      var usable_w = window.innerWidth - controls.offsetWidth - w_pad;
      var usable_h = window.innerHeight - controls.offsetHeight - h_pad;

      if(usable_w < usable_h * aspect) {
        canvas.width = usable_w;
        canvas.height = usable_w / aspect;
      }
      else {
        canvas.width = usable_h * aspect;
        canvas.height = usable_h;
      }
    }
  }

  var _relativeDraw = function(img, x, y, w, h) {
    var scale = canvas.width;
    var rx = x * scale;
    var ry = y * scale;
    var rw = w * scale;
    var rh = h * scale;

    return context.drawImage(img,rx-rw/2,ry-rh/2,rw,rh);
  }

  var _init = function(){
    var fit_canvas_func = _fit_canvas();
    window.addEventListener('resize', fit_canvas_func);
    fit_canvas_func();
  }

  var _clear = function(color){
    context.fillStyle = color;
    context.fillRect(0,0,canvas.width,canvas.height);
  }

  return {
     relativeDraw:_relativeDraw
    ,init:_init
    ,clear:_clear
  };
})();
/* renderer.js
 *    manage the view. call for image loading and drawing as required by
 *    renderer's state and the island graph
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 var renderer = (function(){

  var view_pos = {x: -50, y:-50};
  var view_size = {x: 100, y:100};
  var view_padding = 100;
  var view_icons_size = 1/10;

  var image_cache = {};

  var _preloadImage = function(path){
    var img = new Image();
    img.onload = _draw;
    img.src = path;
    image_cache[path] = img;
  }

  var _getImage = function(path){
    if(typeof image_cache[path] === 'undefined'){
      //we didn't load this image so it must be a mistake
      return null;
    }
    return image_cache[path];
  }

  var _draw_island = function(island){
    var x = island.x-view_pos.x;
    var y = island.y-view_pos.y;
    util_canvas.relativeDraw(_getImage(island.icon), x/view_size.x,
                                                     y/view_size.y,
                                                     view_icons_size,
                                                     view_icons_size);
  }

  var _draw = function(){
    util_canvas.clear('#AAAAFF');
    graph.allInside(view_pos.x-view_padding,
                    view_pos.y-view_padding,
                    view_size.x+2*view_padding,
                    view_size.y+2*view_padding,
                    _draw_island);
  }

  var _scroll = function(dx, dy){
    view_pos.x += dx * settings.renderer.scroll_factor;
    view_pos.y += dy * settings.renderer.scroll_factor;
    _draw();
  }

  var _init = function(){
    for(var i=0;i<settings.icons.length;i++){
      _preloadImage(settings.icons[i]);
    }
    window.addEventListener('resize', _draw);
  }

  return {
     init: _init
    ,draw: _draw
    ,scroll: _scroll
  };
})();
/* controller.js
 *    collection of functions to put in html onclick
 *
 * Copyright 2015. verev.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/*
source: http://stackoverflow.com/questions/55677/5932203#5932203
*/
function relMouseCoords(event){
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var canvasX = 0;
    var canvasY = 0;
    var currentElement = this;

    do{
        totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
        totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    while(currentElement = currentElement.offsetParent)

    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;

    return {x:canvasX, y:canvasY}
}
HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;
/*
  end source
*/
var click_data = {time:0, x:0, y:0};
var AAAA = null;

function init(){
  util_canvas.init();
  graph.init();
  renderer.init();

  canvas.addEventListener('mousedown', function(e){
    var coords = canvas.relMouseCoords(e);
    click_data.time = e.timeStamp;
    click_data.x = coords.x;
    click_data.y = coords.y;
  });

  canvas.addEventListener('mouseup', function(e){
    var coords = canvas.relMouseCoords(e);
    var dx = click_data.x - coords.x;
    var dy = click_data.y - coords.y;
    if(e.timeStamp - click_data.time < settings.controller.click_time &&
            dx*dx+dy*dy<settings.controller.click_radius2){
      console.log(""click event!"");
    }
    click_data.time = 0;
    click_data.x = 0;
    click_data.y = 0;
  });

  canvas.addEventListener('mousemove', function(e){
    var coords = canvas.relMouseCoords(e);
    var dx = click_data.x - coords.x;
    var dy = click_data.y - coords.y;
    if(click_data.time != 0){
      renderer.scroll(dx, dy);
      click_data.x = coords.x;
      click_data.y = coords.y;
    }
  });
  canvas.addEventListener('mouseout', function(e){
    click_data.time = 0;
    click_data.x = 0;
    click_data.y = 0;
  });
};

window.onload = init;
",TRUE,,3925
3909,InitialSO.csv3909.txt,InitialGit.csv3909.txt,10,"    function simulate(element, eventName)
    {
        var options = extend(defaultOptions, arguments[2] || {});
        var oEvent, eventType = null;

        for (var name in eventMatchers)
        {
            if (eventMatchers[name].test(eventName)) { eventType = name; break; }
        }

        if (!eventType)
            throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');

        if (document.createEvent)
        {
            oEvent = document.createEvent(eventType);
            if (eventType == 'HTMLEvents')
            {
                oEvent.initEvent(eventName, options.bubbles, options.cancelable);
            }
            else
            {
                oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
          options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
          options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
            }
            element.dispatchEvent(oEvent);
        }
        else
        {
            options.clientX = options.pointerX;
            options.clientY = options.pointerY;
            var evt = document.createEventObject();
            oEvent = extend(evt, options);
            element.fireEvent('on' + eventName, oEvent);
        }
        return element;
    }

    function extend(destination, source) {
        for (var property in source)
          destination[property] = source[property];
        return destination;
    }

var eventMatchers = {
    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
}
var defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
}
 simulate(document.getElementById(""btn""), ""click"");
 ","function simulate(element, eventName)
{
    var options = extend(defaultOptions, arguments[2] || {});
    var oEvent, eventType = null;

    for (var name in eventMatchers)
    {
        if (eventMatchers[name].test(eventName)) { eventType = name; break; }
    }

    if (!eventType)
        throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');

    if (document.createEvent)
    {
        oEvent = document.createEvent(eventType);
        if (eventType == 'HTMLEvents')
        {
            oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        }
        else
        {
            oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
    }
    else
    {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        var evt = document.createEventObject();
        oEvent = extend(evt, options);
        element.fireEvent('on' + eventName, oEvent);
    }
    return element;
}

function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
}

var eventMatchers = {
    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
}
var defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
}
 simulate(document.getElementById(""btn""), ""click"");
 simulate(document.getElementById(""btn""), ""click"", { pointerX: 123, pointerY: 321 })
 ",FALSE,"/*! DOMTrigger.js - v0.1.0 - 2012-10-22
* https://github.com/stevoland/DOMTrigger.js
 Licensed MIT */

(function (root, factory, d) {
	if (typeof exports === 'object') {
		module.exports = factory();
	} else if (typeof define === 'function' && define.amd) {
		define([], factory);
	} else {
		root.returnExports = factory();
	}
}(this, function () {

	var eventMatchers = {
			'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
			'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
		},
		defaultOptions = {
			pointerX: 0,
			pointerY: 0,
			button: 0,
			ctrlKey: false,
			altKey: false,
			shiftKey: false,
			metaKey: false,
			bubbles: true,
			cancelable: true
		};

	function extend (destination, source) {
		for (var property in source) {
			destination[property] = source[property];
		}

		return destination;
	}

	/**
	 * Trigger a HTMLEvent or MouseEvent
	 * Credit: http://stackoverflow.com/a/6158050
	 *
	 * @private
	 * @param  {HTMLElement} element     The target element
	 * @param  {string}      eventName   Event type
	 * @param  {object}      ...         [optional] event object
	 * @return {HTMLElement}             The target element
	 */
	function DOMTrigger (element, eventName)
	{
		var options = extend(defaultOptions, arguments[2] || {}),
			oEvent, eventType = null,
			d = document;

		for (var name in eventMatchers) {
			if (eventMatchers[name].test(eventName)) { eventType = name; break; }
		}

		if (!eventType) {
			throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');
		}

		if (d.createEvent) {
			oEvent = d.createEvent(eventType);
			if (eventType === 'HTMLEvents') {
				oEvent.initEvent(eventName, options.bubbles, options.cancelable);
			}
			else {
				oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, d.defaultView,
					options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
					options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
			}
			oEvent = extend(oEvent, options);
			element.dispatchEvent(oEvent);
		}
		else {
			options.clientX = options.pointerX;
			options.clientY = options.pointerY;
			var evt = d.createEventObject();
			oEvent = extend(evt, options);
			element.fireEvent('on' + eventName, oEvent);
		}
		return element;
	}

	return DOMTrigger;
}));","/*! DOMTrigger.js - v0.1.0 - 2012-10-22
* https://github.com/stevoland/DOMTrigger.js
 Licensed MIT */

(function (root, factory, d) {
	if (typeof exports === 'object') {
		module.exports = factory();
	} else if (typeof define === 'function' && define.amd) {
		define([], factory);
	} else {
		root.returnExports = factory();
	}
}(this, function () {

	var eventMatchers = {
			'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
			'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
		},
		defaultOptions = {
			pointerX: 0,
			pointerY: 0,
			button: 0,
			ctrlKey: false,
			altKey: false,
			shiftKey: false,
			metaKey: false,
			bubbles: true,
			cancelable: true
		};

	function extend (destination, source) {
		for (var property in source) {
			destination[property] = source[property];
		}

		return destination;
	}

	/**
	 * Trigger a HTMLEvent or MouseEvent
	 * Credit: http://stackoverflow.com/a/6158050
	 *
	 * @private
	 * @param  {HTMLElement} element     The target element
	 * @param  {string}      eventName   Event type
	 * @param  {object}      ...         [optional] event object
	 * @return {HTMLElement}             The target element
	 */
	function DOMTrigger (element, eventName)
	{
		var options = extend(defaultOptions, arguments[2] || {}),
			oEvent, eventType = null,
			d = document;

		for (var name in eventMatchers) {
			if (eventMatchers[name].test(eventName)) { eventType = name; break; }
		}

		if (!eventType) {
			throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');
		}

		if (d.createEvent) {
			oEvent = d.createEvent(eventType);
			if (eventType === 'HTMLEvents') {
				oEvent.initEvent(eventName, options.bubbles, options.cancelable);
			}
			else {
				oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, d.defaultView,
					options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
					options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
			}
			oEvent = extend(oEvent, options);
			element.dispatchEvent(oEvent);
		}
		else {
			options.clientX = options.pointerX;
			options.clientY = options.pointerY;
			var evt = d.createEventObject();
			oEvent = extend(evt, options);
			element.fireEvent('on' + eventName, oEvent);
		}
		return element;
	}

	return DOMTrigger;
}));",TRUE,,3939
3910,InitialSO.csv3910.txt,InitialGit.csv3910.txt,7,"UnicodeDictReader csv.reader class UnicodeCsvReader(object):
    def __init__(self, f, encoding=""utf-8"", **kwargs):
        self.csv_reader = csv.reader(f, **kwargs)
        self.encoding = encoding

    def __iter__(self):
        return self

    def next(self):
        # read and split the csv row into fields
        row = self.csv_reader.next() 
        # now decode
        return [unicode(cell, self.encoding) for cell in row]

    @property
    def line_num(self):
        return self.csv_reader.line_num

class UnicodeDictReader(csv.DictReader):
    def __init__(self, f, encoding=""utf-8"", fieldnames=None, **kwds):
        csv.DictReader.__init__(self, f, fieldnames=fieldnames, **kwds)
        self.reader = UnicodeCsvReader(f, encoding=encoding, **kwds)
 csv_lines = (
    ""абв,123"",
    ""где,456"",
)

for row in UnicodeCsvReader(csv_lines):
    for col in row:
        print(type(col), col)
 $ python test.py
<type 'unicode'> абв
<type 'unicode'> 123
<type 'unicode'> где
<type 'unicode'> 456
 ","UnicodeDictReader csv.reader class UnicodeCsvReader(object):
    def __init__(self, f, encoding=""utf-8"", **kwargs):
        self.csv_reader = csv.reader(f, **kwargs)
        self.encoding = encoding

    def __iter__(self):
        return self

    def next(self):
        # read and split the csv row into fields
        row = self.csv_reader.next() 
        # now decode
        return [unicode(cell, self.encoding) for cell in row]

    @property
    def line_num(self):
        return self.csv_reader.line_num

class UnicodeDictReader(csv.DictReader):
    def __init__(self, f, encoding=""utf-8"", fieldnames=None, **kwds):
        csv.DictReader.__init__(self, f, fieldnames=fieldnames, **kwds)
        self.reader = UnicodeCsvReader(f, encoding=encoding, **kwds)
 csv_lines = (
    ""абв,123"",
    ""где,456"",
)

for row in UnicodeCsvReader(csv_lines):
    for col in row:
        print(type(col), col)
 $ python test.py
<type 'unicode'> абв
<type 'unicode'> 123
<type 'unicode'> где
<type 'unicode'> 456
 ",TRUE,"import csv


# http://stackoverflow.com/a/6187936/407954
class UnicodeCsvReader(object):
    def __init__(self, f, encoding='utf-8', **kwargs):
        self.csv_reader = csv.reader(f, **kwargs)
        self.encoding = encoding

    def __iter__(self):
        return self

    def __next__(self):
        # read and split the csv row into fields
        row = next(self.csv_reader)
        # now decode
        return [cell.decode(self.encoding) if isinstance(cell, (bytes, str)) else cell
                for cell in row]

    next = __next__

    @property
    def line_num(self):
        return self.csv_reader.line_num

class UnicodeDictReader(csv.DictReader):
    def __init__(self, f, encoding='utf-8', fieldnames=None, **kwds):
        csv.DictReader.__init__(self, f, fieldnames=fieldnames, **kwds)
        self.reader = UnicodeCsvReader(f, encoding=encoding, **kwds)
","import csv


# http://stackoverflow.com/a/6187936/407954
class UnicodeCsvReader(object):
    def __init__(self, f, encoding='utf-8', **kwargs):
        self.csv_reader = csv.reader(f, **kwargs)
        self.encoding = encoding

    def __iter__(self):
        return self

    def __next__(self):
        # read and split the csv row into fields
        row = next(self.csv_reader)
        # now decode
        return [cell.decode(self.encoding) if isinstance(cell, (bytes, str)) else cell
                for cell in row]

    next = __next__

    @property
    def line_num(self):
        return self.csv_reader.line_num

class UnicodeDictReader(csv.DictReader):
    def __init__(self, f, encoding='utf-8', fieldnames=None, **kwds):
        csv.DictReader.__init__(self, f, fieldnames=fieldnames, **kwds)
        self.reader = UnicodeCsvReader(f, encoding=encoding, **kwds)
",TRUE,,3943
3911,InitialSO.csv3911.txt,InitialGit.csv3911.txt,35,"from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    # Source: http://stackoverflow.com/a/6190500/562769
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
           not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))

    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                               OrderedDict.__repr__(self))
 ","from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    # Source: http://stackoverflow.com/a/6190500/562769
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
           not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))

    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                               OrderedDict.__repr__(self))
 ",TRUE,"import json
import hashlib
import requests
from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    # Source: http://stackoverflow.com/a/6190500/562769
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
           not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))

    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                               OrderedDict.__repr__(self))
def get_result(word):
    result = dict()
    m = hashlib.md5()
    m.update(""%s46E59BAC-E593-4F4F-A4DB-960857086F9C"" % word)
    code = m.hexdigest()
    url = ""http://ws.tureng.com/TurengSearchServiceV4.svc/Search""
    data = {""Term"": word, ""Code"": code}
    headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
    response = requests.post(url, data=json.dumps(data), headers=headers)
    obj = json.loads(response.text)

    exception_message = obj['ExceptionMessage']
    is_successful = obj['IsSuccessful']

    mobil_results = obj['MobileResult']
    is_found = bool(mobil_results['IsFound'])

    if is_found:
        result_group = DefaultOrderedDict(list)
        for row in mobil_results['Results']:
            result_group[row['CategoryEN']].append(row)
        result['results'] = result_group
        return result
    else:
        result['suggestions'] = mobil_results['Suggestions']
        return result

def run(word=None):
    _word = word if word else raw_input(""Translate: "")

    translate_result = get_result(_word)
    if 'suggestions' in translate_result:
        current_suggestion_order = None
        while not current_suggestion_order or current_suggestion_order not in xrange(1, i + 2):
            for i, suggestion in enumerate(translate_result['suggestions']):
                print str(i + 1), ""-"", suggestion
            current_suggestion_order = int(raw_input(""what are you looking for? (1-%s): "" % str(i + 1)) or 0)

        _word = translate_result['suggestions'][int(current_suggestion_order) - 1]
        translate_result = get_result(_word)
    
    result_group = translate_result['results']

    print ""******** %s ********"" % _word
    print """"

    last_language = ''
    for category_en, items in result_group.iteritems():
        tmp_language = category_en[-3:-1]
        if last_language != tmp_language:
            last_language = tmp_language
            if tmp_language == 'en':
                print ""English-Ingilizce""
                print ""-----------------""
            else:
                print ""Turkish-Turkce""
                print ""-----------------""

        print ""\t%s / %s"" % (category_en[:-9], items[0]['CategoryTR'][:-9])
        for item in items:
            my_types = ""/"".join(filter(lambda x: x!=None, [item['TypeEN'], item['TypeTR']]))
            my_types = ("" (%s)"" % my_types) if my_types else """"
            print ""\t\t%s%s"" % (item['Term'], my_types)

run()","import json
import hashlib
import requests
from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    # Source: http://stackoverflow.com/a/6190500/562769
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
           not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))

    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                               OrderedDict.__repr__(self))
def get_result(word):
    result = dict()
    m = hashlib.md5()
    m.update(""%s46E59BAC-E593-4F4F-A4DB-960857086F9C"" % word)
    code = m.hexdigest()
    url = ""http://ws.tureng.com/TurengSearchServiceV4.svc/Search""
    data = {""Term"": word, ""Code"": code}
    headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
    response = requests.post(url, data=json.dumps(data), headers=headers)
    obj = json.loads(response.text)

    exception_message = obj['ExceptionMessage']
    is_successful = obj['IsSuccessful']

    mobil_results = obj['MobileResult']
    is_found = bool(mobil_results['IsFound'])

    if is_found:
        result_group = DefaultOrderedDict(list)
        for row in mobil_results['Results']:
            result_group[row['CategoryEN']].append(row)
        result['results'] = result_group
        return result
    else:
        result['suggestions'] = mobil_results['Suggestions']
        return result

def run(word=None):
    _word = word if word else raw_input(""Translate: "")

    translate_result = get_result(_word)
    if 'suggestions' in translate_result:
        current_suggestion_order = None
        while not current_suggestion_order or current_suggestion_order not in xrange(1, i + 2):
            for i, suggestion in enumerate(translate_result['suggestions']):
                print str(i + 1), ""-"", suggestion
            current_suggestion_order = int(raw_input(""what are you looking for? (1-%s): "" % str(i + 1)) or 0)

        _word = translate_result['suggestions'][int(current_suggestion_order) - 1]
        translate_result = get_result(_word)
    
    result_group = translate_result['results']

    print ""******** %s ********"" % _word
    print """"

    last_language = ''
    for category_en, items in result_group.iteritems():
        tmp_language = category_en[-3:-1]
        if last_language != tmp_language:
            last_language = tmp_language
            if tmp_language == 'en':
                print ""English-Ingilizce""
                print ""-----------------""
            else:
                print ""Turkish-Turkce""
                print ""-----------------""

        print ""\t%s / %s"" % (category_en[:-9], items[0]['CategoryTR'][:-9])
        for item in items:
            my_types = ""/"".join(filter(lambda x: x!=None, [item['TypeEN'], item['TypeTR']]))
            my_types = ("" (%s)"" % my_types) if my_types else """"
            print ""\t\t%s%s"" % (item['Term'], my_types)

run()",TRUE,,3944
3912,InitialSO.csv3912.txt,InitialGit.csv3912.txt,8,"private class Flinger implements Runnable {
    private final Scroller scroller;

    private int lastX = 0;

    Flinger() {
        scroller = new Scroller(getActivity());
    }

    void start(int initialVelocity) {
        int initialX = scrollingView.getScrollX();
        int maxX = Integer.MAX_VALUE; // or some appropriate max value in your code
        scroller.fling(initialX, 0, initialVelocity, 0, 0, maxX, 0, 10);
        Log.i(TAG, ""starting fling at "" + initialX + "", velocity is "" + initialVelocity + """");

        lastX = initialX;
        getView().post(this);
    }

    public void run() {
        if (scroller.isFinished()) {
            Log.i(TAG, ""scroller is finished, done with fling"");
            return;
        }

        boolean more = scroller.computeScrollOffset();
        int x = scroller.getCurrX();
        int diff = lastX - x;
        if (diff != 0) {
            scrollingView.scrollBy(diff, 0);
            lastX = x;
        }

        if (more) {
            getView().post(this);
        }
    }

    boolean isFlinging() {
        return !scroller.isFinished();
    }

    void forceFinished() {
        if (!scroller.isFinished()) {
            scroller.forceFinished(true);
        }
    }
}
 ","private class Flinger implements Runnable {
    private final Scroller scroller;

    private int lastX = 0;

    Flinger() {
        scroller = new Scroller(getActivity());
    }

    void start(int initialVelocity) {
        int initialX = scrollingView.getScrollX();
        int maxX = Integer.MAX_VALUE; // or some appropriate max value in your code
        scroller.fling(initialX, 0, initialVelocity, 0, 0, maxX, 0, 10);
        Log.i(TAG, ""starting fling at "" + initialX + "", velocity is "" + initialVelocity + """");

        lastX = initialX;
        getView().post(this);
    }

    public void run() {
        if (scroller.isFinished()) {
            Log.i(TAG, ""scroller is finished, done with fling"");
            return;
        }

        boolean more = scroller.computeScrollOffset();
        int x = scroller.getCurrX();
        int diff = lastX - x;
        if (diff != 0) {
            scrollingView.scrollBy(diff, 0);
            lastX = x;
        }

        if (more) {
            getView().post(this);
        }
    }

    boolean isFlinging() {
        return !scroller.isFinished();
    }

    void forceFinished() {
        if (!scroller.isFinished()) {
            scroller.forceFinished(true);
        }
    }
}
 ",TRUE,"package com.inqbarna.tablefixheaders.samples.custom;

import android.annotation.SuppressLint;
import android.content.Context;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.widget.Scroller;

import com.inqbarna.tablefixheaders.Recycler;
import com.inqbarna.tablefixheaders.adapters.TableAdapter;
import com.inqbarna.tablefixheaders.samples.R;

import java.util.ArrayList;
import java.util.List;

/**
 * This view shows a table which can scroll in both directions. Also still
 * leaves the headers fixed.
 *
 * @author Brais Gab�n (InQBarna)
 */
public class StyleTable extends ViewGroup {

    public static final String TAG = ""TableFixHeaders"";

    private int currentX;
    private int currentY;

    private TableAdapter adapter;
    private int scrollX;
    private int scrollY;
    //visible rows
    private int firstRow;
    //visible header column
    private int[] firstColumn;
    //items measures
    private int[][] widths;
    private int[] heights;

    private int maxRowWidth;

    @SuppressWarnings(""unused"")
    private View headView;

    // upper header
    private List<View> rowViewList;
    //left header
    private List<View> columnViewList;
    //items list
    private List<List<View>> bodyViewTable;

    private int rowCount;
    private int columnCount;

    private int width;
    private int height;

    private Recycler recycler;

    private TableAdapterDataSetObserver tableAdapterDataSetObserver;
    private boolean needRelayout;

    private final int minimumVelocity;
    private final int maximumVelocity;

    private final Flinger flinger;

    private VelocityTracker velocityTracker;

    private int touchSlop;

    /**
     * Simple constructor to use when creating a view from code.
     *
     * @param context The Context the view is running in, through which it can
     *                access the current theme, resources, etc.
     */
    public StyleTable(Context context) {
        this(context, null);
    }

    /**
     * Constructor that is called when inflating a view from XML. This is called
     * when a view is being constructed from an XML file, supplying attributes
     * that were specified in the XML file. This version uses a default style of
     * 0, so the only attribute values applied are those in the Context's Theme
     * and the given AttributeSet.
     * <p/>
     * The method onFinishInflate() will be called after all children have been
     * added.
     *
     * @param context The Context the view is running in, through which it can
     *                access the current theme, resources, etc.
     * @param attrs   The attributes of the XML tag that is inflating the view.
     */
    public StyleTable(Context context, AttributeSet attrs) {
        super(context, attrs);

        this.headView = null;
        this.rowViewList = new ArrayList<View>();
        this.columnViewList = new ArrayList<View>();
        this.bodyViewTable = new ArrayList<List<View>>();

        this.needRelayout = true;

        this.flinger = new Flinger(context);
        final ViewConfiguration configuration = ViewConfiguration.get(context);
        this.touchSlop = configuration.getScaledTouchSlop();
        this.minimumVelocity = configuration.getScaledMinimumFlingVelocity();
        this.maximumVelocity = configuration.getScaledMaximumFlingVelocity();
    }

    /**
     * Returns the adapter currently associated with this widget.
     *
     * @return The adapter used to provide this view's content.
     */
    public TableAdapter getAdapter() {
        return adapter;
    }

    /**
     * Sets the data behind this TableFixHeaders.
     *
     * @param adapter The TableAdapter which is responsible for maintaining the data
     *                backing this list and for producing a view to represent an
     *                item in that data set.
     */
    public void setAdapter(TableAdapter adapter) {
        if (this.adapter != null) {
            this.adapter.unregisterDataSetObserver(tableAdapterDataSetObserver);
        }

        this.adapter = adapter;
        tableAdapterDataSetObserver = new TableAdapterDataSetObserver();
        this.adapter.registerDataSetObserver(tableAdapterDataSetObserver);

        this.recycler = new Recycler(adapter.getViewTypeCount());

        scrollX = 0;
        scrollY = 0;
        firstRow = 0;

        needRelayout = true;
        requestLayout();
    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        boolean intercept = false;
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                currentX = (int) event.getRawX();
                currentY = (int) event.getRawY();
                break;
            }
            case MotionEvent.ACTION_MOVE: {
                int x2 = Math.abs(currentX - (int) event.getRawX());
                int y2 = Math.abs(currentY - (int) event.getRawY());
                if (x2 > touchSlop || y2 > touchSlop) {
                    intercept = true;
                }
                break;
            }
        }
        return intercept;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (velocityTracker == null) { // If we do not have velocity tracker
            velocityTracker = VelocityTracker.obtain(); // then get one
        }
        velocityTracker.addMovement(event); // add this movement to it

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                if (!flinger.isFinished()) { // If scrolling, then stop now
                    flinger.forceFinished();
                }
                currentX = (int) event.getRawX();
                currentY = (int) event.getRawY();
                break;
            }
            case MotionEvent.ACTION_MOVE: {
                final int x2 = (int) event.getRawX();
                final int y2 = (int) event.getRawY();
                final int diffX = currentX - x2;
                final int diffY = currentY - y2;
                currentX = x2;
                currentY = y2;

                scrollBy(diffX, diffY);
                break;
            }
            case MotionEvent.ACTION_UP: {
                final VelocityTracker velocityTracker = this.velocityTracker;
                velocityTracker.computeCurrentVelocity(1000, maximumVelocity);
                int velocityX = (int) velocityTracker.getXVelocity();
                int velocityY = (int) velocityTracker.getYVelocity();

                if (Math.abs(velocityX) > minimumVelocity || Math.abs(velocityY) > minimumVelocity) {
                    flinger.start(getActualScrollX(), getActualScrollY(), velocityX, velocityY, getMaxScrollX(), getMaxScrollY());
                } else {
                    if (this.velocityTracker != null) { // If the velocity less than threshold
                        this.velocityTracker.recycle(); // recycle the tracker
                        this.velocityTracker = null;
                    }
                }
                break;
            }
        }
        return true;
    }

    @Override
    public void scrollTo(int x, int y) {
        if (needRelayout) {
            scrollX = x;
            for (int i = 0; i < rowCount; i++)
                firstColumn[i] = 0;

            scrollY = y;
            firstRow = 0;
        } else {
            scrollBy(x - sumArray(widths, 0, 1, firstColumn[0]) - scrollX, y - sumArray(heights, 1, firstRow) - scrollY);
        }
    }

    @Override
    public void scrollBy(int x, int y) {
        scrollX += x;
        scrollY += y;

        if (needRelayout) {
            return;
        }

        //keep scroll in bounds
        scrollBounds();

		/*
         * TODO Improve the algorithm. Think big diagonal movements. If we are
		 * in the top left corner and scrollBy to the opposite corner. We will
		 * have created the views from the top right corner on the X part and we
		 * will have eliminated to generate the right at the Y.
		 */
        if (scrollX == 0) {

            // no op
        } else if (scrollX > 0) {

            int tempScrollX = scrollX;

            int visibleRowSize = firstRow + columnViewList.size();

            //visible item row
            int itemRow = 0;

            //ordinal item row
            for (int row = firstRow; row < visibleRowSize; row++) {

                int tempItemSize = bodyViewTable.get(itemRow).size();

                tempScrollX = scrollX;

                while (widths[row][firstColumn[row] + 1] < tempScrollX) {
                    if (!rowViewList.isEmpty()) {
                        removeLeft(row);
                    }
                    tempScrollX -= widths[row][firstColumn[row] + 1];
                    firstColumn[row]++;
                }

                while (getFilledWidth(row, tempScrollX, tempItemSize) < width) {
                    addRight(firstColumn[row], itemRow);
                    tempItemSize++;
                }

                itemRow++;
            }

            scrollX = tempScrollX;

        } else {

            int visibleRowSize = firstRow + columnViewList.size();

            int tempScrollX = scrollX;

            for (int row = firstRow; row < visibleRowSize; row++) {
                int tempItemSize = bodyViewTable.get(row).size();
                while (!rowViewList.isEmpty() && getFilledWidth(row, tempScrollX, tempItemSize) - widths[row][firstColumn[row] + rowViewList.size()] >= width) {
                    removeRight(row);
                }
                if (rowViewList.isEmpty()) {
                    while (tempScrollX < 0) {
                        firstColumn[row]--;
                        tempScrollX += widths[row][firstColumn[row] + 1];
                    }
                    while (getFilledWidth(row, tempScrollX, tempItemSize) < width) {
                        addRight(firstColumn[row], row);
                    }
                } else {
                    while (0 > scrollX) {
                        addLeft(row);
                        firstColumn[row]--;
                        tempScrollX += widths[row][firstColumn[row] + 1];
                    }
                }
            }

            scrollX = tempScrollX;
        }

        if (scrollY == 0) {
            // no op
        } else if (scrollY > 0) {
            while (heights[firstRow + 1] < scrollY) {
                if (!columnViewList.isEmpty()) {
                    removeTop();
                }
                scrollY -= heights[firstRow + 1];
                firstRow++;
            }
            while (getFilledHeight() < height) {
                addBottom();
            }
        } else {
            while (!columnViewList.isEmpty() && getFilledHeight() - heights[firstRow + columnViewList.size()] >= height) {
                removeBottom();
            }
            if (columnViewList.isEmpty()) {
                while (scrollY < 0) {
                    firstRow--;
                    scrollY += heights[firstRow + 1];
                }
                while (getFilledHeight() < height) {
                    addBottom();
                }
            } else {
                while (0 > scrollY) {
                    addTop();
                    firstRow--;
                    scrollY += heights[firstRow + 1];
                }
            }
        }

        repositionViews();
    }

    public int getActualScrollX() {
        return scrollX + sumArray(widths, 1, 0, firstColumn[0]);
    }

    public int getActualScrollY() {
        return scrollY + sumArray(heights, 1, firstRow);
    }

    private int getMaxScrollX() {
        return Math.max(0, maxRowWidth - width);
    }

    private int getMaxScrollY() {
        return Math.max(0, sumArray(heights) - height);
    }

    private int getFilledWidth(int row, int scrollX, int initialItemsCount) {
        return widths[row][0] + sumArray(widths, row, firstColumn[row] + 1, initialItemsCount) - scrollX;
    }

    private int getFilledHeight() {
        return heights[0] + sumArray(heights, firstRow + 1, columnViewList.size()) - scrollY;
    }

    private void addLeft(int row) {
        addHorizontalItem(firstColumn[row] - 1, row, 0, 0);
    }

    private void addRight(int firstVisibleColumn, int row) {
        final int rowItemsSize = bodyViewTable.get(row).size();
        addHorizontalItem(firstVisibleColumn + rowItemsSize, row, rowViewList.size(), rowItemsSize);
    }

    private void addHorizontalItem(int column, int row, int headerIndex, int itemIndex) {
        //add row header
        View view = makeView(-1, column, widths[0][column + 1], heights[0]);
        rowViewList.add(headerIndex, view);

        //add items
        List<View> list = bodyViewTable.get(row);
        view = makeView(row, column, widths[row][column + 1], heights[row]);
        list.add(itemIndex, view);
    }

    private void addTop() {
        addVerticalItem(firstRow - 1, 0);
    }

    private void addBottom() {
        final int size = columnViewList.size();
        addVerticalItem(firstRow + size, size);
    }

    private void addVerticalItem(int row, int index) {
        //add column header
        View view = makeView(row, -1, widths[0][0], heights[row + 1]);
        columnViewList.add(index, view);

        //add items
        List<View> list = new ArrayList<View>();
        final int size = rowViewList.size() + firstColumn[row];
        for (int i = firstColumn[row]; i < size; i++) {
            view = makeView(row, i, widths[i + 1][i], heights[row + 1]);
            list.add(view);
        }
        bodyViewTable.add(index, list);
    }

    private void removeLeft(int row) {
        removeLeftOrRight(0, row);
    }

    private void removeRight(int row) {
        removeLeftOrRight(rowViewList.size() - 1, row);
    }

    private void removeLeftOrRight(int position, int row) {
        removeView(rowViewList.remove(position));
        removeView(bodyViewTable.get(row).remove(position));
    }

    private void removeBottom() {
        removeTopOrBottom(columnViewList.size() - 1);
    }

    private void removeTop() {
        removeTopOrBottom(0);
    }

    private void removeTopOrBottom(int position) {
        removeView(columnViewList.remove(position));
        List<View> remove = bodyViewTable.remove(position);
        for (View view : remove) {
            removeView(view);
        }
    }

    @Override
    public void removeView(View view) {
        super.removeView(view);

        final int typeView = (Integer) view.getTag(R.id.tag_type_view);
        if (typeView != TableAdapter.IGNORE_ITEM_VIEW_TYPE) {
            recycler.addRecycledView(view, typeView);
        }
    }

    private void repositionViews() {
        int left, top, right, bottom, i;

        left = widths[0][0] - scrollX;
        i = firstRow;
        int j = firstColumn[i];
        for (View view : rowViewList) {
            right = left + widths[0][0];
            view.layout(left, 0, right, heights[0]);
            left = right;
        }

        top = heights[0] - scrollY;
        i = firstRow;
        for (View view : columnViewList) {
            bottom = top + heights[++i];
            view.layout(0, top, widths[0][0], bottom);
            top = bottom;
        }

        top = heights[0] - scrollY;
        i = firstRow;
        for (List<View> list : bodyViewTable) {
            bottom = top + heights[++i];
            left = widths[i][0] - scrollX;
            j = firstColumn[i];
            for (View view : list) {
                right = left + widths[i][++j];
                view.layout(left, top, right, bottom);
                left = right;
            }
            top = bottom;
        }
        invalidate();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        final int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        final int w;
        final int h;

        if (adapter != null) {
            this.rowCount = adapter.getRowCount();
            this.columnCount = adapter.getMaxColumnCount();

            firstColumn = new int[rowCount + 1];

            widths = new int[rowCount + 1][columnCount + 1];
            int maxWidth = 0;
            for (int i = -1; i < rowCount; i++) {
                maxRowWidth = 0;
                for (int j = -1; j < columnCount; j++) {
                    int itemWidth = adapter.getWidth(i, j);
                    widths[i + 1][j + 1] = itemWidth;
                    maxRowWidth += itemWidth;
                }
                if (maxWidth < maxRowWidth) {
                    maxWidth = maxRowWidth;
                }
            }

            for (int i = 0; i < rowCount; i++) {
                //TODO SET REAL HEADER SIZE
                widths[i][0] = 200;
            }

            heights = new int[rowCount + 1];
            for (int i = -1; i < rowCount; i++) {
                heights[i + 1] += adapter.getHeight(i);
            }


            if (widthMode == MeasureSpec.AT_MOST) {
                w = Math.min(widthSize, maxWidth);
            } else if (widthMode == MeasureSpec.UNSPECIFIED) {
                w = maxWidth;
            } else {
                w = widthSize;
                if (maxWidth < widthSize) {
                    final float factor = widthSize / (float) maxWidth;
                    for (int i = 1; i < rowCount; i++) {
                        for (int j = 1; j < columnCount; j++) {
                            widths[i][j] = Math.round(widths[i][j] * factor);
                        }
                    }
                }
            }

            if (heightMode == MeasureSpec.AT_MOST) {
                h = Math.min(heightSize, sumArray(heights));
            } else if (heightMode == MeasureSpec.UNSPECIFIED) {
                h = sumArray(heights);
            } else {
                h = heightSize;
            }
        } else {
            if (heightMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) {
                w = 0;
                h = 0;
            } else {
                w = widthSize;
                h = heightSize;
            }
        }

        if (firstRow >= rowCount || getMaxScrollY() - getActualScrollY() < 0) {
            firstRow = 0;
            scrollY = Integer.MAX_VALUE;
        }
        if (firstColumn[0] >= columnCount || getMaxScrollX() - getActualScrollX() < 0) {
            firstColumn[0] = 0;
            scrollX = Integer.MAX_VALUE;
        }
        setMeasuredDimension(w, h);
    }

    private int sumArray(int array[]) {
        return sumArray(array, 0, array.length);
    }

    private int sumArray(int array[], int firstIndex, int count) {
        int sum = 0;
        count += firstIndex;
        for (int i = firstIndex; i < count; i++) {
            sum += array[i];
        }
        return sum;
    }

    private int sumArray(int array[][], int row, int startColumn, int count) {
        int sum = 0;
        for (int i = startColumn; i < count; i++) {
            sum += array[row][i];
        }
        return sum;
    }

    @SuppressLint(""DrawAllocation"")
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        if (needRelayout || changed) {
            needRelayout = false;
            resetTable();

            if (adapter != null) {
                width = r - l;
                height = b - t;

                int left, top, right, bottom;

                right = Math.min(width, maxRowWidth);
                bottom = Math.min(height, sumArray(heights));

                headView = makeAndSetup(-1, -1, 0, 0, widths[0][0], heights[0]);

                scrollBounds();
                adjustFirstCellsAndScroll();

                left = widths[0][0] - scrollX;
                for (int i = firstColumn[0]; i < columnCount && left < width; i++) {
                    right = left + widths[0][i + 1];
                    final View view = makeAndSetup(-1, i, left, 0, right, heights[0]);
                    rowViewList.add(view);
                    left = right;
                }

                top = heights[0] - scrollY;
                for (int i = firstRow; i < rowCount && top < height; i++) {
                    bottom = top + heights[i + 1];
                    final View view = makeAndSetup(i, -1, 0, top, widths[i][0], bottom);
                    columnViewList.add(view);
                    top = bottom;
                }

                top = heights[0] - scrollY;
                for (int i = firstRow; i < rowCount && top < height; i++) {
                    bottom = top + heights[i + 1];
                    left = widths[i][0] - scrollX;
                    List<View> list = new ArrayList<View>();
                    for (int j = firstColumn[i]; j < columnCount && left < width; j++) {
                        right = left + widths[i][j + 1];
                        final View view = makeAndSetup(i, j, left, top, right, bottom);
                        list.add(view);
                        left = right;
                    }
                    bodyViewTable.add(list);
                    top = bottom;
                }
            }
        }
    }

    private void scrollBounds() {
        scrollX = scrollBounds(scrollX, firstColumn[0], widths, width);
        scrollY = scrollBounds(scrollY, firstRow, heights, height);
    }

    private int scrollBounds(int desiredScroll, int firstCell, int sizes[], int viewSize) {
        if (desiredScroll == 0) {
            // no op
        } else if (desiredScroll < 0) {
            desiredScroll = Math.max(desiredScroll, -sumArray(sizes, 1, firstCell));
        } else {
            desiredScroll = Math.min(desiredScroll, Math.max(0, sumArray(sizes, firstCell + 1, sizes.length - 1 - firstCell) + sizes[0] - viewSize));
        }
        return desiredScroll;
    }

    private int scrollBounds(int desiredScroll, int firstCell, int sizes[][], int viewSize) {
        if (desiredScroll == 0) {
            // no op
        } else if (desiredScroll < 0) {
            desiredScroll = Math.max(desiredScroll, -sumArray(sizes, 0, 0, firstCell));
        } else {
            desiredScroll = Math.min(desiredScroll, Math.max(0, sumArray(sizes, firstCell + 1, 0, sizes.length - 1 - firstCell) + sizes[0][0] - viewSize));
        }
        return desiredScroll;
    }

    private void adjustFirstCellsAndScroll() {
        int values[];

        values = adjustFirstCellsAndScroll(scrollX, firstColumn[0], widths);
        scrollX = values[0];
        firstColumn[0] = values[1];

        values = adjustFirstCellsAndScroll(scrollY, firstRow, heights);
        scrollY = values[0];
        firstRow = values[1];
    }

    private int[] adjustFirstCellsAndScroll(int scroll, int firstCell, int sizes[][]) {
        if (scroll == 0) {
            // no op
        } else if (scroll > 0) {
            while (sizes[firstCell + 1][0] < scroll) {
                firstCell++;
                scroll -= sizes[firstCell][0];
            }
        } else {
            while (scroll < 0) {
                scroll += sizes[firstCell][0];
                firstCell--;
            }
        }
        return new int[]{scroll, firstCell};
    }

    private int[] adjustFirstCellsAndScroll(int scroll, int firstCell, int sizes[]) {
        if (scroll == 0) {
            // no op
        } else if (scroll > 0) {
            while (sizes[firstCell + 1] < scroll) {
                firstCell++;
                scroll -= sizes[firstCell];
            }
        } else {
            while (scroll < 0) {
                scroll += sizes[firstCell];
                firstCell--;
            }
        }
        return new int[]{scroll, firstCell};
    }

    private void resetTable() {
        headView = null;
        rowViewList.clear();
        columnViewList.clear();
        bodyViewTable.clear();

        removeAllViews();
    }

    private View makeAndSetup(int row, int column, int left, int top, int right, int bottom) {
        final View view = makeView(row, column, right - left, bottom - top);
        view.layout(left, top, right, bottom);
        return view;
    }

    @Override
    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
        final boolean ret;

        final Integer row = (Integer) child.getTag(R.id.tag_row);
        final Integer column = (Integer) child.getTag(R.id.tag_column);
        // row == null => Shadow view
        if (row == null || (row == -1 && column == -1)) {
            ret = super.drawChild(canvas, child, drawingTime);
        } else {
            canvas.save();
            if (row == -1) {
                canvas.clipRect(widths[0][column], 0, canvas.getWidth(), canvas.getHeight());
            } else if (column == -1) {
                canvas.clipRect(0, heights[0], canvas.getWidth(), canvas.getHeight());
            } else {
                canvas.clipRect(widths[row][column], heights[column], canvas.getWidth(), canvas.getHeight());
            }

            ret = super.drawChild(canvas, child, drawingTime);
            canvas.restore();
        }
        return ret;
    }

    private View makeView(int row, int column, int w, int h) {
        final int itemViewType = adapter.getItemViewType(row, column);
        final View recycledView;
        if (itemViewType == TableAdapter.IGNORE_ITEM_VIEW_TYPE) {
            recycledView = null;
        } else {
            recycledView = recycler.getRecycledView(itemViewType);
        }
        final View view = adapter.getView(row, column, recycledView, this);
        view.setTag(R.id.tag_type_view, itemViewType);
        view.setTag(R.id.tag_row, row);
        view.setTag(R.id.tag_column, column);

        view.measure(MeasureSpec.makeMeasureSpec(w, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(h, MeasureSpec.EXACTLY));
        addTableView(view, row, column);
        return view;
    }

    private void addTableView(View view, int row, int column) {
        if (row == -1 && column == -1) {
            addView(view, getChildCount() - 4);
        } else if (row == -1 || column == -1) {
            addView(view, getChildCount() - 5);
        } else {
            addView(view, 0);
        }
    }

    private class TableAdapterDataSetObserver extends DataSetObserver {

        @Override
        public void onChanged() {
            needRelayout = true;
            requestLayout();
        }

        @Override
        public void onInvalidated() {
            // Do nothing
        }
    }

    // http://stackoverflow.com/a/6219382/842697
    private class Flinger implements Runnable {
        private final Scroller scroller;

        private int lastX = 0;
        private int lastY = 0;

        Flinger(Context context) {
            scroller = new Scroller(context);
        }

        void start(int initX, int initY, int initialVelocityX, int initialVelocityY, int maxX, int maxY) {
            scroller.fling(initX, initY, initialVelocityX, initialVelocityY, 0, maxX, 0, maxY);

            lastX = initX;
            lastY = initY;
            post(this);
        }

        public void run() {
            if (scroller.isFinished()) {
                return;
            }

            boolean more = scroller.computeScrollOffset();
            int x = scroller.getCurrX();
            int y = scroller.getCurrY();
            int diffX = lastX - x;
            int diffY = lastY - y;
            if (diffX != 0 || diffY != 0) {
                scrollBy(diffX, diffY);
                lastX = x;
                lastY = y;
            }

            if (more) {
                post(this);
            }
        }

        boolean isFinished() {
            return scroller.isFinished();
        }

        void forceFinished() {
            if (!scroller.isFinished()) {
                scroller.forceFinished(true);
            }
        }
    }

    private void log(String message) {
        Log.d(TAG, message);
    }
}
","package com.inqbarna.tablefixheaders.samples.custom;

import android.annotation.SuppressLint;
import android.content.Context;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.widget.Scroller;

import com.inqbarna.tablefixheaders.Recycler;
import com.inqbarna.tablefixheaders.adapters.TableAdapter;
import com.inqbarna.tablefixheaders.samples.R;

import java.util.ArrayList;
import java.util.List;

/**
 * This view shows a table which can scroll in both directions. Also still
 * leaves the headers fixed.
 *
 * @author Brais Gab�n (InQBarna)
 */
public class StyleTable extends ViewGroup {

    public static final String TAG = ""TableFixHeaders"";

    private int currentX;
    private int currentY;

    private TableAdapter adapter;
    private int scrollX;
    private int scrollY;
    //visible rows
    private int firstRow;
    //visible header column
    private int[] firstColumn;
    //items measures
    private int[][] widths;
    private int[] heights;

    private int maxRowWidth;

    @SuppressWarnings(""unused"")
    private View headView;

    // upper header
    private List<View> rowViewList;
    //left header
    private List<View> columnViewList;
    //items list
    private List<List<View>> bodyViewTable;

    private int rowCount;
    private int columnCount;

    private int width;
    private int height;

    private Recycler recycler;

    private TableAdapterDataSetObserver tableAdapterDataSetObserver;
    private boolean needRelayout;

    private final int minimumVelocity;
    private final int maximumVelocity;

    private final Flinger flinger;

    private VelocityTracker velocityTracker;

    private int touchSlop;

    /**
     * Simple constructor to use when creating a view from code.
     *
     * @param context The Context the view is running in, through which it can
     *                access the current theme, resources, etc.
     */
    public StyleTable(Context context) {
        this(context, null);
    }

    /**
     * Constructor that is called when inflating a view from XML. This is called
     * when a view is being constructed from an XML file, supplying attributes
     * that were specified in the XML file. This version uses a default style of
     * 0, so the only attribute values applied are those in the Context's Theme
     * and the given AttributeSet.
     * <p/>
     * The method onFinishInflate() will be called after all children have been
     * added.
     *
     * @param context The Context the view is running in, through which it can
     *                access the current theme, resources, etc.
     * @param attrs   The attributes of the XML tag that is inflating the view.
     */
    public StyleTable(Context context, AttributeSet attrs) {
        super(context, attrs);

        this.headView = null;
        this.rowViewList = new ArrayList<View>();
        this.columnViewList = new ArrayList<View>();
        this.bodyViewTable = new ArrayList<List<View>>();

        this.needRelayout = true;

        this.flinger = new Flinger(context);
        final ViewConfiguration configuration = ViewConfiguration.get(context);
        this.touchSlop = configuration.getScaledTouchSlop();
        this.minimumVelocity = configuration.getScaledMinimumFlingVelocity();
        this.maximumVelocity = configuration.getScaledMaximumFlingVelocity();
    }

    /**
     * Returns the adapter currently associated with this widget.
     *
     * @return The adapter used to provide this view's content.
     */
    public TableAdapter getAdapter() {
        return adapter;
    }

    /**
     * Sets the data behind this TableFixHeaders.
     *
     * @param adapter The TableAdapter which is responsible for maintaining the data
     *                backing this list and for producing a view to represent an
     *                item in that data set.
     */
    public void setAdapter(TableAdapter adapter) {
        if (this.adapter != null) {
            this.adapter.unregisterDataSetObserver(tableAdapterDataSetObserver);
        }

        this.adapter = adapter;
        tableAdapterDataSetObserver = new TableAdapterDataSetObserver();
        this.adapter.registerDataSetObserver(tableAdapterDataSetObserver);

        this.recycler = new Recycler(adapter.getViewTypeCount());

        scrollX = 0;
        scrollY = 0;
        firstRow = 0;

        needRelayout = true;
        requestLayout();
    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        boolean intercept = false;
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                currentX = (int) event.getRawX();
                currentY = (int) event.getRawY();
                break;
            }
            case MotionEvent.ACTION_MOVE: {
                int x2 = Math.abs(currentX - (int) event.getRawX());
                int y2 = Math.abs(currentY - (int) event.getRawY());
                if (x2 > touchSlop || y2 > touchSlop) {
                    intercept = true;
                }
                break;
            }
        }
        return intercept;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (velocityTracker == null) { // If we do not have velocity tracker
            velocityTracker = VelocityTracker.obtain(); // then get one
        }
        velocityTracker.addMovement(event); // add this movement to it

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                if (!flinger.isFinished()) { // If scrolling, then stop now
                    flinger.forceFinished();
                }
                currentX = (int) event.getRawX();
                currentY = (int) event.getRawY();
                break;
            }
            case MotionEvent.ACTION_MOVE: {
                final int x2 = (int) event.getRawX();
                final int y2 = (int) event.getRawY();
                final int diffX = currentX - x2;
                final int diffY = currentY - y2;
                currentX = x2;
                currentY = y2;

                scrollBy(diffX, diffY);
                break;
            }
            case MotionEvent.ACTION_UP: {
                final VelocityTracker velocityTracker = this.velocityTracker;
                velocityTracker.computeCurrentVelocity(1000, maximumVelocity);
                int velocityX = (int) velocityTracker.getXVelocity();
                int velocityY = (int) velocityTracker.getYVelocity();

                if (Math.abs(velocityX) > minimumVelocity || Math.abs(velocityY) > minimumVelocity) {
                    flinger.start(getActualScrollX(), getActualScrollY(), velocityX, velocityY, getMaxScrollX(), getMaxScrollY());
                } else {
                    if (this.velocityTracker != null) { // If the velocity less than threshold
                        this.velocityTracker.recycle(); // recycle the tracker
                        this.velocityTracker = null;
                    }
                }
                break;
            }
        }
        return true;
    }

    @Override
    public void scrollTo(int x, int y) {
        if (needRelayout) {
            scrollX = x;
            for (int i = 0; i < rowCount; i++)
                firstColumn[i] = 0;

            scrollY = y;
            firstRow = 0;
        } else {
            scrollBy(x - sumArray(widths, 0, 1, firstColumn[0]) - scrollX, y - sumArray(heights, 1, firstRow) - scrollY);
        }
    }

    @Override
    public void scrollBy(int x, int y) {
        scrollX += x;
        scrollY += y;

        if (needRelayout) {
            return;
        }

        //keep scroll in bounds
        scrollBounds();

		/*
         * TODO Improve the algorithm. Think big diagonal movements. If we are
		 * in the top left corner and scrollBy to the opposite corner. We will
		 * have created the views from the top right corner on the X part and we
		 * will have eliminated to generate the right at the Y.
		 */
        if (scrollX == 0) {

            // no op
        } else if (scrollX > 0) {

            int tempScrollX = scrollX;

            int visibleRowSize = firstRow + columnViewList.size();

            //visible item row
            int itemRow = 0;

            //ordinal item row
            for (int row = firstRow; row < visibleRowSize; row++) {

                int tempItemSize = bodyViewTable.get(itemRow).size();

                tempScrollX = scrollX;

                while (widths[row][firstColumn[row] + 1] < tempScrollX) {
                    if (!rowViewList.isEmpty()) {
                        removeLeft(row);
                    }
                    tempScrollX -= widths[row][firstColumn[row] + 1];
                    firstColumn[row]++;
                }

                while (getFilledWidth(row, tempScrollX, tempItemSize) < width) {
                    addRight(firstColumn[row], itemRow);
                    tempItemSize++;
                }

                itemRow++;
            }

            scrollX = tempScrollX;

        } else {

            int visibleRowSize = firstRow + columnViewList.size();

            int tempScrollX = scrollX;

            for (int row = firstRow; row < visibleRowSize; row++) {
                int tempItemSize = bodyViewTable.get(row).size();
                while (!rowViewList.isEmpty() && getFilledWidth(row, tempScrollX, tempItemSize) - widths[row][firstColumn[row] + rowViewList.size()] >= width) {
                    removeRight(row);
                }
                if (rowViewList.isEmpty()) {
                    while (tempScrollX < 0) {
                        firstColumn[row]--;
                        tempScrollX += widths[row][firstColumn[row] + 1];
                    }
                    while (getFilledWidth(row, tempScrollX, tempItemSize) < width) {
                        addRight(firstColumn[row], row);
                    }
                } else {
                    while (0 > scrollX) {
                        addLeft(row);
                        firstColumn[row]--;
                        tempScrollX += widths[row][firstColumn[row] + 1];
                    }
                }
            }

            scrollX = tempScrollX;
        }

        if (scrollY == 0) {
            // no op
        } else if (scrollY > 0) {
            while (heights[firstRow + 1] < scrollY) {
                if (!columnViewList.isEmpty()) {
                    removeTop();
                }
                scrollY -= heights[firstRow + 1];
                firstRow++;
            }
            while (getFilledHeight() < height) {
                addBottom();
            }
        } else {
            while (!columnViewList.isEmpty() && getFilledHeight() - heights[firstRow + columnViewList.size()] >= height) {
                removeBottom();
            }
            if (columnViewList.isEmpty()) {
                while (scrollY < 0) {
                    firstRow--;
                    scrollY += heights[firstRow + 1];
                }
                while (getFilledHeight() < height) {
                    addBottom();
                }
            } else {
                while (0 > scrollY) {
                    addTop();
                    firstRow--;
                    scrollY += heights[firstRow + 1];
                }
            }
        }

        repositionViews();
    }

    public int getActualScrollX() {
        return scrollX + sumArray(widths, 1, 0, firstColumn[0]);
    }

    public int getActualScrollY() {
        return scrollY + sumArray(heights, 1, firstRow);
    }

    private int getMaxScrollX() {
        return Math.max(0, maxRowWidth - width);
    }

    private int getMaxScrollY() {
        return Math.max(0, sumArray(heights) - height);
    }

    private int getFilledWidth(int row, int scrollX, int initialItemsCount) {
        return widths[row][0] + sumArray(widths, row, firstColumn[row] + 1, initialItemsCount) - scrollX;
    }

    private int getFilledHeight() {
        return heights[0] + sumArray(heights, firstRow + 1, columnViewList.size()) - scrollY;
    }

    private void addLeft(int row) {
        addHorizontalItem(firstColumn[row] - 1, row, 0, 0);
    }

    private void addRight(int firstVisibleColumn, int row) {
        final int rowItemsSize = bodyViewTable.get(row).size();
        addHorizontalItem(firstVisibleColumn + rowItemsSize, row, rowViewList.size(), rowItemsSize);
    }

    private void addHorizontalItem(int column, int row, int headerIndex, int itemIndex) {
        //add row header
        View view = makeView(-1, column, widths[0][column + 1], heights[0]);
        rowViewList.add(headerIndex, view);

        //add items
        List<View> list = bodyViewTable.get(row);
        view = makeView(row, column, widths[row][column + 1], heights[row]);
        list.add(itemIndex, view);
    }

    private void addTop() {
        addVerticalItem(firstRow - 1, 0);
    }

    private void addBottom() {
        final int size = columnViewList.size();
        addVerticalItem(firstRow + size, size);
    }

    private void addVerticalItem(int row, int index) {
        //add column header
        View view = makeView(row, -1, widths[0][0], heights[row + 1]);
        columnViewList.add(index, view);

        //add items
        List<View> list = new ArrayList<View>();
        final int size = rowViewList.size() + firstColumn[row];
        for (int i = firstColumn[row]; i < size; i++) {
            view = makeView(row, i, widths[i + 1][i], heights[row + 1]);
            list.add(view);
        }
        bodyViewTable.add(index, list);
    }

    private void removeLeft(int row) {
        removeLeftOrRight(0, row);
    }

    private void removeRight(int row) {
        removeLeftOrRight(rowViewList.size() - 1, row);
    }

    private void removeLeftOrRight(int position, int row) {
        removeView(rowViewList.remove(position));
        removeView(bodyViewTable.get(row).remove(position));
    }

    private void removeBottom() {
        removeTopOrBottom(columnViewList.size() - 1);
    }

    private void removeTop() {
        removeTopOrBottom(0);
    }

    private void removeTopOrBottom(int position) {
        removeView(columnViewList.remove(position));
        List<View> remove = bodyViewTable.remove(position);
        for (View view : remove) {
            removeView(view);
        }
    }

    @Override
    public void removeView(View view) {
        super.removeView(view);

        final int typeView = (Integer) view.getTag(R.id.tag_type_view);
        if (typeView != TableAdapter.IGNORE_ITEM_VIEW_TYPE) {
            recycler.addRecycledView(view, typeView);
        }
    }

    private void repositionViews() {
        int left, top, right, bottom, i;

        left = widths[0][0] - scrollX;
        i = firstRow;
        int j = firstColumn[i];
        for (View view : rowViewList) {
            right = left + widths[0][0];
            view.layout(left, 0, right, heights[0]);
            left = right;
        }

        top = heights[0] - scrollY;
        i = firstRow;
        for (View view : columnViewList) {
            bottom = top + heights[++i];
            view.layout(0, top, widths[0][0], bottom);
            top = bottom;
        }

        top = heights[0] - scrollY;
        i = firstRow;
        for (List<View> list : bodyViewTable) {
            bottom = top + heights[++i];
            left = widths[i][0] - scrollX;
            j = firstColumn[i];
            for (View view : list) {
                right = left + widths[i][++j];
                view.layout(left, top, right, bottom);
                left = right;
            }
            top = bottom;
        }
        invalidate();
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        final int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        final int w;
        final int h;

        if (adapter != null) {
            this.rowCount = adapter.getRowCount();
            this.columnCount = adapter.getMaxColumnCount();

            firstColumn = new int[rowCount + 1];

            widths = new int[rowCount + 1][columnCount + 1];
            int maxWidth = 0;
            for (int i = -1; i < rowCount; i++) {
                maxRowWidth = 0;
                for (int j = -1; j < columnCount; j++) {
                    int itemWidth = adapter.getWidth(i, j);
                    widths[i + 1][j + 1] = itemWidth;
                    maxRowWidth += itemWidth;
                }
                if (maxWidth < maxRowWidth) {
                    maxWidth = maxRowWidth;
                }
            }

            for (int i = 0; i < rowCount; i++) {
                //TODO SET REAL HEADER SIZE
                widths[i][0] = 200;
            }

            heights = new int[rowCount + 1];
            for (int i = -1; i < rowCount; i++) {
                heights[i + 1] += adapter.getHeight(i);
            }


            if (widthMode == MeasureSpec.AT_MOST) {
                w = Math.min(widthSize, maxWidth);
            } else if (widthMode == MeasureSpec.UNSPECIFIED) {
                w = maxWidth;
            } else {
                w = widthSize;
                if (maxWidth < widthSize) {
                    final float factor = widthSize / (float) maxWidth;
                    for (int i = 1; i < rowCount; i++) {
                        for (int j = 1; j < columnCount; j++) {
                            widths[i][j] = Math.round(widths[i][j] * factor);
                        }
                    }
                }
            }

            if (heightMode == MeasureSpec.AT_MOST) {
                h = Math.min(heightSize, sumArray(heights));
            } else if (heightMode == MeasureSpec.UNSPECIFIED) {
                h = sumArray(heights);
            } else {
                h = heightSize;
            }
        } else {
            if (heightMode == MeasureSpec.AT_MOST || widthMode == MeasureSpec.UNSPECIFIED) {
                w = 0;
                h = 0;
            } else {
                w = widthSize;
                h = heightSize;
            }
        }

        if (firstRow >= rowCount || getMaxScrollY() - getActualScrollY() < 0) {
            firstRow = 0;
            scrollY = Integer.MAX_VALUE;
        }
        if (firstColumn[0] >= columnCount || getMaxScrollX() - getActualScrollX() < 0) {
            firstColumn[0] = 0;
            scrollX = Integer.MAX_VALUE;
        }
        setMeasuredDimension(w, h);
    }

    private int sumArray(int array[]) {
        return sumArray(array, 0, array.length);
    }

    private int sumArray(int array[], int firstIndex, int count) {
        int sum = 0;
        count += firstIndex;
        for (int i = firstIndex; i < count; i++) {
            sum += array[i];
        }
        return sum;
    }

    private int sumArray(int array[][], int row, int startColumn, int count) {
        int sum = 0;
        for (int i = startColumn; i < count; i++) {
            sum += array[row][i];
        }
        return sum;
    }

    @SuppressLint(""DrawAllocation"")
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        if (needRelayout || changed) {
            needRelayout = false;
            resetTable();

            if (adapter != null) {
                width = r - l;
                height = b - t;

                int left, top, right, bottom;

                right = Math.min(width, maxRowWidth);
                bottom = Math.min(height, sumArray(heights));

                headView = makeAndSetup(-1, -1, 0, 0, widths[0][0], heights[0]);

                scrollBounds();
                adjustFirstCellsAndScroll();

                left = widths[0][0] - scrollX;
                for (int i = firstColumn[0]; i < columnCount && left < width; i++) {
                    right = left + widths[0][i + 1];
                    final View view = makeAndSetup(-1, i, left, 0, right, heights[0]);
                    rowViewList.add(view);
                    left = right;
                }

                top = heights[0] - scrollY;
                for (int i = firstRow; i < rowCount && top < height; i++) {
                    bottom = top + heights[i + 1];
                    final View view = makeAndSetup(i, -1, 0, top, widths[i][0], bottom);
                    columnViewList.add(view);
                    top = bottom;
                }

                top = heights[0] - scrollY;
                for (int i = firstRow; i < rowCount && top < height; i++) {
                    bottom = top + heights[i + 1];
                    left = widths[i][0] - scrollX;
                    List<View> list = new ArrayList<View>();
                    for (int j = firstColumn[i]; j < columnCount && left < width; j++) {
                        right = left + widths[i][j + 1];
                        final View view = makeAndSetup(i, j, left, top, right, bottom);
                        list.add(view);
                        left = right;
                    }
                    bodyViewTable.add(list);
                    top = bottom;
                }
            }
        }
    }

    private void scrollBounds() {
        scrollX = scrollBounds(scrollX, firstColumn[0], widths, width);
        scrollY = scrollBounds(scrollY, firstRow, heights, height);
    }

    private int scrollBounds(int desiredScroll, int firstCell, int sizes[], int viewSize) {
        if (desiredScroll == 0) {
            // no op
        } else if (desiredScroll < 0) {
            desiredScroll = Math.max(desiredScroll, -sumArray(sizes, 1, firstCell));
        } else {
            desiredScroll = Math.min(desiredScroll, Math.max(0, sumArray(sizes, firstCell + 1, sizes.length - 1 - firstCell) + sizes[0] - viewSize));
        }
        return desiredScroll;
    }

    private int scrollBounds(int desiredScroll, int firstCell, int sizes[][], int viewSize) {
        if (desiredScroll == 0) {
            // no op
        } else if (desiredScroll < 0) {
            desiredScroll = Math.max(desiredScroll, -sumArray(sizes, 0, 0, firstCell));
        } else {
            desiredScroll = Math.min(desiredScroll, Math.max(0, sumArray(sizes, firstCell + 1, 0, sizes.length - 1 - firstCell) + sizes[0][0] - viewSize));
        }
        return desiredScroll;
    }

    private void adjustFirstCellsAndScroll() {
        int values[];

        values = adjustFirstCellsAndScroll(scrollX, firstColumn[0], widths);
        scrollX = values[0];
        firstColumn[0] = values[1];

        values = adjustFirstCellsAndScroll(scrollY, firstRow, heights);
        scrollY = values[0];
        firstRow = values[1];
    }

    private int[] adjustFirstCellsAndScroll(int scroll, int firstCell, int sizes[][]) {
        if (scroll == 0) {
            // no op
        } else if (scroll > 0) {
            while (sizes[firstCell + 1][0] < scroll) {
                firstCell++;
                scroll -= sizes[firstCell][0];
            }
        } else {
            while (scroll < 0) {
                scroll += sizes[firstCell][0];
                firstCell--;
            }
        }
        return new int[]{scroll, firstCell};
    }

    private int[] adjustFirstCellsAndScroll(int scroll, int firstCell, int sizes[]) {
        if (scroll == 0) {
            // no op
        } else if (scroll > 0) {
            while (sizes[firstCell + 1] < scroll) {
                firstCell++;
                scroll -= sizes[firstCell];
            }
        } else {
            while (scroll < 0) {
                scroll += sizes[firstCell];
                firstCell--;
            }
        }
        return new int[]{scroll, firstCell};
    }

    private void resetTable() {
        headView = null;
        rowViewList.clear();
        columnViewList.clear();
        bodyViewTable.clear();

        removeAllViews();
    }

    private View makeAndSetup(int row, int column, int left, int top, int right, int bottom) {
        final View view = makeView(row, column, right - left, bottom - top);
        view.layout(left, top, right, bottom);
        return view;
    }

    @Override
    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
        final boolean ret;

        final Integer row = (Integer) child.getTag(R.id.tag_row);
        final Integer column = (Integer) child.getTag(R.id.tag_column);
        // row == null => Shadow view
        if (row == null || (row == -1 && column == -1)) {
            ret = super.drawChild(canvas, child, drawingTime);
        } else {
            canvas.save();
            if (row == -1) {
                canvas.clipRect(widths[0][column], 0, canvas.getWidth(), canvas.getHeight());
            } else if (column == -1) {
                canvas.clipRect(0, heights[0], canvas.getWidth(), canvas.getHeight());
            } else {
                canvas.clipRect(widths[row][column], heights[column], canvas.getWidth(), canvas.getHeight());
            }

            ret = super.drawChild(canvas, child, drawingTime);
            canvas.restore();
        }
        return ret;
    }

    private View makeView(int row, int column, int w, int h) {
        final int itemViewType = adapter.getItemViewType(row, column);
        final View recycledView;
        if (itemViewType == TableAdapter.IGNORE_ITEM_VIEW_TYPE) {
            recycledView = null;
        } else {
            recycledView = recycler.getRecycledView(itemViewType);
        }
        final View view = adapter.getView(row, column, recycledView, this);
        view.setTag(R.id.tag_type_view, itemViewType);
        view.setTag(R.id.tag_row, row);
        view.setTag(R.id.tag_column, column);

        view.measure(MeasureSpec.makeMeasureSpec(w, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(h, MeasureSpec.EXACTLY));
        addTableView(view, row, column);
        return view;
    }

    private void addTableView(View view, int row, int column) {
        if (row == -1 && column == -1) {
            addView(view, getChildCount() - 4);
        } else if (row == -1 || column == -1) {
            addView(view, getChildCount() - 5);
        } else {
            addView(view, 0);
        }
    }

    private class TableAdapterDataSetObserver extends DataSetObserver {

        @Override
        public void onChanged() {
            needRelayout = true;
            requestLayout();
        }

        @Override
        public void onInvalidated() {
            // Do nothing
        }
    }

    // http://stackoverflow.com/a/6219382/842697
    private class Flinger implements Runnable {
        private final Scroller scroller;

        private int lastX = 0;
        private int lastY = 0;

        Flinger(Context context) {
            scroller = new Scroller(context);
        }

        void start(int initX, int initY, int initialVelocityX, int initialVelocityY, int maxX, int maxY) {
            scroller.fling(initX, initY, initialVelocityX, initialVelocityY, 0, maxX, 0, maxY);

            lastX = initX;
            lastY = initY;
            post(this);
        }

        public void run() {
            if (scroller.isFinished()) {
                return;
            }

            boolean more = scroller.computeScrollOffset();
            int x = scroller.getCurrX();
            int y = scroller.getCurrY();
            int diffX = lastX - x;
            int diffY = lastY - y;
            if (diffX != 0 || diffY != 0) {
                scrollBy(diffX, diffY);
                lastX = x;
                lastY = y;
            }

            if (more) {
                post(this);
            }
        }

        boolean isFinished() {
            return scroller.isFinished();
        }

        void forceFinished() {
            if (!scroller.isFinished()) {
                scroller.forceFinished(true);
            }
        }
    }

    private void log(String message) {
        Log.d(TAG, message);
    }
}
",TRUE,,3945
3913,InitialSO.csv3913.txt,InitialGit.csv3913.txt,18,"openssl s_client -connect www.yourserver.com:443
 Certificate chain
 0 s:/O=www.yourserver.com/OU=Go to 
   https://www.thawte.com/repository/index.html/OU=Thawte SSL123 
   certificate/OU=Domain Validated/CN=www.yourserver.com
   i:/C=US/O=Thawte, Inc./OU=Domain Validated SSL/CN=Thawte DV SSL CA
 1 s:/C=US/O=Thawte, Inc./OU=Domain Validated SSL/CN=Thawte DV SSL CA
   i:/C=US/O=thawte, Inc./OU=Certification Services Division/OU=(c) 
   2006 thawte, Inc. - For authorized use only/CN=thawte Primary Root CA
 export CLASSPATH=bcprov-jdk16-145.jar
CERTSTORE=res/raw/mystore.bks
if [ -a $CERTSTORE ]; then
    rm $CERTSTORE || exit 1
fi
keytool \
      -import \
      -v \
      -trustcacerts \
      -alias 0 \
      -file <(openssl x509 -in mycert.pem) \
      -keystore $CERTSTORE \
      -storetype BKS \
      -provider org.bouncycastle.jce.provider.BouncyCastleProvider \
      -providerpath /usr/share/java/bcprov.jar \
      -storepass some-password
 res/raw/mystore.bks final SchemeRegistry schemeRegistry = new SchemeRegistry();
schemeRegistry.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));
schemeRegistry.register(new Scheme(""https"", createAdditionalCertsSSLSocketFactory(), 443));

// and then however you create your connection manager, I use ThreadSafeClientConnManager
final HttpParams params = new BasicHttpParams();
...
final ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(params,schemeRegistry);
 protected org.apache.http.conn.ssl.SSLSocketFactory createAdditionalCertsSSLSocketFactory() {
    try {
        final KeyStore ks = KeyStore.getInstance(""BKS"");

        // the bks file we generated above
        final InputStream in = context.getResources().openRawResource( R.raw.mystore);  
        try {
            // don't forget to put the password used above in strings.xml/mystore_password
            ks.load(in, context.getString( R.string.mystore_password ).toCharArray());
        } finally {
            in.close();
        }

        return new AdditionalKeyStoresSSLSocketFactory(ks);

    } catch( Exception e ) {
        throw new RuntimeException(e);
    }
}
 /**
 * Allows you to trust certificates from additional KeyStores in addition to
 * the default KeyStore
 */
public class AdditionalKeyStoresSSLSocketFactory extends SSLSocketFactory {
    protected SSLContext sslContext = SSLContext.getInstance(""TLS"");

    public AdditionalKeyStoresSSLSocketFactory(KeyStore keyStore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {
        super(null, null, null, null, null, null);
        sslContext.init(null, new TrustManager[]{new AdditionalKeyStoresTrustManager(keyStore)}, null);
    }

    @Override
    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {
        return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
    }

    @Override
    public Socket createSocket() throws IOException {
        return sslContext.getSocketFactory().createSocket();
    }



    /**
     * Based on http://download.oracle.com/javase/1.5.0/docs/guide/security/jsse/JSSERefGuide.html#X509TrustManager
     */
    public static class AdditionalKeyStoresTrustManager implements X509TrustManager {

        protected ArrayList<X509TrustManager> x509TrustManagers = new ArrayList<X509TrustManager>();


        protected AdditionalKeyStoresTrustManager(KeyStore... additionalkeyStores) {
            final ArrayList<TrustManagerFactory> factories = new ArrayList<TrustManagerFactory>();

            try {
                // The default Trustmanager with default keystore
                final TrustManagerFactory original = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                original.init((KeyStore) null);
                factories.add(original);

                for( KeyStore keyStore : additionalkeyStores ) {
                    final TrustManagerFactory additionalCerts = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                    additionalCerts.init(keyStore);
                    factories.add(additionalCerts);
                }

            } catch (Exception e) {
                throw new RuntimeException(e);
            }



            /*
             * Iterate over the returned trustmanagers, and hold on
             * to any that are X509TrustManagers
             */
            for (TrustManagerFactory tmf : factories)
                for( TrustManager tm : tmf.getTrustManagers() )
                    if (tm instanceof X509TrustManager)
                        x509TrustManagers.add( (X509TrustManager)tm );
                

            if( x509TrustManagers.size()==0 )
                throw new RuntimeException(""Couldn't find any X509TrustManagers"");

        }

        /*
         * Delegate to the default trust manager.
         */
        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            final X509TrustManager defaultX509TrustManager = x509TrustManagers.get(0);
            defaultX509TrustManager.checkClientTrusted(chain, authType);
        }

        /*
         * Loop over the trustmanagers until we find one that accepts our server
         */
        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            for( X509TrustManager tm : x509TrustManagers ) {
                try {
                    tm.checkServerTrusted(chain,authType);
                    return;
                } catch( CertificateException e ) {
                    // ignore
                }
            }
            throw new CertificateException();
        }

        public X509Certificate[] getAcceptedIssuers() {
            final ArrayList<X509Certificate> list = new ArrayList<X509Certificate>();
            for( X509TrustManager tm : x509TrustManagers )
                list.addAll(Arrays.asList(tm.getAcceptedIssuers()));
            return list.toArray(new X509Certificate[list.size()]);
        }
    }

}
 ","openssl s_client -connect www.yourserver.com:443
 Certificate chain
 0 s:/O=www.yourserver.com/OU=Go to 
   https://www.thawte.com/repository/index.html/OU=Thawte SSL123 
   certificate/OU=Domain Validated/CN=www.yourserver.com
   i:/C=US/O=Thawte, Inc./OU=Domain Validated SSL/CN=Thawte DV SSL CA
 1 s:/C=US/O=Thawte, Inc./OU=Domain Validated SSL/CN=Thawte DV SSL CA
   i:/C=US/O=thawte, Inc./OU=Certification Services Division/OU=(c) 
   2006 thawte, Inc. - For authorized use only/CN=thawte Primary Root CA
 echo | openssl s_client -connect ${MY_SERVER}:443 2>&1 | \
 sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > mycert.pem
 export CLASSPATH=/path/to/bouncycastle/bcprov-jdk15on-155.jar
CERTSTORE=res/raw/mystore.bks
if [ -a $CERTSTORE ]; then
    rm $CERTSTORE || exit 1
fi
keytool \
      -import \
      -v \
      -trustcacerts \
      -alias 0 \
      -file <(openssl x509 -in mycert.pem) \
      -keystore $CERTSTORE \
      -storetype BKS \
      -provider org.bouncycastle.jce.provider.BouncyCastleProvider \
      -providerpath /path/to/bouncycastle/bcprov-jdk15on-155.jar \
      -storepass some-password
 res/raw/mystore.bks final SchemeRegistry schemeRegistry = new SchemeRegistry();
schemeRegistry.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));
schemeRegistry.register(new Scheme(""https"", createAdditionalCertsSSLSocketFactory(), 443));

// and then however you create your connection manager, I use ThreadSafeClientConnManager
final HttpParams params = new BasicHttpParams();
...
final ThreadSafeClientConnManager cm = new ThreadSafeClientConnManager(params,schemeRegistry);
 protected org.apache.http.conn.ssl.SSLSocketFactory createAdditionalCertsSSLSocketFactory() {
    try {
        final KeyStore ks = KeyStore.getInstance(""BKS"");

        // the bks file we generated above
        final InputStream in = context.getResources().openRawResource( R.raw.mystore);  
        try {
            // don't forget to put the password used above in strings.xml/mystore_password
            ks.load(in, context.getString( R.string.mystore_password ).toCharArray());
        } finally {
            in.close();
        }

        return new AdditionalKeyStoresSSLSocketFactory(ks);

    } catch( Exception e ) {
        throw new RuntimeException(e);
    }
}
 /**
 * Allows you to trust certificates from additional KeyStores in addition to
 * the default KeyStore
 */
public class AdditionalKeyStoresSSLSocketFactory extends SSLSocketFactory {
    protected SSLContext sslContext = SSLContext.getInstance(""TLS"");

    public AdditionalKeyStoresSSLSocketFactory(KeyStore keyStore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException, UnrecoverableKeyException {
        super(null, null, null, null, null, null);
        sslContext.init(null, new TrustManager[]{new AdditionalKeyStoresTrustManager(keyStore)}, null);
    }

    @Override
    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {
        return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
    }

    @Override
    public Socket createSocket() throws IOException {
        return sslContext.getSocketFactory().createSocket();
    }



    /**
     * Based on http://download.oracle.com/javase/1.5.0/docs/guide/security/jsse/JSSERefGuide.html#X509TrustManager
     */
    public static class AdditionalKeyStoresTrustManager implements X509TrustManager {

        protected ArrayList<X509TrustManager> x509TrustManagers = new ArrayList<X509TrustManager>();


        protected AdditionalKeyStoresTrustManager(KeyStore... additionalkeyStores) {
            final ArrayList<TrustManagerFactory> factories = new ArrayList<TrustManagerFactory>();

            try {
                // The default Trustmanager with default keystore
                final TrustManagerFactory original = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                original.init((KeyStore) null);
                factories.add(original);

                for( KeyStore keyStore : additionalkeyStores ) {
                    final TrustManagerFactory additionalCerts = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                    additionalCerts.init(keyStore);
                    factories.add(additionalCerts);
                }

            } catch (Exception e) {
                throw new RuntimeException(e);
            }



            /*
             * Iterate over the returned trustmanagers, and hold on
             * to any that are X509TrustManagers
             */
            for (TrustManagerFactory tmf : factories)
                for( TrustManager tm : tmf.getTrustManagers() )
                    if (tm instanceof X509TrustManager)
                        x509TrustManagers.add( (X509TrustManager)tm );


            if( x509TrustManagers.size()==0 )
                throw new RuntimeException(""Couldn't find any X509TrustManagers"");

        }

        /*
         * Delegate to the default trust manager.
         */
        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            final X509TrustManager defaultX509TrustManager = x509TrustManagers.get(0);
            defaultX509TrustManager.checkClientTrusted(chain, authType);
        }

        /*
         * Loop over the trustmanagers until we find one that accepts our server
         */
        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
            for( X509TrustManager tm : x509TrustManagers ) {
                try {
                    tm.checkServerTrusted(chain,authType);
                    return;
                } catch( CertificateException e ) {
                    // ignore
                }
            }
            throw new CertificateException();
        }

        public X509Certificate[] getAcceptedIssuers() {
            final ArrayList<X509Certificate> list = new ArrayList<X509Certificate>();
            for( X509TrustManager tm : x509TrustManagers )
                list.addAll(Arrays.asList(tm.getAcceptedIssuers()));
            return list.toArray(new X509Certificate[list.size()]);
        }
    }

}
 ",FALSE,"package com.mobivery.utils;

/**
 * Created by mobivery on 26/03/14.
 */

import android.util.Log;

import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;

import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

public class CustomTrustManager implements X509TrustManager {

    protected ArrayList<X509TrustManager> x509TrustManagers = new ArrayList<X509TrustManager>();

    /**
     * Allows you to trust certificates from additional KeyStores in addition to
     * the default KeyStore
     * 'additional KeyStores' means certs locally stored. The method to load them is not implemented here.
     * http://stackoverflow.com/a/6378872
     */
    protected CustomTrustManager(KeyStore... additionalkeyStores) {
        final ArrayList<TrustManagerFactory> factories = new ArrayList<TrustManagerFactory>();

        try {
            // The default TrustManager with default keyStore
            final TrustManagerFactory original = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            original.init((KeyStore) null);
            factories.add(original);

            for( KeyStore keyStore : additionalkeyStores ) {
                final TrustManagerFactory additionalCerts = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                additionalCerts.init(keyStore);
                factories.add(additionalCerts);
            }

        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        /*
         * Iterate over the returned trustmanagers, and hold on
         * to any that are X509TrustManagers
         */
        for (TrustManagerFactory tmf : factories) {
            for (TrustManager tm : tmf.getTrustManagers()) {
                if (tm instanceof X509TrustManager) {
                    x509TrustManagers.add((X509TrustManager) tm);
                }
            }
        }

        if( x509TrustManagers.size()==0 ) {
            throw new RuntimeException(""Couldn't find any X509TrustManagers"");
        }
    }

    /*
     * Delegate to the default trust manager.
     */
    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        final X509TrustManager defaultX509TrustManager = x509TrustManagers.get(0);
        defaultX509TrustManager.checkClientTrusted(chain, authType);
    }

    /*
     * Loop over the trust managers until we find one that accepts our server
     */
    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        for( X509TrustManager tm : x509TrustManagers ) {
            try {
                tm.checkServerTrusted(chain,authType);
                return;
            } catch( CertificateException e ) {
                // ignore
            }
        }
        throw new CertificateException();
    }

    public X509Certificate[] getAcceptedIssuers() {
        final ArrayList<X509Certificate> list = new ArrayList<X509Certificate>();
        for( X509TrustManager tm : x509TrustManagers ) {
            list.addAll(Arrays.asList(tm.getAcceptedIssuers()));
        }
        return list.toArray(new X509Certificate[list.size()]);
    }
}
","package {{{staticPackage}}}.utils;

import android.util.Log;

import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Arrays;

import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

/**
 * The trust manager for X509 certificates to be used to perform authentication for secure sockets.
 * This class also allows you to trust certificates from additional KeyStores in addition to
 * the default KeyStore.
 *
 * @author Service Generator
 */
public class CustomTrustManager implements X509TrustManager {

    protected ArrayList<X509TrustManager> x509TrustManagers = new ArrayList<X509TrustManager>();

    /**
     * Allows you to trust certificates from additional KeyStores in addition to
     * the default KeyStore
     * 'additional KeyStores' means certs locally stored. The method to load them is not implemented here.
     * http://stackoverflow.com/a/6378872
     */
    protected CustomTrustManager(KeyStore... additionalkeyStores) {
        final ArrayList<TrustManagerFactory> factories = new ArrayList<TrustManagerFactory>();

        try {
            // The default TrustManager with default keyStore
            final TrustManagerFactory original = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            original.init((KeyStore) null);
            factories.add(original);

            for( KeyStore keyStore : additionalkeyStores ) {
                final TrustManagerFactory additionalCerts = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
                additionalCerts.init(keyStore);
                factories.add(additionalCerts);
            }

        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        /*
         * Iterate over the returned trustmanagers, and hold on
         * to any that are X509TrustManagers
         */
        for (TrustManagerFactory tmf : factories) {
            for (TrustManager tm : tmf.getTrustManagers()) {
                if (tm instanceof X509TrustManager) {
                    x509TrustManagers.add((X509TrustManager) tm);
                }
            }
        }

        if( x509TrustManagers.size()==0 ) {
            throw new RuntimeException(""Couldn't find any X509TrustManagers"");
        }
    }

    /*
     * Delegate to the default trust manager.
     */
    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        final X509TrustManager defaultX509TrustManager = x509TrustManagers.get(0);
        defaultX509TrustManager.checkClientTrusted(chain, authType);
    }

    /*
     * Loop over the trust managers until we find one that accepts our server
     */
    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        for( X509TrustManager tm : x509TrustManagers ) {
            try {
                tm.checkServerTrusted(chain,authType);
                return;
            } catch( CertificateException e ) {
                // ignore
            }
        }
        throw new CertificateException();
    }

    public X509Certificate[] getAcceptedIssuers() {
        final ArrayList<X509Certificate> list = new ArrayList<X509Certificate>();
        for( X509TrustManager tm : x509TrustManagers ) {
            list.addAll(Arrays.asList(tm.getAcceptedIssuers()));
        }
        return list.toArray(new X509Certificate[list.size()]);
    }
}
",FALSE,,3952
3923,InitialSO.csv3923.txt,InitialGit.csv3923.txt,6,"Array.split function versionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push(""0"");
        while (v2parts.length < v1parts.length) v2parts.push(""0"");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}
 Array.map Array.every ","Array.split function versionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push(""0"");
        while (v2parts.length < v1parts.length) v2parts.push(""0"");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}
 Array.map Array.every ",TRUE,"﻿
//https://raw.githubusercontent.com/jfriend00/docReady/master/docready.js
(function(funcName, baseObj) {
    // The public function name defaults to window.docReady
    // but you can pass in your own object and own function name and those will be used
    // if you want to put them in a different namespace
    funcName = funcName || ""docReady"";
    baseObj = baseObj || window;
    var readyList = [];
    var readyFired = false;
    var readyEventHandlersInstalled = false;

    // call this when the document is ready
    // this function protects itself against being called more than once
    function ready() {
        if (!readyFired) {
            // this must be set to true before we start calling callbacks
            readyFired = true;
            for (var i = 0; i < readyList.length; i++) {
                // if a callback here happens to add new ready handlers,
                // the docReady() function will see that it already fired
                // and will schedule the callback to run right after
                // this event loop finishes so all handlers will still execute
                // in order and no new ones will be added to the readyList
                // while we are processing the list
                readyList[i].fn.call(window, readyList[i].ctx);
            }
            // allow any closures held by these functions to free
            readyList = [];
        }
    }

    function readyStateChange() {
        if ( document.readyState === ""complete"" ) {
            ready();
        }
    }

    // This is the one public interface
    // docReady(fn, context);
    // the context argument is optional - if present, it will be passed
    // as an argument to the callback
    baseObj[funcName] = function(callback, context) {
        // if ready has already fired, then just schedule the callback
        // to fire asynchronously, but right away
        if (readyFired) {
            setTimeout(function() {callback(context);}, 1);
            return;
        } else {
            // add the function and context to the list
            readyList.push({fn: callback, ctx: context});
        }
        // if document already ready to go, schedule the ready function to run
        if (document.readyState === ""complete"") {
            setTimeout(ready, 1);
        } else if (!readyEventHandlersInstalled) {
            // otherwise if we don't have event handlers installed, install them
            if (document.addEventListener) {
                // first choice is DOMContentLoaded event
                document.addEventListener(""DOMContentLoaded"", ready, false);
                // backup is window load event
                window.addEventListener(""load"", ready, false);
            } else {
                // must be IE
                document.attachEvent(""onreadystatechange"", readyStateChange);
                window.attachEvent(""onload"", ready);
            }
            readyEventHandlersInstalled = true;
        }
    }
})(""docReady"", window);

docReady(function() {
    (function (window, document, version, callback) {

        // only run this script once per page.
        if (window.embedScriptIncluded) return;

        window.embedScriptIncluded = true;

        // get the script location.
        var s = document.getElementById('embedUV');

        if (!s){
            var scripts = document.getElementsByTagName('script');
            s = scripts[scripts.length - 1];
        }

        var scriptUri = (/.*src=""(.*)""/).exec(s.outerHTML)[1];
        var absScriptUri = s.src;

        var j, d;
        var loaded = false;

        function isPositiveInteger(x) {
            // http://stackoverflow.com/a/1019526/11236
            return /^\d+$/.test(x);
        }

        /**
         * Compare two software version numbers (e.g. 1.7.1)
         * Returns:
         *
         *  0 if they're identical
         *  negative if v1 < v2
         *  positive if v1 > v2
         *  Nan if they in the wrong format
         *
         *  E.g.:
         *
         *  assert(version_number_compare(""1.7.1"", ""1.6.10"") > 0);
         *  assert(version_number_compare(""1.7.1"", ""1.7.10"") < 0);
         *
         *  ""Unit tests"": http://jsfiddle.net/ripper234/Xv9WL/28/
         *
         *  Taken from http://stackoverflow.com/a/6832721/11236
         */
        function compareVersionNumbers(v1, v2){
            var v1parts = v1.split('.');
            var v2parts = v2.split('.');

            // First, validate both numbers are true version numbers
            function validateParts(parts) {
                for (var i = 0; i < parts.length; ++i) {
                    if (!isPositiveInteger(parts[i])) {
                        return false;
                    }
                }
                return true;
            }
            if (!validateParts(v1parts) || !validateParts(v2parts)) {
                return NaN;
            }

            for (var i = 0; i < v1parts.length; ++i) {
                if (v2parts.length === i) {
                    return 1;
                }

                if (v1parts[i] === v2parts[i]) {
                    continue;
                }
                if (v1parts[i] > v2parts[i]) {
                    return 1;
                }
                return -1;
            }

            if (v1parts.length != v2parts.length) {
                return -1;
            }

            return 0;
        }

        // only load jQuery if not already included in page.
        if (!(j = window.jQuery) || compareVersionNumbers(version, j.fn.jquery) || callback(j, scriptUri, absScriptUri, loaded)) {
            var script = document.createElement(""script"");
            script.type = ""text/javascript"";
            script.src = ""//ajax.googleapis.com/ajax/libs/jquery/"" + version + ""/jquery.min.js"";
            script.onload = script.onreadystatechange = function () {
                if (!loaded && (!(d = this.readyState) || d === ""loaded"" || d === ""complete"")) {
                    callback((j = window.jQuery).noConflict(1), scriptUri, absScriptUri, loaded = true);
                    j(script).remove();
                }
            };
            document.getElementsByTagName(""head"")[0].appendChild(script);
        }
    })(window, document, ""1.10.1"", function ($, scriptUri, absScriptUri, jqueryLoaded) {

        $.support.cors = true;

        function createCookie(name, value, days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                var expires = ""; expires="" + date.toGMTString();
            }
            else var expires = """";
            document.cookie = name + ""="" + value + expires + ""; path=/"";
        }

        // get the part preceding 'lib/embed.js'
        var baseUri = (/(.*)lib\/embed.js/).exec(scriptUri)[1];
        appUri = baseUri + 'app.html';
        easyXDMUri = baseUri + 'lib/easyXDM.min.js';
        json2Uri = baseUri + 'lib/json2.min.js';

        var a = document.createElement('a');
        a.href = absScriptUri;
        var domain = a.hostname;
        window.isHomeDomain = document.domain === domain;

        $.when($.getScript(easyXDMUri),
               $.getScript(json2Uri)).done(function () {
                   initPlayers($('.uv').not('[data-no-load*=true]'));
               });

        // find all players on a page and initialise them
        window.initPlayers = function($players){
            var isOnlyInstance = $players.length === 1;

            for (var i = 0; i < $players.length; i++) {
                app($players[i], isHomeDomain, isOnlyInstance);
            }
        }

        function app(element, isHomeDomain, isOnlyInstance) {
            var socket, $app, $img, $appFrame, manifestUri, sequenceIndex, canvasIndex, defaultToFullScreen, isLightbox, zoom, rotation, config, jsonp, locale, isFullScreen, height, top, left, lastScroll, reload;

            $app = $(element);

            // Default to fullscreen
            defaultToFullScreen = $app.attr('data-fullscreen') === 'true';

            // Lightbox behaviour
            isLightbox = $app.attr('data-lightbox') === 'true';

            if(isLightbox){
                $img = $app.find('img');
                $img.css('cursor', 'pointer');
                // add overflow:hidden style to container div.
                $app.css('overflow', 'hidden');
            } else {
                // empty the container of any 'no javascript' messages.
                $app.empty();
            }

            // get initial params from the container's 'data-' attributes.
            manifestUri = $app.attr('data-uri');
            manifestUri = encodeURIComponent(manifestUri);
            sequenceIndex = $app.attr('data-sequenceindex');
            canvasIndex = $app.attr('data-canvasindex');
            zoom = $app.attr('data-zoom');
            rotation = $app.attr('data-rotation');
            config = $app.attr('data-config');
            jsonp = $app.attr('data-jsonp');
            locale = $app.attr('data-locale') || ""en-GB""; // todo: this should be defaulted in bootstrapper

            isFullScreen = false;
            height = $app.height();
            var position = $app.position();
            top = position.top;
            left = position.left;

            $(window).resize(function () {
                resize();
            });

            window.onorientationchange = function () {
                resize();
            };

            createSocket();

            function resize() {
                if (!$appFrame) return;

                if (isFullScreen) {
                    $appFrame.width($(this).width());
                    $appFrame.height($(this).height());
                } else {
                    $appFrame.width($app.width());
                    $appFrame.height($app.height());
                }
            }

            function redirect(uri) {
                // store current location in cookie.
                createCookie('uvredirect', window.location.href);
                window.location.replace(uri);
            }

            function refresh() {
                window.location.reload();
            }

            function triggerSocket(eventName, eventObject) {
                socket.postMessage(JSON.stringify({ eventName: eventName, eventObject: eventObject }));
            }

            function toggleFullScreen(obj) {
                isFullScreen = obj.isFullScreen;

                if (obj.overrideFullScreen){
                    //jQuery(document).trigger('onToggleFullScreen', [obj.isFullScreen]);
                    return;
                }

                if (isFullScreen) {

                    // store current scroll position.
                    lastScroll = $(document).scrollTop();

                    $(""html"").css(""overflow"", ""hidden"");
                    window.scrollTo(0, 0);

                    $appFrame.css({
                        'position': 'absolute',
                        'z-index': 9999,
                        'height': $(window).height(),
                        'width': $(window).width(),
                        'top': ($app[0].offsetParent.offsetTop * -1) || 0,
                        'left': ($app[0].offsetParent.offsetLeft * -1) || 0
                    });
                } else {
                    $(""html"").css(""overflow"", ""auto"");

                    $appFrame.css({
                        'position': 'static',
                        'z-index': 'auto',
                        'height': height,
                        'width': '100%',
                        'top': top,
                        'left': left
                    });

                    // return to last scroll position.
                    window.scrollTo(0, lastScroll);

                    // if lightbox, hide iframe.
                    if (isLightbox) hideLightbox();
                }

                resize();
            }

            function viewSequence(index) {

                $appFrame.prop('src', '');
                $app.empty();

                sequenceIndex = index;
                reload = true;

                createSocket();

                if (isFullScreen){
                    triggerSocket('onToggleFullScreen');
                }
            }

            function showLightbox(){
                $img.hide();
                $appFrame.show();
                triggerSocket('onToggleFullScreen');
            }

            function hideLightbox(){
                $appFrame.hide();
                $img.show();
            }

            function createSocket() {

                var uri = appUri +
                    ""?isHomeDomain="" + isHomeDomain +
                    ""&isOnlyInstance="" + isOnlyInstance +
                    ""&manifestUri="" + manifestUri +
                    ""&embedScriptUri="" + absScriptUri +
                    ""&embedDomain="" + document.domain +
                    ""&domain="" + domain +
                    ""&isLightbox="" + isLightbox +
                    ""&locale="" + locale;

                if (reload) uri += ""&reload=true"";
                if (config) uri += ""&config="" + config;
                if (jsonp) uri += ""&jsonp="" + jsonp;

                // these are values that getParam can either retrieve from hash or querystring
                if (sequenceIndex) uri += ""&si="" + sequenceIndex;
                if (canvasIndex) uri += ""&ci="" + canvasIndex;
                if (zoom) uri += ""&z="" + zoom;
                if (rotation) uri += ""&r="" + rotation;

                socket = new easyXDM.Socket({
                    remote: uri,
                    container: $app.get(0),
                    props: { style: { width: ""100%"", height: $app.height() + ""px"" }, scrolling: ""no"" },
                    onReady: function () {
                        $appFrame = $app.find('iframe');
                        if (defaultToFullScreen) {
                            toggleFullScreen({
                                isFullScreen: true
                            });
                            triggerSocket('onToggleFullScreen');
                        }
                        if (isLightbox) {
                            $img.on('click', function(e){
                                e.preventDefault();
                                showLightbox();
                            });
                            $appFrame.hide();
                        }
                    },
                    onMessage: function (message, origin) {
                        message = $.parseJSON(message);

                        try{
                            jQuery(document).trigger(""uv."" + message.eventName, [message.eventObject]);
                        } catch(e) {
                            // do nothing
                        }

                        switch (message.eventName) {
                            case ""onToggleFullScreen"":
                                toggleFullScreen(message.eventObject);
                                break;
                            case ""onSequenceIndexChanged"":
                                viewSequence(message.eventObject);
                                break;
                            case ""onRedirect"":
                                redirect(message.eventObject);
                                break;
                            case ""onRefresh"":
                                refresh();
                                break;
                            case ""onTrackEvent"":
                                if (""undefined"" !== typeof (trackEvent)) {
                                    trackEvent(message.eventObject.category, message.eventObject.action, message.eventObject.label, message.eventObject.value);
                                }
                                break;
                            case ""onTrackVariable"":
                                if (""undefined"" !== typeof (trackVariable)) {
                                    trackVariable(message.eventObject.slot, message.eventObject.name, message.eventObject.value, message.eventObject.scope);
                                }
                                break;
                        }
                    }
                });
            }
        }
    });
});","﻿
//https://raw.githubusercontent.com/jfriend00/docReady/master/docready.js
(function(funcName, baseObj) {
    // The public function name defaults to window.docReady
    // but you can pass in your own object and own function name and those will be used
    // if you want to put them in a different namespace
    funcName = funcName || ""docReady"";
    baseObj = baseObj || window;
    var readyList = [];
    var readyFired = false;
    var readyEventHandlersInstalled = false;

    // call this when the document is ready
    // this function protects itself against being called more than once
    function ready() {
        if (!readyFired) {
            // this must be set to true before we start calling callbacks
            readyFired = true;
            for (var i = 0; i < readyList.length; i++) {
                // if a callback here happens to add new ready handlers,
                // the docReady() function will see that it already fired
                // and will schedule the callback to run right after
                // this event loop finishes so all handlers will still execute
                // in order and no new ones will be added to the readyList
                // while we are processing the list
                readyList[i].fn.call(window, readyList[i].ctx);
            }
            // allow any closures held by these functions to free
            readyList = [];
        }
    }

    function readyStateChange() {
        if ( document.readyState === ""complete"" ) {
            ready();
        }
    }

    // This is the one public interface
    // docReady(fn, context);
    // the context argument is optional - if present, it will be passed
    // as an argument to the callback
    baseObj[funcName] = function(callback, context) {
        // if ready has already fired, then just schedule the callback
        // to fire asynchronously, but right away
        if (readyFired) {
            setTimeout(function() {callback(context);}, 1);
            return;
        } else {
            // add the function and context to the list
            readyList.push({fn: callback, ctx: context});
        }
        // if document already ready to go, schedule the ready function to run
        if (document.readyState === ""complete"") {
            setTimeout(ready, 1);
        } else if (!readyEventHandlersInstalled) {
            // otherwise if we don't have event handlers installed, install them
            if (document.addEventListener) {
                // first choice is DOMContentLoaded event
                document.addEventListener(""DOMContentLoaded"", ready, false);
                // backup is window load event
                window.addEventListener(""load"", ready, false);
            } else {
                // must be IE
                document.attachEvent(""onreadystatechange"", readyStateChange);
                window.attachEvent(""onload"", ready);
            }
            readyEventHandlersInstalled = true;
        }
    }
})(""docReady"", window);

docReady(function() {
    (function (window, document, version, callback) {

        // only run this script once per page.
        if (window.embedScriptIncluded) return;

        window.embedScriptIncluded = true;

        // get the script location.
        var s = document.getElementById('embedUV');

        if (!s){
            var scripts = document.getElementsByTagName('script');
            s = scripts[scripts.length - 1];
        }

        var scriptUri = (/.*src=""(.*)""/).exec(s.outerHTML)[1];
        var absScriptUri = s.src;

        var j, d;
        var loaded = false;

        function isPositiveInteger(x) {
            // http://stackoverflow.com/a/1019526/11236
            return /^\d+$/.test(x);
        }

        /**
         * Compare two software version numbers (e.g. 1.7.1)
         * Returns:
         *
         *  0 if they're identical
         *  negative if v1 < v2
         *  positive if v1 > v2
         *  Nan if they in the wrong format
         *
         *  E.g.:
         *
         *  assert(version_number_compare(""1.7.1"", ""1.6.10"") > 0);
         *  assert(version_number_compare(""1.7.1"", ""1.7.10"") < 0);
         *
         *  ""Unit tests"": http://jsfiddle.net/ripper234/Xv9WL/28/
         *
         *  Taken from http://stackoverflow.com/a/6832721/11236
         */
        function compareVersionNumbers(v1, v2){
            var v1parts = v1.split('.');
            var v2parts = v2.split('.');

            // First, validate both numbers are true version numbers
            function validateParts(parts) {
                for (var i = 0; i < parts.length; ++i) {
                    if (!isPositiveInteger(parts[i])) {
                        return false;
                    }
                }
                return true;
            }
            if (!validateParts(v1parts) || !validateParts(v2parts)) {
                return NaN;
            }

            for (var i = 0; i < v1parts.length; ++i) {
                if (v2parts.length === i) {
                    return 1;
                }

                if (v1parts[i] === v2parts[i]) {
                    continue;
                }
                if (v1parts[i] > v2parts[i]) {
                    return 1;
                }
                return -1;
            }

            if (v1parts.length != v2parts.length) {
                return -1;
            }

            return 0;
        }

        // only load jQuery if not already included in page.
        if (!(j = window.jQuery) || compareVersionNumbers(version, j.fn.jquery) || callback(j, scriptUri, absScriptUri, loaded)) {
            var script = document.createElement(""script"");
            script.type = ""text/javascript"";
            script.src = ""//ajax.googleapis.com/ajax/libs/jquery/"" + version + ""/jquery.min.js"";
            script.onload = script.onreadystatechange = function () {
                if (!loaded && (!(d = this.readyState) || d === ""loaded"" || d === ""complete"")) {
                    callback((j = window.jQuery).noConflict(1), scriptUri, absScriptUri, loaded = true);
                    j(script).remove();
                }
            };
            document.getElementsByTagName(""head"")[0].appendChild(script);
        }
    })(window, document, ""1.10.1"", function ($, scriptUri, absScriptUri, jqueryLoaded) {

        $.support.cors = true;

        function createCookie(name, value, days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                var expires = ""; expires="" + date.toGMTString();
            }
            else var expires = """";
            document.cookie = name + ""="" + value + expires + ""; path=/"";
        }

        // get the part preceding 'lib/embed.js'
        var baseUri = (/(.*)lib\/embed.js/).exec(scriptUri)[1];
        appUri = baseUri + 'app.html';
        easyXDMUri = baseUri + 'lib/easyXDM.min.js';
        json2Uri = baseUri + 'lib/json2.min.js';

        var a = document.createElement('a');
        a.href = absScriptUri;
        var domain = a.hostname;
        window.isHomeDomain = document.domain === domain;

        $.when($.getScript(easyXDMUri),
               $.getScript(json2Uri)).done(function () {
                   initPlayers($('.uv').not('[data-no-load*=true]'));
               });

        // find all players on a page and initialise them
        window.initPlayers = function($players){
            var isOnlyInstance = $players.length === 1;

            for (var i = 0; i < $players.length; i++) {
                app($players[i], isHomeDomain, isOnlyInstance);
            }
        }

        function app(element, isHomeDomain, isOnlyInstance) {
            var socket, $app, $img, $appFrame, manifestUri, collectionIndex, manifestIndex, sequenceIndex, canvasIndex, defaultToFullScreen, isLightbox, zoom, rotation, config, jsonp, locale, isFullScreen, height, top, left, lastScroll, reload;

            $app = $(element);

            // Default to fullscreen
            defaultToFullScreen = $app.attr('data-fullscreen') === 'true';

            // Lightbox behaviour
            isLightbox = $app.attr('data-lightbox') === 'true';

            if(isLightbox){
                $img = $app.find('img');
                $img.css('cursor', 'pointer');
                // add overflow:hidden style to container div.
                $app.css('overflow', 'hidden');
            } else {
                // empty the container of any 'no javascript' messages.
                $app.empty();
            }

            // get initial params from the container's 'data-' attributes.
            manifestUri = $app.attr('data-uri');
            manifestUri = encodeURIComponent(manifestUri);
            collectionIndex = $app.attr('data-collectionindex');
            manifestIndex = $app.attr('data-manifestindex');
            sequenceIndex = $app.attr('data-sequenceindex');
            canvasIndex = $app.attr('data-canvasindex');
            zoom = $app.attr('data-zoom');
            rotation = $app.attr('data-rotation');
            config = $app.attr('data-config');
            jsonp = $app.attr('data-jsonp');
            locale = $app.attr('data-locale') || ""en-GB""; // todo: this should be defaulted in bootstrapper

            isFullScreen = false;
            height = $app.height();
            //var position = $app.position();
            //top = position.top;
            //left = position.left;
            var offset = $app.offset();
            top = offset.top;
            left = offset.left;

            $(window).resize(function () {
                resize();
            });

            window.onorientationchange = function () {
                resize();
            };

            createSocket();

            function resize() {
                if (!$appFrame) return;

                if (isFullScreen) {
                    var offset = getOffset();

                    $appFrame.css({
                        'top': offset.top,
                        'left': offset.left
                    });

                    var viewport = getViewport();

                    $appFrame.width(viewport.width);
                    $appFrame.height(viewport.height);
                } else {
                    $appFrame.width($app.width());
                    $appFrame.height($app.height());
                }
            }

            function redirect(uri) {
                // store current location in cookie.
                createCookie('uvredirect', window.location.href);
                window.location.replace(uri);
            }

            function refresh() {
                window.location.reload();
            }

            function triggerSocket(eventName, eventObject) {
                socket.postMessage(JSON.stringify({ eventName: eventName, eventObject: eventObject }));
            }

            function toggleFullScreen(obj) {
                isFullScreen = obj.isFullScreen;

                if (obj.overrideFullScreen){
                    return;
                }

                if (isFullScreen) {

                    // store current scroll position.
                    lastScroll = $(document).scrollTop();

                    $(""html"").css(""overflow"", ""hidden"");
                    window.scrollTo(0, 0);

                    var offset = getOffset();

                    // todo: prevent parent from having overflow:hidden?

                    $appFrame.css({
                        'position': 'absolute',
                        'z-index': 9999,
                        'top': offset.top,
                        'left': offset.left
                    });
                } else {
                    $(""html"").css(""overflow"", ""auto"");

                    $appFrame.css({
                        'position': 'static',
                        'z-index': 'auto',
                        'height': height,
                        'width': '100%',
                        'top': top,
                        'left': left
                    });

                    // return to last scroll position.
                    window.scrollTo(0, lastScroll);

                    // if lightbox, hide iframe.
                    if (isLightbox) hideLightbox();
                }

                resize();
            }

            function getOffset() {

                var offset = {
                    top: 0,
                    left: 0
                };

                // if $app has an offsetParent that isn't the root
                var $offsetParent = $app.offsetParent();

                if (!$offsetParent.is(':root') &&
                    !$offsetParent.is('body')){
                    offset.top = ($app.offset().top * -1) + $app.position().top;
                    offset.left = ($app.offset().left * -1) + $app.position().left;
                }

                return offset;
            }

            function getViewport() {

                var viewPortWidth;
                var viewPortHeight;

                // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight
                if (typeof window.innerWidth != 'undefined') {
                    viewPortWidth = window.innerWidth,
                        viewPortHeight = window.innerHeight
                }
                // IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)
                else if (typeof document.documentElement != 'undefined'
                    && typeof document.documentElement.clientWidth !=
                    'undefined' && document.documentElement.clientWidth != 0) {
                    viewPortWidth = document.documentElement.clientWidth,
                        viewPortHeight = document.documentElement.clientHeight
                }
                // older versions of IE
                else {
                    viewPortWidth = document.getElementsByTagName('body')[0].clientWidth,
                        viewPortHeight = document.getElementsByTagName('body')[0].clientHeight
                }
                return {width: viewPortWidth, height: viewPortHeight};
            }

            function showLightbox(){
                $img.hide();
                $appFrame.show();
                triggerSocket('uv.onToggleFullScreen');
            }

            function hideLightbox(){
                $appFrame.hide();
                $img.show();
            }

            function createSocket() {

                var uri = appUri +
                    ""?isHomeDomain="" + isHomeDomain +
                    ""&isOnlyInstance="" + isOnlyInstance +
                    ""&manifestUri="" + manifestUri +
                    ""&embedScriptUri="" + absScriptUri +
                    ""&embedDomain="" + document.domain +
                    ""&domain="" + domain +
                    ""&isLightbox="" + isLightbox +
                    ""&locale="" + locale;

                if (reload) uri += ""&reload=true"";
                if (config) uri += ""&config="" + config;
                if (jsonp) uri += ""&jsonp="" + jsonp;

                // these are values that getParam can either retrieve from the iframe querystring or parent document hash params
                if (collectionIndex) uri += ""&c="" + collectionIndex;
                if (manifestIndex) uri += ""&m="" + manifestIndex;
                if (sequenceIndex) uri += ""&s="" + sequenceIndex;
                if (canvasIndex) uri += ""&cv="" + canvasIndex;
                if (zoom) uri += ""&z="" + zoom;
                if (rotation) uri += ""&r="" + rotation;

                socket = new easyXDM.Socket({
                    remote: uri,
                    container: $app.get(0),
                    props: { style: { width: ""100%"", height: $app.height() + ""px"" }, scrolling: ""no"" },
                    onReady: function () {
                        $appFrame = $app.find('iframe');
                        if (defaultToFullScreen) {
                            toggleFullScreen({
                                isFullScreen: true
                            });
                            triggerSocket('uv.onToggleFullScreen');
                        }
                        if (isLightbox) {
                            $img.on('click', function(e){
                                e.preventDefault();
                                showLightbox();
                            });
                            $appFrame.hide();
                        }
                    },
                    onMessage: function (message, origin) {
                        message = $.parseJSON(message);

                        try{
                            jQuery(document).trigger(message.eventName, [message.eventObject]);
                        } catch(e) {
                            // do nothing
                        }

                        switch (message.eventName) {
                            case ""uv.onToggleFullScreen"":
                                toggleFullScreen(message.eventObject);
                                break;
                            case ""uv.onSequenceIndexChanged"":
                                viewSequence(message.eventObject);
                                break;
                            case ""uv.onRedirect"":
                                redirect(message.eventObject);
                                break;
                            case ""uv.onRefresh"":
                                refresh();
                                break;
                            case ""uv.onTrackEvent"":
                                if (""undefined"" !== typeof (trackEvent)) {
                                    trackEvent(message.eventObject.category, message.eventObject.action, message.eventObject.label, message.eventObject.value);
                                }
                                break;
                            case ""uv.onTrackVariable"":
                                if (""undefined"" !== typeof (trackVariable)) {
                                    trackVariable(message.eventObject.slot, message.eventObject.name, message.eventObject.value, message.eventObject.scope);
                                }
                                break;
                        }
                    }
                });
            }
        }
    });
});",FALSE,,3953
3924,InitialSO.csv3924.txt,InitialGit.csv3924.txt,3,"@Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}
 @Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    if (mScrollY < length) {
        return mScrollY / (float) length;
    }

    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    final int bottomEdge = getHeight() - mPaddingBottom;
    final int span = getChildAt(0).getBottom() - mScrollY - bottomEdge;
    if (span < length) {
        return span / (float) length;
    }

    return 1.0f;
}
 ","@Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}
 @Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    if (mScrollY < length) {
        return mScrollY / (float) length;
    }

    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    final int bottomEdge = getHeight() - mPaddingBottom;
    final int span = getChildAt(0).getBottom() - mScrollY - bottomEdge;
    if (span < length) {
        return span / (float) length;
    }

    return 1.0f;
}
 ",TRUE,"package com.tarks.favorite.fadingactionbar.view;


import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.widget.ScrollView;

/**
 * @author Cyril Mottier with modifications from Manuel Peinado
 */
public class ObservableScrollView extends ScrollView implements ObservableScrollable {
    // Edge-effects don't mix well with the translucent action bar in Android 2.X
    private boolean mDisableEdgeEffects = true;

    private OnScrollChangedCallback mOnScrollChangedListener;

    public ObservableScrollView(Context context) {
        super(context);
    }

    public ObservableScrollView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public ObservableScrollView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);
        if (mOnScrollChangedListener != null) {
            mOnScrollChangedListener.onScroll(l, t);
        }
    }

    @Override
    protected float getTopFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getTopFadingEdgeStrength();
    }

    @Override
    protected float getBottomFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getBottomFadingEdgeStrength();
    }

    @Override
    public void setOnScrollChangedCallback(OnScrollChangedCallback callback) {
        mOnScrollChangedListener = callback;
    }
}","//This is source code of favorite. Copyrightⓒ. Tarks. All Rights Reserved.
package com.tarks.favorite.fadingactionbar.view;


import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.widget.ScrollView;

/**
 * @author Cyril Mottier with modifications from Manuel Peinado
 */
public class ObservableScrollView extends ScrollView implements ObservableScrollable {
    // Edge-effects don't mix well with the translucent action bar in Android 2.X
    private boolean mDisableEdgeEffects = true;

    private OnScrollChangedCallback mOnScrollChangedListener;

    public ObservableScrollView(Context context) {
        super(context);
    }

    public ObservableScrollView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public ObservableScrollView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);
        if (mOnScrollChangedListener != null) {
            mOnScrollChangedListener.onScroll(l, t);
        }
    }

    @Override
    protected float getTopFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getTopFadingEdgeStrength();
    }

    @Override
    protected float getBottomFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getBottomFadingEdgeStrength();
    }

    @Override
    public void setOnScrollChangedCallback(OnScrollChangedCallback callback) {
        mOnScrollChangedListener = callback;
    }
}",FALSE,,3956
3925,InitialSO.csv3925.txt,InitialGit.csv3925.txt,3,"@Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}
 @Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    if (mScrollY < length) {
        return mScrollY / (float) length;
    }

    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    final int bottomEdge = getHeight() - mPaddingBottom;
    final int span = getChildAt(0).getBottom() - mScrollY - bottomEdge;
    if (span < length) {
        return span / (float) length;
    }

    return 1.0f;
}
 ","@Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    return 1.0f;
}
 @Override
protected float getTopFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    if (mScrollY < length) {
        return mScrollY / (float) length;
    }

    return 1.0f;
}

@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }

    final int length = getVerticalFadingEdgeLength();
    final int bottomEdge = getHeight() - mPaddingBottom;
    final int span = getChildAt(0).getBottom() - mScrollY - bottomEdge;
    if (span < length) {
        return span / (float) length;
    }

    return 1.0f;
}
 ",TRUE,"package com.cyrilmottier.android.translucentactionbar;

import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.widget.ScrollView;

/**
 * @author Cyril Mottier with modifications from Manuel Peinado
 */
public class NotifyingScrollView extends ScrollView {
    // Edge-effects don't mix well with the translucent action bar in Android
    // 2.X
    private boolean mDisableEdgeEffects = true;

    /**
     * @author Cyril Mottier
     */
    public interface OnScrollChangedListener {
        void onScrollChanged(ScrollView who, int l, int t, int oldl, int oldt);
    }

    private OnScrollChangedListener mOnScrollChangedListener;

    public NotifyingScrollView(Context context) {
        super(context);
    }

    public NotifyingScrollView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public NotifyingScrollView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);
        if (mOnScrollChangedListener != null) {
            mOnScrollChangedListener.onScrollChanged(this, l, t, oldl, oldt);
        }
    }

    public void setOnScrollChangedListener(OnScrollChangedListener listener) {
        mOnScrollChangedListener = listener;
    }

    @Override
    protected float getTopFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getTopFadingEdgeStrength();
    }

    @Override
    protected float getBottomFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getBottomFadingEdgeStrength();
    }
}","package com.cyrilmottier.android.translucentactionbar;

import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.widget.ScrollView;

/**
 * @author Cyril Mottier with modifications from Manuel Peinado
 */
public class NotifyingScrollView extends ScrollView {
    // Edge-effects don't mix well with the translucent action bar in Android
    // 2.X
    private boolean mDisableEdgeEffects = true;

    /**
     * @author Cyril Mottier
     */
    public interface OnScrollChangedListener {
        void onScrollChanged(ScrollView who, int l, int t, int oldl, int oldt);
    }

    private OnScrollChangedListener mOnScrollChangedListener;

    public NotifyingScrollView(Context context) {
        super(context);
    }

    public NotifyingScrollView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public NotifyingScrollView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);
        if (mOnScrollChangedListener != null) {
            mOnScrollChangedListener.onScrollChanged(this, l, t, oldl, oldt);
        }
    }

    public void setOnScrollChangedListener(OnScrollChangedListener listener) {
        mOnScrollChangedListener = listener;
    }

    @Override
    protected float getTopFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getTopFadingEdgeStrength();
    }

    @Override
    protected float getBottomFadingEdgeStrength() {
        // http://stackoverflow.com/a/6894270/244576
        if (mDisableEdgeEffects && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            return 0.0f;
        }
        return super.getBottomFadingEdgeStrength();
    }
}",TRUE,,3959
3939,InitialSO.csv3939.txt,InitialGit.csv3939.txt,4,"var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ","var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ",TRUE,"exports.strip = function strip(artifact) {
  artifact = artifact.toString()
  var startRegex = /^-----BEGIN (.*)-----\n/;
  var match = startRegex.exec(artifact);
  var tag = match[1];
  var endRegex = new RegExp(""\n-----END "" + tag + ""-----(\n*)$"");
  var base64 = artifact.slice(match[0].length).replace(endRegex, """").replace(/\n/g, """");
  return {tag: tag, base64: base64};
};

// http://stackoverflow.com/a/7033705
var wrap = function wrap(str, l) {
  var chunks = [];
  while (str) {
    if (str.length < l) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.substr(0, l));
      str = str.substr(l);
    }
  }
  return chunks.join(""\n"");
}

exports.assemble = function assemble(info) {
  var tag = info.tag;
  var base64 = info.base64;
  var startLine = ""-----BEGIN "" + tag + ""-----"";
  var endLine = ""-----END "" + tag + ""-----"";
  return startLine + ""\n"" + wrap(base64, 64) + ""\n"" + endLine + ""\n"";
}","exports.strip = function strip(artifact) {
  artifact = artifact.toString()
  var startRegex = /^-----BEGIN (.*)-----\n/;
  var match = startRegex.exec(artifact);
  var tag = match[1];
  var endRegex = new RegExp(""\n-----END "" + tag + ""-----(\n*)$"");
  var base64 = artifact.slice(match[0].length).replace(endRegex, """").replace(/\n/g, """");
  return {tag: tag, base64: base64};
};

// http://stackoverflow.com/a/7033705
var wrap = function wrap(str, l) {
  var chunks = [];
  while (str) {
    if (str.length < l) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.substr(0, l));
      str = str.substr(l);
    }
  }
  return chunks.join(""\n"");
}

exports.assemble = function assemble(info) {
  var tag = info.tag;
  var base64 = info.base64;
  var startLine = ""-----BEGIN "" + tag + ""-----"";
  var endLine = ""-----END "" + tag + ""-----"";
  return startLine + ""\n"" + wrap(base64, 64) + ""\n"" + endLine + ""\n"";
}",TRUE,,3962
3943,InitialSO.csv3943.txt,InitialGit.csv3943.txt,4,"var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ","var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ",TRUE,"var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex = /^-----BEGIN (.*)-----\n/;
var evp = require('./EVP_BytesToKey');
module.exports = function (okey, password, crypto) {
  var key = okey.toString();
  var match = key.match(findProc);
  if (!match) {
    return okey;
  }
  var suite = 'aes' + match[1];
  var iv = new Buffer(match[2], 'hex');
  var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
  var cipherKey = evp(crypto, password, iv.slice(0,8), parseInt(match[1]));
  var out = [];
  var cipher = crypto.createDecipheriv(suite, cipherKey, iv);
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  var decrypted = Buffer.concat(out).toString('base64');
  var tag = key.match(startRegex)[1];
  return '-----BEGIN ' + tag + ""-----\n"" + wrap(decrypted) + ""\n"" + '-----END ' + tag + ""-----\n"";
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join(""\n"");
}","var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex = /^-----BEGIN (.*)-----\n/;
var evp = require('./EVP_BytesToKey');
module.exports = function (okey, password, crypto) {
  var key = okey.toString();
  var match = key.match(findProc);
  if (!match) {
    return okey;
  }
  var suite = 'aes' + match[1];
  var iv = new Buffer(match[2], 'hex');
  var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
  var cipherKey = evp(crypto, password, iv.slice(0,8), parseInt(match[1]));
  var out = [];
  var cipher = crypto.createDecipheriv(suite, cipherKey, iv);
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  var decrypted = Buffer.concat(out).toString('base64');
  var tag = key.match(startRegex)[1];
  return '-----BEGIN ' + tag + ""-----\n"" + wrap(decrypted) + ""\n"" + '-----END ' + tag + ""-----\n"";
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join(""\n"");
}",TRUE,,3963
3944,InitialSO.csv3944.txt,InitialGit.csv3944.txt,4,"var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ","var str = ""123456789"";
var chunks = [];
var chunkSize = 2;

while (str) {
    if (str.length < chunkSize) {
        chunks.push(str);
        break;
    }
    else {
        chunks.push(str.substr(0, chunkSize));
        str = str.substr(chunkSize);
    }
}

alert(chunks); // chunks == 12,34,56,78,9
 ",TRUE,"// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex =/^-----BEGIN (.*) KEY-----\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\n\r?/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join(""\n"");
}","// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex =/^-----BEGIN (.*) KEY-----\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\n\r?/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\n\r?/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};
// http://stackoverflow.com/a/7033705
function wrap(str) {
  var chunks = [];
  while (str) {
    if (str.length < 64) {
      chunks.push(str);
      break;
    }
    else {
      chunks.push(str.slice(0, 64));
      str = str.slice(64);
    }
  }
  return chunks.join(""\n"");
}",TRUE,,3966
3945,InitialSO.csv3945.txt,InitialGit.csv3945.txt,7,"__version__ pkg_resources myniftyapp/_version.py __version__ = ""3.6.5""
 import re
VERSIONFILE=""myniftyapp/_version.py""
verstrline = open(VERSIONFILE, ""rt"").read()
VSRE = r""^__version__ = ['\""]([^'\""]*)['\""]""
mo = re.search(VSRE, verstrline, re.M)
if mo:
    verstr = mo.group(1)
else:
    raise RuntimeError(""Unable to find version string in %s."" % (VERSIONFILE,))
 setup() myniftyapp/__init__.py from _version import __version__
 ","_version.py __version__ pkg_resources myniftyapp/_version.py __version__ = ""3.6.5""
 import re
VERSIONFILE=""myniftyapp/_version.py""
verstrline = open(VERSIONFILE, ""rt"").read()
VSRE = r""^__version__ = ['\""]([^'\""]*)['\""]""
mo = re.search(VSRE, verstrline, re.M)
if mo:
    verstr = mo.group(1)
else:
    raise RuntimeError(""Unable to find version string in %s."" % (VERSIONFILE,))
 setup() myniftyapp/__init__.py from _version import __version__
 ",FALSE,"###############################################################################
##
##  Copyright 2011-2013 Tavendo GmbH
##
##  Licensed under the Apache License, Version 2.0 (the ""License"");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an ""AS IS"" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
###############################################################################

from setuptools import setup

LONGSDESC = """"""
Twisted-based WebSocket/WAMP client and server framework.

AutobahnPython provides a WebSocket (RFC6455, Hybi-10 to -17, Hixie-76)
framework for creating WebSocket-based clients and servers.

AutobahnPython also includes an implementation of WAMP
(The WebSockets Application Messaging Protocol), a light-weight,
asynchronous RPC/PubSub over JSON/WebSocket protocol.

More information:

   * http://autobahn.ws/python
   * http://wamp.ws

Source Code:

   * https://github.com/tavendo/AutobahnPython
""""""

## get version string from ""autobahn/_version.py""
## See: http://stackoverflow.com/a/7071358/884770
##
import re
VERSIONFILE=""autobahn/_version.py""
verstrline = open(VERSIONFILE, ""rt"").read()
VSRE = r""^__version__ = ['\""]([^'\""]*)['\""]""
mo = re.search(VSRE, verstrline, re.M)
if mo:
   verstr = mo.group(1)
else:
   raise RuntimeError(""Unable to find version string in %s."" % (VERSIONFILE,))


setup (
   name = 'autobahn',
   version = verstr,
   description = 'AutobahnPython - WebSocket/WAMP implementation for Python/Twisted.',
   long_description = LONGSDESC,
   license = 'Apache License 2.0',
   author = 'Tavendo GmbH',
   author_email = 'autobahnws@googlegroups.com',
   url = 'http://autobahn.ws/python',
   platforms = ('Any'),
   install_requires = ['setuptools', 'Twisted>=11.1'],
   packages = ['autobahn'],
   zip_safe = False,
   ## http://pypi.python.org/pypi?%3Aaction=list_classifiers
   ##
   classifiers = [""License :: OSI Approved :: Apache Software License"",
                  ""Development Status :: 5 - Production/Stable"",
                  ""Environment :: Console"",
                  ""Framework :: Twisted"",
                  ""Intended Audience :: Developers"",
                  ""Operating System :: OS Independent"",
                  ""Programming Language :: Python"",
                  ""Topic :: Internet"",
                  ""Topic :: Software Development :: Libraries""],
   keywords = 'autobahn autobahn.ws websocket realtime rfc6455 wamp rpc pubsub'
)
","###############################################################################
##
##  Copyright (C) 2011-2014 Tavendo GmbH
##
##  Licensed under the Apache License, Version 2.0 (the ""License"");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an ""AS IS"" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.
##
###############################################################################

from __future__ import absolute_import

from distutils import log

try:
   from ez_setup import use_setuptools
   use_setuptools()
except Exception as e:
   log.warn(""ez_setup failed: {0}"".format(e))
finally:
   from setuptools import setup

import platform
CPY = platform.python_implementation() == 'CPython'

import sys
PY3 = sys.version_info >= (3,)
PY33 = sys.version_info >= (3,3) and sys.version_info < (3,4)


LONGSDESC = """"""
Autobahn|Python is a network library implementing

 * The WebSocket Protocol
 * The Web Application Messaging Protocol (WAMP)

for Twisted and Asyncio on Python 2 and 3.

Autobahn|Python is part of the Autobahn project:

The Autobahn project provides open-source implementations of the
WebSocket and WAMP protocols. WebSocket allows bidirectional real-time
messaging on the Web and WAMP adds asynchronous Remote Procedure Calls
and Publish & Subscribe on top of WebSocket.

More information:

 * https://github.com/tavendo/AutobahnPython/blob/master/README.md
 * http://autobahn.ws/python
 * http://wamp.ws

Source code:

 * https://github.com/tavendo/AutobahnPython
""""""

## get version string from ""autobahn/__init__.py""
## See: http://stackoverflow.com/a/7071358/884770
##
import re
VERSIONFILE=""autobahn/__init__.py""
verstrline = open(VERSIONFILE, ""rt"").read()
VSRE = r""^__version__ = ['\""]([^'\""]*)['\""]""
mo = re.search(VSRE, verstrline, re.M)
if mo:
   verstr = mo.group(1)
else:
   raise RuntimeError(""Unable to find version string in %s."" % (VERSIONFILE,))


## Autobahn core packages
##
packages = ['autobahn',
            'autobahn.wamp',
            'autobahn.websocket',
            'autobahn.asyncio',
            'autobahn.twisted',
            'twisted.plugins',
            'autobahn.wamp1', # WAMPv1 - remove this later
            ]

if PY3:
   if PY33:
      ## ""Tulip""
      asyncio_packages = [""asyncio>=0.2.1""]
   else:
      ## Python 3.4+ has asyncio builtin
      asyncio_packages = []
else:
   ## backport of asyncio
   asyncio_packages = [""trollius>=0.1.2"", ""futures>=2.1.5""]


## Now install Autobahn ..
##
setup(
   name = 'autobahn',
   version = verstr,
   description = 'Autobahn|Python provides WebSocket and WAMP for Twisted and Asyncio',
   long_description = LONGSDESC,
   license = 'Apache License 2.0',
   author = 'Tavendo GmbH',
   author_email = 'autobahnws@googlegroups.com',
   url = 'http://autobahn.ws/python',
   platforms = ('Any'),
   install_requires = ['zope.interface>=4.0.2'],
   extras_require = {
      ## asyncio is needed for Autobahn/asyncio
      'asyncio': asyncio_packages,

      ## you need Twisted for Autobahn/Twisted - obviously
      'twisted': [""Twisted>=11.1""],

      ## native WebSocket and JSON acceleration: this should ONLY be used on CPython
      'accelerate': [""wsaccel>=0.6.2"", ""ujson>=1.33""] if CPY else [],

      ## for (non-standard) WebSocket compression methods - not needed if you
      ## only want standard WebSocket compression (""permessage-deflate"")
      'compress': [""python-snappy>=0.5"", ""lz4>=0.2.1""],

      ## needed if you want WAMPv2 binary serialization support
      'serialization': [""msgpack-python>=0.4.0""]
   },
   packages = packages,
   zip_safe = False,
   ## http://pypi.python.org/pypi?%3Aaction=list_classifiers
   ##
   classifiers = [""License :: OSI Approved :: Apache Software License"",
                  ""Development Status :: 5 - Production/Stable"",
                  ""Environment :: No Input/Output (Daemon)"",
                  ""Framework :: Twisted"",
                  ""Intended Audience :: Developers"",
                  ""Operating System :: OS Independent"",
                  ""Programming Language :: Python"",
                  ""Programming Language :: Python :: 2"",
                  ""Programming Language :: Python :: 2.6"",
                  ""Programming Language :: Python :: 2.7"",
                  ""Programming Language :: Python :: 3"",
                  ""Programming Language :: Python :: 3.3"",
                  ""Programming Language :: Python :: 3.4"",
                  ""Programming Language :: Python :: Implementation :: CPython"",
                  ""Programming Language :: Python :: Implementation :: PyPy"",
                  ""Programming Language :: Python :: Implementation :: Jython"",
                  ""Topic :: Internet"",
                  ""Topic :: Internet :: WWW/HTTP"",
                  ""Topic :: Communications"",
                  ""Topic :: System :: Distributed Computing"",
                  ""Topic :: Software Development :: Libraries"",
                  ""Topic :: Software Development :: Libraries :: Python Modules"",
                  ""Topic :: Software Development :: Object Brokering""],
   keywords = 'autobahn autobahn.ws websocket realtime rfc6455 wamp rpc pubsub twisted asyncio'
)



try:
   from twisted.internet import reactor
except:
   HAS_TWISTED = False
else:
   HAS_TWISTED = True


if HAS_TWISTED:
   # Make Twisted regenerate the dropin.cache, if possible. This is necessary
   # because in a site-wide install, dropin.cache cannot be rewritten by
   # normal users.
   try:
      from twisted.plugin import IPlugin, getPlugins
      list(getPlugins(IPlugin))
   except Exception as e:
      log.warn(""Failed to update Twisted plugin cache: {}"".format(e))
   else:
      log.info(""Twisted dropin.cache regenerated."")

   ## verify that Autobahn Twisted endpoints have been installed
   try:
      from twisted.internet.interfaces import IStreamServerEndpointStringParser
      from twisted.internet.interfaces import IStreamClientEndpointStringParser

      has_server_endpoint = False
      for plugin in getPlugins(IStreamServerEndpointStringParser):
         if plugin.prefix == ""autobahn"":
            has_server_endpoint = True
            break

      if has_server_endpoint:
         log.info(""Autobahn Twisted stream server endpoint successfully installed"")
      else:
         log.warn(""Autobahn Twisted stream server endpoint installation seems to have failed"")

      has_client_endpoint = False
      for plugin in getPlugins(IStreamClientEndpointStringParser):
         if plugin.prefix == ""autobahn"":
            has_client_endpoint = True
            break

      if has_client_endpoint:
         log.info(""Autobahn Twisted stream client endpoint successfully installed"")
      else:
         log.warn(""Autobahn Twisted stream client endpoint installation seems to have failed"")

   except:
      log.warn(""Autobahn Twisted endpoint installation could not be verified"")
",FALSE,,3968
3947,InitialSO.csv3947.txt,InitialGit.csv3947.txt,10,"protected static void setEnv(Map<String, String> newenv)
{
  try
    {
        Class<?> processEnvironmentClass = Class.forName(""java.lang.ProcessEnvironment"");
        Field theEnvironmentField = processEnvironmentClass.getDeclaredField(""theEnvironment"");
        theEnvironmentField.setAccessible(true);
        Map<String, String> env = (Map<String, String>) theEnvironmentField.get(null);
        env.putAll(newenv);
        Field theCaseInsensitiveEnvironmentField = processEnvironmentClass.getDeclaredField(""theCaseInsensitiveEnvironment"");
        theCaseInsensitiveEnvironmentField.setAccessible(true);
        Map<String, String> cienv = (Map<String, String>)     theCaseInsensitiveEnvironmentField.get(null);
        cienv.putAll(newenv);
    }
    catch (NoSuchFieldException e)
    {
      try {
        Class[] classes = Collections.class.getDeclaredClasses();
        Map<String, String> env = System.getenv();
        for(Class cl : classes) {
            if(""java.util.Collections$UnmodifiableMap"".equals(cl.getName())) {
                Field field = cl.getDeclaredField(""m"");
                field.setAccessible(true);
                Object obj = field.get(env);
                Map<String, String> map = (Map<String, String>) obj;
                map.clear();
                map.putAll(newenv);
            }
        }
      } catch (Exception e2) {
        e2.printStackTrace();
      }
    } catch (Exception e1) {
        e1.printStackTrace();
    } 
}
 ","protected static void setEnv(Map<String, String> newenv) throws Exception {
  try {
    Class<?> processEnvironmentClass = Class.forName(""java.lang.ProcessEnvironment"");
    Field theEnvironmentField = processEnvironmentClass.getDeclaredField(""theEnvironment"");
    theEnvironmentField.setAccessible(true);
    Map<String, String> env = (Map<String, String>) theEnvironmentField.get(null);
    env.putAll(newenv);
    Field theCaseInsensitiveEnvironmentField = processEnvironmentClass.getDeclaredField(""theCaseInsensitiveEnvironment"");
    theCaseInsensitiveEnvironmentField.setAccessible(true);
    Map<String, String> cienv = (Map<String, String>)     theCaseInsensitiveEnvironmentField.get(null);
    cienv.putAll(newenv);
  } catch (NoSuchFieldException e) {
    Class[] classes = Collections.class.getDeclaredClasses();
    Map<String, String> env = System.getenv();
    for(Class cl : classes) {
      if(""java.util.Collections$UnmodifiableMap"".equals(cl.getName())) {
        Field field = cl.getDeclaredField(""m"");
        field.setAccessible(true);
        Object obj = field.get(env);
        Map<String, String> map = (Map<String, String>) obj;
        map.clear();
        map.putAll(newenv);
      }
    }
  }
}
 ",FALSE,"/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.core.testutils;

import org.junit.Assume;
import org.junit.internal.AssumptionViolatedException;

import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.Collections;
import java.util.Map;

import static org.junit.Assert.fail;

/**
 * This class contains reusable utility methods for unit tests.
 */
public class CommonTestUtils {

	/**
	 * Reads the path to the directory for temporary files from the configuration and returns it.
	 * 
	 * @return the path to the directory for temporary files
	 */
	public static String getTempDir() {
		return System.getProperty(""java.io.tmpdir"");
	}

	/**
	 * Creates a copy of an object via Java Serialization.
	 *
	 * @param original The original object.
	 * @return The copied object.
	 */
	public static <T extends java.io.Serializable> T createCopySerializable(T original) throws IOException {
		if (original == null) {
			throw new IllegalArgumentException();
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos = new ObjectOutputStream(baos);
		oos.writeObject(original);
		oos.close();
		baos.close();

		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

		try (ObjectInputStream ois = new ObjectInputStream(bais)) {
			@SuppressWarnings(""unchecked"")
			T copy = (T) ois.readObject();
			return copy;
		}
		catch (ClassNotFoundException e) {
			throw new IOException(e);
		}
	}

	/**
	 * Creates a temporary file that contains the given string.
	 * The file is written with the platform's default encoding.
	 * 
	 * <p>The temp file is automatically deleted on JVM exit.
	 * 
	 * @param contents The contents to be written to the file.
	 * @return The temp file URI.
	 */
	public static String createTempFile(String contents) throws IOException {
		File f = File.createTempFile(""flink_test_"", "".tmp"");
		f.deleteOnExit();

		try (BufferedWriter out = new BufferedWriter(new FileWriter(f))) {
			out.write(contents);
		}
		return f.toURI().toString();
	}

	/**
	 * Checks whether this code runs in a Java 8 (Java 1.8) JVM. If not, this throws a
	 * {@link AssumptionViolatedException}, which causes JUnit to skip the test that
	 * called this method.
	 */
	public static void assumeJava8() {
		try {
			String javaVersionString = System.getProperty(""java.runtime.version"").substring(0, 3);
			float javaVersion = Float.parseFloat(javaVersionString);
			Assume.assumeTrue(javaVersion >= 1.8f);
		}
		catch (AssumptionViolatedException e) {
			System.out.println(""Skipping CassandraConnectorITCase, because the JDK is < Java 8+"");
			throw e;
		}
		catch (Exception e) {
			e.printStackTrace();
			fail(""Cannot determine Java version: "" + e.getMessage());
		}
	}

	// This code is taken from: http://stackoverflow.com/a/7201825/568695
	// it changes the environment variables of this JVM. Use only for testing purposes!
	@SuppressWarnings(""unchecked"")
	public static void setEnv(Map<String, String> newenv) {
		try {
			Class<?> processEnvironmentClass = Class.forName(""java.lang.ProcessEnvironment"");
			Field theEnvironmentField = processEnvironmentClass.getDeclaredField(""theEnvironment"");
			theEnvironmentField.setAccessible(true);
			Map<String, String> env = (Map<String, String>) theEnvironmentField.get(null);
			env.putAll(newenv);
			Field theCaseInsensitiveEnvironmentField = processEnvironmentClass.getDeclaredField(""theCaseInsensitiveEnvironment"");
			theCaseInsensitiveEnvironmentField.setAccessible(true);
			Map<String, String> cienv = (Map<String, String>) theCaseInsensitiveEnvironmentField.get(null);
			cienv.putAll(newenv);
		} catch (NoSuchFieldException e) {
			try {
				Class<?>[] classes = Collections.class.getDeclaredClasses();
				Map<String, String> env = System.getenv();
				for (Class<?> cl : classes) {
					if (""java.util.Collections$UnmodifiableMap"".equals(cl.getName())) {
						Field field = cl.getDeclaredField(""m"");
						field.setAccessible(true);
						Object obj = field.get(env);
						Map<String, String> map = (Map<String, String>) obj;
						map.clear();
						map.putAll(newenv);
					}
				}
			} catch (Exception e2) {
				throw new RuntimeException(e2);
			}
		} catch (Exception e1) {
			throw new RuntimeException(e1);
		}
	}
}
","/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.core.testutils;

import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.security.CodeSource;
import java.security.Permissions;
import java.security.ProtectionDomain;
import java.security.cert.Certificate;
import java.util.Map;

/**
 * This class contains reusable utility methods for unit tests.
 */
public class CommonTestUtils {

	/**
	 * Reads the path to the directory for temporary files from the configuration and returns it.
	 *
	 * @return the path to the directory for temporary files
	 */
	public static String getTempDir() {
		return System.getProperty(""java.io.tmpdir"");
	}

	/**
	 * Creates a copy of an object via Java Serialization.
	 *
	 * @param original The original object.
	 * @return The copied object.
	 */
	public static <T extends java.io.Serializable> T createCopySerializable(T original) throws IOException {
		if (original == null) {
			throw new IllegalArgumentException();
		}

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		ObjectOutputStream oos = new ObjectOutputStream(baos);
		oos.writeObject(original);
		oos.close();
		baos.close();

		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

		try (ObjectInputStream ois = new ObjectInputStream(bais)) {
			@SuppressWarnings(""unchecked"")
			T copy = (T) ois.readObject();
			return copy;
		}
		catch (ClassNotFoundException e) {
			throw new IOException(e);
		}
	}

	/**
	 * Creates a temporary file that contains the given string.
	 * The file is written with the platform's default encoding.
	 *
	 * <p>The temp file is automatically deleted on JVM exit.
	 *
	 * @param contents The contents to be written to the file.
	 * @return The temp file URI.
	 */
	public static String createTempFile(String contents) throws IOException {
		File f = File.createTempFile(""flink_test_"", "".tmp"");
		f.deleteOnExit();

		try (BufferedWriter out = new BufferedWriter(new FileWriter(f))) {
			out.write(contents);
		}
		return f.toURI().toString();
	}

	/**
	 * Permanently blocks the current thread. The thread cannot be woken
	 * up via {@link Thread#interrupt()}.
	 */
	public static void blockForeverNonInterruptibly() {
		final Object lock = new Object();
		//noinspection InfiniteLoopStatement
		while (true) {
			try {
				//noinspection SynchronizationOnLocalVariableOrMethodParameter
				synchronized (lock) {
					lock.wait();
				}
			} catch (InterruptedException ignored) {}
		}
	}

	// ------------------------------------------------------------------------
	//  Manipulation of environment
	// ------------------------------------------------------------------------

	public static void setEnv(Map<String, String> newenv) {
		setEnv(newenv, true);
	}

	// This code is taken slightly modified from: http://stackoverflow.com/a/7201825/568695
	// it changes the environment variables of this JVM. Use only for testing purposes!
	@SuppressWarnings(""unchecked"")
	public static void setEnv(Map<String, String> newenv, boolean clearExisting) {
		try {
			Map<String, String> env = System.getenv();
			Class<?> clazz = env.getClass();
			Field field = clazz.getDeclaredField(""m"");
			field.setAccessible(true);
			Map<String, String> map = (Map<String, String>) field.get(env);
			if (clearExisting) {
				map.clear();
			}
			map.putAll(newenv);

			// only for Windows
			Class<?> processEnvironmentClass = Class.forName(""java.lang.ProcessEnvironment"");
			try {
				Field theCaseInsensitiveEnvironmentField =
					processEnvironmentClass.getDeclaredField(""theCaseInsensitiveEnvironment"");
				theCaseInsensitiveEnvironmentField.setAccessible(true);
				Map<String, String> cienv = (Map<String, String>) theCaseInsensitiveEnvironmentField.get(null);
				if (clearExisting) {
					cienv.clear();
				}
				cienv.putAll(newenv);
			} catch (NoSuchFieldException ignored) {}

		} catch (Exception e1) {
			throw new RuntimeException(e1);
		}
	}

	// ------------------------------------------------------------------------
	//  Testing of objects not in the application class loader
	// ------------------------------------------------------------------------

	/**
	 * Creates a new class that is not part of the classpath that the current JVM uses, and
	 * instantiates it.
	 *
	 * <p>This method uses {@link #createClassNotInClassPath(ClassLoader)} to define the new class.
	 *
	 * @param targetClassLoader The class loader to attach the class to
	 * @return The object instantiated from the newly defined class.
	 */
	public static Serializable createObjectForClassNotInClassPath(ClassLoader targetClassLoader) {
		try {
			Class<? extends Serializable> clazz = createClassNotInClassPath(targetClassLoader);
			return clazz.newInstance();
		}
		catch (Exception e) {
			throw new AssertionError(""test setup broken"", e);
		}
	}

	/**
	 * Creates a new class that is not part of the classpath that the current JVM uses.
	 * The class is ad-hoc defined and attached to the given ClassLoader.
	 *
	 * @param targetClassLoader The class loader to attach the class to
	 * @return The newly defined class
	 */
	public static Class<? extends Serializable> createClassNotInClassPath(ClassLoader targetClassLoader) {
		final byte[] classData = {-54, -2, -70, -66, 0, 0, 0, 51, 0, 65, 10, 0, 15, 0, 43, 7, 0, 44,
				10, 0, 2, 0, 43, 10, 0, 2, 0, 45, 9, 0, 7, 0, 46, 10, 0, 15, 0, 47, 7, 0, 48, 7, 0,
				49, 10, 0, 8, 0, 43, 8, 0, 50, 10, 0, 8, 0, 51, 10, 0, 8, 0, 52, 10, 0, 8, 0, 53, 10,
				0, 8, 0, 54, 7, 0, 55, 7, 0, 56, 1, 0, 16, 115, 101, 114, 105, 97, 108, 86, 101, 114,
				115, 105, 111, 110, 85, 73, 68, 1, 0, 1, 74, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110,
				116, 86, 97, 108, 117, 101, 5, -1, -1, -1, -1, -1, -1, -1, -3, 1, 0, 6, 114, 97, 110,
				100, 111, 109, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67,
				111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108,
				101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98,
				108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 35, 76, 111, 114, 103, 47, 97, 112, 97, 99,
				104, 101, 47, 102, 108, 105, 110, 107, 47, 84, 101, 115, 116, 83, 101, 114, 105, 97, 108,
				105, 122, 97, 98, 108, 101, 59, 1, 0, 6, 101, 113, 117, 97, 108, 115, 1, 0, 21, 40, 76,
				106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 1, 0,
				1, 111, 1, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99,
				116, 59, 1, 0, 4, 116, 104, 97, 116, 1, 0, 13, 83, 116, 97, 99, 107, 77, 97, 112, 84, 97,
				98, 108, 101, 7, 0, 48, 1, 0, 8, 104, 97, 115, 104, 67, 111, 100, 101, 1, 0, 3, 40, 41,
				73, 1, 0, 8, 116, 111, 83, 116, 114, 105, 110, 103, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97,
				47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 10, 83, 111, 117, 114,
				99, 101, 70, 105, 108, 101, 1, 0, 21, 84, 101, 115, 116, 83, 101, 114, 105, 97, 108, 105,
				122, 97, 98, 108, 101, 46, 106, 97, 118, 97, 12, 0, 23, 0, 24, 1, 0, 16, 106, 97, 118, 97,
				47, 117, 116, 105, 108, 47, 82, 97, 110, 100, 111, 109, 12, 0, 57, 0, 58, 12, 0, 22, 0, 18,
				12, 0, 59, 0, 60, 1, 0, 33, 111, 114, 103, 47, 97, 112, 97, 99, 104, 101, 47, 102, 108, 105,
				110, 107, 47, 84, 101, 115, 116, 83, 101, 114, 105, 97, 108, 105, 122, 97, 98, 108, 101, 1,
				0, 23, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 66, 117,
				105, 108, 100, 101, 114, 1, 0, 24, 84, 101, 115, 116, 83, 101, 114, 105, 97, 108, 105, 122,
				97, 98, 108, 101, 123, 114, 97, 110, 100, 111, 109, 61, 12, 0, 61, 0, 62, 12, 0, 61, 0, 63,
				12, 0, 61, 0, 64, 12, 0, 39, 0, 40, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47,
				79, 98, 106, 101, 99, 116, 1, 0, 20, 106, 97, 118, 97, 47, 105, 111, 47, 83, 101, 114, 105,
				97, 108, 105, 122, 97, 98, 108, 101, 1, 0, 8, 110, 101, 120, 116, 76, 111, 110, 103, 1, 0,
				3, 40, 41, 74, 1, 0, 8, 103, 101, 116, 67, 108, 97, 115, 115, 1, 0, 19, 40, 41, 76, 106, 97,
				118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 1, 0, 6, 97, 112, 112, 101,
				110, 100, 1, 0, 45, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105,
				110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110,
				103, 66, 117, 105, 108, 100, 101, 114, 59, 1, 0, 28, 40, 74, 41, 76, 106, 97, 118, 97, 47,
				108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 66, 117, 105, 108, 100, 101, 114, 59, 1,
				0, 28, 40, 67, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110,
				103, 66, 117, 105, 108, 100, 101, 114, 59, 0, 33, 0, 7, 0, 15, 0, 1, 0, 16, 0, 2, 0, 26, 0,
				17, 0, 18, 0, 1, 0, 19, 0, 0, 0, 2, 0, 20, 0, 18, 0, 22, 0, 18, 0, 0, 0, 4, 0, 1, 0, 23, 0,
				24, 0, 1, 0, 25, 0, 0, 0, 69, 0, 3, 0, 1, 0, 0, 0, 19, 42, -73, 0, 1, 42, -69, 0, 2, 89, -73,
				0, 3, -74, 0, 4, -75, 0, 5, -79, 0, 0, 0, 2, 0, 26, 0, 0, 0, 14, 0, 3, 0, 0, 0, 30, 0, 4, 0,
				31, 0, 18, 0, 32, 0, 27, 0, 0, 0, 12, 0, 1, 0, 0, 0, 19, 0, 28, 0, 29, 0, 0, 0, 1, 0, 30, 0,
				31, 0, 1, 0, 25, 0, 0, 0, -116, 0, 4, 0, 3, 0, 0, 0, 47, 42, 43, -90, 0, 5, 4, -84, 43, -58,
				0, 14, 42, -74, 0, 6, 43, -74, 0, 6, -91, 0, 5, 3, -84, 43, -64, 0, 7, 77, 42, -76, 0, 5, 44,
				-76, 0, 5, -108, -102, 0, 7, 4, -89, 0, 4, 3, -84, 0, 0, 0, 3, 0, 26, 0, 0, 0, 18, 0, 4, 0, 0,
				0, 36, 0, 7, 0, 37, 0, 24, 0, 39, 0, 29, 0, 40, 0, 27, 0, 0, 0, 32, 0, 3, 0, 0, 0, 47, 0, 28,
				0, 29, 0, 0, 0, 0, 0, 47, 0, 32, 0, 33, 0, 1, 0, 29, 0, 18, 0, 34, 0, 29, 0, 2, 0, 35, 0, 0,
				0, 13, 0, 5, 7, 14, 1, -4, 0, 20, 7, 0, 36, 64, 1, 0, 1, 0, 37, 0, 38, 0, 1, 0, 25, 0, 0, 0,
				56, 0, 5, 0, 1, 0, 0, 0, 14, 42, -76, 0, 5, 42, -76, 0, 5, 16, 32, 125, -125, -120, -84, 0, 0,
				0, 2, 0, 26, 0, 0, 0, 6, 0, 1, 0, 0, 0, 46, 0, 27, 0, 0, 0, 12, 0, 1, 0, 0, 0, 14, 0, 28, 0,
				29, 0, 0, 0, 1, 0, 39, 0, 40, 0, 1, 0, 25, 0, 0, 0, 70, 0, 3, 0, 1, 0, 0, 0, 28, -69, 0, 8,
				89, -73, 0, 9, 18, 10, -74, 0, 11, 42, -76, 0, 5, -74, 0, 12, 16, 125, -74, 0, 13, -74, 0, 14,
				-80, 0, 0, 0, 2, 0, 26, 0, 0, 0, 6, 0, 1, 0, 0, 0, 51, 0, 27, 0, 0, 0, 12, 0, 1, 0, 0, 0, 28,
				0, 28, 0, 29, 0, 0, 0, 1, 0, 41, 0, 0, 0, 2, 0, 42};

		try {
			// define a class into the classloader
			Class<?> clazz = getUnsafe().defineClass(
					""org.apache.flink.TestSerializable"",
					classData, 0, classData.length,
					targetClassLoader,
					new ProtectionDomain(new CodeSource(null, (Certificate[]) null), new Permissions()));

			return clazz.asSubclass(Serializable.class);
		}
		catch (Exception e) {
			throw new AssertionError(""test setup broken"", e);
		}
	}

	@SuppressWarnings(""restriction"")
	private static sun.misc.Unsafe getUnsafe() {
		try {
			Field unsafeField = sun.misc.Unsafe.class.getDeclaredField(""theUnsafe"");
			unsafeField.setAccessible(true);
			return (sun.misc.Unsafe) unsafeField.get(null);
		} catch (SecurityException e) {
			throw new RuntimeException(""Could not access the sun.misc.Unsafe handle, permission denied by security manager."", e);
		} catch (NoSuchFieldException e) {
			throw new RuntimeException(""The static handle field in sun.misc.Unsafe was not found."");
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(""Bug: Illegal argument reflection access for static field."", e);
		} catch (IllegalAccessException e) {
			throw new RuntimeException(""Access to sun.misc.Unsafe is forbidden by the runtime."", e);
		} catch (Throwable t) {
			throw new RuntimeException(""Unclassified error while trying to access the sun.misc.Unsafe handle."", t);
		}
	}

	/**
	 * Checks whether the given throwable contains the given cause as a cause. The cause is not checked
	 * on equality but on type equality.
	 *
	 * @param throwable Throwable to check for the cause
	 * @param cause Cause to look for
	 * @return True if the given Throwable contains the given cause (type equality); otherwise false
	 */
	public static boolean containsCause(Throwable throwable, Class<? extends Throwable> cause) {
		Throwable current = throwable;

		while (current != null) {
			if (cause.isAssignableFrom(current.getClass())) {
				return true;
			}

			current = current.getCause();
		}

		return false;
	}
}
",FALSE,,3970
3952,InitialSO.csv3952.txt,InitialGit.csv3952.txt,4,"__destruct() <?php

class ExceptionHandler
{
    private $rethrow;
    public function __construct()
    {
        set_exception_handler(array($this, 'handler'));
    }
    public function handler($exception)
    {
        echo  ""cleaning up.\n"";
        $this->rethrow = $exception;
    }
    public function __destruct()
    {
        if ($this->rethrow) throw $this->rethrow;
    }
}

$handler = new ExceptionHandler;

throw new Exception();
 [29-Oct-2011 xx:32:25] PHP Fatal error: Uncaught exception 'Exception' in /.../test-exception.php:23
Stack trace:
#0 {main}
thrown in /.../test-exception.php on line 23
 ","__destruct() <?php

class ExceptionHandler
{
    private $rethrow;
    public function __construct()
    {
        set_exception_handler(array($this, 'handler'));
    }
    public function handler($exception)
    {
        echo  ""cleaning up.\n"";
        $this->rethrow = $exception;
    }
    public function __destruct()
    {
        if ($this->rethrow) throw $this->rethrow;
    }
}

$handler = new ExceptionHandler;

throw new Exception();
 [29-Oct-2011 xx:32:25] PHP Fatal error: Uncaught exception 'Exception' in /.../test-exception.php:23
Stack trace:
#0 {main}
thrown in /.../test-exception.php on line 23
 ",TRUE,"<?php

/*
 * PHP Encryption Library
 * Copyright (c) 2014, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Web: https://defuse.ca/secure-php-encryption.htm
 * GitHub: https://github.com/defuse/php-encryption 
 *
 * WARNING: This encryption library is not a silver bullet. It only provides
 * symmetric encryption given a uniformly random key. This means you MUST NOT
 * use an ASCII string like a password as the key parameter, it MUST be
 * a uniformly random key generated by CreateNewRandomKey(). If you want to
 * encrypt something with a password, apply a password key derivation function
 * like PBKDF2 or scrypt with a random salt to generate a key.
 *
 * WARNING: Error handling is very important, especially for crypto code! 
 *
 * How to use this code:
 *
 *     Generating a Key
 *     ----------------
 *       try {
 *           $key = Crypto::CreateNewRandomKey();
 *           // WARNING: Do NOT encode $key with bin2hex() or base64_encode(),
 *           // they may leak the key to the attacker through side channels.
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely create a key');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely create a key');
 *       }
 *
 *     Encrypting a Message
 *     --------------------
 *       $message = ""ATTACK AT DAWN"";
 *       try {
 *           $ciphertext = Crypto::Encrypt($message, $key);
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely perform encryption');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely perform decryption');
 *       }
 *
 *     Decrypting a Message
 *     --------------------
 *       try {
 *           $decrypted = Crypto::Decrypt($ciphertext, $key);
 *       } catch (InvalidCiphertextException $ex) { // VERY IMPORTANT
 *           // Either:
 *           //   1. The ciphertext was modified by the attacker,
 *           //   2. The key is wrong, or
 *           //   3. $ciphertext is not a valid ciphertext or was corrupted.
 *           // Assume the worst.
 *           die('DANGER! DANGER! The ciphertext has been tampered with!');
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely perform encryption');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely perform decryption');
 *       }
 */

/* 
 * Raised by Decrypt() when one of the following conditions are met:
 *  - The key is wrong.
 *  - The ciphertext is invalid or not in the correct format.
 *  - The attacker modified the ciphertext.
 */
class InvalidCiphertextException extends Exception {}
/* If you see these, it means it is NOT SAFE to do encryption on your system. */
class CannotPerformOperationException extends Exception {}
class CryptoTestFailedException extends Exception {}

class Crypto
{
    // Ciphertext format: [____HMAC____][____IV____][____CIPHERTEXT____].

    /* Do not change these constants! */
    const CIPHER = MCRYPT_RIJNDAEL_128;
    const KEY_BYTE_SIZE = 16;
    const CIPHER_MODE = 'cbc';
    const HASH_FUNCTION = 'sha256';
    const MAC_BYTE_SIZE = 32;
    const ENCRYPTION_INFO = 'DefusePHP|KeyForEncryption';
    const AUTHENTICATION_INFO = 'DefusePHP|KeyForAuthentication';

    /*
     * Use this to generate a random encryption key.
     */
    public static function CreateNewRandomKey()
    {
        Crypto::RuntimeTest();
        return self::SecureRandom(self::KEY_BYTE_SIZE);
    }

    /*
     * Encrypts a message.
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     * You MUST catch exceptions thrown by this function. See docs above.
     */
    public static function Encrypt($plaintext, $key)
    {
        Crypto::RuntimeTest();

        if (self::our_strlen($key) !== self::KEY_BYTE_SIZE)
        {
            throw new CannotPerformOperationException(""Bad key."");
        }

        // Generate a sub-key for encryption.
        $keysize = self::KEY_BYTE_SIZE;
        $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

        // Generate a random initialization vector.
        self::EnsureFunctionExists(""mcrypt_get_iv_size"");
        $ivsize = mcrypt_get_iv_size(self::CIPHER, self::CIPHER_MODE);
        if ($ivsize === FALSE || $ivsize <= 0) {
            throw new CannotPerformOperationException();
        }
        $iv = self::SecureRandom($ivsize);

        $ciphertext = $iv . self::PlainEncrypt($plaintext, $ekey, $iv);

        // Generate a sub-key for authentication and apply the HMAC.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);
        $auth = hash_hmac(self::HASH_FUNCTION, $ciphertext, $akey, true);
        $ciphertext = $auth . $ciphertext;

        return $ciphertext;
    }

    /*
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     * $key is the key that the ciphertext was encrypted with.
     * You MUST catch exceptions thrown by this function. See docs above.
     */
    public static function Decrypt($ciphertext, $key)
    {
        Crypto::RuntimeTest();

        // Extract the HMAC from the front of the ciphertext.
        if (self::our_strlen($ciphertext) <= self::MAC_BYTE_SIZE) {
            throw new InvalidCiphertextException();
        }
        $hmac = self::our_substr($ciphertext, 0, self::MAC_BYTE_SIZE);
        if ($hmac === FALSE) {
            throw new CannotPerformOperationException();
        }
        $ciphertext = self::our_substr($ciphertext, self::MAC_BYTE_SIZE);
        if ($ciphertext === FALSE) {
            throw new CannotPerformOperationException();
        }

        // Regenerate the same authentication sub-key.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);

        if (self::VerifyHMAC($hmac, $ciphertext, $akey))
        {
            // Regenerate the same encryption sub-key.
            $keysize = self::KEY_BYTE_SIZE;
            $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

            // Extract the initialization vector from the ciphertext.
            self::EnsureFunctionExists(""mcrypt_get_iv_size"");
            $ivsize = mcrypt_get_iv_size(self::CIPHER, self::CIPHER_MODE);
            if ($ivsize === FALSE || $ivsize <= 0) {
                throw new CannotPerformOperationException();
            }
            if (self::our_strlen($ciphertext) <= $ivsize) {
                throw new InvalidCiphertextException();
            }
            $iv = self::our_substr($ciphertext, 0, $ivsize);
            if ($iv === FALSE) {
                throw new CannotPerformOperationException();
            }
            $ciphertext = self::our_substr($ciphertext, $ivsize);
            if ($ciphertext === FALSE) {
                throw new CannotPerformOperationException();
            }
            
            $plaintext = self::PlainDecrypt($ciphertext, $ekey, $iv);

            return $plaintext;
        }
        else
        {
            /*
             * We throw an exception instead of returning FALSE because we want
             * a script that doesn't handle this condition to CRASH, instead
             * of thinking the ciphertext decrypted to the value FALSE.
             */
             throw new InvalidCiphertextException();
        }
    }

    /*
     * Runs tests.
     * Raises CannotPerformOperationException or CryptoTestFailedException if
     * one of the tests fail. If any tests fails, your system is not capable of
     * performing encryption, so make sure you fail safe in that case.
     */
    public static function RuntimeTest()
    {
        // 0: Tests haven't been run yet.
        // 1: Tests have passed.
        // 2: Tests are running right now.
        // 3: Tests have failed.
        static $test_state = 0;

        if ($test_state === 1 || $test_state === 2) {
            return;
        }

        try {
            $test_state = 2;
            self::AESTestVector();
            self::HMACTestVector();
            self::HKDFTestVector();

            self::TestEncryptDecrypt();
            if (self::our_strlen(Crypto::CreateNewRandomKey()) != self::KEY_BYTE_SIZE) {
                throw new CryptoTestFailedException();
            }

            if (self::ENCRYPTION_INFO == self::AUTHENTICATION_INFO) {
                throw new CryptoTestFailedException();
            }
        } catch (CryptoTestFailedException $ex) {
            // Do this, otherwise it will stay in the ""tests are running"" state.
            $test_state = 3;
            throw $ex;
        }

        // Change this to '0' make the tests always re-run (for benchmarking).
        $test_state = 1;
    }

    /*
     * Never call this method directly!
     */
    private static function PlainEncrypt($plaintext, $key, $iv)
    {
        self::EnsureFunctionExists(""mcrypt_module_open"");
        $crypt = mcrypt_module_open(self::CIPHER, """", self::CIPHER_MODE, """");
        if ($crypt === FALSE) {
            throw new CannotPerformOperationException();
        }

        // Pad the plaintext to a multiple of the block size.
        self::EnsureFunctionExists(""mcrypt_enc_get_block_size"");
        $block = mcrypt_enc_get_block_size($crypt);
        $pad = $block - (self::our_strlen($plaintext) % $block);
        $plaintext .= str_repeat(chr($pad), $pad);

        self::EnsureFunctionExists(""mcrypt_generic_init"");
        $ret = mcrypt_generic_init($crypt, $key, $iv);
        if ($ret !== 0) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_generic"");
        $ciphertext = mcrypt_generic($crypt, $plaintext);
        self::EnsureFunctionExists(""mcrypt_generic_deinit"");
        $ret = mcrypt_generic_deinit($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_module_close"");
        $ret = mcrypt_module_close($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }

        return $ciphertext;
    }

    /*
     * Never call this method directly!
     */
    private static function PlainDecrypt($ciphertext, $key, $iv)
    {
        self::EnsureFunctionExists(""mcrypt_module_open"");
        $crypt = mcrypt_module_open(self::CIPHER, """", self::CIPHER_MODE, """");
        if ($crypt === FALSE) {
            throw new CannotPerformOperationException();
        }

        self::EnsureFunctionExists(""mcrypt_enc_get_block_size"");
        $block = mcrypt_enc_get_block_size($crypt);
        self::EnsureFunctionExists(""mcrypt_generic_init"");
        $ret = mcrypt_generic_init($crypt, $key, $iv);
        if ($ret !== 0) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mdecrypt_generic"");
        $plaintext = mdecrypt_generic($crypt, $ciphertext);
        self::EnsureFunctionExists(""mcrypt_generic_deinit"");
        $ret = mcrypt_generic_deinit($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_module_close"");
        $ret = mcrypt_module_close($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }

        // Remove the padding.
        $pad = ord($plaintext[self::our_strlen($plaintext) - 1]);
        if ($pad <= 0 || $pad > $block) {
            throw new CannotPerformOperationException();
        }
        $plaintext = self::our_substr($plaintext, 0, self::our_strlen($plaintext) - $pad);
        if ($plaintext === FALSE) {
            throw new CannotPerformOperationException();
        }

        return $plaintext;
    }

    /*
     * Returns a random binary string of length $octets bytes.
     */
    private static function SecureRandom($octets)
    {
        self::EnsureFunctionExists(""mcrypt_create_iv"");
        $random = mcrypt_create_iv($octets, MCRYPT_DEV_URANDOM);
        if ($random === FALSE) {
            throw new CannotPerformOperationException();
        } else {
            return $random;
        }
    }

    /*
     * Use HKDF to derive multiple keys from one.
     * http://tools.ietf.org/html/rfc5869
     */
    private static function HKDF($hash, $ikm, $length, $info = '', $salt = NULL)
    {
        // Find the correct digest length as quickly as we can.
        $digest_length = self::MAC_BYTE_SIZE;
        if ($hash != self::HASH_FUNCTION) {
            $digest_length = self::our_strlen(hash_hmac($hash, '', '', true));
        }

        // Sanity-check the desired output length.
        if (empty($length) || !is_int($length) ||
            $length < 0 || $length > 255 * $digest_length) {
            throw new CannotPerformOperationException();
        }

        // ""if [salt] not provided, is set to a string of HashLen zeroes.""
        if (is_null($salt)) {
            $salt = str_repeat(""\x00"", $digest_length);
        }

        // HKDF-Extract:
        // PRK = HMAC-Hash(salt, IKM)
        // The salt is the HMAC key.
        $prk = hash_hmac($hash, $ikm, $salt, true);

        // HKDF-Expand:

        // This check is useless, but it serves as a reminder to the spec.
        if (self::our_strlen($prk) < $digest_length) {
            throw new CannotPerformOperationException();
        }

        // T(0) = ''
        $t = '';
        $last_block = '';
        for ($block_index = 1; self::our_strlen($t) < $length; $block_index++) {
            // T(i) = HMAC-Hash(PRK, T(i-1) | info | 0x??)
            $last_block = hash_hmac(
                $hash,
                $last_block . $info . chr($block_index),
                $prk,
                true
            );
            // T = T(1) | T(2) | T(3) | ... | T(N)
            $t .= $last_block;
        }

        // ORM = first L octets of T
        $orm = self::our_substr($t, 0, $length);
        if ($orm === FALSE) {
            throw new CannotPerformOperationException();
        }
        return $orm;
    }

    private static function VerifyHMAC($correct_hmac, $message, $key)
    {
        $message_hmac = hash_hmac(self::HASH_FUNCTION, $message, $key, true);

        // We can't just compare the strings with '==', since it would make
        // timing attacks possible. We could use the XOR-OR constant-time
        // comparison algorithm, but I'm not sure if that's good enough way up
        // here in an interpreted language. So we use the method of HMACing the 
        // strings we want to compare with a random key, then comparing those.

        // NOTE: This leaks information when the strings are not the same
        // length, but they should always be the same length here. Enforce it:
        if (self::our_strlen($correct_hmac) !== self::our_strlen($message_hmac)) {
            throw new CannotPerformOperationException();
        }

        $blind = self::CreateNewRandomKey();
        $message_compare = hash_hmac(self::HASH_FUNCTION, $message_hmac, $blind);
        $correct_compare = hash_hmac(self::HASH_FUNCTION, $correct_hmac, $blind);
        return $correct_compare === $message_compare;
    }

    private static function TestEncryptDecrypt()
    {
        $key = Crypto::CreateNewRandomKey();
        $data = ""EnCrYpT EvErYThInG\x00\x00"";

        // Make sure encrypting then decrypting doesn't change the message.
        $ciphertext = Crypto::Encrypt($data, $key);
        try {
            $decrypted = Crypto::Decrypt($ciphertext, $key);
        } catch (InvalidCiphertextException $ex) {
            // It's important to catch this and change it into a 
            // CryptoTestFailedException, otherwise a test failure could trick
            // the user into thinking it's just an invalid ciphertext!
            throw new CryptoTestFailedException();
        }
        if($decrypted !== $data)
        {
            throw new CryptoTestFailedException();
        }

        // Modifying the ciphertext: Appending a string.
        try {
            Crypto::Decrypt($ciphertext . ""a"", $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Modifying the ciphertext: Changing an IV byte.
        try {
            $ciphertext[0] = chr((ord($ciphertext[0]) + 1) % 256);
            Crypto::Decrypt($ciphertext, $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Decrypting with the wrong key.
        $key = Crypto::CreateNewRandomKey();
        $data = ""abcdef"";
        $ciphertext = Crypto::Encrypt($data, $key);
        $wrong_key = Crypto::CreateNewRandomKey();
        try {
            Crypto::Decrypt($ciphertext, $wrong_key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Ciphertext too small (shorter than HMAC).
        $key = Crypto::CreateNewRandomKey();
        $ciphertext = str_repeat(""A"", self::MAC_BYTE_SIZE - 1);
        try {
            Crypto::Decrypt($ciphertext, $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }
    }

    private static function HKDFTestVector()
    {
        // HKDF test vectors from RFC 5869

        // Test Case 1
        $ikm = str_repeat(""\x0b"", 22);
        $salt = self::hexToBytes(""000102030405060708090a0b0c"");
        $info = self::hexToBytes(""f0f1f2f3f4f5f6f7f8f9"");
        $length = 42;
        $okm = self::hexToBytes(
            ""3cb25f25faacd57a90434f64d0362f2a"" .
            ""2d2d0a90cf1a5a4c5db02d56ecc4c5bf"" .
            ""34007208d5b887185865""
        );
        $computed_okm = self::HKDF(""sha256"", $ikm, $length, $info, $salt);
        if ($computed_okm !== $okm) {
            throw new CryptoTestFailedException();
        }

        // Test Case 7
        $ikm = str_repeat(""\x0c"", 22);
        $length = 42;
        $okm = self::hexToBytes(
            ""2c91117204d745f3500d636a62f64f0a"" .
            ""b3bae548aa53d423b0d1f27ebba6f5e5"" .
            ""673a081d70cce7acfc48""
        );
        $computed_okm = self::HKDF(""sha1"", $ikm, $length);
        if ($computed_okm !== $okm) {
            throw new CryptoTestFailedException();
        }

    }

    private static function HMACTestVector()
    {
        // HMAC test vector From RFC 4231 (Test Case 1)
        $key = str_repeat(""\x0b"", 20);
        $data = ""Hi There"";
        $correct = ""b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"";
        if (hash_hmac(self::HASH_FUNCTION, $data, $key) != $correct) {
            throw new CryptoTestFailedException();
        }
    }

    private static function AESTestVector()
    {
        // AES CBC mode test vector from NIST SP 800-38A
        $key = self::hexToBytes(""2b7e151628aed2a6abf7158809cf4f3c"");
        $iv = self::hexToBytes(""000102030405060708090a0b0c0d0e0f"");
        $plaintext = self::hexToBytes(
            ""6bc1bee22e409f96e93d7e117393172a"" . 
            ""ae2d8a571e03ac9c9eb76fac45af8e51"" .
            ""30c81c46a35ce411e5fbc1191a0a52ef"" .
            ""f69f2445df4f9b17ad2b417be66c3710""
        );
        $ciphertext = self::hexToBytes(
            ""7649abac8119b246cee98e9b12e9197d"" .
            ""5086cb9b507219ee95db113a917678b2"" .
            ""73bed6b8e3c1743b7116e69e22229516"" .
            ""3ff1caa1681fac09120eca307586e1a7"" .
            /* Block due to padding. Not from NIST test vector. 
                Padding Block: 10101010101010101010101010101010
                Ciphertext:    3ff1caa1681fac09120eca307586e1a7
                           (+) 2fe1dab1780fbc19021eda206596f1b7 
                           AES 8cb82807230e1321d3fae00d18cc2012
             
             */
            ""8cb82807230e1321d3fae00d18cc2012""
        );

        $computed_ciphertext = self::PlainEncrypt($plaintext, $key, $iv);
        if ($computed_ciphertext !== $ciphertext) {
            throw new CryptoTestFailedException();
        }

        $computed_plaintext = self::PlainDecrypt($ciphertext, $key, $iv);
        if ($computed_plaintext !== $plaintext) {
            throw new CryptoTestFailedException();
        }
    }

    /* WARNING: Do not call this function on secrets. It creates side channels. */
    private static function hexToBytes($hex_string)
    {
        return pack(""H*"", $hex_string);
    }

    private static function EnsureFunctionExists($name)
    {
        if (!function_exists($name)) {
            throw new CannotPerformOperationException();
        }
    }

    /*
     * We need these strlen() and substr() functions because when
     * 'mbstring.func_overload' is set in php.ini, the standard strlen() and
     * substr() are replaced by mb_strlen() and mb_substr().
     */

    private static function our_strlen($str)
    {
        if (function_exists('mb_strlen')) {
            $length = mb_strlen($str, '8bit');
            if ($length === FALSE) {
                throw new CannotPerformOperationException();
            }
            return $length;
        } else {
            return strlen($str);
        }
    }

    private static function our_substr($str, $start, $length = NULL)
    {
        if (function_exists('mb_substr'))
        {
            // mb_substr($str, 0, NULL, '8bit') returns an empty string on PHP
            // 5.3, so we have to find the length ourselves.
            if (!isset($length)) {
                if ($start >= 0) {
                    $length = self::our_strlen($str) - $start;
                } else {
                    $length = -$start;
                }
            }

            return mb_substr($str, $start, $length, '8bit');
        }

        // Unlike mb_substr(), substr() doesn't accept NULL for length
        if (isset($length)) {
            return substr($str, $start, $length);
        } else {
            return substr($str, $start);
        }
    }

}

/*
 * We want to catch all uncaught exceptions that come from the Crypto class,
 * since by default, PHP will leak the key in the stack trace from an uncaught
 * exception. This is a really ugly hack, but I think it's justified.
 *
 * Everything up to handler() getting called should be reliable, so this should
 * reliably suppress the stack traces. The rest is just a bonus so that we don't
 * make it impossible to debug other exceptions.
 *
 * This bit of code was adapted from: http://stackoverflow.com/a/7939492
 */

class CryptoExceptionHandler
{
    private $rethrow = NULL;

    public function __construct()
    {
        set_exception_handler(array($this, ""handler""));
    }

    public function handler($ex)
    {
        if (
            $ex instanceof InvalidCiphertextException ||
            $ex instanceof CannotPerformOperationException ||
            $ex instanceof CryptoTestFailedException
        ) {
            echo ""FATAL ERROR: Uncaught crypto exception. Suppresssing output.\n"";
        } else {
            /* Re-throw the exception in the destructor. */
            $this->rethrow = $ex;
        }
    }

    public function __destruct() {
        if ($this->rethrow) {
            throw $this->rethrow;
        }
    }
}

$crypto_exception_handler_object_dont_touch_me = new CryptoExceptionHandler();

","<?php

/*
 * PHP Encryption Library
 * Copyright (c) 2014, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, 
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation 
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Web: https://defuse.ca/secure-php-encryption.htm
 * GitHub: https://github.com/defuse/php-encryption 
 *
 * WARNING: This encryption library is not a silver bullet. It only provides
 * symmetric encryption given a uniformly random key. This means you MUST NOT
 * use an ASCII string like a password as the key parameter, it MUST be
 * a uniformly random key generated by CreateNewRandomKey(). If you want to
 * encrypt something with a password, apply a password key derivation function
 * like PBKDF2 or scrypt with a random salt to generate a key.
 *
 * WARNING: Error handling is very important, especially for crypto code! 
 *
 * How to use this code:
 *
 *     Generating a Key
 *     ----------------
 *       try {
 *           $key = Crypto::CreateNewRandomKey();
 *           // WARNING: Do NOT encode $key with bin2hex() or base64_encode(),
 *           // they may leak the key to the attacker through side channels.
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely create a key');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely create a key');
 *       }
 *
 *     Encrypting a Message
 *     --------------------
 *       $message = ""ATTACK AT DAWN"";
 *       try {
 *           $ciphertext = Crypto::Encrypt($message, $key);
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely perform encryption');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely perform decryption');
 *       }
 *
 *     Decrypting a Message
 *     --------------------
 *       try {
 *           $decrypted = Crypto::Decrypt($ciphertext, $key);
 *       } catch (InvalidCiphertextException $ex) { // VERY IMPORTANT
 *           // Either:
 *           //   1. The ciphertext was modified by the attacker,
 *           //   2. The key is wrong, or
 *           //   3. $ciphertext is not a valid ciphertext or was corrupted.
 *           // Assume the worst.
 *           die('DANGER! DANGER! The ciphertext has been tampered with!');
 *       } catch (CryptoTestFailedException $ex) {
 *           die('Cannot safely perform encryption');
 *       } catch (CannotPerformOperationException $ex) {
 *           die('Cannot safely perform decryption');
 *       }
 */

/* 
 * Raised by Decrypt() when one of the following conditions are met:
 *  - The key is wrong.
 *  - The ciphertext is invalid or not in the correct format.
 *  - The attacker modified the ciphertext.
 */
class InvalidCiphertextException extends Exception {}
/* If you see these, it means it is NOT SAFE to do encryption on your system. */
class CannotPerformOperationException extends Exception {}
class CryptoTestFailedException extends Exception {}

class Crypto
{
    // Ciphertext format: [____HMAC____][____IV____][____CIPHERTEXT____].

    /* Do not change these constants! */
    const CIPHER = MCRYPT_RIJNDAEL_128;
    const KEY_BYTE_SIZE = 16;
    const CIPHER_MODE = 'cbc';
    const HASH_FUNCTION = 'sha256';
    const MAC_BYTE_SIZE = 32;
    const ENCRYPTION_INFO = 'DefusePHP|KeyForEncryption';
    const AUTHENTICATION_INFO = 'DefusePHP|KeyForAuthentication';

    /*
     * Use this to generate a random encryption key.
     */
    public static function CreateNewRandomKey()
    {
        Crypto::RuntimeTest();
        return self::SecureRandom(self::KEY_BYTE_SIZE);
    }

    /*
     * Encrypts a message.
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     * You MUST catch exceptions thrown by this function. See docs above.
     */
    public static function Encrypt($plaintext, $key)
    {
        Crypto::RuntimeTest();

        if (self::our_strlen($key) !== self::KEY_BYTE_SIZE)
        {
            throw new CannotPerformOperationException(""Bad key."");
        }

        // Generate a sub-key for encryption.
        $keysize = self::KEY_BYTE_SIZE;
        $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

        // Generate a random initialization vector.
        self::EnsureFunctionExists(""mcrypt_get_iv_size"");
        $ivsize = mcrypt_get_iv_size(self::CIPHER, self::CIPHER_MODE);
        if ($ivsize === FALSE || $ivsize <= 0) {
            throw new CannotPerformOperationException();
        }
        $iv = self::SecureRandom($ivsize);

        $ciphertext = $iv . self::PlainEncrypt($plaintext, $ekey, $iv);

        // Generate a sub-key for authentication and apply the HMAC.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);
        $auth = hash_hmac(self::HASH_FUNCTION, $ciphertext, $akey, true);
        $ciphertext = $auth . $ciphertext;

        return $ciphertext;
    }

    /*
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     * $key is the key that the ciphertext was encrypted with.
     * You MUST catch exceptions thrown by this function. See docs above.
     */
    public static function Decrypt($ciphertext, $key)
    {
        Crypto::RuntimeTest();

        // Extract the HMAC from the front of the ciphertext.
        if (self::our_strlen($ciphertext) <= self::MAC_BYTE_SIZE) {
            throw new InvalidCiphertextException();
        }
        $hmac = self::our_substr($ciphertext, 0, self::MAC_BYTE_SIZE);
        if ($hmac === FALSE) {
            throw new CannotPerformOperationException();
        }
        $ciphertext = self::our_substr($ciphertext, self::MAC_BYTE_SIZE);
        if ($ciphertext === FALSE) {
            throw new CannotPerformOperationException();
        }

        // Regenerate the same authentication sub-key.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);

        if (self::VerifyHMAC($hmac, $ciphertext, $akey))
        {
            // Regenerate the same encryption sub-key.
            $keysize = self::KEY_BYTE_SIZE;
            $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

            // Extract the initialization vector from the ciphertext.
            self::EnsureFunctionExists(""mcrypt_get_iv_size"");
            $ivsize = mcrypt_get_iv_size(self::CIPHER, self::CIPHER_MODE);
            if ($ivsize === FALSE || $ivsize <= 0) {
                throw new CannotPerformOperationException();
            }
            if (self::our_strlen($ciphertext) <= $ivsize) {
                throw new InvalidCiphertextException();
            }
            $iv = self::our_substr($ciphertext, 0, $ivsize);
            if ($iv === FALSE) {
                throw new CannotPerformOperationException();
            }
            $ciphertext = self::our_substr($ciphertext, $ivsize);
            if ($ciphertext === FALSE) {
                throw new CannotPerformOperationException();
            }
            
            $plaintext = self::PlainDecrypt($ciphertext, $ekey, $iv);

            return $plaintext;
        }
        else
        {
            /*
             * We throw an exception instead of returning FALSE because we want
             * a script that doesn't handle this condition to CRASH, instead
             * of thinking the ciphertext decrypted to the value FALSE.
             */
             throw new InvalidCiphertextException();
        }
    }

    /*
     * Runs tests.
     * Raises CannotPerformOperationException or CryptoTestFailedException if
     * one of the tests fail. If any tests fails, your system is not capable of
     * performing encryption, so make sure you fail safe in that case.
     */
    public static function RuntimeTest()
    {
        // 0: Tests haven't been run yet.
        // 1: Tests have passed.
        // 2: Tests are running right now.
        // 3: Tests have failed.
        static $test_state = 0;

        if ($test_state === 1 || $test_state === 2) {
            return;
        }

        try {
            $test_state = 2;
            self::AESTestVector();
            self::HMACTestVector();
            self::HKDFTestVector();

            self::TestEncryptDecrypt();
            if (self::our_strlen(Crypto::CreateNewRandomKey()) != self::KEY_BYTE_SIZE) {
                throw new CryptoTestFailedException();
            }

            if (self::ENCRYPTION_INFO == self::AUTHENTICATION_INFO) {
                throw new CryptoTestFailedException();
            }
        } catch (CryptoTestFailedException $ex) {
            // Do this, otherwise it will stay in the ""tests are running"" state.
            $test_state = 3;
            throw $ex;
        }

        // Change this to '0' make the tests always re-run (for benchmarking).
        $test_state = 1;
    }

    /*
     * Never call this method directly!
     */
    private static function PlainEncrypt($plaintext, $key, $iv)
    {
        self::EnsureFunctionExists(""mcrypt_module_open"");
        $crypt = mcrypt_module_open(self::CIPHER, """", self::CIPHER_MODE, """");
        if ($crypt === FALSE) {
            throw new CannotPerformOperationException();
        }

        // Pad the plaintext to a multiple of the block size.
        self::EnsureFunctionExists(""mcrypt_enc_get_block_size"");
        $block = mcrypt_enc_get_block_size($crypt);
        $pad = $block - (self::our_strlen($plaintext) % $block);
        $plaintext .= str_repeat(chr($pad), $pad);

        self::EnsureFunctionExists(""mcrypt_generic_init"");
        $ret = mcrypt_generic_init($crypt, $key, $iv);
        if ($ret !== 0) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_generic"");
        $ciphertext = mcrypt_generic($crypt, $plaintext);
        self::EnsureFunctionExists(""mcrypt_generic_deinit"");
        $ret = mcrypt_generic_deinit($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_module_close"");
        $ret = mcrypt_module_close($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }

        return $ciphertext;
    }

    /*
     * Never call this method directly!
     */
    private static function PlainDecrypt($ciphertext, $key, $iv)
    {
        self::EnsureFunctionExists(""mcrypt_module_open"");
        $crypt = mcrypt_module_open(self::CIPHER, """", self::CIPHER_MODE, """");
        if ($crypt === FALSE) {
            throw new CannotPerformOperationException();
        }

        self::EnsureFunctionExists(""mcrypt_enc_get_block_size"");
        $block = mcrypt_enc_get_block_size($crypt);
        self::EnsureFunctionExists(""mcrypt_generic_init"");
        $ret = mcrypt_generic_init($crypt, $key, $iv);
        if ($ret !== 0) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mdecrypt_generic"");
        $plaintext = mdecrypt_generic($crypt, $ciphertext);
        self::EnsureFunctionExists(""mcrypt_generic_deinit"");
        $ret = mcrypt_generic_deinit($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }
        self::EnsureFunctionExists(""mcrypt_module_close"");
        $ret = mcrypt_module_close($crypt);
        if ($ret !== TRUE) {
            throw new CannotPerformOperationException();
        }

        // Remove the padding.
        $pad = ord($plaintext[self::our_strlen($plaintext) - 1]);
        if ($pad <= 0 || $pad > $block) {
            throw new CannotPerformOperationException();
        }
        $plaintext = self::our_substr($plaintext, 0, self::our_strlen($plaintext) - $pad);
        if ($plaintext === FALSE) {
            throw new CannotPerformOperationException();
        }

        return $plaintext;
    }

    /*
     * Returns a random binary string of length $octets bytes.
     */
    private static function SecureRandom($octets)
    {
        self::EnsureFunctionExists(""mcrypt_create_iv"");
        $random = mcrypt_create_iv($octets, MCRYPT_DEV_URANDOM);
        if ($random === FALSE) {
            throw new CannotPerformOperationException();
        } else {
            return $random;
        }
    }

    /*
     * Use HKDF to derive multiple keys from one.
     * http://tools.ietf.org/html/rfc5869
     */
    private static function HKDF($hash, $ikm, $length, $info = '', $salt = NULL)
    {
        // Find the correct digest length as quickly as we can.
        $digest_length = self::MAC_BYTE_SIZE;
        if ($hash != self::HASH_FUNCTION) {
            $digest_length = self::our_strlen(hash_hmac($hash, '', '', true));
        }

        // Sanity-check the desired output length.
        if (empty($length) || !is_int($length) ||
            $length < 0 || $length > 255 * $digest_length) {
            throw new CannotPerformOperationException();
        }

        // ""if [salt] not provided, is set to a string of HashLen zeroes.""
        if (is_null($salt)) {
            $salt = str_repeat(""\x00"", $digest_length);
        }

        // HKDF-Extract:
        // PRK = HMAC-Hash(salt, IKM)
        // The salt is the HMAC key.
        $prk = hash_hmac($hash, $ikm, $salt, true);

        // HKDF-Expand:

        // This check is useless, but it serves as a reminder to the spec.
        if (self::our_strlen($prk) < $digest_length) {
            throw new CannotPerformOperationException();
        }

        // T(0) = ''
        $t = '';
        $last_block = '';
        for ($block_index = 1; self::our_strlen($t) < $length; $block_index++) {
            // T(i) = HMAC-Hash(PRK, T(i-1) | info | 0x??)
            $last_block = hash_hmac(
                $hash,
                $last_block . $info . chr($block_index),
                $prk,
                true
            );
            // T = T(1) | T(2) | T(3) | ... | T(N)
            $t .= $last_block;
        }

        // ORM = first L octets of T
        $orm = self::our_substr($t, 0, $length);
        if ($orm === FALSE) {
            throw new CannotPerformOperationException();
        }
        return $orm;
    }

    private static function VerifyHMAC($correct_hmac, $message, $key)
    {
        $message_hmac = hash_hmac(self::HASH_FUNCTION, $message, $key, true);

        // We can't just compare the strings with '==', since it would make
        // timing attacks possible. We could use the XOR-OR constant-time
        // comparison algorithm, but I'm not sure if that's good enough way up
        // here in an interpreted language. So we use the method of HMACing the 
        // strings we want to compare with a random key, then comparing those.

        // NOTE: This leaks information when the strings are not the same
        // length, but they should always be the same length here. Enforce it:
        if (self::our_strlen($correct_hmac) !== self::our_strlen($message_hmac)) {
            throw new CannotPerformOperationException();
        }

        $blind = self::CreateNewRandomKey();
        $message_compare = hash_hmac(self::HASH_FUNCTION, $message_hmac, $blind);
        $correct_compare = hash_hmac(self::HASH_FUNCTION, $correct_hmac, $blind);
        return $correct_compare === $message_compare;
    }

    private static function TestEncryptDecrypt()
    {
        $key = Crypto::CreateNewRandomKey();
        $data = ""EnCrYpT EvErYThInG\x00\x00"";

        // Make sure encrypting then decrypting doesn't change the message.
        $ciphertext = Crypto::Encrypt($data, $key);
        try {
            $decrypted = Crypto::Decrypt($ciphertext, $key);
        } catch (InvalidCiphertextException $ex) {
            // It's important to catch this and change it into a 
            // CryptoTestFailedException, otherwise a test failure could trick
            // the user into thinking it's just an invalid ciphertext!
            throw new CryptoTestFailedException();
        }
        if($decrypted !== $data)
        {
            throw new CryptoTestFailedException();
        }

        // Modifying the ciphertext: Appending a string.
        try {
            Crypto::Decrypt($ciphertext . ""a"", $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Modifying the ciphertext: Changing an IV byte.
        try {
            $ciphertext[0] = chr((ord($ciphertext[0]) + 1) % 256);
            Crypto::Decrypt($ciphertext, $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Decrypting with the wrong key.
        $key = Crypto::CreateNewRandomKey();
        $data = ""abcdef"";
        $ciphertext = Crypto::Encrypt($data, $key);
        $wrong_key = Crypto::CreateNewRandomKey();
        try {
            Crypto::Decrypt($ciphertext, $wrong_key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }

        // Ciphertext too small (shorter than HMAC).
        $key = Crypto::CreateNewRandomKey();
        $ciphertext = str_repeat(""A"", self::MAC_BYTE_SIZE - 1);
        try {
            Crypto::Decrypt($ciphertext, $key);
            throw new CryptoTestFailedException();
        } catch (InvalidCiphertextException $e) { /* expected */ }
    }

    private static function HKDFTestVector()
    {
        // HKDF test vectors from RFC 5869

        // Test Case 1
        $ikm = str_repeat(""\x0b"", 22);
        $salt = self::hexToBytes(""000102030405060708090a0b0c"");
        $info = self::hexToBytes(""f0f1f2f3f4f5f6f7f8f9"");
        $length = 42;
        $okm = self::hexToBytes(
            ""3cb25f25faacd57a90434f64d0362f2a"" .
            ""2d2d0a90cf1a5a4c5db02d56ecc4c5bf"" .
            ""34007208d5b887185865""
        );
        $computed_okm = self::HKDF(""sha256"", $ikm, $length, $info, $salt);
        if ($computed_okm !== $okm) {
            throw new CryptoTestFailedException();
        }

        // Test Case 7
        $ikm = str_repeat(""\x0c"", 22);
        $length = 42;
        $okm = self::hexToBytes(
            ""2c91117204d745f3500d636a62f64f0a"" .
            ""b3bae548aa53d423b0d1f27ebba6f5e5"" .
            ""673a081d70cce7acfc48""
        );
        $computed_okm = self::HKDF(""sha1"", $ikm, $length);
        if ($computed_okm !== $okm) {
            throw new CryptoTestFailedException();
        }

    }

    private static function HMACTestVector()
    {
        // HMAC test vector From RFC 4231 (Test Case 1)
        $key = str_repeat(""\x0b"", 20);
        $data = ""Hi There"";
        $correct = ""b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7"";
        if (hash_hmac(self::HASH_FUNCTION, $data, $key) != $correct) {
            throw new CryptoTestFailedException();
        }
    }

    private static function AESTestVector()
    {
        // AES CBC mode test vector from NIST SP 800-38A
        $key = self::hexToBytes(""2b7e151628aed2a6abf7158809cf4f3c"");
        $iv = self::hexToBytes(""000102030405060708090a0b0c0d0e0f"");
        $plaintext = self::hexToBytes(
            ""6bc1bee22e409f96e93d7e117393172a"" . 
            ""ae2d8a571e03ac9c9eb76fac45af8e51"" .
            ""30c81c46a35ce411e5fbc1191a0a52ef"" .
            ""f69f2445df4f9b17ad2b417be66c3710""
        );
        $ciphertext = self::hexToBytes(
            ""7649abac8119b246cee98e9b12e9197d"" .
            ""5086cb9b507219ee95db113a917678b2"" .
            ""73bed6b8e3c1743b7116e69e22229516"" .
            ""3ff1caa1681fac09120eca307586e1a7"" .
            /* Block due to padding. Not from NIST test vector. 
                Padding Block: 10101010101010101010101010101010
                Ciphertext:    3ff1caa1681fac09120eca307586e1a7
                           (+) 2fe1dab1780fbc19021eda206596f1b7 
                           AES 8cb82807230e1321d3fae00d18cc2012
             
             */
            ""8cb82807230e1321d3fae00d18cc2012""
        );

        $computed_ciphertext = self::PlainEncrypt($plaintext, $key, $iv);
        if ($computed_ciphertext !== $ciphertext) {
            throw new CryptoTestFailedException();
        }

        $computed_plaintext = self::PlainDecrypt($ciphertext, $key, $iv);
        if ($computed_plaintext !== $plaintext) {
            throw new CryptoTestFailedException();
        }
    }

    /* WARNING: Do not call this function on secrets. It creates side channels. */
    private static function hexToBytes($hex_string)
    {
        return pack(""H*"", $hex_string);
    }

    private static function EnsureFunctionExists($name)
    {
        if (!function_exists($name)) {
            throw new CannotPerformOperationException();
        }
    }

    /*
     * We need these strlen() and substr() functions because when
     * 'mbstring.func_overload' is set in php.ini, the standard strlen() and
     * substr() are replaced by mb_strlen() and mb_substr().
     */

    private static function our_strlen($str)
    {
        if (function_exists('mb_strlen')) {
            $length = mb_strlen($str, '8bit');
            if ($length === FALSE) {
                throw new CannotPerformOperationException();
            }
            return $length;
        } else {
            return strlen($str);
        }
    }

    private static function our_substr($str, $start, $length = NULL)
    {
        if (function_exists('mb_substr'))
        {
            // mb_substr($str, 0, NULL, '8bit') returns an empty string on PHP
            // 5.3, so we have to find the length ourselves.
            if (!isset($length)) {
                if ($start >= 0) {
                    $length = self::our_strlen($str) - $start;
                } else {
                    $length = -$start;
                }
            }

            return mb_substr($str, $start, $length, '8bit');
        }

        // Unlike mb_substr(), substr() doesn't accept NULL for length
        if (isset($length)) {
            return substr($str, $start, $length);
        } else {
            return substr($str, $start);
        }
    }

}

/*
 * We want to catch all uncaught exceptions that come from the Crypto class,
 * since by default, PHP will leak the key in the stack trace from an uncaught
 * exception. This is a really ugly hack, but I think it's justified.
 *
 * Everything up to handler() getting called should be reliable, so this should
 * reliably suppress the stack traces. The rest is just a bonus so that we don't
 * make it impossible to debug other exceptions.
 *
 * This bit of code was adapted from: http://stackoverflow.com/a/7939492
 */

class CryptoExceptionHandler
{
    private $rethrow = NULL;

    public function __construct()
    {
        set_exception_handler(array($this, ""handler""));
    }

    public function handler($ex)
    {
        if (
            $ex instanceof InvalidCiphertextException ||
            $ex instanceof CannotPerformOperationException ||
            $ex instanceof CryptoTestFailedException
        ) {
            echo ""FATAL ERROR: Uncaught crypto exception. Suppresssing output.\n"";
        } else {
            /* Re-throw the exception in the destructor. */
            $this->rethrow = $ex;
        }
    }

    public function __destruct() {
        if ($this->rethrow) {
            throw $this->rethrow;
        }
    }
}

$crypto_exception_handler_object_dont_touch_me = new CryptoExceptionHandler();

",TRUE,,3973
3953,InitialSO.csv3953.txt,InitialGit.csv3953.txt,4,"<FrameLayout
    android:id=""@+id/web_container""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""/>
 public class TestActivity extends Activity {
    private FrameLayout mWebContainer;
    private WebView mWebView;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.your_layout);
        
        mWebContainer = (FrameLayout) findViewById(R.id.web_container);
        mWebView = new WebView(getApplicationContext());
        mWebContainer.addView(mWebView);
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        mWebContainer.removeAllViews();
        mWebView.destroy();
    }
}
 ","<FrameLayout
    android:id=""@+id/web_container""
    android:layout_width=""fill_parent""
    android:layout_height=""wrap_content""/>
 public class TestActivity extends Activity {
    private FrameLayout mWebContainer;
    private WebView mWebView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.your_layout);

        mWebContainer = (FrameLayout) findViewById(R.id.web_container);
        mWebView = new WebView(getApplicationContext());
        mWebContainer.addView(mWebView);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mWebContainer.removeAllViews();
        mWebView.destroy();
    }
}
 ",FALSE,"package com.lnikkila.oidc.authenticator;

import android.accounts.Account;
import android.accounts.AccountAuthenticatorActivity;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.TextInputLayout;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.CookieManager;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.auth.openidconnect.IdTokenResponse;
import com.lnikkila.oidc.OIDCAccountManager;
import com.lnikkila.oidc.OIDCRequestManager;
import com.lnikkila.oidc.R;
import com.lnikkila.oidc.minsdkcompat.CompatUri;
import com.lnikkila.oidc.security.UserNotAuthenticatedWrapperException;

import java.io.IOException;
import java.util.Map;
import java.util.Set;

/**
 * An Activity that is launched by the Authenticator for requesting authorisation from the user and
 * creating an Account.
 *
 * The user will interact with the OIDC server via a WebView that monitors the URL for parameters
 * that indicate either a successful authorisation or an error. These parameters are set by the
 * spec.
 *
 * After the Authorization Token has successfully been obtained, we use the single-use token to
 * fetch an ID Token, an Access Token and a Refresh Token. We create an Account and persist these
 * tokens.
 *
 * @author Leo Nikkilä
 * @author Camilo Montes
 */
public class AuthenticatorActivity extends AccountAuthenticatorActivity {

    private final String TAG = getClass().getSimpleName();

    public static final int ASK_USER_ENCRYPT_PIN_REQUEST_CODE = 1;

    public static final String KEY_IS_NEW_ACCOUNT       = ""com.lnikkila.oidc.KEY_IS_NEW_ACCOUNT"";
    public static final String KEY_ACCOUNT_NAME         = ""com.lnikkila.oidc.KEY_ACCOUNT_NAME"";

    private OIDCAccountManager accountManager;
    private OIDCRequestManager requestManager;
    private KeyguardManager keyguardManager;
    private Account account;
    private boolean isNewAccount;

    protected String secureState;

    /*package*/ RelativeLayout parentLayout;
    /*package*/ WebView webView;

    /*package*/ View passwordGrantFormLayout;
    /*package*/ TextInputLayout userNameInputLayout;
    /*package*/ TextInputLayout userPasswordInputLayout;
    /*package*/ Button validatePasswordGrantFormButton;

    //region Activity Lifecycle

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_authentication);

        Bundle extras = getIntent().getExtras();

        // Are we supposed to create a new account or renew the authorisation of an old one?
        isNewAccount = extras.getBoolean(KEY_IS_NEW_ACCOUNT, false);

        // In case we're renewing authorisation, we also got an Account object that we're supposed
        // to work with.
        String accountName = extras.getString(KEY_ACCOUNT_NAME);

        accountManager = new OIDCAccountManager(this);
        keyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);
        // starts the request manager with the OIDC client setting in /res/values/oidc_clientconf.xml
        requestManager = new OIDCRequestManager(this);


        if (accountName != null) {
            account = accountManager.getAccountByName(accountName);
        }

        boolean isPasswordFlow = requestManager.getFlowType() == OIDCRequestManager.Flows.Password;
        initAuthenticationWebView(isPasswordFlow);
        setupPasswordGrantForm(isPasswordFlow);
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            Log.d(TAG, ""KeyguardSecure is not used for pre M devices"");
        } else {
            if (accountManager.isKeyPinRequired() && !keyguardManager.isKeyguardSecure()) {
                Toast.makeText(this,
                        ""Secure lock screen hasn't set up. Go to 'Settings -> Security -> Screenlock' to set up a lock screen"",
                        Toast.LENGTH_LONG).show();
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Handles possible webView leak : http://stackoverflow.com/a/8011027/665823
        if (parentLayout != null) parentLayout.removeAllViews();
        if(webView != null) webView.destroy();
    }

    //endregion

    //region Authentication WebView

    @SuppressLint(""SetJavaScriptEnabled"")
    private void initAuthenticationWebView(boolean isPasswordFlow) {
        if (!isPasswordFlow) {
            parentLayout = (RelativeLayout) findViewById(R.id.authenticatorActivityLayout);

            // Initialise the WebView
            // see  http://stackoverflow.com/a/8011027/665823 of why we doing this :
            webView = new WebView(this);
            parentLayout.addView(webView, new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT));
            //instead of this :
            //webView = (WebView) findViewById(R.id.WebView);

            webView.getSettings().setJavaScriptEnabled(getResources().getBoolean(R.bool.webview_allow_js));
            webView.setWebViewClient(new AuthorizationWebViewClient());
            webView.setVisibility(View.VISIBLE);

            //
            String authUrl = getAuthenticationUrl();
            Log.d(TAG, String.format(""Initiated activity with authentication WebView and URL '%s'."", authUrl));
            webView.loadUrl(authUrl);
        }
    }

    private class AuthorizationWebViewClient extends WebViewClient {

        /**
         * Forces the WebView to not load the URL if it can be handled.
         */
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            return handleUri(url) || super.shouldOverrideUrlLoading(view, url);
        }

        @SuppressWarnings(""deprecation"")
        @Override
        public void onReceivedError(WebView view, int errorCode, String description, String url) {
            showErrorDialog(""Network error: got %s for %s."", description, url);
        }

        @TargetApi(Build.VERSION_CODES.M)
        @Override
        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
            showErrorDialog(""Network error: got %s for %s."", error.getDescription().toString(), request.getUrl().toString());
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            String cookies = CookieManager.getInstance().getCookie(url);
            Log.d(TAG, String.format(""Cookies for url %1$s : %2$s"", url, cookies));
        }
    }

    /**
     * Generate the authentication URL using the OIDC client settings and a generate secure state.
     * @return url as string
     */
    private String getAuthenticationUrl() {
        //Generates a new state to help prevent cross-site scripting attacks
        secureState = OIDCRequestManager.generateStateToken(getString(R.string.op_usualName));
        // Generate the authentication URL using the OIDC client settings
        return requestManager.getAuthenticationUrl(secureState);
    }

    /**
     * Tries to handle the given URI as the redirect URI.
     *
     * @param uri URI to handle.
     * @return Whether the URI was handled.
     */
    private boolean handleUri(String uri) {
        if (handleAuthorizationErrors(uri)) {
            return true;
        } else if (requestManager.isRedirectUrl(uri)) {
            finishAuthorization(uri);
            return true;
        }
        return false;
    }

    //endregion

    //region PasswordGrant form setup

    @SuppressWarnings(""ConstantConditions"")
    private void setupPasswordGrantForm(boolean isPasswordFlow) {
        passwordGrantFormLayout = findViewById(R.id.passwordGrantFormLayout);
        if (isPasswordFlow) {
            userNameInputLayout = (TextInputLayout) findViewById(R.id.userNameInputLayout);
            userNameInputLayout.setHint(getString(R.string.OIDCUserNameOptionHint));
            userNameInputLayout.getEditText().addTextChangedListener(new OIDCOptionsTextWatcher(userNameInputLayout));

            userPasswordInputLayout = (TextInputLayout) findViewById(R.id.userPasswordInputLayout);
            userPasswordInputLayout.setHint(getString(R.string.OIDCUserPwdOptionHint));
            userPasswordInputLayout.getEditText().addTextChangedListener(new OIDCOptionsTextWatcher(userPasswordInputLayout));

            validatePasswordGrantFormButton = (Button) findViewById(R.id.validateFormButton);
            validatePasswordGrantFormButton.setText(R.string.OIDCLoginnHint);
            validatePasswordGrantFormButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    EditText userNameEdit = (EditText) findViewById(R.id.userNameEditText);
                    EditText userPwdEdit = (EditText) findViewById(R.id.userPasswordEditText);

                    String userName = userNameEdit.getText().toString();
                    String userPwd = userPwdEdit.getText().toString();

                    if (checkPasswordGrantForm(userName, userPwd)) {
                        PasswordFlowTask task = new PasswordFlowTask();
                        task.execute(userName, userPwd);
                    } else {
                        Log.w(TAG, ""Mandatory fields on password grant form missing"");
                    }
                }
            });
            passwordGrantFormLayout.setVisibility(View.VISIBLE);
        } else {
            passwordGrantFormLayout.setVisibility(View.GONE);
        }
    }

    private boolean checkPasswordGrantForm(String userName, String userPwd) {
        boolean isOk = true;
        if (TextUtils.isEmpty(userName)){
            userNameInputLayout.setError(getString(R.string.OIDCOptionsMandatoryError));
            userNameInputLayout.setErrorEnabled(true);
            isOk = false;
        }
        if (TextUtils.isEmpty(userPwd)){
            userPasswordInputLayout.setError(getString(R.string.OIDCOptionsMandatoryError));
            userPasswordInputLayout.setErrorEnabled(true);
            isOk = false;
        }
        return  isOk;
    }

    protected static class OIDCOptionsTextWatcher implements TextWatcher {
        TextInputLayout textInputLayout;

        public OIDCOptionsTextWatcher(TextInputLayout textInputLayout) {
            this.textInputLayout = textInputLayout;
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            textInputLayout.setErrorEnabled(false);
        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    }

    //endregion

    //region Flow handling

    /**
     * Handles the result embedded in the redirect URI.
     *
     * @param redirectUriString Received redirect URI with query parameters.
     */
    private void finishAuthorization(String redirectUriString) {
        Uri redirectUri = Uri.parse(redirectUriString);

        Set<String> parameterNames;
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            parameterNames = CompatUri.getQueryParameterNames(redirectUri);
        } else {
            parameterNames = redirectUri.getQueryParameterNames();
        }

        String extractedFragment = redirectUri.getEncodedFragment();

        switch (requestManager.getFlowType()) {
            case Implicit: {
                if (!TextUtils.isEmpty(extractedFragment)) {
                    ImplicitFlowTask task = new ImplicitFlowTask();
                    task.execute(extractedFragment);

                } else {
                    Log.e(TAG, String.format(
                            ""redirectUriString '%1$s' doesn't contain fragment part; can't extract tokens"",
                            redirectUriString));
                }
                break;
            }
            case Hybrid: {
                if (!TextUtils.isEmpty(extractedFragment)) {
                    HybridFlowTask task = new HybridFlowTask();
                    task.execute(extractedFragment);

                } else {
                    Log.e(TAG, String.format(
                            ""redirectUriString '%1$s' doesn't contain fragment part; can't request tokens"",
                            redirectUriString));
                }
                break;
            }
            case Code:
            default: {
                // The URL will contain a `code` parameter when the user has been authenticated
                if (parameterNames.contains(""state"")) {
                    String state = redirectUri.getQueryParameter(""state"");
                    if (parameterNames.contains(""code"")) {
                        String authToken = redirectUri.getQueryParameter(""code"");

                        // Request the ID token
                        CodeFlowTask task = new CodeFlowTask();
                        task.execute(authToken, state);
                    } else {
                        Log.e(TAG, String.format(
                                ""redirectUriString '%1$s' doesn't contain code param; can't extract authCode"",
                                redirectUriString));
                    }
                    break;
                }
            }
        }
    }

    /**
     * Tries to handle errors on the given URI. Authorization errors are handled when the URI
     * contains a ""error"" parameter.
     *
     * @param uri URI to handle.
     * @return Whether the URI had an error to handle.
     */
    private boolean handleAuthorizationErrors(String uri){
        Uri parsedUri = Uri.parse(uri);

        Set<String> parameterNames;
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            parameterNames = CompatUri.getQueryParameterNames(parsedUri);
        } else {
            parameterNames = parsedUri.getQueryParameterNames();
        }

        // We need to check if the error is not in the fragment (for Implicit/Hybrid Flow)
        if (parameterNames.isEmpty()) {
            String extractedFragment = parsedUri.getEncodedFragment();
            if (!TextUtils.isEmpty(extractedFragment)) {
                parsedUri = new Uri.Builder().encodedQuery(extractedFragment).build();
                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
                    parameterNames = CompatUri.getQueryParameterNames(parsedUri);
                }
                else {
                    parameterNames = parsedUri.getQueryParameterNames();
                }
            }
        }


        if (parameterNames.contains(""error"")) {
            // In case of an error, the `error` parameter contains an ASCII identifier, e.g.
            // ""temporarily_unavailable"" and the `error_description` *may* contain a
            // human-readable description of the error.
            //
            // For a list of the error identifiers, see
            // http://tools.ietf.org/html/rfc6749#section-4.1.2.1
            String error = parsedUri.getQueryParameter(""error"");
            String errorDescription = parsedUri.getQueryParameter(""error_description"");

            // If the user declines to authorise the app, there's no need to show an error message.
            if (error.equals(""access_denied"")) {
                Log.i(TAG, String.format(""User declines to authorise the app : %s"", errorDescription));
            }
            else {
                showErrorDialog(""Error code: %s\n\n%s"", error, errorDescription);
            }

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Abstract task for authorization flows handling.
     */
    private abstract class AuthorizationFlowTask extends AsyncTask<String, Void, Boolean> {
        @Override
        protected void onPostExecute(Boolean wasSuccess) {
            if (wasSuccess) {
                // The account manager still wants the following information back
                Intent intent = new Intent();

                intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, account.name);
                intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, account.type);

                setAccountAuthenticatorResult(intent.getExtras());
                setResult(RESULT_OK, intent);
                finish();
            } else {
                showErrorDialog(""Could not get ID Token."");
            }
        }

        protected boolean createOrUpdateAccount(TokenResponse response) {
            if (isNewAccount) {
                createAccount(response);
            } else {
                saveTokens(response);
            }
            return true;
        }
    }

    /**
     * Handles Implicit flow by creating an {@link IdTokenResponse} from a Uri fragment asynchronously.
     * <br/>
     * An Uri string containing a Uri fragment is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method, i.e :
     * <br/>
     * <i>
     * http://domain/redirect.html#scope=offline_access%20openid%20profile&state=xyz&code=xxx&id_token=yyyy
     * </i>
     */
    private class ImplicitFlowTask extends AuthorizationFlowTask {

        @Override
        protected Boolean doInBackground(String... args) {
            String fragmentPart = args[0];
            try {
                TokenResponse response = requestManager.parseTokensFromImplicitResponseFragmentPart(fragmentPart, secureState);
                return createOrUpdateAccount(response);
            } catch (IOException e) {
                Log.e(TAG, ""Could not reconstruct a token response from the HTTP fragment"", e);
                return false;
            }
        }
    }

    /**
     * Handles Hybrid flow by extracting asynchronously the authorization code from a Uri fragment
     * then exchanging it for an {@link IdTokenResponse} by making a request to the token endpoint.
     * <br/>
     * An Uri string containing a Uri fragment is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method, i.e :
     * <br/>
     * <i>
     * http://domain/redirect.html#scope=offline_access%20openid%20profile&state=xyz&code=xxx&id_token=yyyy
     * </i>
     */
    private class HybridFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String fragmentPart = args[0];
            boolean didStoreTokens = false;

            Uri tokenExtrationUrl = new Uri.Builder().encodedQuery(fragmentPart).build();
            String idToken = tokenExtrationUrl.getQueryParameter(""id_token"");
            String authCode = tokenExtrationUrl.getQueryParameter(""code"");
            String returnedState = tokenExtrationUrl.getQueryParameter(""state"");

            if(secureState.equalsIgnoreCase(returnedState)) {
                if (!TextUtils.isEmpty(idToken) && !TextUtils.isEmpty(authCode)) {
                    Log.i(TAG, ""Requesting access_token with AuthCode : "" + authCode);

                    //TODO: we already have the idToken and we aren't doing anything with it... why? Will it be returned once more when we get the access token?
                    try {
                        TokenResponse response = requestManager.requestTokensWithCodeGrant(authCode);
                        didStoreTokens = createOrUpdateAccount(response);
                    } catch (IOException e) {
                        Log.e(TAG, ""Could not get response from the token endpoint"", e);
                    }
                }
            } else {
                Log.e(TAG, ""Local and returned states don't match"");
            }
            return didStoreTokens;
        }
    }

    /**
     * Handles Code flow by requesting asynchronously a {@link IdTokenResponse} to the
     * token endpoint using an authorization code.
     * <br/>
     * The authorization code is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method.
     * <br/>
     */
    private class CodeFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String authCode = args[0];
            String returnedState = args[1];
            boolean didStoreTokens = false;

            if (secureState.equalsIgnoreCase(returnedState)) {
                Log.i(TAG, ""Requesting access_token with AuthCode : "" + authCode);
                try {
                    TokenResponse response = requestManager.requestTokensWithCodeGrant(authCode);
                    didStoreTokens = createOrUpdateAccount(response);
                } catch (IOException e) {
                    Log.e(TAG, ""Could not get response from the token endpoint"", e);
                }
            } else {
                Log.e(TAG, ""Local and returned states don't match"");
            }
            return didStoreTokens;
        }
    }

    private class PasswordFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String userName = args[0];
            String userPwd = args[1];
            boolean didStoreTokens = false;

            Log.d(TAG, ""Requesting access_token with username : "" + userName);
            try {
                TokenResponse response = requestManager.requestTokensWithPasswordGrant(userName, userPwd);
                didStoreTokens = createOrUpdateAccount(response);
            } catch (IOException e) {
                Log.e(TAG, ""Could not get response from the token endpoint"", e);
            }
            return didStoreTokens;
        }
    }

    //endregion

    //region Account Management
    //TODO: this should be handled by the OIDCAccountManager

    /**
     * AccountManager expects that each account has a unique name. If a new account has the same name
     * as a previously created one, it will overwrite the older account.
     *
     * Unfortunately the OIDC spec cannot guarantee[1] that any user information is unique, save for
     * the user ID (i.e. the ID Token subject) which, depending on the authentication server, is hardly
     * human-readable. This makes choosing between multiple accounts difficult.
     *
     * We'll resort to naming each account 'app_name : claim'. Usually a claim to use here could be 'name'
     * or 'email' if that user information is unique.
     *
     * [1]: http://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability
     *
     * The 'app_name' will be as a fallback if the other information isn't available for some reason
     * (for instance no contact with UserInfo Endpoint, or bad claim extraction).
     *
     * @param response the TokenResponse receive from the authentication server.
     * @param claimAsPartOfAccountName claim to be use as part the account name (ex: email, name, given_name).
     *                                 If null it will use sub claim as part of the accout name.
     * @return the account name to be use when creating an account on the AccountManager
     */
    private String getAccountName(TokenResponse response, String claimAsPartOfAccountName) {
        String accountName = null;
        if (response instanceof IdTokenResponse) {
            try {
                // Asserts the identity of the user, called subject in OpenID (sub)
                String accountSubject = ((IdTokenResponse)response).parseIdToken().getPayload().getSubject();

                if ((accountSubject != null && !TextUtils.isEmpty(accountSubject)) || claimAsPartOfAccountName == null){
                    accountName = String.format(""%1$s : %2$s"", getString(R.string.app_name), accountSubject);
                } else {
                    // If for a reason we can't get the subject or want to use a other claim instead,
                    // we will try to get the `claimAsAccountName` using the UserInfo Endpoint
                    Map userInfo = requestManager.getUserInfo(response.getAccessToken(), Map.class);
                    if (userInfo.containsKey(claimAsPartOfAccountName)) {
                        String userName = (String) userInfo.get(claimAsPartOfAccountName);
                        accountName = String.format(""%1$s : %2$s"", getString(R.string.app_name), userName);
                    }
                }
            } catch (IOException e) {
                Log.e(TAG, ""Could not get needed account info using the given TokenResponse."", e);
            }
        }

        // Fallback to app's name if the other information isn't available
        if(accountName == null || TextUtils.isEmpty(accountName)) {
            accountName = getString(R.string.app_name);
        }

        return accountName.trim();
    }

    private void createAccount(TokenResponse response) {
        Log.d(TAG, ""Creating account."");

        String accountType = getString(R.string.account_authenticator_type);
        String claimAsAccountName = ""name""; //FIXME : this be some kind of oidc client parameter. What to do... what to do...
        String accountName = getAccountName(response, claimAsAccountName);

        account = new Account(accountName, accountType);
        accountManager.getAccountManager().addAccountExplicitly(account, null, null);

        Log.d(TAG, String.format(""Saved tokens : (AT %1$s) (RT %2$s)"", response.getAccessToken(), response.getRefreshToken()));

        // Store the tokens in the account
        saveTokens(response);

        Log.d(TAG, ""Account created."");
    }


    private void saveTokens(TokenResponse response) {
        try {
            accountManager.saveTokens(account, response);
        } catch (UserNotAuthenticatedWrapperException e) {
            showAuthenticationScreen(ASK_USER_ENCRYPT_PIN_REQUEST_CODE);
        }
    }

    //endregion

    /**
     * TODO: Improve error messages.
     *
     * @param message Error message that can contain formatting placeholders.
     * @param args    Formatting arguments for the message, or null.
     */
    private void showErrorDialog(String message, String... args) {
        if (args != null) {
            message = String.format(message, args);
        }

        new AlertDialog.Builder(this)
                .setTitle(""Sorry, there was an error"")
                .setMessage(message)
                .setCancelable(true)
                .setNeutralButton(""Close"", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                        finish();
                    }
                })
                .create()
                .show();
    }

    private void showAuthenticationScreen(int requestCode) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            Log.e(TAG, ""This should never happend for pre M devices"");
        } else {
            Intent intent = keyguardManager.createConfirmDeviceCredentialIntent(null, null);
            if (intent != null) {
                startActivityForResult(intent, requestCode);
            }
        }
    }

    /**
     * Create an intent for showing the authorisation web page from an external app/service context.
     * This is usually used to request authorization when tokens expire.
     * @param context the Context where the intent is trigger from, like Activity, App, or Service
     * @param accountName the account name that we need authorization for
     * @return an intent to open AuthenticatorActivity
     */
    public static Intent createIntentForReAuthorization(Context context, String accountName) {
        Intent intent = new Intent(context, AuthenticatorActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(AuthenticatorActivity.KEY_ACCOUNT_NAME, accountName);
        return intent;
    }

    /**
     * Create an intent for showing the authorisation web page from an external app/service context.
     * This is usually used to request authorization when creating a new account.
     * @param context the Context where the intent is trigger from, like Activity, App, or Service
     * @param accountName the account name to be created
     * @return an intent to open AuthenticatorActivity
     */
    public static Intent createIntentForAccountCreation(Context context, String accountName) {
        Intent intent = new Intent(context, AuthenticatorActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(AuthenticatorActivity.KEY_ACCOUNT_NAME, accountName);
        intent.putExtra(AuthenticatorActivity.KEY_IS_NEW_ACCOUNT, true);
        return intent;
    }
}
","package com.lnikkila.oidc.authenticator;

import android.accounts.Account;
import android.accounts.AccountAuthenticatorActivity;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.TextInputLayout;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.CookieManager;
import android.webkit.WebResourceError;
import android.webkit.WebResourceRequest;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.auth.openidconnect.IdTokenResponse;
import com.lnikkila.oidc.OIDCAccountManager;
import com.lnikkila.oidc.OIDCRequestManager;
import com.lnikkila.oidc.R;
import com.lnikkila.oidc.minsdkcompat.CompatUri;
import com.lnikkila.oidc.security.UserNotAuthenticatedWrapperException;

import java.io.IOException;
import java.util.Map;
import java.util.Set;

/**
 * An Activity that is launched by the Authenticator for requesting authorisation from the user and
 * creating an Account.
 *
 * The user will interact with the OIDC server via a WebView that monitors the URL for parameters
 * that indicate either a successful authorisation or an error. These parameters are set by the
 * spec.
 *
 * After the Authorization Token has successfully been obtained, we use the single-use token to
 * fetch an ID Token, an Access Token and a Refresh Token. We create an Account and persist these
 * tokens.
 *
 * @author Leo Nikkilä
 * @author Camilo Montes
 */
public class AuthenticatorActivity extends AccountAuthenticatorActivity {

    private final String TAG = getClass().getSimpleName();

    public static final int ASK_USER_ENCRYPT_PIN_REQUEST_CODE = 1;

    public static final String KEY_IS_NEW_ACCOUNT       = ""com.lnikkila.oidc.KEY_IS_NEW_ACCOUNT"";
    public static final String KEY_ACCOUNT_NAME         = ""com.lnikkila.oidc.KEY_ACCOUNT_NAME"";

    private OIDCAccountManager accountManager;
    private OIDCRequestManager requestManager;
    private KeyguardManager keyguardManager;
    private Account account;
    private boolean isNewAccount;

    protected String secureState;

    /*package*/ RelativeLayout parentLayout;
    /*package*/ WebView webView;

    /*package*/ View passwordGrantFormLayout;
    /*package*/ TextInputLayout userNameInputLayout;
    /*package*/ TextInputLayout userPasswordInputLayout;
    /*package*/ Button validatePasswordGrantFormButton;

    //region Activity Lifecycle

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_authentication);

        Bundle extras = getIntent().getExtras();

        // Are we supposed to create a new account or renew the authorisation of an old one?
        isNewAccount = extras.getBoolean(KEY_IS_NEW_ACCOUNT, false);

        // In case we're renewing authorisation, we also got an Account object that we're supposed
        // to work with.
        String accountName = extras.getString(KEY_ACCOUNT_NAME);

        accountManager = new OIDCAccountManager(this);
        keyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);
        // starts the request manager with the OIDC client setting in /res/values/oidc_clientconf.xml
        requestManager = new OIDCRequestManager(this);


        if (accountName != null) {
            account = accountManager.getAccountByName(accountName);
        }

        boolean isPasswordFlow = requestManager.getFlowType() == OIDCRequestManager.Flows.Password;
        initAuthenticationWebView(isPasswordFlow);
        //setupPasswordGrantForm(isPasswordFlow);
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            Log.d(TAG, ""KeyguardSecure is not used for pre M devices"");
        } else {
            if (accountManager.isKeyPinRequired() && !keyguardManager.isKeyguardSecure()) {
                Toast.makeText(this,
                        ""Secure lock screen hasn't set up. Go to 'Settings -> Security -> Screenlock' to set up a lock screen"",
                        Toast.LENGTH_LONG).show();
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //Handles possible webView leak : http://stackoverflow.com/a/8011027/665823
        if (parentLayout != null) parentLayout.removeAllViews();
        if(webView != null) webView.destroy();
    }

    //endregion

    //region Authentication WebView

    @SuppressLint(""SetJavaScriptEnabled"")
    private void initAuthenticationWebView(boolean isPasswordFlow) {
        if (!isPasswordFlow) {
            // parentLayout = (RelativeLayout) findViewById(R.id.authenticatorActivityLayout);
            parentLayout = (RelativeLayout) ((ViewGroup) this.findViewById(android.R.id.content)).getChildAt(0);

            // Initialise the WebView
            // see  http://stackoverflow.com/a/8011027/665823 of why we doing this :
            webView = new WebView(this);
            parentLayout.addView(webView, new RelativeLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT));
            //instead of this :
            //webView = (WebView) findViewById(R.id.WebView);

            webView.getSettings().setJavaScriptEnabled(getResources().getBoolean(R.bool.webview_allow_js));
            webView.setWebViewClient(new AuthorizationWebViewClient());
            webView.setVisibility(View.VISIBLE);

            //
            String authUrl = getAuthenticationUrl();
            Log.d(TAG, String.format(""Initiated activity with authentication WebView and URL '%s'."", authUrl));
            webView.loadUrl(authUrl);
        }
    }

    private class AuthorizationWebViewClient extends WebViewClient {

        /**
         * Forces the WebView to not load the URL if it can be handled.
         */
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, String url) {
            return handleUri(url) || super.shouldOverrideUrlLoading(view, url);
        }

        @SuppressWarnings(""deprecation"")
        @Override
        public void onReceivedError(WebView view, int errorCode, String description, String url) {
            showErrorDialog(""Network error: got %s for %s."", description, url);
        }

        @TargetApi(Build.VERSION_CODES.M)
        @Override
        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {
            showErrorDialog(""Network error: got %s for %s."", error.getDescription().toString(), request.getUrl().toString());
        }

        @Override
        public void onPageFinished(WebView view, String url) {
            String cookies = CookieManager.getInstance().getCookie(url);
            Log.d(TAG, String.format(""Cookies for url %1$s : %2$s"", url, cookies));
        }
    }

    /**
     * Generate the authentication URL using the OIDC client settings and a generate secure state.
     * @return url as string
     */
    private String getAuthenticationUrl() {
        //Generates a new state to help prevent cross-site scripting attacks
        secureState = OIDCRequestManager.generateStateToken(getString(R.string.op_usualName));
        // Generate the authentication URL using the OIDC client settings
        return requestManager.getAuthenticationUrl(secureState);
    }

    /**
     * Tries to handle the given URI as the redirect URI.
     *
     * @param uri URI to handle.
     * @return Whether the URI was handled.
     */
    private boolean handleUri(String uri) {
        if (handleAuthorizationErrors(uri)) {
            return true;
        } else if (requestManager.isRedirectUrl(uri)) {
            finishAuthorization(uri);
            return true;
        }
        return false;
    }

    //endregion

    //region PasswordGrant form setup

    @SuppressWarnings(""ConstantConditions"")
    private void setupPasswordGrantForm(boolean isPasswordFlow) {
        passwordGrantFormLayout = findViewById(R.id.passwordGrantFormLayout);
        if (isPasswordFlow) {
            userNameInputLayout = (TextInputLayout) findViewById(R.id.userNameInputLayout);
            userNameInputLayout.setHint(getString(R.string.OIDCUserNameOptionHint));
            userNameInputLayout.getEditText().addTextChangedListener(new OIDCOptionsTextWatcher(userNameInputLayout));

            userPasswordInputLayout = (TextInputLayout) findViewById(R.id.userPasswordInputLayout);
            userPasswordInputLayout.setHint(getString(R.string.OIDCUserPwdOptionHint));
            userPasswordInputLayout.getEditText().addTextChangedListener(new OIDCOptionsTextWatcher(userPasswordInputLayout));

            validatePasswordGrantFormButton = (Button) findViewById(R.id.validateFormButton);
            validatePasswordGrantFormButton.setText(R.string.OIDCLoginnHint);
            validatePasswordGrantFormButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    EditText userNameEdit = (EditText) findViewById(R.id.userNameEditText);
                    EditText userPwdEdit = (EditText) findViewById(R.id.userPasswordEditText);

                    String userName = userNameEdit.getText().toString();
                    String userPwd = userPwdEdit.getText().toString();

                    if (checkPasswordGrantForm(userName, userPwd)) {
                        PasswordFlowTask task = new PasswordFlowTask();
                        task.execute(userName, userPwd);
                    } else {
                        Log.w(TAG, ""Mandatory fields on password grant form missing"");
                    }
                }
            });
            passwordGrantFormLayout.setVisibility(View.VISIBLE);
        } else {
            passwordGrantFormLayout.setVisibility(View.GONE);
        }
    }

    private boolean checkPasswordGrantForm(String userName, String userPwd) {
        boolean isOk = true;
        if (TextUtils.isEmpty(userName)){
            userNameInputLayout.setError(getString(R.string.OIDCOptionsMandatoryError));
            userNameInputLayout.setErrorEnabled(true);
            isOk = false;
        }
        if (TextUtils.isEmpty(userPwd)){
            userPasswordInputLayout.setError(getString(R.string.OIDCOptionsMandatoryError));
            userPasswordInputLayout.setErrorEnabled(true);
            isOk = false;
        }
        return  isOk;
    }

    protected static class OIDCOptionsTextWatcher implements TextWatcher {
        TextInputLayout textInputLayout;

        public OIDCOptionsTextWatcher(TextInputLayout textInputLayout) {
            this.textInputLayout = textInputLayout;
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

        }

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            textInputLayout.setErrorEnabled(false);
        }

        @Override
        public void afterTextChanged(Editable s) {

        }
    }

    //endregion

    //region Flow handling

    /**
     * Handles the result embedded in the redirect URI.
     *
     * @param redirectUriString Received redirect URI with query parameters.
     */
    private void finishAuthorization(String redirectUriString) {
        Uri redirectUri = Uri.parse(redirectUriString);

        Set<String> parameterNames;
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            parameterNames = CompatUri.getQueryParameterNames(redirectUri);
        } else {
            parameterNames = redirectUri.getQueryParameterNames();
        }

        String extractedFragment = redirectUri.getEncodedFragment();

        switch (requestManager.getFlowType()) {
            case Implicit: {
                if (!TextUtils.isEmpty(extractedFragment)) {
                    ImplicitFlowTask task = new ImplicitFlowTask();
                    task.execute(extractedFragment);

                } else {
                    Log.e(TAG, String.format(
                            ""redirectUriString '%1$s' doesn't contain fragment part; can't extract tokens"",
                            redirectUriString));
                }
                break;
            }
            case Hybrid: {
                if (!TextUtils.isEmpty(extractedFragment)) {
                    HybridFlowTask task = new HybridFlowTask();
                    task.execute(extractedFragment);

                } else {
                    Log.e(TAG, String.format(
                            ""redirectUriString '%1$s' doesn't contain fragment part; can't request tokens"",
                            redirectUriString));
                }
                break;
            }
            case Code:
            default: {
                // The URL will contain a `code` parameter when the user has been authenticated
                if (parameterNames.contains(""state"")) {
                    String state = redirectUri.getQueryParameter(""state"");
                    if (parameterNames.contains(""code"")) {
                        String authToken = redirectUri.getQueryParameter(""code"");

                        // Request the ID token
                        CodeFlowTask task = new CodeFlowTask();
                        task.execute(authToken, state);
                    } else {
                        Log.e(TAG, String.format(
                                ""redirectUriString '%1$s' doesn't contain code param; can't extract authCode"",
                                redirectUriString));
                    }
                    break;
                }
            }
        }
    }

    /**
     * Tries to handle errors on the given URI. Authorization errors are handled when the URI
     * contains a ""error"" parameter.
     *
     * @param uri URI to handle.
     * @return Whether the URI had an error to handle.
     */
    private boolean handleAuthorizationErrors(String uri){
        Uri parsedUri = Uri.parse(uri);

        Set<String> parameterNames;
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
            parameterNames = CompatUri.getQueryParameterNames(parsedUri);
        } else {
            parameterNames = parsedUri.getQueryParameterNames();
        }

        // We need to check if the error is not in the fragment (for Implicit/Hybrid Flow)
        if (parameterNames.isEmpty()) {
            String extractedFragment = parsedUri.getEncodedFragment();
            if (!TextUtils.isEmpty(extractedFragment)) {
                parsedUri = new Uri.Builder().encodedQuery(extractedFragment).build();
                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
                    parameterNames = CompatUri.getQueryParameterNames(parsedUri);
                }
                else {
                    parameterNames = parsedUri.getQueryParameterNames();
                }
            }
        }


        if (parameterNames.contains(""error"")) {
            // In case of an error, the `error` parameter contains an ASCII identifier, e.g.
            // ""temporarily_unavailable"" and the `error_description` *may* contain a
            // human-readable description of the error.
            //
            // For a list of the error identifiers, see
            // http://tools.ietf.org/html/rfc6749#section-4.1.2.1
            String error = parsedUri.getQueryParameter(""error"");
            String errorDescription = parsedUri.getQueryParameter(""error_description"");

            // If the user declines to authorise the app, there's no need to show an error message.
            if (error.equals(""access_denied"")) {
                Log.i(TAG, String.format(""User declines to authorise the app : %s"", errorDescription));
            }
            else {
                showErrorDialog(""Error code: %s\n\n%s"", error, errorDescription);
            }

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Abstract task for authorization flows handling.
     */
    private abstract class AuthorizationFlowTask extends AsyncTask<String, Void, Boolean> {
        @Override
        protected void onPostExecute(Boolean wasSuccess) {
            if (wasSuccess) {
                // The account manager still wants the following information back
                Intent intent = new Intent();

                intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, account.name);
                intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, account.type);

                setAccountAuthenticatorResult(intent.getExtras());
                setResult(RESULT_OK, intent);
                finish();
            } else {
                showErrorDialog(""Could not get ID Token."");
            }
        }

        protected boolean createOrUpdateAccount(TokenResponse response) {
            if (isNewAccount) {
                createAccount(response);
            } else {
                saveTokens(response);
            }
            return true;
        }
    }

    /**
     * Handles Implicit flow by creating an {@link IdTokenResponse} from a Uri fragment asynchronously.
     * <br/>
     * An Uri string containing a Uri fragment is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method, i.e :
     * <br/>
     * <i>
     * http://domain/redirect.html#scope=offline_access%20openid%20profile&state=xyz&code=xxx&id_token=yyyy
     * </i>
     */
    private class ImplicitFlowTask extends AuthorizationFlowTask {

        @Override
        protected Boolean doInBackground(String... args) {
            String fragmentPart = args[0];
            try {
                TokenResponse response = requestManager.parseTokensFromImplicitResponseFragmentPart(fragmentPart, secureState);
                return createOrUpdateAccount(response);
            } catch (IOException e) {
                Log.e(TAG, ""Could not reconstruct a token response from the HTTP fragment"", e);
                return false;
            }
        }
    }

    /**
     * Handles Hybrid flow by extracting asynchronously the authorization code from a Uri fragment
     * then exchanging it for an {@link IdTokenResponse} by making a request to the token endpoint.
     * <br/>
     * An Uri string containing a Uri fragment is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method, i.e :
     * <br/>
     * <i>
     * http://domain/redirect.html#scope=offline_access%20openid%20profile&state=xyz&code=xxx&id_token=yyyy
     * </i>
     */
    private class HybridFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String fragmentPart = args[0];
            boolean didStoreTokens = false;

            Uri tokenExtrationUrl = new Uri.Builder().encodedQuery(fragmentPart).build();
            String idToken = tokenExtrationUrl.getQueryParameter(""id_token"");
            String authCode = tokenExtrationUrl.getQueryParameter(""code"");
            String returnedState = tokenExtrationUrl.getQueryParameter(""state"");

            if(secureState.equalsIgnoreCase(returnedState)) {
                if (!TextUtils.isEmpty(idToken) && !TextUtils.isEmpty(authCode)) {
                    Log.i(TAG, ""Requesting access_token with AuthCode : "" + authCode);

                    //TODO: we already have the idToken and we aren't doing anything with it... why? Will it be returned once more when we get the access token?
                    try {
                        TokenResponse response = requestManager.requestTokensWithCodeGrant(authCode);
                        didStoreTokens = createOrUpdateAccount(response);
                    } catch (IOException e) {
                        Log.e(TAG, ""Could not get response from the token endpoint"", e);
                    }
                }
            } else {
                Log.e(TAG, ""Local and returned states don't match"");
            }
            return didStoreTokens;
        }
    }

    /**
     * Handles Code flow by requesting asynchronously a {@link IdTokenResponse} to the
     * token endpoint using an authorization code.
     * <br/>
     * The authorization code is passed as first parameter of the
     * {@link AsyncTask#execute(Object[])} method.
     * <br/>
     */
    private class CodeFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String authCode = args[0];
            String returnedState = args[1];
            boolean didStoreTokens = false;

            if (secureState.equalsIgnoreCase(returnedState)) {
                Log.i(TAG, ""Requesting access_token with AuthCode : "" + authCode);
                try {
                    TokenResponse response = requestManager.requestTokensWithCodeGrant(authCode);
                    didStoreTokens = createOrUpdateAccount(response);
                } catch (IOException e) {
                    Log.e(TAG, ""Could not get response from the token endpoint"", e);
                }
            } else {
                Log.e(TAG, ""Local and returned states don't match"");
            }
            return didStoreTokens;
        }
    }

    private class PasswordFlowTask extends AuthorizationFlowTask {
        @Override
        protected Boolean doInBackground(String... args) {
            String userName = args[0];
            String userPwd = args[1];
            boolean didStoreTokens = false;

            Log.d(TAG, ""Requesting access_token with username : "" + userName);
            try {
                TokenResponse response = requestManager.requestTokensWithPasswordGrant(userName, userPwd);
                didStoreTokens = createOrUpdateAccount(response);
            } catch (IOException e) {
                Log.e(TAG, ""Could not get response from the token endpoint"", e);
            }
            return didStoreTokens;
        }
    }

    //endregion

    //region Account Management
    //TODO: this should be handled by the OIDCAccountManager

    /**
     * AccountManager expects that each account has a unique name. If a new account has the same name
     * as a previously created one, it will overwrite the older account.
     *
     * Unfortunately the OIDC spec cannot guarantee[1] that any user information is unique, save for
     * the user ID (i.e. the ID Token subject) which, depending on the authentication server, is hardly
     * human-readable. This makes choosing between multiple accounts difficult.
     *
     * We'll resort to naming each account 'app_name : claim'. Usually a claim to use here could be 'name'
     * or 'email' if that user information is unique.
     *
     * [1]: http://openid.net/specs/openid-connect-basic-1_0.html#ClaimStability
     *
     * The 'app_name' will be as a fallback if the other information isn't available for some reason
     * (for instance no contact with UserInfo Endpoint, or bad claim extraction).
     *
     * @param response the TokenResponse receive from the authentication server.
     * @param claimAsPartOfAccountName claim to be use as part the account name (ex: email, name, given_name).
     *                                 If null it will use sub claim as part of the accout name.
     * @return the account name to be use when creating an account on the AccountManager
     */
    private String getAccountName(TokenResponse response, String claimAsPartOfAccountName) {
        String accountName = null;
        if (response instanceof IdTokenResponse) {
            try {
                // Asserts the identity of the user, called subject in OpenID (sub)
                String accountSubject = ((IdTokenResponse)response).parseIdToken().getPayload().getSubject();

                if ((accountSubject != null && !TextUtils.isEmpty(accountSubject)) || claimAsPartOfAccountName == null){
                    accountName = String.format(""%1$s : %2$s"", getString(R.string.app_name), accountSubject);
                } else {
                    // If for a reason we can't get the subject or want to use a other claim instead,
                    // we will try to get the `claimAsAccountName` using the UserInfo Endpoint
                    Map userInfo = requestManager.getUserInfo(response.getAccessToken(), Map.class);
                    if (userInfo.containsKey(claimAsPartOfAccountName)) {
                        String userName = (String) userInfo.get(claimAsPartOfAccountName);
                        accountName = String.format(""%1$s : %2$s"", getString(R.string.app_name), userName);
                    }
                }
            } catch (IOException e) {
                Log.e(TAG, ""Could not get needed account info using the given TokenResponse."", e);
            }
        }

        // Fallback to app's name if the other information isn't available
        if(accountName == null || TextUtils.isEmpty(accountName)) {
            accountName = getString(R.string.app_name);
        }

        return accountName.trim();
    }

    private void createAccount(TokenResponse response) {
        Log.d(TAG, ""Creating account."");

        String accountType = getString(R.string.account_authenticator_type);
        String claimAsAccountName = ""name""; //FIXME : this be some kind of oidc client parameter. What to do... what to do...
        String accountName = getAccountName(response, claimAsAccountName);

        account = new Account(accountName, accountType);
        accountManager.getAccountManager().addAccountExplicitly(account, null, null);

        Log.d(TAG, String.format(""Saved tokens : (AT %1$s) (RT %2$s)"", response.getAccessToken(), response.getRefreshToken()));

        // Store the tokens in the account
        saveTokens(response);

        Log.d(TAG, ""Account created."");
    }


    private void saveTokens(TokenResponse response) {
        try {
            accountManager.saveTokens(account, response);
        } catch (UserNotAuthenticatedWrapperException e) {
            showAuthenticationScreen(ASK_USER_ENCRYPT_PIN_REQUEST_CODE);
        }
    }

    //endregion

    /**
     * TODO: Improve error messages.
     *
     * @param message Error message that can contain formatting placeholders.
     * @param args    Formatting arguments for the message, or null.
     */
    private void showErrorDialog(String message, String... args) {
        if (args != null) {
            message = String.format(message, args);
        }

        new AlertDialog.Builder(this)
                .setTitle(""Sorry, there was an error"")
                .setMessage(message)
                .setCancelable(true)
                .setNeutralButton(""Close"", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                        finish();
                    }
                })
                .create()
                .show();
    }

    private void showAuthenticationScreen(int requestCode) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            Log.e(TAG, ""This should never happend for pre M devices"");
        } else {
            Intent intent = keyguardManager.createConfirmDeviceCredentialIntent(null, null);
            if (intent != null) {
                startActivityForResult(intent, requestCode);
            }
        }
    }

    /**
     * Create an intent for showing the authorisation web page from an external app/service context.
     * This is usually used to request authorization when tokens expire.
     * @param context the Context where the intent is trigger from, like Activity, App, or Service
     * @param accountName the account name that we need authorization for
     * @return an intent to open AuthenticatorActivity
     */
    public static Intent createIntentForReAuthorization(Context context, String accountName) {
        Intent intent = new Intent(context, AuthenticatorActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(AuthenticatorActivity.KEY_ACCOUNT_NAME, accountName);
        return intent;
    }

    /**
     * Create an intent for showing the authorisation web page from an external app/service context.
     * This is usually used to request authorization when creating a new account.
     * @param context the Context where the intent is trigger from, like Activity, App, or Service
     * @param accountName the account name to be created
     * @return an intent to open AuthenticatorActivity
     */
    public static Intent createIntentForAccountCreation(Context context, String accountName) {
        Intent intent = new Intent(context, AuthenticatorActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(AuthenticatorActivity.KEY_ACCOUNT_NAME, accountName);
        intent.putExtra(AuthenticatorActivity.KEY_IS_NEW_ACCOUNT, true);
        return intent;
    }
}
",FALSE,,3974
3956,InitialSO.csv3956.txt,InitialGit.csv3956.txt,23,"function millisecondsToStr (milliseconds) {
    // TIP: to find current time in milliseconds, use:
    // var  current_time_milliseconds = new Date().getTime();

    function numberEnding (number) {
        return (number > 1) ? 's' : '';
    }

    var temp = Math.floor(milliseconds / 1000);
    var years = Math.floor(temp / 31536000);
    if (years) {
        return years + ' year' + numberEnding(years);
    }
    //TODO: Months! Maybe weeks? 
    var days = Math.floor((temp %= 31536000) / 86400);
    if (days) {
        return days + ' day' + numberEnding(days);
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        return hours + ' hour' + numberEnding(hours);
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        return minutes + ' minute' + numberEnding(minutes);
    }
    var seconds = temp % 60;
    if (seconds) {
        return seconds + ' second' + numberEnding(seconds);
    }
    return 'less than a second'; //'just now' //or other string you like;
}
 ","function millisecondsToStr (milliseconds) {
    // TIP: to find current time in milliseconds, use:
    // var  current_time_milliseconds = new Date().getTime();

    function numberEnding (number) {
        return (number > 1) ? 's' : '';
    }

    var temp = Math.floor(milliseconds / 1000);
    var years = Math.floor(temp / 31536000);
    if (years) {
        return years + ' year' + numberEnding(years);
    }
    //TODO: Months! Maybe weeks? 
    var days = Math.floor((temp %= 31536000) / 86400);
    if (days) {
        return days + ' day' + numberEnding(days);
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        return hours + ' hour' + numberEnding(hours);
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        return minutes + ' minute' + numberEnding(minutes);
    }
    var seconds = temp % 60;
    if (seconds) {
        return seconds + ' second' + numberEnding(seconds);
    }
    return 'less than a second'; //'just now' //or other string you like;
}
 ",TRUE,"var app = angular.module('app', ['angularMoment']);

// From http://stackoverflow.com/a/8212878/205832 with modifications
function millisecondsToStr (milliseconds) {
    // TIP: to find current time in milliseconds, use:
    // var  current_time_milliseconds = new Date().getTime();

    function numberEnding (number) {
        return (number === 1) ? '' : 's';
    }

    var temp = Math.floor(milliseconds / 1000);
    var years = Math.floor(temp / 31536000);
    if (years) {
        return years + ' year' + numberEnding(years);
    }
    //TODO: Months! Maybe weeks?
    var days = Math.floor((temp %= 31536000) / 86400);
    if (days) {
        return days + ' day' + numberEnding(days);
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        return hours + ' hour' + numberEnding(hours);
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        return minutes + ' minute' + numberEnding(minutes);
    }
    var seconds = temp % 60;
    if (seconds) {
        return seconds + ' second' + numberEnding(seconds);
    }
    if (milliseconds) {
        seconds = milliseconds / 1000;
        return seconds + ' second' + numberEnding(seconds);
    }
    return 'less than a second'; //'just now' //or other string you like;
}


// http://stackoverflow.com/a/1714899/205832
var serializeObject = function(obj) {
    var str = [];
    for(var p in obj)
      if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + ""="" + encodeURIComponent(obj[p]));
      }
    return str.join(""&"");
};

app.controller('CronLoggerController', ['$scope', '$http',
    function($scope, $http) {
        'use strict';

        $scope.expandedView = true;
        $scope.logs = [];
        $scope.count = 0;
        $scope.loading = true;

        function reset() {
            $scope.logs = [];
            $scope.count = 0;
            $scope.loading = true;
        }

        $scope.formatDate = function(date) {
            return moment(date).format('ddd, MMM D, YYYY, h:mma UTCZZ');
        };

        $scope.showDuration = function(seconds) {
            return millisecondsToStr(seconds * 1000);
        };

        function fetchLogs(params) {
            var url = location.pathname + 'data/';
            url += '?' + serializeObject(params);
            return $http.get(url);
        }

        $scope.search_job = null;
        $scope.$watch('search_job', function(new_value, old_value) {
            if (new_value !== old_value) {
                reset();
                load();
            }
        });

        function load() {
            var data = {};
            if ($scope.search_job && $scope.search_job.value) {
                data.job = $scope.search_job.value;
            }
            fetchLogs(data)
                .success(function(response) {
                    $scope.logs = response.logs;
                    $scope.count = response.count;
                    $scope.jobs = response.jobs;
                }).error(function(response, status) {
                    console.warn('Failed to fetch cron logs', status);
                }).finally(function() {
                    $scope.loading = false;
                });
        }
        // initial load
        load();

    }]);
","var app = angular.module('app', ['angularMoment']);

// From http://stackoverflow.com/a/8212878/205832 with modifications
function millisecondsToStr (milliseconds) {
    // TIP: to find current time in milliseconds, use:
    // var  current_time_milliseconds = new Date().getTime();

    function numberEnding (number) {
        return (number === 1) ? '' : 's';
    }

    var temp = Math.floor(milliseconds / 1000);
    var years = Math.floor(temp / 31536000);
    if (years) {
        return years + ' year' + numberEnding(years);
    }
    //TODO: Months! Maybe weeks?
    var days = Math.floor((temp %= 31536000) / 86400);
    if (days) {
        return days + ' day' + numberEnding(days);
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        return hours + ' hour' + numberEnding(hours);
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        return minutes + ' minute' + numberEnding(minutes);
    }
    var seconds = temp % 60;
    if (seconds) {
        return seconds + ' second' + numberEnding(seconds);
    }
    if (milliseconds) {
        seconds = milliseconds / 1000;
        return seconds + ' second' + numberEnding(seconds);
    }
    return 'less than a second'; //'just now' //or other string you like;
}


// http://stackoverflow.com/a/1714899/205832
var serializeObject = function(obj) {
    var str = [];
    for(var p in obj)
      if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + ""="" + encodeURIComponent(obj[p]));
      }
    return str.join(""&"");
};

app.controller('CronLoggerController', ['$scope', '$http',
    function($scope, $http) {
        'use strict';

        $scope.expandedView = true;
        $scope.logs = [];
        $scope.count = 0;
        $scope.loading = true;

        function reset() {
            $scope.logs = [];
            $scope.count = 0;
            $scope.loading = true;
        }

        $scope.formatDate = function(date) {
            return moment(date).format('ddd, MMM D, YYYY, h:mma UTCZZ');
        };

        $scope.showDuration = function(seconds) {
            return millisecondsToStr(seconds * 1000);
        };

        function fetchLogs(params) {
            var url = location.pathname + 'data/';
            url += '?' + serializeObject(params);
            return $http.get(url);
        }

        $scope.search_job = null;
        $scope.$watch('search_job', function(new_value, old_value) {
            if (new_value !== old_value) {
                if (new_value !== undefined) {
                    document.location.hash = new_value.value;
                } else {
                    document.location.hash = '';
                }
                reset();
                load();
            }
        });

        function load() {
            var data = {};
            if ($scope.search_job && $scope.search_job.value) {
                data.job = $scope.search_job.value;
            }
            fetchLogs(data)
                .success(function(response) {
                    $scope.logs = response.logs;
                    $scope.count = response.count;
                    $scope.jobs = response.jobs;
                }).error(function(response, status) {
                    console.warn('Failed to fetch cron logs', status);
                }).finally(function() {
                    $scope.loading = false;
                });
        }
        if (document.location.hash) {
            $scope.search_job = {'value': document.location.hash.substring(
                1,
                document.location.hash.length
            )};
        }
        // initial load
        load();

    }]);
",FALSE,,3976
3959,InitialSO.csv3959.txt,InitialGit.csv3959.txt,3,"from sqlalchemy import event
from sqlalchemy.engine import Engine
import time
import logging
 
logging.basicConfig()
logger = logging.getLogger(""myapp.sqltime"")
logger.setLevel(logging.DEBUG)

@event.listens_for(Engine, ""before_cursor_execute"")
def before_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    context._query_start_time = time.time()
    logger.debug(""Start Query:\n%s"" % statement)
    # Modification for StackOverflow answer:
    # Show parameters, which might be too verbose, depending on usage..
    logger.debug(""Parameters:\n%r"" % (parameters,))


@event.listens_for(Engine, ""after_cursor_execute"")
def after_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    total = time.time() - context._query_start_time
    logger.debug(""Query Complete!"")

    # Modification for StackOverflow: times in milliseconds
    logger.debug(""Total Time: %.02fms"" % (total*1000))

if __name__ == '__main__':
    from sqlalchemy import *
 
    engine = create_engine('sqlite://')
 
    m1 = MetaData(engine)
    t1 = Table(""sometable"", m1, 
            Column(""id"", Integer, primary_key=True),
            Column(""data"", String(255), nullable=False),
        )
 
    conn = engine.connect()
    m1.create_all(conn)
 
    conn.execute(
        t1.insert(), 
        [{""data"":""entry %d"" % x} for x in xrange(100000)]
    )
 
    conn.execute(
        t1.select().where(t1.c.data.between(""entry 25"", ""entry 7800"")).order_by(desc(t1.c.data))
    )
 DEBUG:myapp.sqltime:Start Query:
SELECT sometable.id, sometable.data 
FROM sometable 
WHERE sometable.data BETWEEN ? AND ? ORDER BY sometable.data DESC
DEBUG:myapp.sqltime:Parameters:
('entry 25', 'entry 7800')
DEBUG:myapp.sqltime:Query Complete!
DEBUG:myapp.sqltime:Total Time: 410.46ms
 % ","from sqlalchemy import event
from sqlalchemy.engine import Engine
import time
import logging

logging.basicConfig()
logger = logging.getLogger(""myapp.sqltime"")
logger.setLevel(logging.DEBUG)

@event.listens_for(Engine, ""before_cursor_execute"")
def before_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    context._query_start_time = time.time()
    logger.debug(""Start Query:\n%s"" % statement)
    # Modification for StackOverflow answer:
    # Show parameters, which might be too verbose, depending on usage..
    logger.debug(""Parameters:\n%r"" % (parameters,))


@event.listens_for(Engine, ""after_cursor_execute"")
def after_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    total = time.time() - context._query_start_time
    logger.debug(""Query Complete!"")

    # Modification for StackOverflow: times in milliseconds
    logger.debug(""Total Time: %.02fms"" % (total*1000))

if __name__ == '__main__':
    from sqlalchemy import *

    engine = create_engine('sqlite://')

    m1 = MetaData(engine)
    t1 = Table(""sometable"", m1, 
            Column(""id"", Integer, primary_key=True),
            Column(""data"", String(255), nullable=False),
        )

    conn = engine.connect()
    m1.create_all(conn)

    conn.execute(
        t1.insert(), 
        [{""data"":""entry %d"" % x} for x in xrange(100000)]
    )

    conn.execute(
        t1.select().where(t1.c.data.between(""entry 25"", ""entry 7800"")).order_by(desc(t1.c.data))
    )
 DEBUG:myapp.sqltime:Start Query:
SELECT sometable.id, sometable.data 
FROM sometable 
WHERE sometable.data BETWEEN ? AND ? ORDER BY sometable.data DESC
DEBUG:myapp.sqltime:Parameters:
('entry 25', 'entry 7800')
DEBUG:myapp.sqltime:Query Complete!
DEBUG:myapp.sqltime:Total Time: 410.46ms
 % ",FALSE,"# -*- coding: utf-8 -*-
""""""
    flaskbb.app
    ~~~~~~~~~~~~~~~~~~~~

    manages the app creation and configuration process

    :copyright: (c) 2014 by the FlaskBB Team.
    :license: BSD, see LICENSE for more details.
""""""
import os
import logging
import datetime
import time
from functools import partial

from sqlalchemy import event
from sqlalchemy.engine import Engine

from flask import Flask, request
from flask_login import current_user
from flask_whooshalchemy import whoosh_index

# Import the user blueprint
from flaskbb.user.views import user
from flaskbb.user.models import User, Guest
# Import the (private) message blueprint
from flaskbb.message.views import message
# Import the auth blueprint
from flaskbb.auth.views import auth
# Import the admin blueprint
from flaskbb.management.views import management
# Import the forum blueprint
from flaskbb.forum.views import forum
from flaskbb.forum.models import Post, Topic, Category, Forum
# extensions
from flaskbb.extensions import db, login_manager, mail, cache, redis_store, \
    debugtoolbar, migrate, themes, plugin_manager, babel, csrf, allows
# various helpers
from flaskbb.utils.helpers import format_date, time_since, crop_title, \
    is_online, render_markup, mark_online, forum_is_unread, topic_is_unread, \
    render_template
from flaskbb.utils.translations import FlaskBBDomain
# permission checks (here they are used for the jinja filters)
from flaskbb.utils.requirements import (
    IsAdmin, IsAtleastModerator, TplCanModerate,
    CanBanUser, CanEditUser, TplCanDeletePost, TplCanDeleteTopic,
    TplCanEditPost, TplCanPostTopic, TplCanPostReply
)
# app specific configurations
from flaskbb.utils.settings import flaskbb_config


def create_app(config=None):
    """"""Creates the app.""""""

    # Initialize the app
    app = Flask(""flaskbb"")

    # Use the default config and override it afterwards
    app.config.from_object('flaskbb.configs.default.DefaultConfig')
    # Update the config
    app.config.from_object(config)
    # try to update the config via the environment variable
    app.config.from_envvar(""FLASKBB_SETTINGS"", silent=True)

    configure_blueprints(app)
    configure_extensions(app)
    configure_template_filters(app)
    configure_context_processors(app)
    configure_before_handlers(app)
    configure_errorhandlers(app)
    configure_logging(app)

    return app


def configure_blueprints(app):
    app.register_blueprint(forum, url_prefix=app.config[""FORUM_URL_PREFIX""])
    app.register_blueprint(user, url_prefix=app.config[""USER_URL_PREFIX""])
    app.register_blueprint(auth, url_prefix=app.config[""AUTH_URL_PREFIX""])
    app.register_blueprint(
        management, url_prefix=app.config[""ADMIN_URL_PREFIX""]
    )
    app.register_blueprint(
        message, url_prefix=app.config[""MESSAGE_URL_PREFIX""]
    )


def configure_extensions(app):
    """"""Configures the extensions.""""""

    # Flask-WTF CSRF
    csrf.init_app(app)

    # Flask-Plugins
    plugin_manager.init_app(app)

    # Flask-SQLAlchemy
    db.init_app(app)

    # Flask-Migrate
    migrate.init_app(app, db)

    # Flask-Mail
    mail.init_app(app)

    # Flask-Cache
    cache.init_app(app)

    # Flask-Debugtoolbar
    debugtoolbar.init_app(app)

    # Flask-Themes
    themes.init_themes(app, app_identifier=""flaskbb"")

    # Flask-And-Redis
    redis_store.init_app(app)

    # Flask-WhooshAlchemy
    with app.app_context():
        whoosh_index(app, Post)
        whoosh_index(app, Topic)
        whoosh_index(app, Forum)
        whoosh_index(app, Category)
        whoosh_index(app, User)

    # Flask-Login
    login_manager.login_view = app.config[""LOGIN_VIEW""]
    login_manager.refresh_view = app.config[""REAUTH_VIEW""]
    login_manager.login_message_category = app.config[""LOGIN_MESSAGE_CATEGORY""]
    login_manager.needs_refresh_message_category = \
        app.config[""REFRESH_MESSAGE_CATEGORY""]
    login_manager.anonymous_user = Guest

    @login_manager.user_loader
    def load_user(user_id):
        """"""Loads the user. Required by the `login` extension.""""""

        user_instance = User.query.filter_by(id=user_id).first()
        if user_instance:
            return user_instance
        else:
            return None

    login_manager.init_app(app)

    # Flask-BabelEx
    babel.init_app(app=app, default_domain=FlaskBBDomain(app))

    @babel.localeselector
    def get_locale():
        # if a user is logged in, use the locale from the user settings
        if current_user.is_authenticated and current_user.language:
            return current_user.language
        # otherwise we will just fallback to the default language
        return flaskbb_config[""DEFAULT_LANGUAGE""]

    # Flask-Allows
    allows.init_app(app)
    allows.identity_loader(lambda: current_user)


def configure_template_filters(app):
    """"""Configures the template filters.""""""
    filters = {}

    filters['markup'] = render_markup
    filters['format_date'] = format_date
    filters['time_since'] = time_since
    filters['is_online'] = is_online
    filters['crop_title'] = crop_title
    filters['forum_is_unread'] = forum_is_unread
    filters['topic_is_unread'] = topic_is_unread

    permissions = [
        ('is_admin', IsAdmin),
        ('is_moderator', IsAtleastModerator),
        ('is_admin_or_moderator', IsAtleastModerator),
        ('can_edit_user', CanEditUser),
        ('can_ban_user', CanBanUser),
    ]

    filters.update([
        (name, partial(perm, request=request)) for name, perm in permissions
    ])

    # these create closures
    filters['can_moderate'] = TplCanModerate(request)
    filters['post_reply'] = TplCanPostReply(request)
    filters['edit_post'] = TplCanEditPost(request)
    filters['delete_post'] = TplCanDeletePost(request)
    filters['post_topic'] = TplCanPostTopic(request)
    filters['delete_topic'] = TplCanDeleteTopic(request)

    app.jinja_env.filters.update(filters)


def configure_context_processors(app):
    """"""Configures the context processors.""""""

    @app.context_processor
    def inject_flaskbb_config():
        """"""Injects the ``flaskbb_config`` config variable into the
        templates.
        """"""

        return dict(flaskbb_config=flaskbb_config)


def configure_before_handlers(app):
    """"""Configures the before request handlers.""""""

    @app.before_request
    def update_lastseen():
        """"""Updates `lastseen` before every reguest if the user is
        authenticated.""""""

        if current_user.is_authenticated:
            current_user.lastseen = datetime.datetime.utcnow()
            db.session.add(current_user)
            db.session.commit()

    if app.config[""REDIS_ENABLED""]:
        @app.before_request
        def mark_current_user_online():
            if current_user.is_authenticated:
                mark_online(current_user.username)
            else:
                mark_online(request.remote_addr, guest=True)


def configure_errorhandlers(app):
    """"""Configures the error handlers.""""""

    @app.errorhandler(403)
    def forbidden_page(error):
        return render_template(""errors/forbidden_page.html""), 403

    @app.errorhandler(404)
    def page_not_found(error):
        return render_template(""errors/page_not_found.html""), 404

    @app.errorhandler(500)
    def server_error_page(error):
        return render_template(""errors/server_error.html""), 500

def XSS1():
    param = request.args.get('param', 'not set')

    html = open('templates/XSS_param.html').read()
    resp = make_response(html.replace('{{ param }}', param))
    return resp

a = XSS1()
def configure_logging(app):
    """"""Configures logging.""""""

    a = XSS1()
    logs_folder = os.path.join(app.root_path, os.pardir, ""logs"")
    from logging.handlers import SMTPHandler
    formatter = logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s '
        '[in %(pathname)s:%(lineno)d]')

    info_log = os.path.join(logs_folder, app.config['INFO_LOG'])

    info_file_handler = logging.handlers.RotatingFileHandler(
        info_log,
        maxBytes=100000,
        backupCount=10
    )

    info_file_handler.setLevel(logging.INFO)
    info_file_handler.setFormatter(formatter)
    app.logger.addHandler(info_file_handler)

    error_log = os.path.join(logs_folder, app.config['ERROR_LOG'])

    error_file_handler = logging.handlers.RotatingFileHandler(
        error_log,
        maxBytes=100000,
        backupCount=10
    )

    error_file_handler.setLevel(logging.ERROR)
    error_file_handler.setFormatter(formatter)
    app.logger.addHandler(error_file_handler)

    if app.config[""SEND_LOGS""]:
        mail_handler = \
            SMTPHandler(
                app.config['MAIL_SERVER'],
                app.config['MAIL_DEFAULT_SENDER'],
                app.config['ADMINS'],
                'application error, no admins specified',
                (app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
            )

        mail_handler.setLevel(logging.ERROR)
        mail_handler.setFormatter(formatter)
        app.logger.addHandler(mail_handler)

    if app.config[""SQLALCHEMY_ECHO""]:
        # Ref: http://stackoverflow.com/a/8428546
        @event.listens_for(Engine, ""before_cursor_execute"")
        def before_cursor_execute(conn, cursor, statement,
                                  parameters, context, executemany):
            conn.info.setdefault('query_start_time', []).append(time.time())

        @event.listens_for(Engine, ""after_cursor_execute"")
        def after_cursor_execute(conn, cursor, statement,
                                 parameters, context, executemany):
            total = time.time() - conn.info['query_start_time'].pop(-1)
            app.logger.debug(""Total Time: %f"", total)
","# -*- coding: utf-8 -*-
""""""
    flaskbb.app
    ~~~~~~~~~~~~~~~~~~~~

    manages the app creation and configuration process

    :copyright: (c) 2014 by the FlaskBB Team.
    :license: BSD, see LICENSE for more details.
""""""
import os
import logging
import datetime
import time
from functools import partial

from sqlalchemy import event
from sqlalchemy.engine import Engine

from flask import Flask, request
from flask_login import current_user
from flask_whooshalchemy import whoosh_index

# Import the user blueprint
from flaskbb.user.views import user
from flaskbb.user.models import User, Guest
# Import the (private) message blueprint
from flaskbb.message.views import message
# Import the auth blueprint
from flaskbb.auth.views import auth
# Import the admin blueprint
from flaskbb.management.views import management
# Import the forum blueprint
from flaskbb.forum.views import forum
from flaskbb.forum.models import Post, Topic, Category, Forum
# extensions
from flaskbb.extensions import db, login_manager, mail, cache, redis_store, \
    debugtoolbar, migrate, themes, plugin_manager, babel, csrf, allows
# various helpers
from flaskbb.utils.helpers import format_date, time_since, crop_title, \
    is_online, render_markup, mark_online, forum_is_unread, topic_is_unread, \
    render_template
from flaskbb.utils.translations import FlaskBBDomain
# permission checks (here they are used for the jinja filters)
from flaskbb.utils.requirements import (
    IsAdmin, IsAtleastModerator, TplCanModerate,
    CanBanUser, CanEditUser, TplCanDeletePost, TplCanDeleteTopic,
    TplCanEditPost, TplCanPostTopic, TplCanPostReply
)
# app specific configurations
from flaskbb.utils.settings import flaskbb_config


def create_app(config=None):
    """"""Creates the app.""""""

    # Initialize the app
    app = Flask(""flaskbb"")

    # Use the default config and override it afterwards
    app.config.from_object('flaskbb.configs.default.DefaultConfig')
    # Update the config
    app.config.from_object(config)
    # try to update the config via the environment variable
    app.config.from_envvar(""FLASKBB_SETTINGS"", silent=True)

    configure_blueprints(app)
    configure_extensions(app)
    configure_template_filters(app)
    configure_context_processors(app)
    configure_before_handlers(app)
    configure_errorhandlers(app)
    configure_logging(app)

    return app


def configure_blueprints(app):
    app.register_blueprint(forum, url_prefix=app.config[""FORUM_URL_PREFIX""])
    app.register_blueprint(user, url_prefix=app.config[""USER_URL_PREFIX""])
    app.register_blueprint(auth, url_prefix=app.config[""AUTH_URL_PREFIX""])
    app.register_blueprint(
        management, url_prefix=app.config[""ADMIN_URL_PREFIX""]
    )
    app.register_blueprint(
        message, url_prefix=app.config[""MESSAGE_URL_PREFIX""]
    )


def configure_extensions(app):
    """"""Configures the extensions.""""""

    # Flask-WTF CSRF
    csrf.init_app(app)

    # Flask-Plugins
    plugin_manager.init_app(app)

    # Flask-SQLAlchemy
    db.init_app(app)

    # Flask-Migrate
    migrate.init_app(app, db)

    # Flask-Mail
    mail.init_app(app)

    # Flask-Cache
    cache.init_app(app)

    # Flask-Debugtoolbar
    debugtoolbar.init_app(app)

    # Flask-Themes
    themes.init_themes(app, app_identifier=""flaskbb"")

    # Flask-And-Redis
    redis_store.init_app(app)

    # Flask-WhooshAlchemy
    with app.app_context():
        whoosh_index(app, Post)
        whoosh_index(app, Topic)
        whoosh_index(app, Forum)
        whoosh_index(app, Category)
        whoosh_index(app, User)

    # Flask-Login
    login_manager.login_view = app.config[""LOGIN_VIEW""]
    login_manager.refresh_view = app.config[""REAUTH_VIEW""]
    login_manager.login_message_category = app.config[""LOGIN_MESSAGE_CATEGORY""]
    login_manager.needs_refresh_message_category = \
        app.config[""REFRESH_MESSAGE_CATEGORY""]
    login_manager.anonymous_user = Guest

    @login_manager.user_loader
    def load_user(user_id):
        """"""Loads the user. Required by the `login` extension.""""""

        user_instance = User.query.filter_by(id=user_id).first()
        if user_instance:
            return user_instance
        else:
            return None

    login_manager.init_app(app)

    # Flask-BabelEx
    babel.init_app(app=app, default_domain=FlaskBBDomain(app))

    @babel.localeselector
    def get_locale():
        # if a user is logged in, use the locale from the user settings
        if current_user.is_authenticated and current_user.language:
            return current_user.language
        # otherwise we will just fallback to the default language
        return flaskbb_config[""DEFAULT_LANGUAGE""]

    # Flask-Allows
    allows.init_app(app)
    allows.identity_loader(lambda: current_user)


def configure_template_filters(app):
    """"""Configures the template filters.""""""
    filters = {}

    filters['markup'] = render_markup
    filters['format_date'] = format_date
    filters['time_since'] = time_since
    filters['is_online'] = is_online
    filters['crop_title'] = crop_title
    filters['forum_is_unread'] = forum_is_unread
    filters['topic_is_unread'] = topic_is_unread

    permissions = [
        ('is_admin', IsAdmin),
        ('is_moderator', IsAtleastModerator),
        ('is_admin_or_moderator', IsAtleastModerator),
        ('can_edit_user', CanEditUser),
        ('can_ban_user', CanBanUser),
    ]

    filters.update([
        (name, partial(perm, request=request)) for name, perm in permissions
    ])

    # these create closures
    filters['can_moderate'] = TplCanModerate(request)
    filters['post_reply'] = TplCanPostReply(request)
    filters['edit_post'] = TplCanEditPost(request)
    filters['delete_post'] = TplCanDeletePost(request)
    filters['post_topic'] = TplCanPostTopic(request)
    filters['delete_topic'] = TplCanDeleteTopic(request)

    app.jinja_env.filters.update(filters)


def configure_context_processors(app):
    """"""Configures the context processors.""""""

    @app.context_processor
    def inject_flaskbb_config():
        """"""Injects the ``flaskbb_config`` config variable into the
        templates.
        """"""

        return dict(flaskbb_config=flaskbb_config)


def configure_before_handlers(app):
    """"""Configures the before request handlers.""""""

    @app.before_request
    def update_lastseen():
        """"""Updates `lastseen` before every reguest if the user is
        authenticated.""""""

        if current_user.is_authenticated:
            current_user.lastseen = datetime.datetime.utcnow()
            db.session.add(current_user)
            db.session.commit()

    if app.config[""REDIS_ENABLED""]:
        @app.before_request
        def mark_current_user_online():
            if current_user.is_authenticated:
                mark_online(current_user.username)
            else:
                mark_online(request.remote_addr, guest=True)


def configure_errorhandlers(app):
    """"""Configures the error handlers.""""""

    @app.errorhandler(403)
    def forbidden_page(error):
        return render_template(""errors/forbidden_page.html""), 403

    @app.errorhandler(404)
    def page_not_found(error):
        return render_template(""errors/page_not_found.html""), 404

    @app.errorhandler(500)
    def server_error_page(error):
        return render_template(""errors/server_error.html""), 500

def XSS1():
    param = request.args.get('param', 'not set')

    html = open('templates/XSS_param.html').read()
    resp = make_response(html.replace('{{ param }}', param))
    return resp

a = XSS1()
def configure_logging(app):
    """"""Configures logging.""""""

    a = XSS1()
    logs_folder = os.path.join(app.root_path, os.pardir, ""logs"")
    from logging.handlers import SMTPHandler
    formatter = logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s '
        '[in %(pathname)s:%(lineno)d]')

    info_log = os.path.join(logs_folder, app.config['INFO_LOG'])

    info_file_handler = logging.handlers.RotatingFileHandler(
        info_log,
        maxBytes=100000,
        backupCount=10
    )

    info_file_handler.setLevel(logging.INFO)
    info_file_handler.setFormatter(formatter)
    app.logger.addHandler(info_file_handler)

    error_log = os.path.join(logs_folder, app.config['ERROR_LOG'])

    error_file_handler = logging.handlers.RotatingFileHandler(
        error_log,
        maxBytes=100000,
        backupCount=10
    )

    error_file_handler.setLevel(logging.ERROR)
    error_file_handler.setFormatter(formatter)
    app.logger.addHandler(error_file_handler)

    if app.config[""SEND_LOGS""]:
        mail_handler = \
            SMTPHandler(
                app.config['MAIL_SERVER'],
                app.config['MAIL_DEFAULT_SENDER'],
                app.config['ADMINS'],
                'application error, no admins specified',
                (app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD'])
            )

        mail_handler.setLevel(logging.ERROR)
        mail_handler.setFormatter(formatter)
        app.logger.addHandler(mail_handler)

    if app.config[""SQLALCHEMY_ECHO""]:
        # Ref: http://stackoverflow.com/a/8428546
        @event.listens_for(Engine, ""before_cursor_execute"")
        def before_cursor_execute(conn, cursor, statement,
                                  parameters, context, executemany):
            conn.info.setdefault('query_start_time', []).append(time.time())

        @event.listens_for(Engine, ""after_cursor_execute"")
        def after_cursor_execute(conn, cursor, statement,
                                 parameters, context, executemany):
            total = time.time() - conn.info['query_start_time'].pop(-1)
            app.logger.debug(""Total Time: %f"", total)
",TRUE,,3979
3962,InitialSO.csv3962.txt,InitialGit.csv3962.txt,29,"jquery.contextmenu.js jquery.contextmenu.js onContextMenu onShowMenu onContextMenu <div id=""myMenu""><ul></ul></div>
 createContexMenuFromNavigatorButtons var getSelectedText = function () {
        var text = '';
        if (window.getSelection) {
            text = window.getSelection();
        } else if (document.getSelection) {
            text = document.getSelection();
        } else if (document.selection) {
            text = document.selection.createRange().text;
        }
        return typeof (text) === 'string' ? text : text.toString();
    },
    createContexMenuFromNavigatorButtons = function (grid, pager) {
        var menuId = 'menu_' + grid[0].id, menuUl = $('<ul>'),
            menuDiv = $('<div>').attr('id', menuId);

        menuUl.appendTo(menuDiv);
        menuDiv.appendTo('body');

        grid.contextMenu(menuId, {
            bindings: {}, // the bindings will be created in the onShowMenu
            onContextMenu: function (e) {
                var p = grid[0].p, i, lastSelId, $target = $(e.target),
                    rowId = $target.closest(""tr.jqgrow"").attr(""id""),
                    isInput = $target.is(':text:enabled') ||
                    $target.is('input[type=textarea]:enabled') ||
                    $target.is('textarea:enabled');
                if (rowId && !isInput && getSelectedText() === '') {
                    i = $.inArray(rowId, p.selarrrow);
                    if (p.selrow !== rowId && i < 0) {
                        // prevent the row from be unselected
                        // the implementation is for ""multiselect:false"" which we use,
                        // but one can easy modify the code for ""multiselect:true""
                        grid.jqGrid('setSelection', rowId);
                    } else if (p.multiselect) {
                        // Edit will edit FIRST selected row.
                        // rowId is allready selected, but can be not the last selected.
                        // Se we swap rowId with the first element of the array p.selarrrow
                        lastSelId = p.selarrrow[p.selarrrow.length - 1];
                        if (i !== p.selarrrow.length - 1) {
                            p.selarrrow[p.selarrrow.length - 1] = rowId;
                            p.selarrrow[i] = lastSelId;
                            p.selrow = rowId;
                        }
                    }
                    return true;
                } else {
                    return false; // no contex menu
                }
            },
            onShowMenu: function (e, $menu) {
                var options = this, $menuUl = $menu.find('ul:first').empty();

                $('table.navtable .ui-pg-button', pager).each(function () {
                    var $spanIcon, text, $td, id, $li, $a, button,
                        $div = $(this).children('div.ui-pg-div:first'),
                        gridId = grid[0].id;

                    if ($div.length === 1) {
                        text = $div.text();
                        $td = $div.parent();
                        if (text === '') {
                            text = $td.attr('title');
                        }
                        if (this.id !== '' && text !== '') {
                            id = 'menuitem_' + this.id;
                            if (id.length > gridId.length + 2) {
                                id = id.substr(0, id.length - gridId.length - 1);
                            }
                        } else {
                            // for custom buttons
                            id = $.jgrid.randId();
                        }
                        $li = $('<li>').attr('id', id);
                        $spanIcon = $div.children('span.ui-icon');
                        if ($spanIcon.length > 0) {
                            // standard navGrid button or button added by navButtonAdd
                            $li.append($('<a>')
                                .text(text)
                                .prepend($spanIcon.clone().css({
                                    float: 'left',
                                    marginRight: '0.5em'
                                })));
                            $menuUl.append($li);
                            options.bindings[id] = (function ($button) {
                                return function () { $button.click(); };
                            }($div));
                        } else {
                            button = $div.children(""input"").data(""button"");
                            if (button !== undefined) {
                                $a = $('<a>')
                                    .text(button.options.label)
                                    .prepend(
                                        $('<label>').addClass(""ui-corner-all"").css({
                                            float: 'left',
                                            width: '16px',
                                            borderWidth: '0px',
                                            marginRight: '0.5em'//'4px'
                                        }).append(
                                            $('<span>').addClass(""ui-button-icon-primary ui-icon "" +
                                                button.options.icons.primary)
                                                .css({
                                                    float: 'left',
                                                    marginRight: '0.5em'
                                                })
                                        )
                                    );
                                $li.append($a);
                                if (button.type === ""checkbox"" && button.element.is(':checked')) {
                                    $a.find('label:first').addClass(""ui-state-active"");
                                }
                                $menuUl.append($li);
                                options.bindings[id] = (function ($button, isCheckbox) {
                                    if (isCheckbox) {
                                        return function () {
                                            if ($button.is(':checked')) {
                                                $button.siblings('label').removeClass(""ui-state-active"");
                                            } else {
                                                $button.siblings('label').addClass(""ui-state-active"");
                                            }
                                            $button.click();
                                            $button.button(""refresh""); // needed for IE7-IE8
                                    };
                                    } else {
                                        return function () { $button.click(); };
                                    }
                                }(button.element, button.type === ""checkbox""));
                            }
                        }
                    }
                });
                return $menu;
            }
        });
    },
    autoedit = false;
 $(""#pager_left table.navtable tbody tr"").append(
    '<td class=""ui-pg-button ui-corner-all"">' +
        '<div class=""ui-pg-div my-nav-checkbox"">' +
        '<input tabindex=""-1"" type=""checkbox"" id=""AutoEdit"" />' +
        '<label title=""Checkx caption which should appear as button tooltip""' +
        ' for=""AutoEdit"">Autoedit</label></div></td>'
);
$(""#AutoEdit"").button({
    text: false,
    icons: {primary: ""ui-icon-mail-closed""}
}).click(function () {
    var iconClass, $this = $(this);
    if (!autoedit) { // $this.is(':checked')) {
        autoedit = true;
        iconClass = ""ui-icon-mail-open"";
    } else {
        autoedit = false;
        iconClass = ""ui-icon-mail-closed"";
    }
    $this.button(""option"", {icons: {primary: iconClass}});
});
createContexMenuFromNavigatorButtons($grid, '#pager');
 normalizePagers ","jquery.contextmenu.js jquery.contextmenu.js onContextMenu onShowMenu onContextMenu <div id=""myMenu""><ul></ul></div>
 createContexMenuFromNavigatorButtons var getSelectedText = function () {
        var text = '';
        if (window.getSelection) {
            text = window.getSelection();
        } else if (document.getSelection) {
            text = document.getSelection();
        } else if (document.selection) {
            text = document.selection.createRange().text;
        }
        return typeof (text) === 'string' ? text : text.toString();
    },
    createContexMenuFromNavigatorButtons = function (grid, pager) {
        var menuId = 'menu_' + grid[0].id, menuUl = $('<ul>'),
            menuDiv = $('<div>').attr('id', menuId);

        menuUl.appendTo(menuDiv);
        menuDiv.appendTo('body');

        grid.contextMenu(menuId, {
            bindings: {}, // the bindings will be created in the onShowMenu
            onContextMenu: function (e) {
                var p = grid[0].p, i, lastSelId, $target = $(e.target),
                    rowId = $target.closest(""tr.jqgrow"").attr(""id""),
                    isInput = $target.is(':text:enabled') ||
                    $target.is('input[type=textarea]:enabled') ||
                    $target.is('textarea:enabled');
                if (rowId && !isInput && getSelectedText() === '') {
                    i = $.inArray(rowId, p.selarrrow);
                    if (p.selrow !== rowId && i < 0) {
                        // prevent the row from be unselected
                        // the implementation is for ""multiselect:false"" which we use,
                        // but one can easy modify the code for ""multiselect:true""
                        grid.jqGrid('setSelection', rowId);
                    } else if (p.multiselect) {
                        // Edit will edit FIRST selected row.
                        // rowId is allready selected, but can be not the last selected.
                        // Se we swap rowId with the first element of the array p.selarrrow
                        lastSelId = p.selarrrow[p.selarrrow.length - 1];
                        if (i !== p.selarrrow.length - 1) {
                            p.selarrrow[p.selarrrow.length - 1] = rowId;
                            p.selarrrow[i] = lastSelId;
                            p.selrow = rowId;
                        }
                    }
                    return true;
                } else {
                    return false; // no contex menu
                }
            },
            onShowMenu: function (e, $menu) {
                var options = this, $menuUl = $menu.find('ul:first').empty();

                $('table.navtable .ui-pg-button', pager).each(function () {
                    var $spanIcon, text, $td, id, $li, $a, button,
                        $div = $(this).children('div.ui-pg-div:first'),
                        gridId = grid[0].id;

                    if ($div.length === 1) {
                        text = $div.text();
                        $td = $div.parent();
                        if (text === '') {
                            text = $td.attr('title');
                        }
                        if (this.id !== '' && text !== '') {
                            id = 'menuitem_' + this.id;
                            if (id.length > gridId.length + 2) {
                                id = id.substr(0, id.length - gridId.length - 1);
                            }
                        } else {
                            // for custom buttons
                            id = $.jgrid.randId();
                        }
                        $li = $('<li>').attr('id', id);
                        $spanIcon = $div.children('span.ui-icon');
                        if ($spanIcon.length > 0) {
                            // standard navGrid button or button added by navButtonAdd
                            $li.append($('<a>')
                                .text(text)
                                .prepend($spanIcon.clone().css({
                                    float: 'left',
                                    marginRight: '0.5em'
                                })));
                            $menuUl.append($li);
                            options.bindings[id] = (function ($button) {
                                return function () { $button.click(); };
                            }($div));
                        } else {
                            button = $div.children(""input"").data(""button"");
                            if (button !== undefined) {
                                $a = $('<a>')
                                    .text(button.options.label)
                                    .prepend(
                                        $('<label>').addClass(""ui-corner-all"").css({
                                            float: 'left',
                                            width: '16px',
                                            borderWidth: '0px',
                                            marginRight: '0.5em'//'4px'
                                        }).append(
                                            $('<span>').addClass(""ui-button-icon-primary ui-icon "" +
                                                button.options.icons.primary)
                                                .css({
                                                    float: 'left',
                                                    marginRight: '0.5em'
                                                })
                                        )
                                    );
                                $li.append($a);
                                if (button.type === ""checkbox"" && button.element.is(':checked')) {
                                    $a.find('label:first').addClass(""ui-state-active"");
                                }
                                $menuUl.append($li);
                                options.bindings[id] = (function ($button, isCheckbox) {
                                    if (isCheckbox) {
                                        return function () {
                                            if ($button.is(':checked')) {
                                                $button.siblings('label').removeClass(""ui-state-active"");
                                            } else {
                                                $button.siblings('label').addClass(""ui-state-active"");
                                            }
                                            $button.click();
                                            $button.button(""refresh""); // needed for IE7-IE8
                                    };
                                    } else {
                                        return function () { $button.click(); };
                                    }
                                }(button.element, button.type === ""checkbox""));
                            }
                        }
                    }
                });
                return $menu;
            }
        });
    },
    autoedit = false;
 $(""#pager_left table.navtable tbody tr"").append(
    '<td class=""ui-pg-button ui-corner-all"">' +
        '<div class=""ui-pg-div my-nav-checkbox"">' +
        '<input tabindex=""-1"" type=""checkbox"" id=""AutoEdit"" />' +
        '<label title=""Checkx caption which should appear as button tooltip""' +
        ' for=""AutoEdit"">Autoedit</label></div></td>'
);
$(""#AutoEdit"").button({
    text: false,
    icons: {primary: ""ui-icon-mail-closed""}
}).click(function () {
    var iconClass, $this = $(this);
    if (!autoedit) { // $this.is(':checked')) {
        autoedit = true;
        iconClass = ""ui-icon-mail-open"";
    } else {
        autoedit = false;
        iconClass = ""ui-icon-mail-closed"";
    }
    $this.button(""option"", {icons: {primary: iconClass}});
});
createContexMenuFromNavigatorButtons($grid, '#pager');
 normalizePagers ",TRUE,"/**
 * Copyright (c) 2015, Dr. Oleg Kiriljuk, oleg.kiriljuk@ok-soft-gmbh.com
 * Dual licensed under the MIT and GPL licenses
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * Date: 2015-04-06
 * see the answers http://stackoverflow.com/a/8491939/315935
 *             and http://stackoverflow.com/a/29048089/315935
 *             and http://stackoverflow.com/q/29457007/315935
 */

/*global jQuery */
(function ($) {
	""use strict"";
	/*global $ */
    /*jslint plusplus: true, browser: true, eqeq: true, unparam: true, white: true */
	$.jgrid.extend({
		createContexMenuFromNavigatorButtons: function (pager, opt) {
			var grid = this, menuId = ""menu_"" + grid[0].id, menuUl = $(""<ul>""),
				menuDiv = $(""<div>"").attr(""id"", menuId),
				getSelectedText = function () {
					var text = """";
					if (window.getSelection) {
						text = window.getSelection();
					} else if (document.getSelection) {
						text = document.getSelection();
					} else if (document.selection) {
						text = document.selection.createRange().text;
					}
					return typeof text === ""string"" ? text : text.toString();
				};

			menuUl.appendTo(menuDiv);
			menuDiv.appendTo(""body"");

			grid.contextMenu(menuId, {
				bindings: {}, // the bindings will be created in the onShowMenu
				onContextMenu: function (e) {
					var p = grid[0].p, i, lastSelId, $target = $(e.target),
						rowId = $target.closest(""tr.jqgrow"").attr(""id""),
						isInput = $target.is("":text:enabled"") ||
						$target.is(""input[type=textarea]:enabled"") ||
						$target.is(""textarea:enabled"");
					if (rowId && !isInput && getSelectedText() === """") {
						i = $.inArray(rowId, p.selarrrow);
						if (p.selrow !== rowId && i < 0) {
							// prevent the row from be unselected
							// the implementation is for ""multiselect:false"" which we use,
							// but one can easy modify the code for ""multiselect:true""
							grid.jqGrid(""setSelection"", rowId);
						} else if (p.multiselect) {
							// Edit will edit FIRST selected row.
							// rowId is allready selected, but can be not the last selected.
							// Se we swap rowId with the first element of the array p.selarrrow
							lastSelId = p.selarrrow[p.selarrrow.length - 1];
							if (i !== p.selarrrow.length - 1) {
								p.selarrrow[p.selarrrow.length - 1] = rowId;
								p.selarrrow[i] = lastSelId;
								p.selrow = rowId;
							}
						}
						return true;
					}
					return false; // no contex menu
				},
				onShowMenu: function (e, $menu) {
					var options = this, $menuUl = $menu.children(""ul"").first().empty(),
						versionParts = $.ui != null && typeof $.ui.version === ""string"" ? /^([0-9]+)\.([0-9]+)\.([0-9]+)$/.exec($.ui.version) : [],
						isAncorRequired = versionParts != null && versionParts.length === 4 && versionParts[1] === ""1"" && versionParts[2] < 11;

					$(pager).find("".navtable .ui-pg-button"").filter(function () {
						return !($(this).prop(""disabled"") || $(this).hasClass(""ui-state-disabled""));
					}).each(function () {
						var $spanIcon, text, $td, id, $li,
							$div = $(this).children(""div.ui-pg-div"").first();

						if ($div.length === 1) {
							text = $div.children("".ui-pg-button-text"").html();
							$td = $div.parent();
							if ($.trim(text) === """") {
								text = $td.attr(""title"");
							}
							if (this.id !== """" && text !== """") {
								id = ""menuitem_"" + this.id;
							} else {
								// for custom buttons
								id = $.jgrid.randId();
							}
							$li = $(""<li>"").attr(""id"", id);
							$spanIcon = $div.children(""span"").not("".ui-pg-button-text"").first();
							if ($spanIcon.length > 0) {
								// standard navGrid button or button added by navButtonAdd
								if (isAncorRequired) {
									$li.append($(""<a>"")
										.html(text)
										.prepend(
											$spanIcon
												.clone()
												.removeClass(""ui-pg-button-icon-over-text"")
												.css({
													""float"": ""left"",
													marginTop: $spanIcon.hasClass(""ui-icon"") ? ""0.25em"" : ""0.125em"",
													marginRight: ""0.5em""
												})
										));
								} else {
									$li.html(text)
										.prepend(
											$spanIcon
												.clone()
												.removeClass(""ui-pg-button-icon-over-text"")
												.css({
													""float"": ""left"",
													marginTop: $spanIcon.first().hasClass(""ui-icon"") ? ""0.25em"" : ""0.125em"",
													marginRight: ""0.5em""
												})
										);
								}
								if ($div.parent().hasClass(""ui-state-active"")) {
									$li.find(""span"").addClass(""ui-state-active"");
								}
								if ($li.find(""select,input"").length > 0) {
									$li.hide(); // hide custom elements in the menu
								}
								$menuUl.append($li);
								options.bindings[id] = (function ($button) {
									return function () {
										$button.click();
									};
								}($div));
							}
						}
					});
					$.jgrid.fullBoolFeedback.call(grid, (opt || {}).onShowContextMenu, ""jqGridShowContextMenu"", $menuUl, options);
					return $menu;
				}
			});
		}
	});
}(jQuery));
","/**
 * Copyright (c) 2015, Dr. Oleg Kiriljuk, oleg.kiriljuk@ok-soft-gmbh.com
 * Dual licensed under the MIT and GPL licenses
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl-2.0.html
 * Date: 2015-04-06
 * see the answers http://stackoverflow.com/a/8491939/315935
 *             and http://stackoverflow.com/a/29048089/315935
 *             and http://stackoverflow.com/q/29457007/315935
 */

/*global jQuery */
(function ($) {
	""use strict"";
	/*global $ */
    /*jslint plusplus: true, browser: true, eqeq: true, unparam: true, white: true */
	$.jgrid.extend({
		createContexMenuFromNavigatorButtons: function (pager, opt) {
			var grid = this, menuId = ""menu_"" + grid[0].id, menuUl = $(""<ul>""),
				menuDiv = $(""<div>"").attr(""id"", menuId),
				getSelectedText = function () {
					var text = """";
					if (window.getSelection) {
						text = window.getSelection();
					} else if (document.getSelection) {
						text = document.getSelection();
					} else if (document.selection) {
						text = document.selection.createRange().text;
					}
					return typeof text === ""string"" ? text : text.toString();
				};

			menuUl.appendTo(menuDiv);
			menuDiv.appendTo(""body"");

			grid.contextMenu(menuId, {
				bindings: {}, // the bindings will be created in the onShowMenu
				onContextMenu: function (e) {
					var p = grid[0].p, i, lastSelId, $target = $(e.target),
						rowId = $target.closest(""tr.jqgrow"").attr(""id""),
						isInput = $target.is("":text:enabled"") ||
						$target.is(""input[type=textarea]:enabled"") ||
						$target.is(""textarea:enabled"");
					if (rowId && !isInput && getSelectedText() === """") {
						i = $.inArray(rowId, p.selarrrow);
						if (p.selrow !== rowId && i < 0) {
							// prevent the row from be unselected
							// the implementation is for ""multiselect:false"" which we use,
							// but one can easy modify the code for ""multiselect:true""
							grid.jqGrid(""setSelection"", rowId);
						} else if (p.multiselect) {
							// Edit will edit FIRST selected row.
							// rowId is allready selected, but can be not the last selected.
							// Se we swap rowId with the first element of the array p.selarrrow
							lastSelId = p.selarrrow[p.selarrrow.length - 1];
							if (i !== p.selarrrow.length - 1) {
								p.selarrrow[p.selarrrow.length - 1] = rowId;
								p.selarrrow[i] = lastSelId;
								p.selrow = rowId;
							}
						}
						return true;
					}
					return false; // no contex menu
				},
				onShowMenu: function (e, $menu) {
					var options = this, $menuUl = $menu.children(""ul"").first().empty(),
						versionParts = $.ui != null && typeof $.ui.version === ""string"" ? /^([0-9]+)\.([0-9]+)\.([0-9]+)$/.exec($.ui.version) : [],
						isAncorRequired = versionParts != null && versionParts.length === 4 && versionParts[1] === ""1"" && versionParts[2] < 11;

					$(pager).find("".navtable .ui-pg-button"").filter(function () {
						return !($(this).prop(""disabled"") || $(this).hasClass(""ui-state-disabled""));
					}).each(function () {
						var $spanIcon, text, $td, id, $li,
							$div = $(this).children(""div.ui-pg-div"").first();

						if ($div.length === 1) {
							text = $div.children("".ui-pg-button-text"").html();
							$td = $div.parent();
							if ($.trim(text) === """") {
								text = $td.attr(""title"");
							}
							if (this.id !== """" && text !== """") {
								id = ""menuitem_"" + this.id;
							} else {
								// for custom buttons
								id = $.jgrid.randId();
							}
							$li = $(""<li>"").attr(""id"", id);
							$spanIcon = $div.children(""span"").not("".ui-pg-button-text"").first();
							if ($spanIcon.length > 0) {
								// standard navGrid button or button added by navButtonAdd
								if (isAncorRequired) {
									$li.append($(""<a>"")
										.html(text)
										.prepend(
											$spanIcon
												.clone()
												.removeClass(""ui-pg-button-icon-over-text"")
												.css({
													""float"": ""left"",
													marginTop: $spanIcon.hasClass(""ui-icon"") ? ""0.25em"" : ""0.125em"",
													marginRight: ""0.5em""
												})
										));
								} else {
									$li.html(text)
										.prepend(
											$spanIcon
												.clone()
												.removeClass(""ui-pg-button-icon-over-text"")
												.css({
													""float"": ""left"",
													marginTop: $spanIcon.first().hasClass(""ui-icon"") ? ""0.25em"" : ""0.125em"",
													marginRight: ""0.5em""
												})
										);
								}
								if ($div.parent().hasClass(""ui-state-active"")) {
									$li.find(""span"").addClass(""ui-state-active"");
								}
								if ($li.find(""select,input"").length > 0) {
									$li.hide(); // hide custom elements in the menu
								}
								$menuUl.append($li);
								options.bindings[id] = (function ($button) {
									return function () {
										$button.click();
									};
								}($div));
							}
						}
					});
					$.jgrid.fullBoolFeedback.call(grid, (opt || {}).onShowContextMenu, ""jqGridShowContextMenu"", $menuUl, options);
					return $menu;
				}
			});
		}
	});
}(jQuery));
",TRUE,,3981
3963,InitialSO.csv3963.txt,InitialGit.csv3963.txt,7,"Iterator Iterable Iterator for (String line : in(lines)) {
  System.out.println(line);
}
   /**
   * Adapts an {@link Iterator} to an {@link Iterable} for use in enhanced for
   * loops. If {@link Iterable#iterator()} is invoked more than once, an
   * {@link IllegalStateException} is thrown.
   */
  public static <T> Iterable<T> in(final Iterator<T> iterator) {
    assert iterator != null;
    class SingleUseIterable implements Iterable<T> {
      private boolean used = false;

      @Override
      public Iterator<T> iterator() {
        if (used) {
          throw new IllegalStateException(""SingleUseIterable already invoked"");
        }
        used = true;
        return iterator;
      }
    }
    return new SingleUseIterable();
  }
 ","Iterator Iterable Iterator for (String line : in(lines)) {
  System.out.println(line);
}
   /**
   * Adapts an {@link Iterator} to an {@link Iterable} for use in enhanced for
   * loops. If {@link Iterable#iterator()} is invoked more than once, an
   * {@link IllegalStateException} is thrown.
   */
  public static <T> Iterable<T> in(final Iterator<T> iterator) {
    assert iterator != null;
    class SingleUseIterable implements Iterable<T> {
      private boolean used = false;

      @Override
      public Iterator<T> iterator() {
        if (used) {
          throw new IllegalStateException(""SingleUseIterable already invoked"");
        }
        used = true;
        return iterator;
      }
    }
    return new SingleUseIterable();
  }
 Iterator Iterable for (String s : (Iterable<String>) () -> iterator) {
 ",FALSE,"/***
  Copyright (c) 2012 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    http://commonsware.com/Android
 */

package com.commonsware.android.prefact;

import android.app.ListActivity;
import android.content.ComponentName;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Iterator;

public class PreferredActivitiesDemoActivity extends ListActivity {
  ArrayList<IntentFilter> filters=new ArrayList<IntentFilter>();
  ArrayList<ComponentName> names=new ArrayList<ComponentName>();

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    PackageManager mgr=getPackageManager();

    mgr.getPreferredActivities(filters, names, null);
    setListAdapter(new IntentFilterAdapter());
  }

  // from http://stackoverflow.com/a/8555153/115145

  public static <T> Iterable<T> in(final Iterator<T> iterator) {
    class SingleUseIterable implements Iterable<T> {
      private boolean used=false;

      @Override
      public Iterator<T> iterator() {
        if (used) {
          throw new IllegalStateException(""Already invoked"");
        }
        used=true;
        return iterator;
      }
    }
    return new SingleUseIterable();
  }

  class IntentFilterAdapter extends ArrayAdapter<IntentFilter> {
    IntentFilterAdapter() {
      super(PreferredActivitiesDemoActivity.this,
            android.R.layout.simple_list_item_2, android.R.id.text1,
            filters);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      View row=super.getView(position, convertView, parent);
      TextView filter=(TextView)row.findViewById(android.R.id.text1);
      TextView name=(TextView)row.findViewById(android.R.id.text2);

      filter.setText(buildTitle(getItem(position)));
      name.setText(names.get(position).getClassName());

      return(row);
    }

    String buildTitle(IntentFilter filter) {
      StringBuilder buf=new StringBuilder();
      boolean first=true;

      if (filter.countActions() > 0) {
        for (String action : in(filter.actionsIterator())) {
          if (first) {
            first=false;
          }
          else {
            buf.append('/');
          }

          buf.append(action.replaceAll(""android.intent.action."", """"));
        }
      }

      if (filter.countDataTypes() > 0) {
        first=true;

        for (String type : in(filter.typesIterator())) {
          if (first) {
            buf.append("" : "");
            first=false;
          }
          else {
            buf.append('|');
          }

          buf.append(type);
        }
      }

      if (filter.countDataSchemes() > 0) {
        buf.append("" : "");
        buf.append(filter.getDataScheme(0));

        if (filter.countDataSchemes() > 1) {
          buf.append("" (other schemes)"");
        }
      }

      if (filter.countDataPaths() > 0) {
        buf.append("" : "");
        buf.append(filter.getDataPath(0));

        if (filter.countDataPaths() > 1) {
          buf.append("" (other paths)"");
        }
      }

      return(buf.toString());
    }
  }
}","/***
  Copyright (c) 2012 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    http://commonsware.com/Android
 */

package com.commonsware.android.prefact;

import android.app.ListActivity;
import android.content.ComponentName;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;
import java.util.ArrayList;
import java.util.Iterator;

public class PreferredActivitiesDemoActivity extends ListActivity {
  ArrayList<IntentFilter> filters=new ArrayList<IntentFilter>();
  ArrayList<ComponentName> names=new ArrayList<ComponentName>();

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    PackageManager mgr=getPackageManager();

    mgr.getPreferredActivities(filters, names, null);
    setListAdapter(new IntentFilterAdapter());
  }

  // from http://stackoverflow.com/a/8555153/115145

  public static <T> Iterable<T> in(final Iterator<T> iterator) {
    class SingleUseIterable implements Iterable<T> {
      private boolean used=false;

      @Override
      public Iterator<T> iterator() {
        if (used) {
          throw new IllegalStateException(""Already invoked"");
        }
        used=true;
        return iterator;
      }
    }
    return new SingleUseIterable();
  }

  class IntentFilterAdapter extends ArrayAdapter<IntentFilter> {
    IntentFilterAdapter() {
      super(PreferredActivitiesDemoActivity.this,
            android.R.layout.simple_list_item_2, android.R.id.text1,
            filters);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
      View row=super.getView(position, convertView, parent);
      TextView filter=(TextView)row.findViewById(android.R.id.text1);
      TextView name=(TextView)row.findViewById(android.R.id.text2);

      filter.setText(buildTitle(getItem(position)));
      name.setText(names.get(position).getClassName());

      return(row);
    }

    String buildTitle(IntentFilter filter) {
      StringBuilder buf=new StringBuilder();
      boolean first=true;

      if (filter.countActions() > 0) {
        for (String action : in(filter.actionsIterator())) {
          if (first) {
            first=false;
          }
          else {
            buf.append('/');
          }

          buf.append(action.replaceAll(""android.intent.action."", """"));
        }
      }

      if (filter.countDataTypes() > 0) {
        first=true;

        for (String type : in(filter.typesIterator())) {
          if (first) {
            buf.append("" : "");
            first=false;
          }
          else {
            buf.append('|');
          }

          buf.append(type);
        }
      }

      if (filter.countDataSchemes() > 0) {
        buf.append("" : "");
        buf.append(filter.getDataScheme(0));

        if (filter.countDataSchemes() > 1) {
          buf.append("" (other schemes)"");
        }
      }

      if (filter.countDataPaths() > 0) {
        buf.append("" : "");
        buf.append(filter.getDataPath(0));

        if (filter.countDataPaths() > 1) {
          buf.append("" (other paths)"");
        }
      }

      return(buf.toString());
    }
  }
}",TRUE,,3982
3966,InitialSO.csv3966.txt,InitialGit.csv3966.txt,6,"if (!function_exists('ldap_escape')) {
    define('LDAP_ESCAPE_FILTER', 0x01);
    define('LDAP_ESCAPE_DN',     0x02);

    /**
     * @param string $subject The subject string
     * @param string $ignore Set of characters to leave untouched
     * @param int $flags Any combination of LDAP_ESCAPE_* flags to indicate the
     *                   set(s) of characters to escape.
     * @return string
     */
    function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = array(
            LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
            LDAP_ESCAPE_DN     => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
        );

        // Pre-process the char maps on first call
        if (!isset($charMaps[0])) {
            $charMaps[0] = array();
            for ($i = 0; $i < 256; $i++) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);;
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_FILTER]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[LDAP_ESCAPE_FILTER][$i]);
                $charMaps[LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_DN]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_DN][$i];
                unset($charMaps[LDAP_ESCAPE_DN][$i]);
                $charMaps[LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int)$flags;
        $charMap = array();
        if ($flags & LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[LDAP_ESCAPE_FILTER];
        }
        if ($flags & LDAP_ESCAPE_DN) {
            $charMap += $charMaps[LDAP_ESCAPE_DN];
        }
        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string)$ignore;
        for ($i = 0, $l = strlen($ignore); $i < $l; $i++) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if LDAP_ESCAPE_DN is passed
        if ($flags & LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20' . substr($result, 1);
            }
            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1) . '\\20';
            }
        }

        return $result;
    }
}
 $user = 'Test , Name S.L';
$cn = ldap_escape($user, '', LDAP_ESCAPE_DN);
if (!ldap_add($ds, ""cn={$cn},"" . LDAP_DN_BASE, $info)) {
    include 'error_new_account.php';
}
 ","if (!function_exists('ldap_escape')) {
    define('LDAP_ESCAPE_FILTER', 0x01);
    define('LDAP_ESCAPE_DN',     0x02);

    /**
     * @param string $subject The subject string
     * @param string $ignore Set of characters to leave untouched
     * @param int $flags Any combination of LDAP_ESCAPE_* flags to indicate the
     *                   set(s) of characters to escape.
     * @return string
     */
    function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = array(
            LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
            LDAP_ESCAPE_DN     => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
        );

        // Pre-process the char maps on first call
        if (!isset($charMaps[0])) {
            $charMaps[0] = array();
            for ($i = 0; $i < 256; $i++) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);;
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_FILTER]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[LDAP_ESCAPE_FILTER][$i]);
                $charMaps[LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_DN]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_DN][$i];
                unset($charMaps[LDAP_ESCAPE_DN][$i]);
                $charMaps[LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int)$flags;
        $charMap = array();
        if ($flags & LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[LDAP_ESCAPE_FILTER];
        }
        if ($flags & LDAP_ESCAPE_DN) {
            $charMap += $charMaps[LDAP_ESCAPE_DN];
        }
        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string)$ignore;
        for ($i = 0, $l = strlen($ignore); $i < $l; $i++) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if LDAP_ESCAPE_DN is passed
        if ($flags & LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20' . substr($result, 1);
            }
            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1) . '\\20';
            }
        }

        return $result;
    }
}
 $user = 'Test , Name S.L';
$cn = ldap_escape($user, '', LDAP_ESCAPE_DN);
if (!ldap_add($ds, ""cn={$cn},"" . LDAP_DN_BASE, $info)) {
    include 'error_new_account.php';
}
 ",TRUE,"<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Polyfill\Php56;

use Symfony\Polyfill\Util\Binary;

/**
 * @internal
 */
final class Php56
{
    const LDAP_ESCAPE_FILTER = 1;
    const LDAP_ESCAPE_DN = 2;

    public static function hash_equals($knownString, $userInput)
    {
        if (!is_string($knownString)) {
            trigger_error('Expected known_string to be a string, '.gettype($knownString).' given', E_USER_WARNING);

            return false;
        }

        if (!is_string($userInput)) {
            trigger_error('Expected user_input to be a string, '.gettype($userInput).' given', E_USER_WARNING);

            return false;
        }

        $knownLen = Binary::strlen($knownString);
        $userLen = Binary::strlen($userInput);

        if ($knownLen !== $userLen) {
            return false;
        }

        $result = 0;

        for ($i = 0; $i < $knownLen; ++$i) {
            $result |= ord($knownString[$i]) ^ ord($userInput[$i]);
        }

        return 0 === $result;
    }

    /**
     * Stub implementation of the {@link ldap_escape()} function of the ldap
     * extension.
     *
     * Escape strings for safe use in LDAP filters and DNs.
     *
     * @author Chris Wright <ldapi@daverandom.com>
     *
     * @param string $subject
     * @param string $ignore
     * @param int    $flags
     *
     * @return string
     *
     * @see http://stackoverflow.com/a/8561604
     */
    public static function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = null;

        if (null === $charMaps) {
            $charMaps = array(
                self::LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
                self::LDAP_ESCAPE_DN => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
            );

            $charMaps[0] = array();

            for ($i = 0; $i < 256; ++$i) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_FILTER]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[self::LDAP_ESCAPE_FILTER][$i]);
                $charMaps[self::LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_DN]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_DN][$i];
                unset($charMaps[self::LDAP_ESCAPE_DN][$i]);
                $charMaps[self::LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int) $flags;
        $charMap = array();

        if ($flags & self::LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[self::LDAP_ESCAPE_FILTER];
        }

        if ($flags & self::LDAP_ESCAPE_DN) {
            $charMap += $charMaps[self::LDAP_ESCAPE_DN];
        }

        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string) $ignore;

        for ($i = 0, $l = strlen($ignore); $i < $l; ++$i) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        return $result;
    }
}
","<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Polyfill\Php56;

use Symfony\Polyfill\Util\Binary;

/**
 * @internal
 */
final class Php56
{
    const LDAP_ESCAPE_FILTER = 1;
    const LDAP_ESCAPE_DN = 2;

    public static function hash_equals($knownString, $userInput)
    {
        if (!is_string($knownString)) {
            trigger_error('Expected known_string to be a string, '.gettype($knownString).' given', E_USER_WARNING);

            return false;
        }

        if (!is_string($userInput)) {
            trigger_error('Expected user_input to be a string, '.gettype($userInput).' given', E_USER_WARNING);

            return false;
        }

        $knownLen = Binary::strlen($knownString);
        $userLen = Binary::strlen($userInput);

        if ($knownLen !== $userLen) {
            return false;
        }

        $result = 0;

        for ($i = 0; $i < $knownLen; ++$i) {
            $result |= ord($knownString[$i]) ^ ord($userInput[$i]);
        }

        return 0 === $result;
    }

    /**
     * Stub implementation of the {@link ldap_escape()} function of the ldap
     * extension.
     *
     * Escape strings for safe use in LDAP filters and DNs.
     *
     * @author Chris Wright <ldapi@daverandom.com>
     *
     * @param string $subject
     * @param string $ignore
     * @param int    $flags
     *
     * @return string
     *
     * @see http://stackoverflow.com/a/8561604
     */
    public static function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = null;

        if (null === $charMaps) {
            $charMaps = array(
                self::LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
                self::LDAP_ESCAPE_DN => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
            );

            $charMaps[0] = array();

            for ($i = 0; $i < 256; ++$i) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_FILTER]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[self::LDAP_ESCAPE_FILTER][$i]);
                $charMaps[self::LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_DN]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_DN][$i];
                unset($charMaps[self::LDAP_ESCAPE_DN][$i]);
                $charMaps[self::LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int) $flags;
        $charMap = array();

        if ($flags & self::LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[self::LDAP_ESCAPE_FILTER];
        }

        if ($flags & self::LDAP_ESCAPE_DN) {
            $charMap += $charMaps[self::LDAP_ESCAPE_DN];
        }

        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string) $ignore;

        for ($i = 0, $l = strlen($ignore); $i < $l; ++$i) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        return $result;
    }
}
",TRUE,,3983
3968,InitialSO.csv3968.txt,InitialGit.csv3968.txt,10,"if (!function_exists('ldap_escape')) {
    define('LDAP_ESCAPE_FILTER', 0x01);
    define('LDAP_ESCAPE_DN',     0x02);

    /**
     * @param string $subject The subject string
     * @param string $ignore Set of characters to leave untouched
     * @param int $flags Any combination of LDAP_ESCAPE_* flags to indicate the
     *                   set(s) of characters to escape.
     * @return string
     */
    function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = array(
            LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
            LDAP_ESCAPE_DN     => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
        );

        // Pre-process the char maps on first call
        if (!isset($charMaps[0])) {
            $charMaps[0] = array();
            for ($i = 0; $i < 256; $i++) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);;
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_FILTER]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[LDAP_ESCAPE_FILTER][$i]);
                $charMaps[LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_DN]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_DN][$i];
                unset($charMaps[LDAP_ESCAPE_DN][$i]);
                $charMaps[LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int)$flags;
        $charMap = array();
        if ($flags & LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[LDAP_ESCAPE_FILTER];
        }
        if ($flags & LDAP_ESCAPE_DN) {
            $charMap += $charMaps[LDAP_ESCAPE_DN];
        }
        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string)$ignore;
        for ($i = 0, $l = strlen($ignore); $i < $l; $i++) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if LDAP_ESCAPE_DN is passed
        if ($flags & LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20' . substr($result, 1);
            }
            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1) . '\\20';
            }
        }

        return $result;
    }
}
 $user = 'Test , Name S.L';
$cn = ldap_escape($user, '', LDAP_ESCAPE_DN);
if (!ldap_add($ds, ""cn={$cn},"" . LDAP_DN_BASE, $info)) {
    include 'error_new_account.php';
}
 ","if (!function_exists('ldap_escape')) {
    define('LDAP_ESCAPE_FILTER', 0x01);
    define('LDAP_ESCAPE_DN',     0x02);

    /**
     * @param string $subject The subject string
     * @param string $ignore Set of characters to leave untouched
     * @param int $flags Any combination of LDAP_ESCAPE_* flags to indicate the
     *                   set(s) of characters to escape.
     * @return string
     */
    function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = array(
            LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
            LDAP_ESCAPE_DN     => array('\\', ',', '=', '+', '<', '>', ';', '""', '#'),
        );

        // Pre-process the char maps on first call
        if (!isset($charMaps[0])) {
            $charMaps[0] = array();
            for ($i = 0; $i < 256; $i++) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);;
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_FILTER]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[LDAP_ESCAPE_FILTER][$i]);
                $charMaps[LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_DN]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_DN][$i];
                unset($charMaps[LDAP_ESCAPE_DN][$i]);
                $charMaps[LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int)$flags;
        $charMap = array();
        if ($flags & LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[LDAP_ESCAPE_FILTER];
        }
        if ($flags & LDAP_ESCAPE_DN) {
            $charMap += $charMaps[LDAP_ESCAPE_DN];
        }
        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string)$ignore;
        for ($i = 0, $l = strlen($ignore); $i < $l; $i++) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if LDAP_ESCAPE_DN is passed
        if ($flags & LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20' . substr($result, 1);
            }
            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1) . '\\20';
            }
        }

        return $result;
    }
}
 $user = 'Test , Name S.L';
$cn = ldap_escape($user, '', LDAP_ESCAPE_DN);
if (!ldap_add($ds, ""cn={$cn},"" . LDAP_DN_BASE, $info)) {
    include 'error_new_account.php';
}
 ",TRUE,"<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Polyfill\Php56;

use Symfony\Polyfill\Util\Binary;

/**
 * @internal
 */
final class Php56
{
    const LDAP_ESCAPE_FILTER = 1;
    const LDAP_ESCAPE_DN = 2;

    public static function hash_equals($knownString, $userInput)
    {
        if (!is_string($knownString)) {
            trigger_error('Expected known_string to be a string, '.gettype($knownString).' given', E_USER_WARNING);

            return false;
        }

        if (!is_string($userInput)) {
            trigger_error('Expected user_input to be a string, '.gettype($userInput).' given', E_USER_WARNING);

            return false;
        }

        $knownLen = Binary::strlen($knownString);
        $userLen = Binary::strlen($userInput);

        if ($knownLen !== $userLen) {
            return false;
        }

        $result = 0;

        for ($i = 0; $i < $knownLen; ++$i) {
            $result |= ord($knownString[$i]) ^ ord($userInput[$i]);
        }

        return 0 === $result;
    }

    /**
     * Stub implementation of the {@link ldap_escape()} function of the ldap
     * extension.
     *
     * Escape strings for safe use in LDAP filters and DNs.
     *
     * @author Chris Wright <ldapi@daverandom.com>
     *
     * @param string $subject
     * @param string $ignore
     * @param int    $flags
     *
     * @return string
     *
     * @see http://stackoverflow.com/a/8561604
     */
    public static function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = null;

        if (null === $charMaps) {
            $charMaps = array(
                self::LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
                self::LDAP_ESCAPE_DN => array('\\', ',', '=', '+', '<', '>', ';', '""', '#', ""\r""),
            );

            $charMaps[0] = array();

            for ($i = 0; $i < 256; ++$i) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_FILTER]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[self::LDAP_ESCAPE_FILTER][$i]);
                $charMaps[self::LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_DN]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_DN][$i];
                unset($charMaps[self::LDAP_ESCAPE_DN][$i]);
                $charMaps[self::LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int) $flags;
        $charMap = array();

        if ($flags & self::LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[self::LDAP_ESCAPE_FILTER];
        }

        if ($flags & self::LDAP_ESCAPE_DN) {
            $charMap += $charMaps[self::LDAP_ESCAPE_DN];
        }

        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string) $ignore;

        for ($i = 0, $l = strlen($ignore); $i < $l; ++$i) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if self::LDAP_ESCAPE_DN is passed
        if ($flags & self::LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20'.substr($result, 1);
            }

            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1).'\\20';
            }
        }

        return $result;
    }
}
","<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Polyfill\Php56;

use Symfony\Polyfill\Util\Binary;

/**
 * @internal
 */
final class Php56
{
    const LDAP_ESCAPE_FILTER = 1;
    const LDAP_ESCAPE_DN = 2;

    public static function hash_equals($knownString, $userInput)
    {
        if (!is_string($knownString)) {
            trigger_error('Expected known_string to be a string, '.gettype($knownString).' given', E_USER_WARNING);

            return false;
        }

        if (!is_string($userInput)) {
            trigger_error('Expected user_input to be a string, '.gettype($userInput).' given', E_USER_WARNING);

            return false;
        }

        $knownLen = Binary::strlen($knownString);
        $userLen = Binary::strlen($userInput);

        if ($knownLen !== $userLen) {
            return false;
        }

        $result = 0;

        for ($i = 0; $i < $knownLen; ++$i) {
            $result |= ord($knownString[$i]) ^ ord($userInput[$i]);
        }

        return 0 === $result;
    }

    /**
     * Stub implementation of the {@link ldap_escape()} function of the ldap
     * extension.
     *
     * Escape strings for safe use in LDAP filters and DNs.
     *
     * @author Chris Wright <ldapi@daverandom.com>
     *
     * @param string $subject
     * @param string $ignore
     * @param int    $flags
     *
     * @return string
     *
     * @see http://stackoverflow.com/a/8561604
     */
    public static function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = null;

        if (null === $charMaps) {
            $charMaps = array(
                self::LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', ""\x00""),
                self::LDAP_ESCAPE_DN => array('\\', ',', '=', '+', '<', '>', ';', '""', '#', ""\r""),
            );

            $charMaps[0] = array();

            for ($i = 0; $i < 256; ++$i) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_FILTER]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[self::LDAP_ESCAPE_FILTER][$i]);
                $charMaps[self::LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[self::LDAP_ESCAPE_DN]); $i < $l; ++$i) {
                $chr = $charMaps[self::LDAP_ESCAPE_DN][$i];
                unset($charMaps[self::LDAP_ESCAPE_DN][$i]);
                $charMaps[self::LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int) $flags;
        $charMap = array();

        if ($flags & self::LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[self::LDAP_ESCAPE_FILTER];
        }

        if ($flags & self::LDAP_ESCAPE_DN) {
            $charMap += $charMaps[self::LDAP_ESCAPE_DN];
        }

        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string) $ignore;

        for ($i = 0, $l = strlen($ignore); $i < $l; ++$i) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if self::LDAP_ESCAPE_DN is passed
        if ($flags & self::LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20'.substr($result, 1);
            }

            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1).'\\20';
            }
        }

        return $result;
    }
}
",TRUE,,3986
3970,InitialSO.csv3970.txt,InitialGit.csv3970.txt,14,"function whichTransitionEvent(){
    var t;
    var el = document.createElement('fakeelement');
    var transitions = {
      'transition':'transitionend',
      'OTransition':'oTransitionEnd',
      'MozTransition':'transitionend',
      'WebkitTransition':'webkitTransitionEnd'
    }

    for(t in transitions){
        if( el.style[t] !== undefined ){
            return transitions[t];
        }
    }
}
 var transitionEnd = whichTransitionEvent();
element.addEventListener(transitionEnd, theFunctionToInvoke, false);
 ","function transitionEndEventName () {
    var i,
        undefined,
        el = document.createElement('div'),
        transitions = {
            'transition':'transitionend',
            'OTransition':'otransitionend',  // oTransitionEnd in very old Opera
            'MozTransition':'transitionend',
            'WebkitTransition':'webkitTransitionEnd'
        };

    for (i in transitions) {
        if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {
            return transitions[i];
        }
    }

    //TODO: throw 'TransitionEnd event is not supported in this browser'; 
}
 var transitionEnd = transitionEndEventName();
element.addEventListener(transitionEnd, theFunctionToInvoke, false);
 ",FALSE,"/**
 * Progress.js v0.1.0
 * https://github.com/usablica/progress.js
 * MIT licensed
 *
 * Copyright (C) 2013 usabli.ca - Afshin Mehrabani (@afshinmeh)
 */

(function (root, factory) {
  if (typeof exports === 'object') {
    // CommonJS
    factory(exports);
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['exports'], factory);
  } else {
    // Browser globals
    factory(root);
  }
} (this, function (exports) {
  //Default config/variables
  var VERSION = '0.1.0';

  /**
   * ProgressJs main class
   *
   * @class ProgressJs
   */
  function ProgressJs(obj) {

    if (typeof obj.length != 'undefined') {
      this._targetElement = obj; 
    } else {
      this._targetElement = [obj];
    }

    if (typeof window._progressjsId === 'undefined')
      window._progressjsId = 1;

    if (typeof window._progressjsIntervals === 'undefined') 
      window._progressjsIntervals = {};

    this._options = {
      //progress bar theme
      theme: 'blue',
      //overlay mode makes an overlay layer in the target element
      overlayMode: false,
      //to consider CSS3 transitions in events
      considerTransition: true
    };
  }

  /**
   * Start progress for specific element(s)
   *
   * @api private
   * @method _createContainer 
   */
  function _startProgress() {

    //call onBeforeStart callback
    if (typeof this._onBeforeStartCallback != 'undefined') {
      this._onBeforeStartCallback.call(this);
    }

    //create the container for progress bar
    _createContainer.call(this);

    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      _setProgress.call(this, this._targetElement[i]);
    }
  }

  /**
   * Set progress bar for specific element
   *
   * @api private
   * @method _setProgress
   * @param {Object} targetElement
   */
  function _setProgress(targetElement) {
    
    //if the target element already as `data-progressjs`, ignore the init
    if (targetElement.hasAttribute(""data-progressjs""))
      return;

    //get target element position
    var targetElementOffset = _getOffset.call(this, targetElement);

    targetElement.setAttribute(""data-progressjs"", window._progressjsId);
    
    var progressElementContainer = document.createElement('div');
    progressElementContainer.className = 'progressjs-progress progressjs-theme-' + this._options.theme;


    //set the position percent elements, it depends on targetElement tag
    if (targetElement.tagName.toLowerCase() === 'body') {
      progressElementContainer.style.position = 'fixed';
    } else {
      progressElementContainer.style.position = 'absolute';
    }

    progressElementContainer.setAttribute(""data-progressjs"", window._progressjsId);
    var progressElement = document.createElement(""div"");
    progressElement.className = ""progressjs-inner"";

    //create an element for current percent of progress bar
    var progressPercentElement = document.createElement('div');
    progressPercentElement.className = ""progressjs-percent"";
    progressPercentElement.innerHTML = ""1%"";

    progressElement.appendChild(progressPercentElement);
    
    if (this._options.overlayMode && targetElement.tagName.toLowerCase() === 'body') {
      //if we have `body` for target element and also overlay mode is enable, we should use a different
      //position for progress bar container element
      progressElementContainer.style.left   = 0;
      progressElementContainer.style.right  = 0;
      progressElementContainer.style.top    = 0;
      progressElementContainer.style.bottom = 0;
    } else {
      //set progress bar container size and offset
      progressElementContainer.style.left  = targetElementOffset.left + 'px';
      progressElementContainer.style.top   = targetElementOffset.top + 'px';
      progressElementContainer.style.width = targetElementOffset.width + 'px';

      if (this._options.overlayMode) {
        progressElementContainer.style.height = targetElementOffset.height + 'px';
      }
    }

    progressElementContainer.appendChild(progressElement);

    //append the element to container
    var container = document.querySelector('.progressjs-container');
    container.appendChild(progressElementContainer);

    _setPercentFor(targetElement, 1);

    //and increase the progressId
    ++window._progressjsId;
  }

  /**
   * Set percent for all elements
   *
   * @api private
   * @method _setPercent
   * @param {Number} percent
   */
  function _setPercent(percent) {
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      _setPercentFor.call(this, this._targetElement[i], percent);
    }
  }

  /**
   * Set percent for specific element
   *
   * @api private
   * @method _setPercentFor
   * @param {Object} targetElement
   * @param {Number} percent
   */
  function _setPercentFor(targetElement, percent) {
    var self = this;
    
    //prevent overflow!
    if (percent >= 100)
      percent = 100;

    if (targetElement.hasAttribute(""data-progressjs"")) {
      //setTimeout for better CSS3 animation applying in some cases
      setTimeout(function() {

        //call the onprogress callback
        if (typeof self._onProgressCallback != 'undefined') {
          self._onProgressCallback.call(self, targetElement, percent);
        }

        var percentElement = _getPercentElement(targetElement);
        percentElement.style.width = parseInt(percent) + '%';

        var percentElement  = percentElement.querySelector("".progressjs-percent"");
        var existingPercent = parseInt(percentElement.innerHTML.replace('%', ''));

        //start increase/decrease the percent element with animation
        (function(percentElement, existingPercent, currentPercent) {

          var increasement = true;
          if (existingPercent > currentPercent) {
            increasement = false;
          }
          
          var intervalIn = 10;
          function changePercentTimer(percentElement, existingPercent, currentPercent) {
            //calculate the distance between two percents
            var distance = Math.abs(existingPercent - currentPercent);
            if (distance < 3) {
              intervalIn = 30;
            } else if (distance < 20) {
              intervalIn = 20;
            } else {
              intervanIn = 1;
            }

            if ((existingPercent - currentPercent) != 0) {
              //set the percent
              percentElement.innerHTML = (increasement ? (++existingPercent) : (--existingPercent)) + '%';
              setTimeout(function() { changePercentTimer(percentElement, existingPercent, currentPercent); }, intervalIn);
            }
          }
          
          changePercentTimer(percentElement, existingPercent, currentPercent);
          
        })(percentElement, existingPercent, parseInt(percent));
        
      }, 50);
    }
  }

  /**
   * Get the progress bar element 
   *
   * @api private
   * @method _getPercentElement
   * @param {Object} targetElement
   */
  function _getPercentElement(targetElement) {
    var progressjsId = parseInt(targetElement.getAttribute('data-progressjs'));
    return document.querySelector('.progressjs-container > .progressjs-progress[data-progressjs=""' + progressjsId + '""] > .progressjs-inner');  
  }

  /**
   * Auto increase the progress bar every X milliseconds
   *
   * @api private
   * @method _autoIncrease
   * @param {Number} size
   * @param {Number} millisecond
   */
  function _autoIncrease(size, millisecond) {
    var self = this;
    
    var progressjsId = parseInt(this._targetElement[0].getAttribute('data-progressjs'));
    
    if (typeof window._progressjsIntervals[progressjsId] != 'undefined') {
      clearInterval(window._progressjsIntervals[progressjsId]);
    }
    window._progressjsIntervals[progressjsId] = setInterval(function() {
      _increasePercent.call(self, size);
    }, millisecond);
  }

  /**
   * Increase the size of progress bar
   *
   * @api private
   * @method _increasePercent
   * @param {Number} size
   */
  function _increasePercent(size) {
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      var currentElement = this._targetElement[i];
      if (currentElement.hasAttribute('data-progressjs')) {
        var percentElement  = _getPercentElement(currentElement);
        var existingPercent = parseInt(percentElement.style.width.replace('%', ''));
        if (existingPercent) {
          _setPercentFor.call(this, currentElement, existingPercent + (size || 1));
        }
      }
    }
  }

  /**
   * Close and remove progress bar 
   *
   * @api private
   * @method _end
   */
  function _end() {

    //call onBeforeEnd callback
    if (typeof this._onBeforeEndCallback != 'undefined') {
      if (this._options.considerTransition === true) {
        //we can safety assume that all layers would be the same, so `this._targetElement[0]` is the same as `this._targetElement[1]`
        _getPercentElement(this._targetElement[0]).addEventListener(whichTransitionEvent(), this._onBeforeEndCallback, false);
      } else {
        this._onBeforeEndCallback.call(this);
      }
    } 

    var progressjsId = parseInt(this._targetElement[0].getAttribute('data-progressjs'));
    
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      var currentElement = this._targetElement[i];
      var percentElement = _getPercentElement(currentElement);

      if (!percentElement)
        return;

      var existingPercent = parseInt(percentElement.style.width.replace('%', ''));
      
      var timeoutSec = 1;
      if (existingPercent < 100) {
        _setPercentFor.call(this, currentElement, 100);
        timeoutSec = 500;
      }

      //I believe I should handle this situation with eventListener and `transitionend` event but I'm not sure
      //about compatibility with IEs. Should be fixed in further versions.
      (function(percentElement, currentElement) {
        setTimeout(function() {
          percentElement.parentNode.className += "" progressjs-end"";

          setTimeout(function() {
            //remove the percent element from page
            percentElement.parentNode.parentNode.removeChild(percentElement.parentNode);
            //and remove the attribute
            currentElement.removeAttribute(""data-progressjs"");
          }, 1000);
        }, timeoutSec);
      })(percentElement, currentElement);
    }

    //clean the setInterval for autoIncrease function
    if (window._progressjsIntervals[progressjsId]) {
      //`delete` keyword has some problems in IE
      try {
        clearInterval(window._progressjsIntervals[progressjsId]);
        window._progressjsIntervals[progressjsId] = null;
        delete window._progressjsIntervals[progressjsId];
      } catch(ex) { }
    }
  }

  /**
   * Create the progress bar container
   *
   * @api private
   * @method _createContainer
   */
  function _createContainer() {
    //first check if we have an container already, we don't need to create it again
    if (!document.querySelector("".progressjs-container"")) {
      var containerElement = document.createElement(""div"");
      containerElement.className = ""progressjs-container"";
      document.body.appendChild(containerElement);
    }
  }

  /**
   * Get an element position on the page
   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966
   *
   * @api private
   * @method _getOffset
   * @param {Object} element
   * @returns Element's position info
   */
  function _getOffset(element) {
    var elementPosition = {};

    if (element.tagName.toLowerCase() === 'body') {
      //set width
      elementPosition.width = element.clientWidth;
      //set height
      elementPosition.height = element.clientHeight;
    } else {
      //set width
      elementPosition.width = element.offsetWidth;
      //set height
      elementPosition.height = element.offsetHeight;
    }

    //calculate element top and left
    var _x = 0;
    var _y = 0;
    while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
      _x += element.offsetLeft;
      _y += element.offsetTop;
      element = element.offsetParent;
    }
    //set top
    elementPosition.top = _y;
    //set left
    elementPosition.left = _x;

    return elementPosition;
  }

  /**
   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically
   *
   * @param obj1
   * @param obj2
   * @returns obj3 a new object based on obj1 and obj2
   */
  function _mergeOptions(obj1, obj2) {
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }

  var progressJs = function (targetElm) {
    if (typeof (targetElm) === 'object') {
      //Ok, create a new instance
      return new ProgressJs(targetElm);

    } else if (typeof (targetElm) === 'string') {
      //select the target element with query selector
      var targetElement = document.querySelectorAll(targetElm);
       
      if (targetElement) {
        return new ProgressJs(targetElement);
      } else {
        throw new Error('There is no element with given selector.');
      }
    } else {
      return new ProgressJs(document.body);
    }
  };

  /**
   * Get correct transition callback
   * Thanks @webinista: http://stackoverflow.com/a/9090128/375966
   *
   * @returns transition name
   */
  function whichTransitionEvent() {
    var t;
    var el = document.createElement('fakeelement');
    var transitions = {
      'transition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    }

    for (t in transitions) {
      if (el.style[t] !== undefined) {
        return transitions[t];
      }
    }
  }

  /**
   * Current ProgressJs version
   *
   * @property version
   * @type String
   */
  progressJs.version = VERSION;

  //Prototype
  progressJs.fn = ProgressJs.prototype = {
    clone: function () {
      return new ProgressJs(this);
    },
    setOption: function(option, value) {
      this._options[option] = value;
      return this;
    },
    setOptions: function(options) {
      this._options = _mergeOptions(this._options, options);
      return this;
    },
    start: function() {
      _startProgress.call(this);
      return this;
    },
    set: function(percent) {
      _setPercent.call(this, percent);
      return this;
    },
    increase: function(size) {
      _increasePercent.call(this, size);
      return this;
    },
    autoIncrease: function(size, millisecond) {
      _autoIncrease.call(this, size, millisecond);
      return this;
    },
    end: function() {
      _end.call(this);
      return this;
    },
    onbeforeend: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onBeforeEndCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onbeforeend was not a function');
      }
      return this;
    },
    onbeforestart: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onBeforeStartCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onbeforestart was not a function');
      }
      return this;
    },
    onprogress: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onProgressCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onprogress was not a function');
      }
      return this;
    }
  };

  exports.progressJs = progressJs;
  return progressJs;
}));
","/**
 * Progress.js v0.1.0
 * https://github.com/usablica/progress.js
 * MIT licensed
 *
 * Copyright (C) 2013 usabli.ca - Afshin Mehrabani (@afshinmeh)
 */

(function (root, factory) {
  if (typeof exports === 'object') {
    // CommonJS
    factory(exports);
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['exports'], factory);
  } else {
    // Browser globals
    factory(root);
  }
} (this, function (exports) {
  //Default config/variables
  var VERSION = '0.1.0';

  /**
   * ProgressJs main class
   *
   * @class ProgressJs
   */
  function ProgressJs(obj) {

    if (typeof obj.length != 'undefined') {
      this._targetElement = obj; 
    } else {
      this._targetElement = [obj];
    }

    if (typeof window._progressjsId === 'undefined')
      window._progressjsId = 1;

    if (typeof window._progressjsIntervals === 'undefined') 
      window._progressjsIntervals = {};

    this._options = {
      //progress bar theme
      theme: 'blue',
      //overlay mode makes an overlay layer in the target element
      overlayMode: false,
      //to consider CSS3 transitions in events
      considerTransition: true
    };
  }

  /**
   * Start progress for specific element(s)
   *
   * @api private
   * @method _createContainer 
   */
  function _startProgress() {

    //call onBeforeStart callback
    if (typeof this._onBeforeStartCallback != 'undefined') {
      this._onBeforeStartCallback.call(this);
    }

    //create the container for progress bar
    _createContainer.call(this);

    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      _setProgress.call(this, this._targetElement[i]);
    }
  }

  /**
   * Set progress bar for specific element
   *
   * @api private
   * @method _setProgress
   * @param {Object} targetElement
   */
  function _setProgress(targetElement) {
    
    //if the target element already as `data-progressjs`, ignore the init
    if (targetElement.hasAttribute(""data-progressjs""))
      return;

    //get target element position
    var targetElementOffset = _getOffset.call(this, targetElement);

    targetElement.setAttribute(""data-progressjs"", window._progressjsId);
    
    var progressElementContainer = document.createElement('div');
    progressElementContainer.className = 'progressjs-progress progressjs-theme-' + this._options.theme;


    //set the position percent elements, it depends on targetElement tag
    if (targetElement.tagName.toLowerCase() === 'body') {
      progressElementContainer.style.position = 'fixed';
    } else {
      progressElementContainer.style.position = 'absolute';
    }

    progressElementContainer.setAttribute(""data-progressjs"", window._progressjsId);
    var progressElement = document.createElement(""div"");
    progressElement.className = ""progressjs-inner"";

    //create an element for current percent of progress bar
    var progressPercentElement = document.createElement('div');
    progressPercentElement.className = ""progressjs-percent"";
    progressPercentElement.innerHTML = ""1%"";

    progressElement.appendChild(progressPercentElement);
    
    if (this._options.overlayMode && targetElement.tagName.toLowerCase() === 'body') {
      //if we have `body` for target element and also overlay mode is enable, we should use a different
      //position for progress bar container element
      progressElementContainer.style.left   = 0;
      progressElementContainer.style.right  = 0;
      progressElementContainer.style.top    = 0;
      progressElementContainer.style.bottom = 0;
    } else {
      //set progress bar container size and offset
      progressElementContainer.style.left  = targetElementOffset.left + 'px';
      progressElementContainer.style.top   = targetElementOffset.top + 'px';
      //if targetElement is body set to percent so it scales with browser resize
      if (targetElement.nodeName == 'BODY') {
        progressElementContainer.style.width = '100%';
      } else {
        progressElementContainer.style.width = targetElementOffset.width + 'px';
      }

      if (this._options.overlayMode) {
        progressElementContainer.style.height = targetElementOffset.height + 'px';
      }
    }

    progressElementContainer.appendChild(progressElement);

    //append the element to container
    var container = document.querySelector('.progressjs-container');
    container.appendChild(progressElementContainer);

    _setPercentFor(targetElement, 1);

    //and increase the progressId
    ++window._progressjsId;
  }

  /**
   * Set percent for all elements
   *
   * @api private
   * @method _setPercent
   * @param {Number} percent
   */
  function _setPercent(percent) {
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      _setPercentFor.call(this, this._targetElement[i], percent);
    }
  }

  /**
   * Set percent for specific element
   *
   * @api private
   * @method _setPercentFor
   * @param {Object} targetElement
   * @param {Number} percent
   */
  function _setPercentFor(targetElement, percent) {
    var self = this;
    
    //prevent overflow!
    if (percent >= 100)
      percent = 100;

    if (targetElement.hasAttribute(""data-progressjs"")) {
      //setTimeout for better CSS3 animation applying in some cases
      setTimeout(function() {

        //call the onprogress callback
        if (typeof self._onProgressCallback != 'undefined') {
          self._onProgressCallback.call(self, targetElement, percent);
        }

        var percentElement = _getPercentElement(targetElement);
        percentElement.style.width = parseInt(percent) + '%';

        var percentElement  = percentElement.querySelector("".progressjs-percent"");
        var existingPercent = parseInt(percentElement.innerHTML.replace('%', ''));

        //start increase/decrease the percent element with animation
        (function(percentElement, existingPercent, currentPercent) {

          var increasement = true;
          if (existingPercent > currentPercent) {
            increasement = false;
          }
          
          var intervalIn = 10;
          function changePercentTimer(percentElement, existingPercent, currentPercent) {
            //calculate the distance between two percents
            var distance = Math.abs(existingPercent - currentPercent);
            if (distance < 3) {
              intervalIn = 30;
            } else if (distance < 20) {
              intervalIn = 20;
            } else {
              intervanIn = 1;
            }

            if ((existingPercent - currentPercent) != 0) {
              //set the percent
              percentElement.innerHTML = (increasement ? (++existingPercent) : (--existingPercent)) + '%';
              setTimeout(function() { changePercentTimer(percentElement, existingPercent, currentPercent); }, intervalIn);
            }
          }
          
          changePercentTimer(percentElement, existingPercent, currentPercent);
          
        })(percentElement, existingPercent, parseInt(percent));
        
      }, 50);
    }
  }

  /**
   * Get the progress bar element 
   *
   * @api private
   * @method _getPercentElement
   * @param {Object} targetElement
   */
  function _getPercentElement(targetElement) {
    var progressjsId = parseInt(targetElement.getAttribute('data-progressjs'));
    return document.querySelector('.progressjs-container > .progressjs-progress[data-progressjs=""' + progressjsId + '""] > .progressjs-inner');  
  }

  /**
   * Auto increase the progress bar every X milliseconds
   *
   * @api private
   * @method _autoIncrease
   * @param {Number} size
   * @param {Number} millisecond
   */
  function _autoIncrease(size, millisecond) {
    var self = this;

    var target = this._targetElement[0];
    if(!target) return;
    var progressjsId = parseInt(target.getAttribute('data-progressjs'));
    
    if (typeof window._progressjsIntervals[progressjsId] != 'undefined') {
      clearInterval(window._progressjsIntervals[progressjsId]);
    }
    window._progressjsIntervals[progressjsId] = setInterval(function() {
      _increasePercent.call(self, size);
    }, millisecond);
  }

  /**
   * Increase the size of progress bar
   *
   * @api private
   * @method _increasePercent
   * @param {Number} size
   */
  function _increasePercent(size) {
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      var currentElement = this._targetElement[i];
      if (currentElement.hasAttribute('data-progressjs')) {
        var percentElement  = _getPercentElement(currentElement);
        var existingPercent = parseInt(percentElement.style.width.replace('%', ''));
        if (existingPercent) {
          _setPercentFor.call(this, currentElement, existingPercent + (size || 1));
        }
      }
    }
  }

  /**
   * Close and remove progress bar 
   *
   * @api private
   * @method _end
   */
  function _end() {

    //call onBeforeEnd callback
    if (typeof this._onBeforeEndCallback != 'undefined') {
      if (this._options.considerTransition === true) {
        //we can safety assume that all layers would be the same, so `this._targetElement[0]` is the same as `this._targetElement[1]`
        _getPercentElement(this._targetElement[0]).addEventListener(whichTransitionEvent(), this._onBeforeEndCallback, false);
      } else {
        this._onBeforeEndCallback.call(this);
      }
    }

    var target = this._targetElement[0];
    if(!target) return;
    var progressjsId = parseInt(target.getAttribute('data-progressjs'));
    
    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      var currentElement = this._targetElement[i];
      var percentElement = _getPercentElement(currentElement);

      if (!percentElement)
        return;

      var existingPercent = parseInt(percentElement.style.width.replace('%', ''));
      
      var timeoutSec = 1;
      if (existingPercent < 100) {
        _setPercentFor.call(this, currentElement, 100);
        timeoutSec = 500;
      }

      //I believe I should handle this situation with eventListener and `transitionend` event but I'm not sure
      //about compatibility with IEs. Should be fixed in further versions.
      (function(percentElement, currentElement) {
        setTimeout(function() {
          percentElement.parentNode.className += "" progressjs-end"";

          setTimeout(function() {
            //remove the percent element from page
            percentElement.parentNode.parentNode.removeChild(percentElement.parentNode);
            //and remove the attribute
            currentElement.removeAttribute(""data-progressjs"");
          }, 1000);
        }, timeoutSec);
      })(percentElement, currentElement);
    }

    //clean the setInterval for autoIncrease function
    if (window._progressjsIntervals[progressjsId]) {
      //`delete` keyword has some problems in IE
      try {
        clearInterval(window._progressjsIntervals[progressjsId]);
        window._progressjsIntervals[progressjsId] = null;
        delete window._progressjsIntervals[progressjsId];
      } catch(ex) { }
    }
  }

  /**
   * Remove progress bar without finishing
   *
   * @api private
   * @method _kill
   */
  function _kill() {
    var target = this._targetElement[0];
    if(!target) return;
    var progressjsId = parseInt(target.getAttribute('data-progressjs'));

    for (var i = 0, elmsLength = this._targetElement.length; i < elmsLength; i++) {
      var currentElement = this._targetElement[i];
      var percentElement = _getPercentElement(currentElement);

      if (!percentElement)
        return;

      //I believe I should handle this situation with eventListener and `transitionend` event but I'm not sure
      //about compatibility with IEs. Should be fixed in further versions.
      (function(percentElement, currentElement) {
        percentElement.parentNode.className += "" progressjs-end"";

        setTimeout(function() {
          //remove the percent element from page
          percentElement.parentNode.parentNode.removeChild(percentElement.parentNode);
          //and remove the attribute
          currentElement.removeAttribute(""data-progressjs"");
        }, 1000);
      })(percentElement, currentElement);
    }

    //clean the setInterval for autoIncrease function
    if (window._progressjsIntervals[progressjsId]) {
      //`delete` keyword has some problems in IE
      try {
        clearInterval(window._progressjsIntervals[progressjsId]);
        window._progressjsIntervals[progressjsId] = null;
        delete window._progressjsIntervals[progressjsId];
      } catch(ex) { }
    }
  }

  /**
   * Create the progress bar container
   *
   * @api private
   * @method _createContainer
   */
  function _createContainer() {
    //first check if we have an container already, we don't need to create it again
    if (!document.querySelector("".progressjs-container"")) {
      var containerElement = document.createElement(""div"");
      containerElement.className = ""progressjs-container"";
      document.body.appendChild(containerElement);
    }
  }

  /**
   * Get an element position on the page
   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966
   *
   * @api private
   * @method _getOffset
   * @param {Object} element
   * @returns Element's position info
   */
  function _getOffset(element) {
    var elementPosition = {};

    if (element.tagName.toLowerCase() === 'body') {
      //set width
      elementPosition.width = element.clientWidth;
      //set height
      elementPosition.height = element.clientHeight;
    } else {
      //set width
      elementPosition.width = element.offsetWidth;
      //set height
      elementPosition.height = element.offsetHeight;
    }

    //calculate element top and left
    var _x = 0;
    var _y = 0;
    while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {
      _x += element.offsetLeft;
      _y += element.offsetTop;
      element = element.offsetParent;
    }
    //set top
    elementPosition.top = _y;
    //set left
    elementPosition.left = _x;

    return elementPosition;
  }

  /**
   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically
   *
   * @param obj1
   * @param obj2
   * @returns obj3 a new object based on obj1 and obj2
   */
  function _mergeOptions(obj1, obj2) {
    var obj3 = {};
    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
    return obj3;
  }

  var progressJs = function (targetElm) {
    if (typeof (targetElm) === 'object') {
      //Ok, create a new instance
      return new ProgressJs(targetElm);

    } else if (typeof (targetElm) === 'string') {
      //select the target element with query selector
      var targetElement = document.querySelectorAll(targetElm);
       
      if (targetElement) {
        return new ProgressJs(targetElement);
      } else {
        throw new Error('There is no element with given selector.');
      }
    } else {
      return new ProgressJs(document.body);
    }
  };

  /**
   * Get correct transition callback
   * Thanks @webinista: http://stackoverflow.com/a/9090128/375966
   *
   * @returns transition name
   */
  function whichTransitionEvent() {
    var t;
    var el = document.createElement('fakeelement');
    var transitions = {
      'transition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'MozTransition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd'
    }

    for (t in transitions) {
      if (el.style[t] !== undefined) {
        return transitions[t];
      }
    }
  }

  /**
   * Current ProgressJs version
   *
   * @property version
   * @type String
   */
  progressJs.version = VERSION;

  //Prototype
  progressJs.fn = ProgressJs.prototype = {
    clone: function () {
      return new ProgressJs(this);
    },
    setOption: function(option, value) {
      this._options[option] = value;
      return this;
    },
    setOptions: function(options) {
      this._options = _mergeOptions(this._options, options);
      return this;
    },
    start: function() {
      _startProgress.call(this);
      return this;
    },
    set: function(percent) {
      _setPercent.call(this, percent);
      return this;
    },
    increase: function(size) {
      _increasePercent.call(this, size);
      return this;
    },
    autoIncrease: function(size, millisecond) {
      _autoIncrease.call(this, size, millisecond);
      return this;
    },
    end: function() {
      _end.call(this);
      return this;
    },
    kill: function() {
      _kill.call(this);
      return this;
    },
    onbeforeend: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onBeforeEndCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onbeforeend was not a function');
      }
      return this;
    },
    onbeforestart: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onBeforeStartCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onbeforestart was not a function');
      }
      return this;
    },
    onprogress: function(providedCallback) {
      if (typeof (providedCallback) === 'function') {
        this._onProgressCallback = providedCallback;
      } else {
        throw new Error('Provided callback for onprogress was not a function');
      }
      return this;
    }
  };

  exports.progressJs = progressJs;
  return progressJs;
}));
",FALSE,,3987
3973,InitialSO.csv3973.txt,InitialGit.csv3973.txt,16,"/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 */
function hslToRgb(h, s, l){
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}
 ","/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(h, s, l){
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        var hue2rgb = function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}
 /**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(r, g, b){
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min){
        h = s = 0; // achromatic
    }else{
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l];
}
 ",FALSE,"/*eslint sort-vars:0, curly:0*/

'use strict';

/**
 * Converts a hex CSS color value to RGB.
 * Adapted from http://stackoverflow.com/a/5624139.
 *
 * @param	String	hex		The hexadecimal color value
 * @return	Object			The RGB representation
 */
function hex2rgb(hex) {
	// Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
	var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	hex = hex.replace(shorthandRegex, function (m, r, g, b) {
		return r + r + g + g + b + b;
	});

	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		r: parseInt(result[1], 16),
		g: parseInt(result[2], 16),
		b: parseInt(result[3], 16)
	} : null;
}

/**
 * Converts an RGB color value to HSL. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Object  rgb     RGB as r, g, and b keys
 * @return  Object          HSL as h, s, and l keys
 */
function rgb2hsl(rgb) {
	var r = rgb.r, g = rgb.g, b = rgb.b;
	r /= 255; g /= 255; b /= 255;
	var max = Math.max(r, g, b), min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max === min) {
		h = s = 0; // achromatic
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch (max) {
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}

	return { h: h, s: s, l: l };
}

/**
 * Converts an HSL color value to RGB. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Object  hsl     HSL as h, s, and l keys
 * @return  Object          RGB as r, g, and b values
 */
function hsl2rgb(hsl) {
	var h = hsl.h, s = hsl.s, l = hsl.l;
	var r, g, b;

	if(s === 0){
		r = g = b = l; // achromatic
	}else{
		function hue2rgb(p, q, t) {
			if (t < 0) t += 1;
			if (t > 1) t -= 1;
			if (t < 1 / 6) return p + (q - p) * 6 * t;
			if (t < 1 / 2) return q;
			if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
			return p;
		}

		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		r = hue2rgb(p, q, h + 1 / 3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1 / 3);
	}

	return {
		r: Math.round(r * 255),
		g: Math.round(g * 255),
		b: Math.round(b * 255)
	};
}

module.exports = {
	hex2rgb: hex2rgb,
	rgb2hsl: rgb2hsl,
	hsl2rgb: hsl2rgb,
	rgb2rgbString: function (rgb) {
		return 'rgb(' + [rgb.r, rgb.g, rgb.b].join(',') + ')';
	}
};
","/*eslint sort-vars:0, curly:0*/

'use strict';

/**
 * Converts a hex CSS color value to RGB.
 * Adapted from http://stackoverflow.com/a/5624139.
 *
 * @param	String	hex		The hexadecimal color value
 * @return	Object			The RGB representation
 */
function hex2rgb(hex) {
	// Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
	var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	hex = hex.replace(shorthandRegex, function (m, r, g, b) {
		return r + r + g + g + b + b;
	});

	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		r: parseInt(result[1], 16),
		g: parseInt(result[2], 16),
		b: parseInt(result[3], 16)
	} : null;
}

/**
 * Converts an RGB color value to a hex string.
 * @param  Object rgb RGB as r, g, and b keys
 * @return String     Hex color string
 */
function rgb2hex(rgb) {
	return '#' + ['r', 'g', 'b'].map(function (key) {
		return ('0' + rgb[key].toString(16)).slice(-2);
	}).join('');
}

/**
 * Converts an RGB color value to HSL. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Object  rgb     RGB as r, g, and b keys
 * @return  Object          HSL as h, s, and l keys
 */
function rgb2hsl(rgb) {
	var r = rgb.r, g = rgb.g, b = rgb.b;
	r /= 255; g /= 255; b /= 255;
	var max = Math.max(r, g, b), min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max === min) {
		h = s = 0; // achromatic
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch (max) {
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}

	return { h: h, s: s, l: l };
}

/**
 * Converts an HSL color value to RGB. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Object  hsl     HSL as h, s, and l keys
 * @return  Object          RGB as r, g, and b values
 */
function hsl2rgb(hsl) {

	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1 / 6) return p + (q - p) * 6 * t;
		if (t < 1 / 2) return q;
		if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
		return p;
	}

	var h = hsl.h, s = hsl.s, l = hsl.l;
	var r, g, b;

	if(s === 0){
		r = g = b = l; // achromatic
	}else{

		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		r = hue2rgb(p, q, h + 1 / 3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1 / 3);
	}

	return {
		r: Math.round(r * 255),
		g: Math.round(g * 255),
		b: Math.round(b * 255)
	};
}

module.exports = {
	hex2rgb: hex2rgb,
	rgb2hex: rgb2hex,
	rgb2hsl: rgb2hsl,
	hsl2rgb: hsl2rgb,
	rgb2rgbString: function (rgb) {
		return 'rgb(' + [rgb.r, rgb.g, rgb.b].join(',') + ')';
	}
};
",FALSE,,3988
3974,InitialSO.csv3974.txt,InitialGit.csv3974.txt,11,"/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(h, s, l){
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        var hue2rgb = function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}
 /**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(r, g, b){
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min){
        h = s = 0; // achromatic
    }else{
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l];
}
 ","/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(h, s, l){
    var r, g, b;

    if(s == 0){
        r = g = b = l; // achromatic
    }else{
        var hue2rgb = function hue2rgb(p, q, t){
            if(t < 0) t += 1;
            if(t > 1) t -= 1;
            if(t < 1/6) return p + (q - p) * 6 * t;
            if(t < 1/2) return q;
            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}
 /**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(r, g, b){
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min){
        h = s = 0; // achromatic
    }else{
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    return [h, s, l];
}
 ",TRUE,"/*eslint sort-vars:0, curly:0*/

'use strict';

/**
 * Converts a hex CSS color value to RGB.
 * Adapted from http://stackoverflow.com/a/5624139.
 *
 * @param	String	hex		The hexadecimal color value
 * @return	Object			The RGB representation
 */
function hex2rgb(hex) {
	// Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
	var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	hex = hex.replace(shorthandRegex, function (m, r, g, b) {
		return r + r + g + g + b + b;
	});

	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		r: parseInt(result[1], 16),
		g: parseInt(result[2], 16),
		b: parseInt(result[3], 16)
	} : null;
}

/**
 * Converts an RGB color value to a hex string.
 * @param  Object rgb RGB as r, g, and b keys
 * @return String     Hex color string
 */
function rgb2hex(rgb) {
	return '#' + ['r', 'g', 'b'].map(function (key) {
		return ('0' + rgb[key].toString(16)).slice(-2);
	}).join('');
}

/**
 * Converts an RGB color value to HSL. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Object  rgb     RGB as r, g, and b keys
 * @return  Object          HSL as h, s, and l keys
 */
function rgb2hsl(rgb) {
	var r = rgb.r, g = rgb.g, b = rgb.b;
	r /= 255; g /= 255; b /= 255;
	var max = Math.max(r, g, b), min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max === min) {
		h = s = 0; // achromatic
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch (max) {
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}

	return { h: h, s: s, l: l };
}

/**
 * Converts an HSL color value to RGB. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Object  hsl     HSL as h, s, and l keys
 * @return  Object          RGB as r, g, and b values
 */
function hsl2rgb(hsl) {

	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1 / 6) return p + (q - p) * 6 * t;
		if (t < 1 / 2) return q;
		if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
		return p;
	}

	var h = hsl.h, s = hsl.s, l = hsl.l;
	var r, g, b;

	if(s === 0){
		r = g = b = l; // achromatic
	}else{

		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		r = hue2rgb(p, q, h + 1 / 3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1 / 3);
	}

	return {
		r: Math.round(r * 255),
		g: Math.round(g * 255),
		b: Math.round(b * 255)
	};
}

module.exports = {
	hex2rgb: hex2rgb,
	rgb2hex: rgb2hex,
	rgb2hsl: rgb2hsl,
	hsl2rgb: hsl2rgb,
	rgb2rgbString: function (rgb) {
		return 'rgb(' + [rgb.r, rgb.g, rgb.b].join(',') + ')';
	}
};
","/*eslint sort-vars:0, curly:0*/

'use strict';

/**
 * Converts a hex CSS color value to RGB.
 * Adapted from http://stackoverflow.com/a/5624139.
 *
 * @param	String	hex		The hexadecimal color value
 * @return	Object			The RGB representation
 */
function hex2rgb(hex) {
	// Expand shorthand form (e.g. ""03F"") to full form (e.g. ""0033FF"")
	var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	hex = hex.replace(shorthandRegex, function (m, r, g, b) {
		return r + r + g + g + b + b;
	});

	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
		r: parseInt(result[1], 16),
		g: parseInt(result[2], 16),
		b: parseInt(result[3], 16)
	} : null;
}

/**
 * Converts an RGB color value to a hex string.
 * @param  Object rgb RGB as r, g, and b keys
 * @return String     Hex color string
 */
function rgb2hex(rgb) {
	return '#' + ['r', 'g', 'b'].map(function (key) {
		return ('0' + rgb[key].toString(16)).slice(-2);
	}).join('');
}

/**
 * Converts an RGB color value to HSL. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Object  rgb     RGB as r, g, and b keys
 * @return  Object          HSL as h, s, and l keys
 */
function rgb2hsl(rgb) {
	var r = rgb.r, g = rgb.g, b = rgb.b;
	r /= 255; g /= 255; b /= 255;
	var max = Math.max(r, g, b), min = Math.min(r, g, b);
	var h, s, l = (max + min) / 2;

	if (max === min) {
		h = s = 0; // achromatic
	} else {
		var d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		switch (max) {
			case r: h = (g - b) / d + (g < b ? 6 : 0); break;
			case g: h = (b - r) / d + 2; break;
			case b: h = (r - g) / d + 4; break;
		}
		h /= 6;
	}

	return { h: h, s: s, l: l };
}

/**
 * Converts an HSL color value to RGB. Conversion formula adapted from
 * http://en.wikipedia.org/wiki/HSL_color_space. This function adapted
 * from http://stackoverflow.com/a/9493060.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Object  hsl     HSL as h, s, and l keys
 * @return  Object          RGB as r, g, and b values
 */
function hsl2rgb(hsl) {

	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1 / 6) return p + (q - p) * 6 * t;
		if (t < 1 / 2) return q;
		if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
		return p;
	}

	var h = hsl.h, s = hsl.s, l = hsl.l;
	var r, g, b;

	if(s === 0){
		r = g = b = l; // achromatic
	}else{

		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		r = hue2rgb(p, q, h + 1 / 3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1 / 3);
	}

	return {
		r: Math.round(r * 255),
		g: Math.round(g * 255),
		b: Math.round(b * 255)
	};
}

module.exports = {
	hex2rgb: hex2rgb,
	rgb2hex: rgb2hex,
	rgb2hsl: rgb2hsl,
	hsl2rgb: hsl2rgb,
	rgb2rgbString: function (rgb) {
		return 'rgb(' + [rgb.r, rgb.g, rgb.b].join(',') + ')';
	}
};
",TRUE,,3989
3976,InitialSO.csv3976.txt,InitialGit.csv3976.txt,4,"rm -f import os
import shutil

def rm_r(path):
    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)
 rm -f shutils.rmtree $ mkdir rmtest
$ cd rmtest/
$ echo ""stuff"" > myfile
$ ls
myfile
$ rm -rf myfile 
$ ls
$ echo ""stuff"" > myfile
$ ls
myfile
$ python
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import shutil
>>> shutil.rmtree('myfile')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib/python2.7/shutil.py"", line 236, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File ""/usr/lib/python2.7/shutil.py"", line 234, in rmtree
    names = os.listdir(path)
OSError: [Errno 20] Not a directory: 'myfile'
 ","rm -f import os
import shutil

def rm_r(path):
    if os.path.isdir(path) and not os.path.islink(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)
 stat rm -f shutils.rmtree $ mkdir rmtest
$ cd rmtest/
$ echo ""stuff"" > myfile
$ ls
myfile
$ rm -rf myfile 
$ ls
$ echo ""stuff"" > myfile
$ ls
myfile
$ python
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import shutil
>>> shutil.rmtree('myfile')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib/python2.7/shutil.py"", line 236, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File ""/usr/lib/python2.7/shutil.py"", line 234, in rmtree
    names = os.listdir(path)
OSError: [Errno 20] Not a directory: 'myfile'
 ",FALSE,"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import shutil
import subprocess
import sys


def exit_from_command_with_retcode(cmd, retcode):
    print(""[error] running"", ' '.join(cmd), ""; received return code"", retcode)
    sys.exit(int(os.environ.get(""CURRENT_BLOCK"", 255)))


def rm_r(path):
    """"""
    Given an arbitrary path, properly remove it with the correct Python construct if it exists.
    From: http://stackoverflow.com/a/9559881
    """"""

    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)


def run_cmd(cmd):
    """"""
    Given a command as a list of arguments will attempt to execute the command
    and, on failure, print an error message and exit.
    """"""

    if not isinstance(cmd, list):
        cmd = cmd.split()
    try:
        subprocess.check_call(cmd)
    except subprocess.CalledProcessError as e:
        exit_from_command_with_retcode(e.cmd, e.returncode)


def is_exe(path):
    """"""
    Check if a given path is an executable file.
    From: http://stackoverflow.com/a/377028
    """"""

    return os.path.isfile(path) and os.access(path, os.X_OK)


def which(program):
    """"""
    Find and return the given program by its absolute path or 'None' if the program cannot be found.
    From: http://stackoverflow.com/a/377028
    """"""

    fpath = os.path.split(program)[0]

    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ.get(""PATH"").split(os.pathsep):
            path = path.strip('""')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None
","#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import print_function
import os
import shutil
import subprocess
import sys


if sys.version_info >= (2, 7):
    subprocess_check_output = subprocess.check_output
    subprocess_check_call = subprocess.check_call
else:
    # SPARK-8763
    # backported from subprocess module in Python 2.7
    def subprocess_check_output(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get(""args"")
            if cmd is None:
                cmd = popenargs[0]
            raise subprocess.CalledProcessError(retcode, cmd, output=output)
        return output

    # backported from subprocess module in Python 2.7
    def subprocess_check_call(*popenargs, **kwargs):
        retcode = call(*popenargs, **kwargs)
        if retcode:
            cmd = kwargs.get(""args"")
            if cmd is None:
                cmd = popenargs[0]
            raise CalledProcessError(retcode, cmd)
        return 0


def exit_from_command_with_retcode(cmd, retcode):
    if retcode < 0:
        print(""[error] running"", ' '.join(cmd), ""; process was terminated by signal"", -retcode)
    else:
        print(""[error] running"", ' '.join(cmd), ""; received return code"", retcode)
    sys.exit(int(os.environ.get(""CURRENT_BLOCK"", 255)))


def rm_r(path):
    """"""
    Given an arbitrary path, properly remove it with the correct Python construct if it exists.
    From: http://stackoverflow.com/a/9559881
    """"""

    if os.path.isdir(path):
        shutil.rmtree(path)
    elif os.path.exists(path):
        os.remove(path)


def run_cmd(cmd, return_output=False):
    """"""
    Given a command as a list of arguments will attempt to execute the command
    and, on failure, print an error message and exit.
    """"""

    if not isinstance(cmd, list):
        cmd = cmd.split()
    try:
        if return_output:
            return subprocess_check_output(cmd)
        else:
            return subprocess_check_call(cmd)
    except subprocess.CalledProcessError as e:
        exit_from_command_with_retcode(e.cmd, e.returncode)


def is_exe(path):
    """"""
    Check if a given path is an executable file.
    From: http://stackoverflow.com/a/377028
    """"""

    return os.path.isfile(path) and os.access(path, os.X_OK)


def which(program):
    """"""
    Find and return the given program by its absolute path or 'None' if the program cannot be found.
    From: http://stackoverflow.com/a/377028
    """"""

    fpath = os.path.split(program)[0]

    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ.get(""PATH"").split(os.pathsep):
            path = path.strip('""')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file
    return None
",FALSE,,3991
3979,InitialSO.csv3979.txt,InitialGit.csv3979.txt,3,"function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}
 length undefined .join() + 1 pad(10, 4);      // 0010
pad(9, 4);       // 0009
pad(123, 4);     // 0123

pad(10, 4, '-'); // --10
 ","n = 9;
String(n).padStart(4, '0'); // '0009'

n = 10;
String(n).padStart(4, '0'); // '0010'
 function pad(n, width, z) {
  z = z || '0';
  n = n + '';
  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}
 length undefined .join() + 1 pad(10, 4);      // 0010
pad(9, 4);       // 0009
pad(123, 4);     // 0123

pad(10, 4, '-'); // --10
 ",FALSE,"/**
 * Permite formatear un número con los espacios necesarios delante.
 * Modificación de http://stackoverflow.com/a/10073788
 */
function pad (n, width, z)
{
	z = z || ' ';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}


/**
 * Función para calcular la serie de manera recursiva y añadirla al documento.
 */
function collatz (num, paso, elem)
{
	var txt
	var str

	if (num > 1)
	{
		if ((num % 2) == 0)
		{
			num /= 2
		}
		else
		{
			num *= 3
			num ++
		}

		paso ++

		str = ""Paso "" + pad (paso, 5) + "": "" + pad (num, 10) + ""\n""

		console.log (""Paso %5d: %10d"", paso, num)

		txt = document.createTextNode (str)
		elem.appendChild (txt)

		collatz (num, paso, elem)
	}
}


/**
 * Función principal para llamar a collatz ()
 */
function calcular ()
{
	var num = document.getElementById ('num').value
	var pasos = document.getElementById ('pasos')
	var txt

	/* Elimina los elementos que pudiera haber por ejecuciones pasadas */
	while (pasos.hasChildNodes())
	{
		pasos.removeChild (pasos.firstChild);
	}

	txt = document.createTextNode (""\nNúmero inicial: "" + num + ""\n"")
	pasos.appendChild (txt)

	console.log (""\nNúmero inicial: %d\n"", num)
	collatz (num, 0, pasos)
	console.log (""---- FIN DE LA SERIE ----"")

	txt = document.createTextNode (""---- FIN DE LA SERIE ----"")
	pasos.appendChild (txt)
}
","/**
 * Permite formatear un número con los espacios necesarios delante.
 * Modificación de http://stackoverflow.com/a/10073788
 */
function pad (n, width, z)
{
	z = z || ' ';
	n = n + '';
	return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}


/**
 * Función para calcular la serie de manera recursiva y añadirla al documento.
 */
function collatz (num, paso, elem)
{
	var txt
	var str

	if (num > 1)
	{
		if ((num % 2) == 0)
		{
			num /= 2
		}
		else
		{
			num *= 3
			num ++
		}

		paso ++

		str = ""Paso "" + pad (paso, 5) + "": "" + pad (num, 10) + ""\n""

		console.log (""Paso %5d: %10d"", paso, num)

		txt = document.createTextNode (str)
		elem.appendChild (txt)

		collatz (num, paso, elem)
	}
}


/**
 * Función principal para llamar a collatz ()
 */
function calcular ()
{
	var num = document.getElementById ('num').value
	var pasos = document.getElementById ('pasos')
	var txt

	/* Elimina los elementos que pudiera haber por ejecuciones pasadas */
	while (pasos.hasChildNodes())
	{
		pasos.removeChild (pasos.firstChild);
	}

	txt = document.createTextNode (""\nNúmero inicial: "" + num + ""\n"")
	pasos.appendChild (txt)

	console.log (""\nNúmero inicial: %d\n"", num)
	collatz (num, 0, pasos)
	console.log (""---- FIN DE LA SERIE ----"")

	txt = document.createTextNode (""---- FIN DE LA SERIE ----"")
	pasos.appendChild (txt)
}
",TRUE,,3993
3981,InitialSO.csv3981.txt,InitialGit.csv3981.txt,7,"<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ","<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ",TRUE,"<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (empty($_SERVER['REMOTE_ADDR'])) {
        /* We do not know remote IP */
        return false;
    }

    $direct_ip = $_SERVER['REMOTE_ADDR'];

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (!isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        /* Return true IP */
        return $direct_ip;
    }

    $trusted_header_value
        = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
    $matches = array();
    // the $ checks that the header contains only one IP address,
    // ?: makes sure the () don't capture
    $is_ip = preg_match(
        '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
        $trusted_header_value, $matches
    );

    if ($is_ip && (count($matches) == 1)) {
        // True IP behind a proxy
        return $matches[0];
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    $result = true;

    if (strpos($testRange, ':') > -1 || strpos($ipToTest, ':') > -1) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        }

        return false;
    }

    // range based
    $maskocts = explode('.', $testRange);
    $ipocts   = explode('.', $ipToTest);

    // perform a range match
    for ($i = 0; $i < 4; $i++) {
        if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
            if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                $result = false;
            } // end if
        } else {
            if ($maskocts[$i] <> $ipocts[$i]) {
                $result = false;
            } // end if
        } // end if/else
    } //end for

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
 * (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]
 * (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn
 * (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]
 * (range, partial octets not supported)
 *
 * @param string $test_range string of IP range to match
 * @param string $ip_to_test string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;

    // convert to lowercase for easier comparison
    $test_range = strtolower($test_range);
    $ip_to_test = strtolower($ip_to_test);

    $is_cidr = strpos($test_range, '/') > -1;
    $is_range = strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
        return $result;
    }

    if ($is_range) {
        // what range do we operate on?
        $range_match = array();
        $match = preg_match(
            '/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match
        );
        if ($match) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
        return $result;
    }

    if ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        // Overwriting first address string to make sure notation is optimal
        $first_ip = inet_ntop($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
            // Get the character at this position
            $orig = substr($last_hex, $pos, 1);

            // Convert it to an integer
            $origval = hexdec($orig);

            // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
            $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

            // Convert it back to a hexadecimal character
            $new = dechex($newval);

            // And put that character back in the string
            $last_hex = substr_replace($last_hex, $new, $pos, 1);

            // We processed one nibble, move to previous position
            $flexbits -= 4;
            $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    $rules     = $cfg['Server']['AllowDeny']['rules'];

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

?>
","<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (empty($_SERVER['REMOTE_ADDR'])) {
        /* We do not know remote IP */
        return false;
    }

    $direct_ip = $_SERVER['REMOTE_ADDR'];

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (!isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        /* Return true IP */
        return $direct_ip;
    }

    $trusted_header_value
        = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
    $matches = array();
    // the $ checks that the header contains only one IP address,
    // ?: makes sure the () don't capture
    $is_ip = preg_match(
        '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
        $trusted_header_value, $matches
    );

    if ($is_ip && (count($matches) == 1)) {
        // True IP behind a proxy
        return $matches[0];
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    if (/*overload*/mb_strpos($testRange, ':') > -1
        || /*overload*/mb_strpos($ipToTest, ':') > -1
    ) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        }

        return false;
    }

    // range based
    $maskocts = explode('.', $testRange);
    $ipocts   = explode('.', $ipToTest);

    // perform a range match
    for ($i = 0; $i < 4; $i++) {
        if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
            if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                $result = false;
            } // end if
        } else {
            if ($maskocts[$i] <> $ipocts[$i]) {
                $result = false;
            } // end if
        } // end if/else
    } //end for

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
 * (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]
 * (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn
 * (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]
 * (range, partial octets not supported)
 *
 * @param string $test_range string of IP range to match
 * @param string $ip_to_test string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;

    // convert to lowercase for easier comparison
    $test_range = /*overload*/mb_strtolower($test_range);
    $ip_to_test = /*overload*/mb_strtolower($ip_to_test);

    $is_cidr = /*overload*/mb_strpos($test_range, '/') > -1;
    $is_range = /*overload*/mb_strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
        return $result;
    }

    if ($is_range) {
        // what range do we operate on?
        $range_match = array();
        $match = preg_match(
            '/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match
        );
        if ($match) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
        return $result;
    }

    if ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
            // Get the character at this position
            $orig = /*overload*/mb_substr($last_hex, $pos, 1);

            // Convert it to an integer
            $origval = hexdec($orig);

            // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
            $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

            // Convert it back to a hexadecimal character
            $new = dechex($newval);

            // And put that character back in the string
            $last_hex = substr_replace($last_hex, $new, $pos, 1);

            // We processed one nibble, move to previous position
            $flexbits -= 4;
            $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    $rules     = $cfg['Server']['AllowDeny']['rules'];

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

?>
",FALSE,,3994
3982,InitialSO.csv3982.txt,InitialGit.csv3982.txt,7,"<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ","<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ",TRUE,"<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (empty($_SERVER['REMOTE_ADDR'])) {
        /* We do not know remote IP */
        return false;
    }

    $direct_ip = $_SERVER['REMOTE_ADDR'];

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (!isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        /* Return true IP */
        return $direct_ip;
    }

    $trusted_header_value
        = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
    $matches = array();
    // the $ checks that the header contains only one IP address,
    // ?: makes sure the () don't capture
    $is_ip = preg_match(
        '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
        $trusted_header_value, $matches
    );

    if ($is_ip && (count($matches) == 1)) {
        // True IP behind a proxy
        return $matches[0];
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    if (/*overload*/mb_strpos($testRange, ':') > -1
        || /*overload*/mb_strpos($ipToTest, ':') > -1
    ) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        }

        return false;
    }

    // range based
    $maskocts = explode('.', $testRange);
    $ipocts   = explode('.', $ipToTest);

    // perform a range match
    for ($i = 0; $i < 4; $i++) {
        if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
            if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                $result = false;
            } // end if
        } else {
            if ($maskocts[$i] <> $ipocts[$i]) {
                $result = false;
            } // end if
        } // end if/else
    } //end for

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
 * (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]
 * (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn
 * (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]
 * (range, partial octets not supported)
 *
 * @param string $test_range string of IP range to match
 * @param string $ip_to_test string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;

    // convert to lowercase for easier comparison
    $test_range = /*overload*/mb_strtolower($test_range);
    $ip_to_test = /*overload*/mb_strtolower($ip_to_test);

    $is_cidr = /*overload*/mb_strpos($test_range, '/') > -1;
    $is_range = /*overload*/mb_strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
        return $result;
    }

    if ($is_range) {
        // what range do we operate on?
        $range_match = array();
        $match = preg_match(
            '/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match
        );
        if ($match) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
        return $result;
    }

    if ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
            // Get the character at this position
            $orig = /*overload*/mb_substr($last_hex, $pos, 1);

            // Convert it to an integer
            $origval = hexdec($orig);

            // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
            $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

            // Convert it back to a hexadecimal character
            $new = dechex($newval);

            // And put that character back in the string
            $last_hex = substr_replace($last_hex, $new, $pos, 1);

            // We processed one nibble, move to previous position
            $flexbits -= 4;
            $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    if (isset($cfg['Server']['AllowDeny']['rules'])) {
        $rules     = $cfg['Server']['AllowDeny']['rules'];
        if (! is_array($rules)) {
            $rules = array();
        }
    } else {
        $rules = array();
    }

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

","<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (empty($_SERVER['REMOTE_ADDR'])) {
        /* We do not know remote IP */
        return false;
    }

    $direct_ip = $_SERVER['REMOTE_ADDR'];

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (!isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        /* Return true IP */
        return $direct_ip;
    }

    $trusted_header_value
        = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
    $matches = array();
    // the $ checks that the header contains only one IP address,
    // ?: makes sure the () don't capture
    $is_ip = preg_match(
        '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
        $trusted_header_value, $matches
    );

    if ($is_ip && (count($matches) == 1)) {
        // True IP behind a proxy
        return $matches[0];
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    if (/*overload*/mb_strpos($testRange, ':') > -1
        || /*overload*/mb_strpos($ipToTest, ':') > -1
    ) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        }

        return false;
    }

    // range based
    $maskocts = explode('.', $testRange);
    $ipocts   = explode('.', $ipToTest);

    // perform a range match
    for ($i = 0; $i < 4; $i++) {
        if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
            if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                $result = false;
            } // end if
        } else {
            if ($maskocts[$i] <> $ipocts[$i]) {
                $result = false;
            } // end if
        } // end if/else
    } //end for

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx
 * (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]
 * (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn
 * (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]
 * (range, partial octets not supported)
 *
 * @param string $test_range string of IP range to match
 * @param string $ip_to_test string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;

    // convert to lowercase for easier comparison
    $test_range = /*overload*/mb_strtolower($test_range);
    $ip_to_test = /*overload*/mb_strtolower($ip_to_test);

    $is_cidr = /*overload*/mb_strpos($test_range, '/') > -1;
    $is_range = /*overload*/mb_strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
        return $result;
    }

    if ($is_range) {
        // what range do we operate on?
        $range_match = array();
        $match = preg_match(
            '/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match
        );
        if ($match) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
        return $result;
    }

    if ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
            // Get the character at this position
            $orig = /*overload*/mb_substr($last_hex, $pos, 1);

            // Convert it to an integer
            $origval = hexdec($orig);

            // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
            $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

            // Convert it back to a hexadecimal character
            $new = dechex($newval);

            // And put that character back in the string
            $last_hex = substr_replace($last_hex, $new, $pos, 1);

            // We processed one nibble, move to previous position
            $flexbits -= 4;
            $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    if (isset($cfg['Server']['AllowDeny']['rules'])) {
        $rules     = $cfg['Server']['AllowDeny']['rules'];
        if (! is_array($rules)) {
            $rules = array();
        }
    } else {
        $rules = array();
    }

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

",TRUE,,4074
3983,InitialSO.csv3983.txt,InitialGit.csv3983.txt,7,"<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ","<?php

/*
 * This is definitely not the fastest way to do it!
 */

// An example prefix
$prefix = '2001:db8:abc:1400::/54';

// Split in address and prefix length
list($firstaddrstr, $prefixlen) = explode('/', $prefix);

// Parse the address into a binary string
$firstaddrbin = inet_pton($firstaddrstr);

// Convert the binary string to a string with hexadecimal characters
# unpack() can be replaced with bin2hex()
# unpack() is used for symmetry with pack() below
$firstaddrhex = reset(unpack('H*', $firstaddrbin));

// Overwriting first address string to make sure notation is optimal
$firstaddrstr = inet_ntop($firstaddrbin);

// Calculate the number of 'flexible' bits
$flexbits = 128 - $prefixlen;

// Build the hexadecimal string of the last address
$lastaddrhex = $firstaddrhex;

// We start at the end of the string (which is always 32 characters long)
$pos = 31;
while ($flexbits > 0) {
  // Get the character at this position
  $orig = substr($lastaddrhex, $pos, 1);

  // Convert it to an integer
  $origval = hexdec($orig);

  // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
  $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

  // Convert it back to a hexadecimal character
  $new = dechex($newval);

  // And put that character back in the string
  $lastaddrhex = substr_replace($lastaddrhex, $new, $pos, 1);

  // We processed one nibble, move to previous position
  $flexbits -= 4;
  $pos -= 1;
}

// Convert the hexadecimal string to a binary string
# Using pack() here
# Newer PHP version can use hex2bin()
$lastaddrbin = pack('H*', $lastaddrhex);

// And create an IPv6 address from the binary string
$lastaddrstr = inet_ntop($lastaddrbin);

// Report to user
echo ""Prefix: $prefix\n"";
echo ""First: $firstaddrstr\n"";
echo ""Last: $lastaddrstr\n"";

?>
 Prefix: 2001:db8:abc:1400::/54
First: 2001:db8:abc:1400::
Last: 2001:db8:abc:17ff:ffff:ffff:ffff:ffff
 ",TRUE,"<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (!empty($_SERVER['REMOTE_ADDR'])) {
        $direct_ip = $_SERVER['REMOTE_ADDR'];
    } else {
        /* We do not know remote IP */
        return false;
    }

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        $trusted_header_value
            = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
        $matches = array();
        // the $ checks that the header contains only one IP address,
        // ?: makes sure the () don't capture
        $is_ip = preg_match(
            '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
            $trusted_header_value, $matches
        );
        if ($is_ip && (count($matches) == 1)) {
            // True IP behind a proxy
            return $matches[0];
        }
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    $result = true;

    if (strpos($testRange, ':') > -1 || strpos($ipToTest, ':') > -1) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        } else {
            return false;
        }
    } else {
        // range based
        $maskocts = explode('.', $testRange);
        $ipocts   = explode('.', $ipToTest);

        // perform a range match
        for ($i = 0; $i < 4; $i++) {
            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
                if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                    $result = false;
                } // end if
            } else {
                if ($maskocts[$i] <> $ipocts[$i]) {
                    $result = false;
                } // end if
            } // end if/else
        } //end for
    } //end if/else

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx         (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]  (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn                          (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $test_range  string of IP range to match
 * @param string $ip_to_test  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;
    
    // convert to lowercase for easier comparison
    $test_range = strtolower($test_range);
    $ip_to_test = strtolower($ip_to_test);

    $is_cidr = strpos($test_range, '/') > -1;
    $is_range = strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
    } elseif ($is_range) {
        // what range do we operate on?
        $range_match = array();
        if (preg_match('/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match)) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
    } elseif ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        // Overwriting first address string to make sure notation is optimal
        $first_ip = inet_ntop($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
          // Get the character at this position
          $orig = substr($last_hex, $pos, 1);

          // Convert it to an integer
          $origval = hexdec($orig);

          // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
          $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

          // Convert it back to a hexadecimal character
          $new = dechex($newval);

          // And put that character back in the string
          $last_hex = substr_replace($last_hex, $new, $pos, 1);

          // We processed one nibble, move to previous position
          $flexbits -= 4;
          $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    $rules     = $cfg['Server']['AllowDeny']['rules'];

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

?>
","<?php
/* vim: set expandtab sw=4 ts=4 sts=4: */
/**
 * This library is used with the server IP allow/deny host authentication
 * feature
 *
 * @package PhpMyAdmin
 */
if (! defined('PHPMYADMIN')) {
    exit;
}

/**
 * Gets the ""true"" IP address of the current user
 *
 * @return string   the ip of the user
 *
 * @access  private
 */
function PMA_getIp()
{
    /* Get the address of user */
    if (!empty($_SERVER['REMOTE_ADDR'])) {
        $direct_ip = $_SERVER['REMOTE_ADDR'];
    } else {
        /* We do not know remote IP */
        return false;
    }

    /* Do we trust this IP as a proxy? If yes we will use it's header. */
    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {
        $trusted_header_value
            = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);
        $matches = array();
        // the $ checks that the header contains only one IP address,
        // ?: makes sure the () don't capture
        $is_ip = preg_match(
            '|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|',
            $trusted_header_value, $matches
        );
        if ($is_ip && (count($matches) == 1)) {
            // True IP behind a proxy
            return $matches[0];
        }
    }

    /* Return true IP */
    return $direct_ip;
} // end of the 'PMA_getIp()' function


/**
 * Matches for IPv4 or IPv6 addresses
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipMaskTest($testRange, $ipToTest)
{
    $result = true;

    if (strpos($testRange, ':') > -1 || strpos($ipToTest, ':') > -1) {
        // assume IPv6
        $result = PMA_ipv6MaskTest($testRange, $ipToTest);
    } else {
        $result = PMA_ipv4MaskTest($testRange, $ipToTest);
    }

    return $result;
} // end of the ""PMA_ipMaskTest()"" function


/**
 * Based on IP Pattern Matcher
 * Originally by J.Adams <jna@retina.net>
 * Found on <http://www.php.net/manual/en/function.ip2long.php>
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxx.xxx.xxx.xxx        (exact)
 * xxx.xxx.xxx.[yyy-zzz]  (range)
 * xxx.xxx.xxx.xxx/nn     (CIDR)
 *
 * Does not match:
 * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $testRange string of IP range to match
 * @param string $ipToTest  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv4MaskTest($testRange, $ipToTest)
{
    $result = true;
    $match = preg_match(
        '|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|',
        $testRange,
        $regs
    );
    if ($match) {
        // performs a mask match
        $ipl    = ip2long($ipToTest);
        $rangel = ip2long(
            $regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]
        );

        $maskl  = 0;

        for ($i = 0; $i < 31; $i++) {
            if ($i < $regs[5] - 1) {
                $maskl = $maskl + PMA_Util::pow(2, (30 - $i));
            } // end if
        } // end for

        if (($maskl & $rangel) == ($maskl & $ipl)) {
            return true;
        } else {
            return false;
        }
    } else {
        // range based
        $maskocts = explode('.', $testRange);
        $ipocts   = explode('.', $ipToTest);

        // perform a range match
        for ($i = 0; $i < 4; $i++) {
            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {
                if (($ipocts[$i] > $regs[2]) || ($ipocts[$i] < $regs[1])) {
                    $result = false;
                } // end if
            } else {
                if ($maskocts[$i] <> $ipocts[$i]) {
                    $result = false;
                } // end if
            } // end if/else
        } //end for
    } //end if/else

    return $result;
} // end of the ""PMA_ipv4MaskTest()"" function


/**
 * IPv6 matcher
 * CIDR section taken from http://stackoverflow.com/a/10086404
 * Modified for phpMyAdmin
 *
 * Matches:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx         (exact)
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:[yyyy-zzzz]  (range, only at end of IP - no subnets)
 * xxxx:xxxx:xxxx:xxxx/nn                          (CIDR)
 *
 * Does not match:
 * xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xx[yyy-zzz]  (range, partial octets not supported)
 *
 * @param string $test_range  string of IP range to match
 * @param string $ip_to_test  string of IP to test against range
 *
 * @return boolean    whether the IP mask matches
 *
 * @access  public
 */
function PMA_ipv6MaskTest($test_range, $ip_to_test)
{
    $result = true;
    
    // convert to lowercase for easier comparison
    $test_range = strtolower($test_range);
    $ip_to_test = strtolower($ip_to_test);

    $is_cidr = strpos($test_range, '/') > -1;
    $is_range = strpos($test_range, '[') > -1;
    $is_single = ! $is_cidr && ! $is_range;

    $ip_hex = bin2hex(inet_pton($ip_to_test));

    if ($is_single) {
        $range_hex = bin2hex(inet_pton($test_range));
        $result = $ip_hex === $range_hex;
    } elseif ($is_range) {
        // what range do we operate on?
        $range_match = array();
        if (preg_match('/\[([0-9a-f]+)\-([0-9a-f]+)\]/', $test_range, $range_match)) {
            $range_start = $range_match[1];
            $range_end   = $range_match[2];

            // get the first and last allowed IPs
            $first_ip  = str_replace($range_match[0], $range_start, $test_range);
            $first_hex = bin2hex(inet_pton($first_ip));
            $last_ip   = str_replace($range_match[0], $range_end, $test_range);
            $last_hex  = bin2hex(inet_pton($last_ip));

            // check if the IP to test is within the range
            $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
        }
    } elseif ($is_cidr) {
        // Split in address and prefix length
        list($first_ip, $subnet) = explode('/', $test_range);

        // Parse the address into a binary string
        $first_bin = inet_pton($first_ip);
        $first_hex = bin2hex($first_bin);

        // Overwriting first address string to make sure notation is optimal
        $first_ip = inet_ntop($first_bin);

        $flexbits = 128 - $subnet;

        // Build the hexadecimal string of the last address
        $last_hex = $first_hex;

        $pos = 31;
        while ($flexbits > 0) {
          // Get the character at this position
          $orig = substr($last_hex, $pos, 1);

          // Convert it to an integer
          $origval = hexdec($orig);

          // OR it with (2^flexbits)-1, with flexbits limited to 4 at a time
          $newval = $origval | (pow(2, min(4, $flexbits)) - 1);

          // Convert it back to a hexadecimal character
          $new = dechex($newval);

          // And put that character back in the string
          $last_hex = substr_replace($last_hex, $new, $pos, 1);

          // We processed one nibble, move to previous position
          $flexbits -= 4;
          $pos -= 1;
        }

        // check if the IP to test is within the range
        $result = ($ip_hex >= $first_hex && $ip_hex <= $last_hex);
    }

    return $result;
} // end of the ""PMA_ipv6MaskTest()"" function


/**
 * Runs through IP Allow/Deny rules the use of it below for more information
 *
 * @param string $type 'allow' | 'deny' type of rule to match
 *
 * @return bool   Matched a rule ?
 *
 * @access  public
 *
 * @see     PMA_getIp()
 */
function PMA_allowDeny($type)
{
    global $cfg;

    // Grabs true IP of the user and returns if it can't be found
    $remote_ip = PMA_getIp();
    if (empty($remote_ip)) {
        return false;
    }

    // copy username
    $username  = $cfg['Server']['user'];

    // copy rule database
    $rules     = $cfg['Server']['AllowDeny']['rules'];

    // lookup table for some name shortcuts
    $shortcuts = array(
        'all'       => '0.0.0.0/0',
        'localhost' => '127.0.0.1/8'
    );

    // Provide some useful shortcuts if server gives us address:
    if (PMA_getenv('SERVER_ADDR')) {
        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';
        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';
        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';
    }

    foreach ($rules as $rule) {
        // extract rule data
        $rule_data = explode(' ', $rule);

        // check for rule type
        if ($rule_data[0] != $type) {
            continue;
        }

        // check for username
        if (($rule_data[1] != '%') //wildcarded first
            && ($rule_data[1] != $username)
        ) {
            continue;
        }

        // check if the config file has the full string with an extra
        // 'from' in it and if it does, just discard it
        if ($rule_data[2] == 'from') {
            $rule_data[2] = $rule_data[3];
        }

        // Handle shortcuts with above array
        if (isset($shortcuts[$rule_data[2]])) {
            $rule_data[2] = $shortcuts[$rule_data[2]];
        }

        // Add code for host lookups here
        // Excluded for the moment

        // Do the actual matching now
        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {
            return true;
        }
    } // end while

    return false;
} // end of the ""PMA_AllowDeny()"" function

?>
",TRUE,,4090
3984,InitialSO.csv3984.txt,InitialGit.csv3984.txt,8,"// function to calculate local time
// in a different city
// given the city's UTC offset
function calcTime(city, offset) {

    // create Date object for current location
    d = new Date();
   
    // convert to msec
    // add local time zone offset
    // get UTC time in msec
    utc = d.getTime() + (d.getTimezoneOffset() * 60000);
   
    // create new Date object for different city
    // using supplied offset
    nd = new Date(utc + (3600000*offset));
   
    // return time as a string
    return ""The local time in "" + city + "" is "" + nd.toLocaleString();

}
 ","/** 
 * function to calculate local time
 * in a different city
 * given the city's UTC offset
 */
function calcTime(city, offset) {

    // create Date object for current location
    var d = new Date();
   
    // get UTC time in msec
    var utc = d.getTime();
   
    // create new Date object for different city
    // using supplied offset
    var nd = new Date(utc + (3600000*offset));
   
    // return time as a string
    return ""The local time in "" + city + "" is "" + nd.toLocaleString();
}
 ",FALSE,"String.prototype.insert = function (index, string) {
  if (index > 0)
    return this.substring(0, index) + string + this.substring(index, this.length);
  else
    return string + this;
};

/* String Splitting
 * Supplied Argument:
 * <Nothing>
 * Returned value:
 * Array of characters
-----------------------------------------------*/
String.prototype.toArray = function() {
	return this.split("""");
};

/* Number Padding
 * Supplied Argument:
 * <Optional> Digits (any invalid value / less than 1, forced to 1)
-----------------------------------------------*/
Number.prototype.toDigits = Number.prototype.toArray = function(digits) {
	var ret = this.toString();
	try{
		if(isNaN(this)||!isFinite(this)){throw new Error(""Cannot convert constants to padded array"");}
		if(ret == this.toExponential()){throw new Error(""Cannot convert number in exponential form"");}
		if (!isFinite(digits)) { digits = undefined; }
		digits = Math.max(digits || 1,1);
		// Pad the array until
		ret = (""0"").repeat(Math.max(digits - ret.length,0)) + ret; // O(1) complexity XD
	}catch(e){
		console.error(e);
	}finally{
		return ret;
	}
};

Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|""[^""]*""|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = ""0"" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the ""UTC:"" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == ""[object String]"" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date();
        if (isNaN(date)) throw SyntaxError(""invalid date"");

        mask = String(dF.masks[mask] || mask || dF.masks[""default""]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == ""UTC:"") {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? ""getUTC"" : ""get"",
            d = date[_ + ""Date""](),
            D = date[_ + ""Day""](),
            m = date[_ + ""Month""](),
            y = date[_ + ""FullYear""](),
            H = date[_ + ""Hours""](),
            M = date[_ + ""Minutes""](),
            s = date[_ + ""Seconds""](),
            L = date[_ + ""Milliseconds""](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? ""a""  : ""p"",
                tt:   H < 12 ? ""am"" : ""pm"",
                T:    H < 12 ? ""A""  : ""P"",
                TT:   H < 12 ? ""AM"" : ""PM"",
                Z:    utc ? ""UTC"" : (String(date).match(timezone) || [""""]).pop().replace(timezoneClip, """"),
                o:    (o > 0 ? ""-"" : ""+"") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    [""th"", ""st"", ""nd"", ""rd""][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    ""default"":      ""ddd mmm dd yyyy HH:MM:ss"",
    shortDate:      ""m/d/yy"",
    mediumDate:     ""mmm d, yyyy"",
    longDate:       ""mmmm d, yyyy"",
    fullDate:       ""dddd, mmmm d, yyyy"",
    shortTime:      ""h:MM TT"",
    mediumTime:     ""h:MM:ss TT"",
    longTime:       ""h:MM:ss TT Z"",
    isoDate:        ""yyyy-mm-dd"",
    isoTime:        ""HH:MM:ss"",
    isoDateTime:    ""yyyy-mm-dd'T'HH:MM:ss"",
    isoUtcDateTime: ""UTC:yyyy-mm-dd'T'HH:MM:ss'Z'""
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        ""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"",
        ""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
    ],
    monthNames: [
        ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"",
        ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""
    ]
};

Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};


/* SECONDS TO HH:MM:SS
-------------------------------*/
String.prototype.toHHMMSS = function () {
	var sec_num = parseInt(this, 10); // don't forget the second param
	var time;
	if(isNaN(sec_num)) {
		time = ""--:--:--"";
	} else {
		var isNeg   = sec_num < 0;
		
		if(isNeg) sec_num = -sec_num;
		
		var hours   = (Math.floor(sec_num / 3600)).toDigits(2);
		var minutes = (Math.floor((sec_num - (hours * 3600)) / 60)).toDigits(2);
		var seconds = (sec_num - (hours * 3600) - (minutes * 60)).toDigits(2);
		
		time    = (isNeg ? ""-"" : """")+hours+':'+minutes+':'+seconds;
	}
	return time;
};

/* SECONDS TO HH:MM:SS, ADDING CURRENT TIME
-------------------------------*/
String.prototype.plusCurrentTime = function() {
    var currentTime = new Date();
    var secondsAfterMidnight = 
        3600 * currentTime.getHours() +
        60   * currentTime.getMinutes() +
               currentTime.getSeconds();

    var secondsRemaining = parseInt(this, 10);
    var timeFinished = (secondsAfterMidnight + secondsRemaining) % 86400;
    return String(timeFinished).toHHMMSS();
};

/* LIMIT ROUNDING
-------------------------------*/
Math.qckInt = function(command,value,rate) {
	if ([""round"",""ceil"",""floor""].indexOf(command) < 0)
		command = null;
	command = command || ""round"";
	value   = value   || 0;
	rate    = rate    || 0;
	var shift = Math.pow(10,rate);
	return Math[command](value * shift) / shift;
};

/* GOOGLE ANALYTICS
-------------------------------*/
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-9789944-12']);
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = 'https://ssl.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

/* GET DATE IN JP
http://stackoverflow.com/a/10088053/483704
-------------------------------*/
function getJPDate(){
    // create Date object for current location
    d = new Date();
    
    // convert to msec
    // add local time zone offset
    // get UTC time in msec
    utc = d.getTime() + (d.getTimezoneOffset() * 60000);

    // create new Date object for different city
    // using supplied offset
    return new Date(utc + (3600000*9));
}
","/*******************************\
|*** Global                     |
\*******************************/
/* GOOGLE ANALYTICS
-------------------------------*/
if (typeof NO_GA == ""undefined"") {
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-9789944-12']);
	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = 'https://ssl.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
}

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|""[^""]*""|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = ""0"" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the ""UTC:"" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == ""[object String]"" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date();
		if (isNaN(date)) throw SyntaxError(""invalid date"");

		mask = String(dF.masks[mask] || mask || dF.masks[""default""]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == ""UTC:"") {
			mask = mask.slice(4);
			utc = true;
		}

		var _ = utc ? ""getUTC"" : ""get"",
			d = date[_ + ""Date""](),
			D = date[_ + ""Day""](),
			m = date[_ + ""Month""](),
			y = date[_ + ""FullYear""](),
			H = date[_ + ""Hours""](),
			M = date[_ + ""Minutes""](),
			s = date[_ + ""Seconds""](),
			L = date[_ + ""Milliseconds""](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? ""a""  : ""p"",
				tt:   H < 12 ? ""am"" : ""pm"",
				T:    H < 12 ? ""A""  : ""P"",
				TT:   H < 12 ? ""AM"" : ""PM"",
				Z:    utc ? ""UTC"" : (String(date).match(timezone) || [""""]).pop().replace(timezoneClip, """"),
				o:    (o > 0 ? ""-"" : ""+"") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    [""th"", ""st"", ""nd"", ""rd""][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

			return mask.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
			});
		};
}();

// Some common format strings
dateFormat.masks = {
	""default"":      ""ddd mmm dd yyyy HH:MM:ss"",
	shortDate:      ""m/d/yy"",
	mediumDate:     ""mmm d, yyyy"",
	longDate:       ""mmmm d, yyyy"",
	fullDate:       ""dddd, mmmm d, yyyy"",
	shortTime:      ""h:MM TT"",
	mediumTime:     ""h:MM:ss TT"",
	longTime:       ""h:MM:ss TT Z"",
	isoDate:        ""yyyy-mm-dd"",
	isoTime:        ""HH:MM:ss"",
	isoDateTime:    ""yyyy-mm-dd'T'HH:MM:ss"",
	isoUtcDateTime: ""UTC:yyyy-mm-dd'T'HH:MM:ss'Z'""
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"",
		""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
	],
	monthNames: [
		""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"",
		""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""
	]
};

/* GET DATE IN Japan Standard TimeZone
http://stackoverflow.com/a/10088053/483704
-------------------------------*/
Date.getJstDate = function() {
	// create Date object for current location
	d = new Date();
	// convert to msec
	// add local time zone offset
	// get UTC time in msec
	utc = d.getTime() + (d.getTimezoneOffset() * 60000);
	// create new Date object for different city
	// using supplied offset
	return new Date(utc + (3600000*9));
};

/**
 * Convert any String to UTC timestamp.
 * return Date.now() on any exception.
 */
Date.safeToUtcTime = function(date) {
	var ts = new Date(date).getTime();
	return isNaN(ts) ? Date.now() : ts;
};
/**
 * Convert String to UTC timestamp/1000.
 */
Date.toUTCseconds = function(dateStr) {
	return Math.hrdInt(""floor"", Date.safeToUtcTime(dateStr), 3, 1);
};
/**
 * Convert String to UTC timestamp/1000/3600.
 */
Date.toUTChours = function(dateStr) {
	return Math.hrdInt(""floor"", Date.safeToUtcTime(dateStr) / 3.6, 6, 1);
};

/* BASE */
/*******************************\
|*** Object                     |
\*******************************/
Object.size = function(obj) {
	var size = 0, key;
	for (key in obj) {
		if (obj.hasOwnProperty(key)) size++;
	}
	return size;
};

/* PRIMITIVE */
/*******************************\
|*** String                     |
\*******************************/
/* String Insertion
-----------------------------------------------*/
String.prototype.insert = function (index, string) {
	if (index > 0)
		return this.substring(0, index) + string + this.substring(index, this.length);
	else
		return string + this;
};

/* String Splitting
 * Supplied Argument:
 * <Nothing>
 * Returned value:
 * Array of characters
-----------------------------------------------*/
String.prototype.toArray = function() {
	return this.split("""");
};

/**
 * String.format(""msg {0} is {1}"", args) - convenient placeholders replacing,
 * from http://jqueryvalidation.org/jQuery.validator.format/
 *
 * @return a new string replaced with given expressions like template literals in ES6
 * @param {an Array/String..} args - the real values to be replaced with
 * notes:
 *   - in fact, NO l10n format feature like Date, Currency, Float Number
 *   - placeholders can be commented via {0:commentGoesHere} (no space)
 *   - if first parameter is Array, left params will be ignored
 *   - if param or element in Array is not String, will be auto toString
------------------------------------------------------------ */
String.prototype.format = function(params) {
	var source = this.toString();
	if (arguments.length < 1) {
		return source;
	} else if(!Array.isArray(params)) {
		params = $.makeArray(arguments);
	}
	// A-Z a-z 0-9 _ $ [more unicodes]
	var validCommentChars = ""[_$\\w\\d\\xA0-\\uFFFF]*"";
	$.each(params, function( i, n ) {
		source = source.replace( new RegExp(""\\{"" + i
			+ ""(:"" + validCommentChars + "")?\\}"", ""g""), function() {
			return n;
		});
	});
	return source;
};

/* SECONDS TO HH:MM:SS
-------------------------------*/
String.prototype.toHHMMSS = function () {
	var sec_num = parseInt(this, 10); // don't forget the second param
	var time;
	if(isNaN(sec_num)) {
		time = ""--:--:--"";
	} else {
		var isNeg   = sec_num < 0;

		if(isNeg) sec_num = -sec_num;

		var hours   = (Math.floor(sec_num / 3600)).toDigits(2);
		var minutes = (Math.floor((sec_num - (hours * 3600)) / 60)).toDigits(2);
		var seconds = (sec_num - (hours * 3600) - (minutes * 60)).toDigits(2);

		time    = (isNeg ? ""-"" : """")+hours+':'+minutes+':'+seconds;
	}
	return time;
};

/* SECONDS TO HH:MM:SS, ADDING CURRENT TIME
-------------------------------*/
String.prototype.plusCurrentTime = function() {
	var currentTime = new Date();
	var secondsAfterMidnight =
		3600 * currentTime.getHours() +
		60   * currentTime.getMinutes() +
		       currentTime.getSeconds();

	var secondsRemaining = parseInt(this, 10);
	var timeFinished = (secondsAfterMidnight + secondsRemaining) % 86400;
	return String(timeFinished).toHHMMSS();
};

/* hashing for integrity checks
-----------------------------------*/
String.prototype.hashCode = function() {
  var hash = 0, i, chr, len;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr   = this.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};

/*******************************\
|*** Number                     |
\*******************************/
(function(){
	/* Number Inclusion
	 * Supplied Argument:
	 * -- Pattern 1
	 *   <Optional x2> Boundary  (defaults: -Inf ~ Inf)
	 *   <Optional ~2> Inclusion (defaults: true, true)
	 * -- Pattern 2
	 *   <Optional>    RangeObject
	-----------------------------------------------*/
	Number.prototype.inside = function(bLeft,bRight,iLeft,iRight){
		if(bLeft instanceof Range) { return this.inside.apply(this,bLeft); }
		bLeft  = parseInt(bLeft,10);
		bRight = parseInt(bRight,10);
		iLeft  = typeof iLeft  == 'undefined' ? true : !!iLeft;
		iRight = typeof iRight == 'undefined' ? true : !!iRight;

		bLeft  = isNaN(bLeft)  ? -Infinity : bLeft ;
		bRight = isNaN(bRight) ? +Infinity : bRight;

		if(bLeft > bRight) { return this.inside(bRight,bLeft,iRight,iLeft); }
		return (
			(iLeft  ? this >= bLeft  : this > bLeft ) &&
			(iRight ? this <= bRight : this < bRight)
		);
	};

	/* Number Padding
	 * Supplied Argument:
	 * <Optional> Digits (any invalid value / less than 1, forced to 1)
	-----------------------------------------------*/
	Number.prototype.toDigits = Number.prototype.toArray = function(digits) {
		var ret = this.toString();
		try{
			if(isNaN(this)||!isFinite(this)){throw new Error(""Cannot convert constants to padded array"");}
			if(ret == this.toExponential()){throw new Error(""Cannot convert number in exponential form"");}
			if (!isFinite(digits)) { digits = undefined; }
			digits = Math.max(digits || 1,1);
			// Pad the array until
			ret = (""0"").repeat(Math.max(digits - ret.length,0)) + ret; // O(1) complexity XD
		}catch(e){
			console.error(e);
		}finally{
			return ret;
		}
	};
	/* Number Shortener
	 * shortens the number up to 3 digits
	 * Supplied Argument:
	 * < Nothing >
	-----------------------------------------------*/
	var shorten = {
		expRegex : /([\+\-]?)(.+)e(.)(\d+)/,
		sgnArray : ['-','','+'],
		metPrefx : ['','k','M','G','T','P','E','Z','Y']
	};

	Number.prototype.shorten = function(decimals) {
		var ret = this.toString();
		try{
			if(isNaN(this)||!isFinite(this)){ throw ret; }
			if(Math.abs(this) < 1) {
				console.error(""Cannot shorten any magnitude from negative log10"");
				throw 0;
			} else if (Math.abs(this) < 1000) {
				throw this;
			} else {
				var
					sgof = shorten.expRegex.exec(this.toExponential()),
					sgch = shorten.sgnArray.indexOf(sgof[1]) - 1,
					udfg = sgof[3] == '-';

				if (!isFinite(decimals)) { decimals = undefined; }
				decimals = Math.min(Math.max(decimals || 1,1),3);

				if(ret == this.toExponential()){
					throw [sgch < 0 ? ""Ng"" : ""Ps"",(udfg ? 'Under' : 'Over') + 'flow'].join(' ');
				} else {
					ret = [Math.qckInt('floor',(sgof[1] + sgof[2]) * (1 + (""0"").repeat(sgof[4] % 3)),decimals,false,true),shorten.metPrefx[ parseInt(sgof[4] / 3,10) ]].join('');
				}
			}
		}catch(errval){
			return errval;
		}finally{
			return ret;
		}
	};
	
	Number.prototype.valueBetween = function(lfs, rfs) {
		lfs = lfs === undefined ? -Infinity : lfs;
		rfs = rfs === undefined ? Infinity : rfs;
		return Math.min(Math.max(lfs, rfs), Math.max(Math.min(lfs, rfs), this));
	};
}).call(Number);

/* JS NATIVE CLASS */
/*******************************\
|*** Array                      |
\*******************************/
(function(){
	var
		nop  = function(){},
		over = {
			equals: [
				function(){
					console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
				},
				nop
			],
			fill: [
				function(){ delete meth.fill; },
				function(){
					console.warn(""It seems that your chrome doesn't support Array.prototype.fill method."");
				}
			]
		},
		meth = {
			/*
				Comparing arrays
				http://stackoverflow.com/a/14853974/483704
			*/
			equals: {
				value: function (array) {
					// if the other array is a falsy value, return
					if (!array)
						return false;

					// compare lengths - can save a lot of time
					if (this.length != array.length)
						return false;

					for (var i = 0, l=this.length; i < l; i++) {
						// Check if we have nested arrays
						if (this[i] instanceof Array && array[i] instanceof Array) {
							// recurse into the nested arrays
							if (!this[i].equals(array[i]))
								return false;
						} else if (this[i] != array[i]) {
							// Warning - two different object instances will never be equal: {x:20} != {x:20}
							return false;
						}
					}
					return true;
				},
				configurable:true
			},

			/*
				Fill method polyfill
				https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
			*/
			fill:{
				value: function(value) {
					// Steps 1-2.
					if (this === null) {
						throw new TypeError('this is null or not defined');
					}

					var O = Object(this);

					// Steps 3-5.
					var len = O.length >>> 0;

					// Steps 6-7.
					var start = arguments[1];
					var relativeStart = start >> 0;

					// Step 8.
					var k = relativeStart < 0 ?
						Math.max(len + relativeStart, 0) :
						Math.min(relativeStart, len);

					// Steps 9-10.
					var end = arguments[2];
					var relativeEnd = end === undefined ?
						len : end >> 0;

					// Step 11.
					var last = relativeEnd < 0 ?
						Math.max(len + relativeEnd, 0) :
						Math.min(relativeEnd, len);

					// Step 12.
					while (k < last) {
						O[k] = value;
						k++;
					}

					// Step 13.
					return O;
				},
				configurable:true
			},
		};

	Object.keys(over).forEach((function(method){
		over[method][(!this.prototype[method])>>0].call(this);
	}).bind(this));
	/*jshint: validthis true*/
	Object.defineProperties(this.prototype,meth);
}).call(Array);

/** Construct a Number array contains range from N to M */
Array.numbers = function(start, end){
	var n = parseInt(start, 10), m = parseInt(end, 10);
	var i = m - n + 1, a = [];
	while(i-- > 0) a[i] = n + i;
	return a;
};

/*******************************\
|*** Date                       |
\*******************************/
(function(){
	var
		WeekStrings   = dateFormat.i18n.dayNames.reduce(function(ary,val){
			ary[ (val.length != 3)+0 ].push(val);
			return ary;
		},[[],[]]),
		ResetableKeys = ['Milliseconds', 'Seconds','Minutes','Hours','Date','Month'],
		ShiftableKeys = ResetableKeys.concat(['FullYear']);

	function shiftTime(key,step,clear,offset) {
		var self = this;

		if(ShiftableKeys.indexOf(key) < 0) {
			console.log(arguments);
			throw new Error(""Cannot shift invalid time key (""+key+"")"");
		}

		clear  = !!clear;
		step   = parseInt(step,10);
		step   = (!isNaN(step) && isFinite(step)) ? (step+clear) : 1;
		offset = $.extend({},offset);

		var ki = ShiftableKeys.indexOf(key);

		if(clear) {
			this.resetTime(ResetableKeys.filter(function(k,i){return i < ki;}));
		}

		Object.keys(offset).forEach(function(k){
			if(ResetableKeys.indexOf(k) < ki &&
				['number','string'].some(function(desiredType){
					return typeof offset[k] == desiredType;
				})
			) {
				offset[k] = parseInt(offset[k],10);
				if(isNaN(offset[k]) || !isFinite(offset[k]))
					return false;

				self['setUTC'+k](self['getUTC'+k]()+(offset[k]));
			} else {
				delete offset.k;
			}
		});

		this['setUTC'+key](this['getUTC'+key]()+(step));
		return this;
	}

	Object.defineProperties(Date.prototype,{
		format: { value: function format(mask, utc) {
			return dateFormat(this, mask, utc);
		}},
		shiftHour : { get: function () { return shiftTime.bind(this,'Hours'); } },
		shiftDate : { get: function () { return shiftTime.bind(this,'Date' ); } },
		shiftWeek : { get: function () {
			return (function shiftWeek (target,lookType,step,clear,offset) {
				/* Test Object: Monday, 4 January 2016
					shiftWeek('Sun',0,false,null) => Sunday, 3 January 2016
					shiftWeek(0, +1,false,null) => Sunday, 10 January 2016
					shiftWeek('Tuesday',-1,false,null) => Tuesday, 28 December 2015
				*/
				var calibr;
				var args = Array.apply(null,arguments);
				lookType = parseInt(lookType,10);
				lookType = isFinite(lookType) && lookType || 0;

				switch(typeof target){
					case 'number':
						var check = WeekStrings.map(function(array){return array[target];})
							.filter(function(value){return typeof value == 'string';}).pop();
						if(typeof check !== 'undefined') {
							// Correct index detection

						} else {
							// Invalid index detection
							throw new RangeError([""Invalid range ("",String(target),"")""].join(''));
						}
					break;
					case 'undefined':
						// ""Empty"" argument treated as current day
						args[0] = this.getUTCDay();
						return this.shiftWeek.apply(this,args);
					default:
						if(target === null) {
							// Nullity check
							args[0] = undefined;
							return this.shiftWeek.apply(this,args);
						}

						var checkKey = parseInt(target,10);
						if(!isNaN(checkKey)) {
							// Number (on string) detection
							args[0] = checkKey;
							return this.shiftWeek.apply(this,args);
						}

						// Any type detection
						checkKey = WeekStrings.filter(function(array){return array.indexOf(target)>=0;}).pop();
						if(typeof checkKey === 'undefined') {
							// Bad string conversion variable detection
							throw new ReferenceError([""Bad week name reference ("",String(target),"")""].join(''));
						} else {
							target = checkKey.indexOf(target);
						}
					break;
				}

				calibr = (target - this.getDay());
				// Adjust calibrator boundary
				while(calibr >  3 && lookType <= 0) calibr -= 7;
				while(calibr < -3 && lookType >= 0) calibr += 7;
				calibr -= parseInt(calibr / 7,10) * 7 * Math.sign(lookType);

				args.splice(0,2);

				step = parseInt(step,10);
				if(isNaN(step) || !isFinite(step))
					step = 0;

				/*
				  UTCD DATE CALB
					 20   21   -1
					  2    1   +1
					  1   30  -29? => +1
					 31    1  +30? => -1
				*/
				var utcDayCalib = this.getUTCDate() - this.getDate();
				args[0] = 7 * step + calibr - (!!clear + (Math.abs(utcDayCalib) <= 1 ? utcDayCalib : -Math.sign(utcDayCalib)));
				return this.shiftDate.apply(this,args);
			}).bind(this);
		}},
		shiftMonth: { get: function () { return shiftTime.bind(this,'Month'); } },
		shiftYear : { get: function () { return shiftTime.bind(this,'FullYear'); } },
		resetTime : { value: function(clearTable) {
			var
				self = this,
				cFunc = function(){return false;};

			switch(typeof clearTable) {
				case 'number':
				case 'string':
					// Pick nth+1 element from ResetableKeys
					// Invalid >> pick all elements
					clearTable = parseInt(clearTable,10);
					clearTable = ((clearTable >= 0) && !isNaN(clearTable) && isFinite(clearTable) || ResetableKeys.length) && clearTable;

					// Provided String or Number ->
					// Pick nth+1 elements from start
					cFunc = function(x,i){
						return i <= clearTable;
					};
					break;
				default:
					// Pick any matching element from Resetable Array
					// Invalid >> pick all elements
					clearTable = ((typeof clearTable === 'object' && clearTable instanceof Array && clearTable) || ResetableKeys);

					// Provided Anything else
					// Pick any element that match the clearTable data (either value or index)
					// ['Seconds',2,3] => ['Seconds','Hours','Date']
					cFunc = function(key,ind){
						return [key,ind].some(function(val){ return clearTable.indexOf(val) >= 0; });
					};
					break;
			}

			clearTable = ResetableKeys.filter(cFunc);

			clearTable.forEach(function(k){
				self['setUTC' + k](k === 'Date' ? 1 : 0);
			});
			return this;
		}},
	});
})(Date);

/* JS NATIVE MODULE */
/*******************************\
|*** Math                       |
\*******************************/
/* STATISTICS (STANDARD DEVIATION)
 - Sample based deviation (default)
 - Population based deviation
-------------------------------*/
Math.stdev  = function(p1f /*, data*/){
	// obtain a real array for carrying data
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
	var data = Array.prototype.slice.call( arguments );
	if(typeof p1f === 'boolean') {
		data.splice(0,1);
	} else {
		p1f = false;
	}
	// special handling for cases:
	// * Math.stdev( <bool>, <an array object> )
	// * Math.stdev( <an array object> )
	if (data.length > 0 && (data[0] instanceof Array)) {
		if (data.length !== 1)
			throw ""Math.stdev called with unexpected form"";
		data = data[0];
	}
	var args = [].map.call(data,function(val){
		return Number(val);
	});

	if(args.length <= 0)
		return 0;

	var avg;
	avg = args.reduce(function(cAve,nVal,nInd){
		return ((cAve * nInd) + nVal) / (nInd + 1);
	},0);

	return Math.sqrt(args.reduce(function(tDev,nVal,nInd){
		return tDev + Math.pow(nVal - avg,2);
	},0)/(args.length - !p1f));
};

/** LIMIT ROUNDING
 * @param command: do Math.""round""(default) or ""ceil"" or ""floor""
 * @param value: the number to be rounded
 * @param rate: how many decimal digits to be reserved
 * @param rev: if false, moving decimal point ""rate"" place(s) to the right,
 *             then integer will be returned
 * @param magn: if true, negative rounding behaves like positive
 * @return the rounded number
-------------------------------*/
Math.qckInt = function(command,value,rate,rev,magn) {
	if ([""round"",""ceil"",""floor""].indexOf(command) < 0)
		command = null;
	command = command || ""round"";
	value   = value   || 0;
	rate    = rate    || 0;
	rev     = !rev;
	magn    = !!magn;

	var shift = Math.pow(10,rate);
	return (magn ? Math.sign(value) : 1) *
		Math[command]((magn ? Math.abs(value) : value) * shift) / (rev ? shift : 1);
};
/* Rounding towards left side of decimal point */
Math.hrdInt = function(command,value,rate,rev) {
	return Math.qckInt(command,value,-rate,rev);
};

/* CHROME NATIVE CLASS */
/*******************************\
|*** Storage                    |
\*******************************/
/*
	Storage JSON Conversion
	http://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage/2010994
*/
Storage.prototype.setObject = function(key, value) {
	this.setItem(key,JSON.stringify(value));
};

Storage.prototype.getObject = function(key) {
	return JSON.parse(this.getItem(key));
};

/*******************************\
|*** Element                    |
\*******************************/
(function(){
	/*jshint: validthis true*/
	Object.defineProperties(this.prototype,{
		/* ELEMENT OVERFLOW CHECK
		------------------------------------ */
		overflow:{
			get:function(){ return this.overflowHorz || this.overflowVert; },
			configurable: true
		},
		overflowHorz:{
			get:function(){ return this.scrollWidth  > this.clientWidth ; },
			configurable: true
		},
		overflowVert:{
			get:function(){ return this.scrollHeight > this.clientHeight; },
			configurable: true
		},
	});
}).call(Element);

/* USER-DEFINED CLASS */
/*******************************\
|*** Range                      |
\*******************************/
(function(){
	var base = Object.freeze([-Infinity,+Infinity,true,true]);

	function exclusiveClamp(rangeObj){
		if(rangeObj instanceof Range) {
			if(
				Math.abs(rangeObj.end - rangeObj.begin) < Number.EPSILON &&
				rangeObj.exclusive()
			) {
				rangeObj.inFirst = rangeObj.inLast = false;
			}
		} else {
			return false;
		}
	}

	window.Range = function Range(b1,b2,i1,i2){
		/*jshint: validthis true*/
		if(!(this instanceof Range)){ return new Range(b1,b2,i1,i2); } else {
			// Single Range Object
			if((b1 instanceof Range) || (typeof b1 == 'object' && b1.length == 4)){
				i2 = b1[3]; i1 = b1[2];
				b2 = b1[1]; b1 = b1[0];
			// Two Pair of Values
			} else if ([b1,b2].every(function(pair){ return typeof pair == 'object' && pair.length == 2;})) {
				i2 = b2[1]; i1 = b2[0];
				b2 = b1[1]; b1 = b1[0];
			}

			b1 = parseInt(b1,10);
			b2 = parseInt(b2,10);
			i1 = typeof i1 == 'undefined' ? base[2] : !!i1;
			i2 = typeof i2 == 'undefined' ? base[3] : !!i2;

			b1 = isNaN(b1) ? base[0] : b1;
			b2 = isNaN(b2) ? base[1] : b2;

			if(b1 > b2){
			// Swap bad ranges
				var tp;
				tp = b2; b2 = b1; b1 = tp;
				tp = i2; i2 = i1; i1 = tp;
			}

			Object.defineProperties(this,{
				begin  :{get:function(){return b1;},set:function(v){v = parseInt(v,10); b1 = isNaN(v) ? base[0] : v;}},
				end    :{get:function(){return b2;},set:function(v){v = parseInt(v,10); b2 = isNaN(v) ? base[1] : v;}},
				inFirst:{get:function(){return i1;},set:function(v){v = !!v; i1 = v;}},
				inLast :{get:function(){return i2;},set:function(v){v = !!v; i2 = v;}},

				first  :{get:function(){return this.begin;},set:function(v){this.begin=v;exclusiveClamp(this);}},
				last   :{get:function(){return this.end  ;},set:function(v){this.end  =v;exclusiveClamp(this);}},
			});
		}
	};

	Object.defineProperties(Range.prototype,{
		begin    :{get:function(){return base[0];}},
		first    :{get:function(){return base[0];}},

		last     :{get:function(){return base[1];}},
		end      :{get:function(){return base[1];}},

		inFirst  :{get:function(){return !!base[2];}},
		inLast   :{get:function(){return !!base[3];}},

		inside   :{value:function(x){return Number(x).inside(this);}},
		exclusive:{value:function( ){return this.inFirst || this.inLast;}},

		0        :{get:function(){return this.begin;}  ,set:function(v){this.begin=v;}  },
		1        :{get:function(){return this.end;}    ,set:function(v){this.end=v;}    },
		2        :{get:function(){return this.inFirst;},set:function(v){this.inFirst=v;}},
		3        :{get:function(){return this.inLast;} ,set:function(v){this.inLast=v;} },

		toJSON   :{value:function(){ return Array.apply(null,this); }},
		toString :{value:function(){
			return (""%L%B,%E%R"")
				.replace(""%L"",this.inFirst ? '[' : '(').replace(""%R"",this.inLast  ? ']' : ')')
				.replace(""%B"",this.begin).replace(""%E"",this.end);
		}},
		valueOf  :{value:function(){return [this.begin,this.end,this.inFirst,this.inLast];}},
		length   :{value:4}, // for array operation
	});

})();
",FALSE,,4095
3986,InitialSO.csv3986.txt,InitialGit.csv3986.txt,6,"/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}
 v=aa v=aaaaaaaaaaaaaaaaaa ^https?:\/\/(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ youtube.com/watch?gl=US&hl=en-US&v=bQVoAWSP7k4 ^(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ ^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$ youtu.be/<video:id>   
 www.youtu.be/<video:id>     
 http://youtu.be/<video:id>   
 http://www.youtu.be/<video:id>   
 https://youtu.be/<video:id>     
 https://www.youtu.be/<video:id>   
 youtube.com/embed/<video:id>   
youtube.com/embed/<video:id>&other_params 
 www.youtube.com/embed/<video:id>   
www.youtube.com/embed/<video:id>&other_params   
 http://youtube.com/embed/<video:id>   
http://youtube.com/embed/<video:id>&other_params  
 http://www.youtube.com/embed/<video:id>   
http://www.youtube.com/embed/<video:id>&other_params  
 https://youtube.com/embed/<video:id>   
https://youtube.com/embed/<video:id>&other_params    
 https://www.youtube.com/embed/<video:id>   
https://www.youtube.com/embed/<video:id>&other_params
 youtube.com/v/<video:id>   
youtube.com/v/<video:id>&other_params 
 www.youtube.com/v/<video:id>   
www.youtube.com/v/<video:id>&other_params   
 http://youtube.com/v/<video:id>   
http://youtube.com/v/<video:id>&other_params  
 http://www.youtube.com/v/<video:id>   
http://www.youtube.com/v/<video:id>&other_params  
 https://youtube.com/v/<video:id>   
https://youtube.com/v/<video:id>&other_params    
 https://www.youtube.com/v/<video:id>   
https://www.youtube.com/v/<video:id>&other_params   
 youtube.com/watch?v=<video:id>   
youtube.com/watch?v=<video:id>&other_params   
youtube.com/watch?other_params&v=<video:id> 
youtube.com/watch?other_params&v=<video:id>&more_params  
 www.youtube.com/watch?v=<video:id>   
www.youtube.com/watch?v=<video:id>&other_params   
www.youtube.com/watch?other_params&v=<video:id>  
www.youtube.com/watch?other_params&v=<video:id>&more_params   
 http://youtube.com/watch?v=<video:id>   
http://youtube.com/watch?v=<video:id>&other_params   
http://youtube.com/watch?other_params&v=<video:id>   
http://youtube.com/watch?other_params&v=<video:id>&more_params  
 http://www.youtube.com/watch?v=<video:id>   
http://www.youtube.com/watch?v=<video:id>&other_params   
http://www.youtube.com/watch?other_params&v=<video:id>   
http://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 https://youtube.com/watch?v=<video:id>   
https://youtube.com/watch?v=<video:id>&other_params   
https://youtube.com/watch?other_params&v=<video:id>   
https://youtube.com/watch?other_params&v=<video:id>&more_params     
 https://www.youtube.com/watch?v=<video:id>   
https://www.youtube.com/watch?v=<video:id>&other_params   
https://www.youtube.com/watch?other_params&v=<video:id>
https://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 /**
 * JavaScript function to match (and return) the video Id
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}

// for example snippet only!
document.body.addEventListener('click', function(e) {
    if (e.target.className == 'yt-url' && 'undefined' !== e.target.value) {
        var ytId = ytVidId(e.target.value);
        alert(e.target.value + ""\r\nResult: "" + (!ytId ? 'false' : ytId));
    }
}, false); <!-- Click the buttons to probe URLs -->
<input type=""button"" value=""https://www.youtube.com/watch?v=p-e2G_VcTms&feature=g-logo&context=G29aead6FOAAAAAAABAA"" class=""yt-url"">
<input type=""button"" value=""https://www.youtube.com/latest"" class=""yt-url""> RegExp.$1 true ","/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: https://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}
 v=aa v=aaaaaaaaaaaaaaaaaa ^https?:\/\/(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ youtube.com/watch?gl=US&hl=en-US&v=bQVoAWSP7k4 ^(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ ^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$ youtu.be/<video:id>   
 www.youtu.be/<video:id>     
 http://youtu.be/<video:id>   
 http://www.youtu.be/<video:id>   
 https://youtu.be/<video:id>     
 https://www.youtu.be/<video:id>   
 youtube.com/embed/<video:id>   
youtube.com/embed/<video:id>&other_params 
 www.youtube.com/embed/<video:id>   
www.youtube.com/embed/<video:id>&other_params   
 http://youtube.com/embed/<video:id>   
http://youtube.com/embed/<video:id>&other_params  
 http://www.youtube.com/embed/<video:id>   
http://www.youtube.com/embed/<video:id>&other_params  
 https://youtube.com/embed/<video:id>   
https://youtube.com/embed/<video:id>&other_params    
 https://www.youtube.com/embed/<video:id>   
https://www.youtube.com/embed/<video:id>&other_params
 youtube.com/v/<video:id>   
youtube.com/v/<video:id>&other_params 
 www.youtube.com/v/<video:id>   
www.youtube.com/v/<video:id>&other_params   
 http://youtube.com/v/<video:id>   
http://youtube.com/v/<video:id>&other_params  
 http://www.youtube.com/v/<video:id>   
http://www.youtube.com/v/<video:id>&other_params  
 https://youtube.com/v/<video:id>   
https://youtube.com/v/<video:id>&other_params    
 https://www.youtube.com/v/<video:id>   
https://www.youtube.com/v/<video:id>&other_params   
 youtube.com/watch?v=<video:id>   
youtube.com/watch?v=<video:id>&other_params   
youtube.com/watch?other_params&v=<video:id> 
youtube.com/watch?other_params&v=<video:id>&more_params  
 www.youtube.com/watch?v=<video:id>   
www.youtube.com/watch?v=<video:id>&other_params   
www.youtube.com/watch?other_params&v=<video:id>  
www.youtube.com/watch?other_params&v=<video:id>&more_params   
 http://youtube.com/watch?v=<video:id>   
http://youtube.com/watch?v=<video:id>&other_params   
http://youtube.com/watch?other_params&v=<video:id>   
http://youtube.com/watch?other_params&v=<video:id>&more_params  
 http://www.youtube.com/watch?v=<video:id>   
http://www.youtube.com/watch?v=<video:id>&other_params   
http://www.youtube.com/watch?other_params&v=<video:id>   
http://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 https://youtube.com/watch?v=<video:id>   
https://youtube.com/watch?v=<video:id>&other_params   
https://youtube.com/watch?other_params&v=<video:id>   
https://youtube.com/watch?other_params&v=<video:id>&more_params     
 https://www.youtube.com/watch?v=<video:id>   
https://www.youtube.com/watch?v=<video:id>&other_params   
https://www.youtube.com/watch?other_params&v=<video:id>
https://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 /**
 * JavaScript function to match (and return) the video Id
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: https://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}

// for example snippet only!
document.body.addEventListener('click', function(e) {
    if (e.target.className == 'yt-url' && 'undefined' !== e.target.value) {
        var ytId = ytVidId(e.target.value);
        alert(e.target.value + ""\r\nResult: "" + (!ytId ? 'false' : ytId));
    }
}, false); <!-- Click the buttons to probe URLs -->
<input type=""button"" value=""https://www.youtube.com/watch?v=p-e2G_VcTms&feature=g-logo&context=G29aead6FOAAAAAAABAA"" class=""yt-url"">
<input type=""button"" value=""https://www.youtube.com/latest"" class=""yt-url""> RegExp.$1 true ",FALSE,"/*
* Youtube Embed Plugin
*
* @author Jonnas Fonini <contato@fonini.net>
* @version 2.0.9
*/
( function() {
	CKEDITOR.plugins.add( 'youtube',
	{
		lang: [ 'en', 'pt', 'ja', 'hu', 'it', 'fr', 'tr', 'ru', 'de', 'ar', 'nl', 'pl', 'vi', 'zh', 'el', 'he', 'es', 'nb', 'nn', 'fi', 'et', 'sk', 'cs'],
		init: function( editor )
		{
			editor.addCommand( 'youtube', new CKEDITOR.dialogCommand( 'youtube', {
				allowedContent: 'div{*}; iframe{*}[!width,!height,!src,!frameborder,!allowfullscreen]; object param[*]'
			}));

			editor.ui.addButton( 'Youtube',
			{
				label : editor.lang.youtube.button,
				toolbar : 'insert',
				command : 'youtube',
				icon : this.path + 'images/icon.png'
			});

			CKEDITOR.dialog.add( 'youtube', function ( instance )
			{
				var video;

				return {
					title : editor.lang.youtube.title,
					minWidth : 500,
					minHeight : 200,
					contents :
						[{
							id : 'youtubePlugin',
							expand : true,
							elements :
								[{
									id : 'txtEmbed',
									type : 'textarea',
									label : editor.lang.youtube.txtEmbed,
									autofocus : 'autofocus',
									onChange : function ( api )
									{
										handleEmbedChange( this, api );
									},
									onKeyUp : function ( api )
									{
										handleEmbedChange( this, api );
									},
									validate : function ()
									{
										if ( this.isEnabled() )
										{
											if ( !this.getValue() )
											{
												alert( editor.lang.youtube.noCode );
												return false;
											}
											else
											if ( this.getValue().length === 0 || this.getValue().indexOf( '//' ) === -1 )
											{
												alert( editor.lang.youtube.invalidEmbed );
												return false;
											}
										}
									}
								},
								{
									type : 'html',
									html : editor.lang.youtube.or + '<hr>'
								},
								{
									type : 'hbox',
									widths : [ '70%', '15%', '15%' ],
									children :
									[
										{
											id : 'txtUrl',
											type : 'text',
											label : editor.lang.youtube.txtUrl,
											onChange : function ( api )
											{
												handleLinkChange( this, api );
											},
											onKeyUp : function ( api )
											{
												handleLinkChange( this, api );
											},
											validate : function ()
											{
												if ( this.isEnabled() )
												{
													if ( !this.getValue() )
													{
														alert( editor.lang.youtube.noCode );
														return false;
													}
													else{
														video = ytVidId(this.getValue());

														if ( this.getValue().length === 0 ||  video === false)
														{
															alert( editor.lang.youtube.invalidUrl );
															return false;
														}
													}
												}
											}
										},
										{
											type : 'text',
											id : 'txtWidth',
											width : '60px',
											label : editor.lang.youtube.txtWidth,
											'default' : editor.config.youtube_width != null ? editor.config.youtube_width : '640',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var width = parseInt ( this.getValue() ) || 0;

													if ( width === 0 )
													{
														alert( editor.lang.youtube.invalidWidth );
														return false;
													}
												}
												else {
													alert( editor.lang.youtube.noWidth );
													return false;
												}
											}
										},
										{
											type : 'text',
											id : 'txtHeight',
											width : '60px',
											label : editor.lang.youtube.txtHeight,
											'default' : editor.config.youtube_height != null ? editor.config.youtube_height : '360',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var height = parseInt ( this.getValue() ) || 0;

													if ( height === 0 )
													{
														alert( editor.lang.youtube.invalidHeight );
														return false;
													}
												}
												else {
													alert( editor.lang.youtube.noHeight );
													return false;
												}
											}
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '100%' ],
									children :
										[
											{
												id : 'chkResponsive',
												type : 'checkbox',
												label : editor.lang.youtube.txtResponsive,
												'default' : editor.config.youtube_responsive != null ? editor.config.youtube_responsive : false
											}
										]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkRelated',
											type : 'checkbox',
											'default' : editor.config.youtube_related != null ? editor.config.youtube_related : true,
											label : editor.lang.youtube.chkRelated
										},
										{
											id : 'chkOlderCode',
											type : 'checkbox',
											'default' : editor.config.youtube_older != null ? editor.config.youtube_older : false,
											label : editor.lang.youtube.chkOlderCode
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkPrivacy',
											type : 'checkbox',
											label : editor.lang.youtube.chkPrivacy,
											'default' : editor.config.youtube_privacy != null ? editor.config.youtube_privacy : false
										},
										{
											id : 'chkAutoplay',
											type : 'checkbox',
											'default' : editor.config.youtube_autoplay != null ? editor.config.youtube_autoplay : false,
											label : editor.lang.youtube.chkAutoplay
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%'],
									children :
									[
										{
											id : 'txtStartAt',
											type : 'text',
											label : editor.lang.youtube.txtStartAt,
											validate : function ()
											{
												if ( this.getValue() )
												{
													var str = this.getValue();

													if ( !/^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$/i.test( str ) )
													{
														alert( editor.lang.youtube.invalidTime );
														return false;
													}
												}
											}
										},
										{
											id: 'empty',
											type: 'html',
											html: ''
										}
									]
								}
							]
						}
					],
					onOk: function()
					{
						var content = '';
						var responsiveStyle='';

						if ( this.getContentElement( 'youtubePlugin', 'txtEmbed' ).isEnabled() )
						{
							content = this.getValueOf( 'youtubePlugin', 'txtEmbed' );
						}
						else {
							var url = '//', params = [], startSecs;
							var width = this.getValueOf( 'youtubePlugin', 'txtWidth' );
							var height = this.getValueOf( 'youtubePlugin', 'txtHeight' );

							if ( this.getContentElement( 'youtubePlugin', 'chkPrivacy' ).getValue() === true )
							{
								url += 'www.youtube-nocookie.com/';
							}
							else {
								url += 'www.youtube.com/';
							}

							url += 'embed/' + video;

							if ( this.getContentElement( 'youtubePlugin', 'chkRelated' ).getValue() === false )
							{
								params.push('rel=0');
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkAutoplay' ).getValue() === true )
							{
								params.push('autoplay=1');
							}

							startSecs = this.getValueOf( 'youtubePlugin', 'txtStartAt' );
							if ( startSecs ){
								var seconds = hmsToSeconds( startSecs );

								params.push('start=' + seconds);
							}

							if ( params.length > 0 )
							{
								url = url + '?' + params.join( '&' );
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkResponsive').getValue() === true ) {
								content += '<div class=""youtube-embed-wrapper"" style=""position:relative;padding-bottom:56.25%;padding-top:30px;height:0;overflow:hidden;"">';
								responsiveStyle = 'style=""position: absolute;top: 0;left: 0;width: 100%;height: 100%;""';
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkOlderCode' ).getValue() === true )
							{
								url = url.replace('embed/', 'v/');
								url = url.replace(/&/g, '&amp;');

								if ( url.indexOf('?') === -1 )
								{
									url += '?';
								}
								else {
									url += '&amp;';
								}
								url += 'hl=' + (this.getParentEditor().config.language ? this.getParentEditor().config.language : 'en') + '&amp;version=3';

								content += '<object width=""' + width + '"" height=""' + height + '"" ' + responsiveStyle + '>';
								content += '<param name=""movie"" value=""' + url + '""></param>';
								content += '<param name=""allowFullScreen"" value=""true""></param>';
								content += '<param name=""allowscriptaccess"" value=""always""></param>';
								content += '<embed src=""' + url + '"" type=""application/x-shockwave-flash"" ';
								content += 'width=""' + width + '"" height=""' + height + '"" '+ responsiveStyle + ' allowscriptaccess=""always"" ';
								content += 'allowfullscreen=""true""></embed>';
								content += '</object>';
							}
							else {
								content += '<iframe width=""' + width + '"" height=""' + height + '"" src=""' + url + '"" ' + responsiveStyle;
								content += 'frameborder=""0"" allowfullscreen></iframe>';
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkResponsive').getValue() === true ) {
								content += '</div>';
							}
						}
						
						var element = CKEDITOR.dom.element.createFromHtml( content );
						var instance = this.getParentEditor();
						instance.insertElement(element);
					}
				};
			});
		}
	});
})();

function handleLinkChange( el, api )
{
	if ( el.getValue().length > 0 )
	{
		el.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).disable();
	}
	else {
		el.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).enable();
	}
}

function handleEmbedChange( el, api )
{
	if ( el.getValue().length > 0 )
	{
		el.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).disable();
	}
	else {
		el.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).enable();
	}
}


/**
 * JavaScript function to match (and return) the video Id
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId( url )
{
	var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
	return ( url.match( p ) ) ? RegExp.$1 : false;
}

/**
 * Converts time in hms format to seconds only
 */
function hmsToSeconds( time )
{
	var arr = time.split(':'), s = 0, m = 1;

	while (arr.length > 0)
	{
		s += m * parseInt(arr.pop(), 10);
		m *= 60;
	}

	return s;
}
","/*
* Youtube Embed Plugin
*
* @author Jonnas Fonini <contato@fonini.net>
* @version 2.0.9
*/
( function() {
	CKEDITOR.plugins.add( 'youtube',
	{
		lang: [ 'en', 'pt', 'ja', 'hu', 'it', 'fr', 'tr', 'ru', 'de', 'ar', 'nl', 'pl', 'vi', 'zh', 'el', 'he', 'es', 'nb', 'nn', 'fi', 'et', 'sk', 'cs'],
		init: function( editor )
		{
			editor.addCommand( 'youtube', new CKEDITOR.dialogCommand( 'youtube', {
				allowedContent: 'div{*}; iframe{*}[!width,!height,!src,!frameborder,!allowfullscreen]; object param[*]'
			}));

			editor.ui.addButton( 'Youtube',
			{
				label : editor.lang.youtube.button,
				toolbar : 'insert',
				command : 'youtube',
				icon : this.path + 'images/icon.png'
			});

			CKEDITOR.dialog.add( 'youtube', function ( instance )
			{
				var video;

				return {
					title : editor.lang.youtube.title,
					minWidth : 500,
					minHeight : 200,
					contents :
						[{
							id : 'youtubePlugin',
							expand : true,
							elements :
								[{
									id : 'txtEmbed',
									type : 'textarea',
									label : editor.lang.youtube.txtEmbed,
									autofocus : 'autofocus',
									onChange : function ( api )
									{
										handleEmbedChange( this, api );
									},
									onKeyUp : function ( api )
									{
										handleEmbedChange( this, api );
									},
									validate : function ()
									{
										if ( this.isEnabled() )
										{
											if ( !this.getValue() )
											{
												alert( editor.lang.youtube.noCode );
												return false;
											}
											else
											if ( this.getValue().length === 0 || this.getValue().indexOf( '//' ) === -1 )
											{
												alert( editor.lang.youtube.invalidEmbed );
												return false;
											}
										}
									}
								},
								{
									type : 'html',
									html : editor.lang.youtube.or + '<hr>'
								},
								{
									type : 'hbox',
									widths : [ '70%', '15%', '15%' ],
									children :
									[
										{
											id : 'txtUrl',
											type : 'text',
											label : editor.lang.youtube.txtUrl,
											onChange : function ( api )
											{
												handleLinkChange( this, api );
											},
											onKeyUp : function ( api )
											{
												handleLinkChange( this, api );
											},
											validate : function ()
											{
												if ( this.isEnabled() )
												{
													if ( !this.getValue() )
													{
														alert( editor.lang.youtube.noCode );
														return false;
													}
													else{
														video = ytVidId(this.getValue());

														if ( this.getValue().length === 0 ||  video === false)
														{
															alert( editor.lang.youtube.invalidUrl );
															return false;
														}
													}
												}
											}
										},
										{
											type : 'text',
											id : 'txtWidth',
											width : '60px',
											label : editor.lang.youtube.txtWidth,
											'default' : editor.config.youtube_width != null ? editor.config.youtube_width : '640',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var width = parseInt ( this.getValue() ) || 0;

													if ( width === 0 )
													{
														alert( editor.lang.youtube.invalidWidth );
														return false;
													}
												}
												else {
													alert( editor.lang.youtube.noWidth );
													return false;
												}
											}
										},
										{
											type : 'text',
											id : 'txtHeight',
											width : '60px',
											label : editor.lang.youtube.txtHeight,
											'default' : editor.config.youtube_height != null ? editor.config.youtube_height : '360',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var height = parseInt ( this.getValue() ) || 0;

													if ( height === 0 )
													{
														alert( editor.lang.youtube.invalidHeight );
														return false;
													}
												}
												else {
													alert( editor.lang.youtube.noHeight );
													return false;
												}
											}
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '100%' ],
									children :
										[
											{
												id : 'chkResponsive',
												type : 'checkbox',
												label : editor.lang.youtube.txtResponsive,
												'default' : editor.config.youtube_responsive != null ? editor.config.youtube_responsive : false
											}
										]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkRelated',
											type : 'checkbox',
											'default' : editor.config.youtube_related != null ? editor.config.youtube_related : true,
											label : editor.lang.youtube.chkRelated
										},
										{
											id : 'chkOlderCode',
											type : 'checkbox',
											'default' : editor.config.youtube_older != null ? editor.config.youtube_older : false,
											label : editor.lang.youtube.chkOlderCode
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkPrivacy',
											type : 'checkbox',
											label : editor.lang.youtube.chkPrivacy,
											'default' : editor.config.youtube_privacy != null ? editor.config.youtube_privacy : false
										},
										{
											id : 'chkAutoplay',
											type : 'checkbox',
											'default' : editor.config.youtube_autoplay != null ? editor.config.youtube_autoplay : false,
											label : editor.lang.youtube.chkAutoplay
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%'],
									children :
									[
										{
											id : 'txtStartAt',
											type : 'text',
											label : editor.lang.youtube.txtStartAt,
											validate : function ()
											{
												if ( this.getValue() )
												{
													var str = this.getValue();

													if ( !/^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$/i.test( str ) )
													{
														alert( editor.lang.youtube.invalidTime );
														return false;
													}
												}
											}
										},
										{
											id: 'empty',
											type: 'html',
											html: ''
										}
									]
								}
							]
						}
					],
					onOk: function()
					{
						var content = '';
						var responsiveStyle='';

						if ( this.getContentElement( 'youtubePlugin', 'txtEmbed' ).isEnabled() )
						{
							content = this.getValueOf( 'youtubePlugin', 'txtEmbed' );
						}
						else {
							var url = '//', params = [], startSecs;
							var width = this.getValueOf( 'youtubePlugin', 'txtWidth' );
							var height = this.getValueOf( 'youtubePlugin', 'txtHeight' );

							if ( this.getContentElement( 'youtubePlugin', 'chkPrivacy' ).getValue() === true )
							{
								url += 'www.youtube-nocookie.com/';
							}
							else {
								url += 'www.youtube.com/';
							}

							url += 'embed/' + video;

							if ( this.getContentElement( 'youtubePlugin', 'chkRelated' ).getValue() === false )
							{
								params.push('rel=0');
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkAutoplay' ).getValue() === true )
							{
								params.push('autoplay=1');
							}

							startSecs = this.getValueOf( 'youtubePlugin', 'txtStartAt' );
							if ( startSecs ){
								var seconds = hmsToSeconds( startSecs );

								params.push('start=' + seconds);
							}

							if ( params.length > 0 )
							{
								url = url + '?' + params.join( '&' );
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkResponsive').getValue() === true ) {
								content += '<div class=""youtube-embed-wrapper"" style=""position:relative;padding-bottom:56.25%;padding-top:30px;height:0;overflow:hidden;"">';
								responsiveStyle = 'style=""position: absolute;top: 0;left: 0;width: 100%;height: 100%;""';
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkOlderCode' ).getValue() === true )
							{
								url = url.replace('embed/', 'v/');
								url = url.replace(/&/g, '&amp;');

								if ( url.indexOf('?') === -1 )
								{
									url += '?';
								}
								else {
									url += '&amp;';
								}
								url += 'hl=' + (this.getParentEditor().config.language ? this.getParentEditor().config.language : 'en') + '&amp;version=3';

								content += '<object width=""' + width + '"" height=""' + height + '"" ' + responsiveStyle + '>';
								content += '<param name=""movie"" value=""' + url + '""></param>';
								content += '<param name=""allowFullScreen"" value=""true""></param>';
								content += '<param name=""allowscriptaccess"" value=""always""></param>';
								content += '<embed src=""' + url + '"" type=""application/x-shockwave-flash"" ';
								content += 'width=""' + width + '"" height=""' + height + '"" '+ responsiveStyle + ' allowscriptaccess=""always"" ';
								content += 'allowfullscreen=""true""></embed>';
								content += '</object>';
							}
							else {
								content += '<iframe width=""' + width + '"" height=""' + height + '"" src=""' + url + '"" ' + responsiveStyle;
								content += 'frameborder=""0"" allowfullscreen></iframe>';
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkResponsive').getValue() === true ) {
								content += '</div>';
							}
						}
						
						var element = CKEDITOR.dom.element.createFromHtml( content );
						var instance = this.getParentEditor();
						instance.insertElement(element);
					}
				};
			});
		}
	});
})();

function handleLinkChange( el, api )
{
	if ( el.getValue().length > 0 )
	{
		el.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).disable();
	}
	else {
		el.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).enable();
	}
}

function handleEmbedChange( el, api )
{
	if ( el.getValue().length > 0 )
	{
		el.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).disable();
	}
	else {
		el.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).enable();
	}
}


/**
 * JavaScript function to match (and return) the video Id
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId( url )
{
	var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
	return ( url.match( p ) ) ? RegExp.$1 : false;
}

/**
 * Converts time in hms format to seconds only
 */
function hmsToSeconds( time )
{
	var arr = time.split(':'), s = 0, m = 1;

	while (arr.length > 0)
	{
		s += m * parseInt(arr.pop(), 10);
		m *= 60;
	}

	return s;
}
",TRUE,,4112
3987,InitialSO.csv3987.txt,InitialGit.csv3987.txt,6,"/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}
 v=aa v=aaaaaaaaaaaaaaaaaa ^https?:\/\/(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ youtube.com/watch?gl=US&hl=en-US&v=bQVoAWSP7k4 ^(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ ^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$ youtu.be/<video:id>   
 www.youtu.be/<video:id>     
 http://youtu.be/<video:id>   
 http://www.youtu.be/<video:id>   
 https://youtu.be/<video:id>     
 https://www.youtu.be/<video:id>   
 youtube.com/embed/<video:id>   
youtube.com/embed/<video:id>&other_params 
 www.youtube.com/embed/<video:id>   
www.youtube.com/embed/<video:id>&other_params   
 http://youtube.com/embed/<video:id>   
http://youtube.com/embed/<video:id>&other_params  
 http://www.youtube.com/embed/<video:id>   
http://www.youtube.com/embed/<video:id>&other_params  
 https://youtube.com/embed/<video:id>   
https://youtube.com/embed/<video:id>&other_params    
 https://www.youtube.com/embed/<video:id>   
https://www.youtube.com/embed/<video:id>&other_params
 youtube.com/v/<video:id>   
youtube.com/v/<video:id>&other_params 
 www.youtube.com/v/<video:id>   
www.youtube.com/v/<video:id>&other_params   
 http://youtube.com/v/<video:id>   
http://youtube.com/v/<video:id>&other_params  
 http://www.youtube.com/v/<video:id>   
http://www.youtube.com/v/<video:id>&other_params  
 https://youtube.com/v/<video:id>   
https://youtube.com/v/<video:id>&other_params    
 https://www.youtube.com/v/<video:id>   
https://www.youtube.com/v/<video:id>&other_params   
 youtube.com/watch?v=<video:id>   
youtube.com/watch?v=<video:id>&other_params   
youtube.com/watch?other_params&v=<video:id> 
youtube.com/watch?other_params&v=<video:id>&more_params  
 www.youtube.com/watch?v=<video:id>   
www.youtube.com/watch?v=<video:id>&other_params   
www.youtube.com/watch?other_params&v=<video:id>  
www.youtube.com/watch?other_params&v=<video:id>&more_params   
 http://youtube.com/watch?v=<video:id>   
http://youtube.com/watch?v=<video:id>&other_params   
http://youtube.com/watch?other_params&v=<video:id>   
http://youtube.com/watch?other_params&v=<video:id>&more_params  
 http://www.youtube.com/watch?v=<video:id>   
http://www.youtube.com/watch?v=<video:id>&other_params   
http://www.youtube.com/watch?other_params&v=<video:id>   
http://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 https://youtube.com/watch?v=<video:id>   
https://youtube.com/watch?v=<video:id>&other_params   
https://youtube.com/watch?other_params&v=<video:id>   
https://youtube.com/watch?other_params&v=<video:id>&more_params     
 https://www.youtube.com/watch?v=<video:id>   
https://www.youtube.com/watch?v=<video:id>&other_params   
https://www.youtube.com/watch?other_params&v=<video:id>
https://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 /**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}
 var url1 = ""https://www.youtube.com/watch?v=p-e2G_VcTms&feature=g-logo&context=G29aead6FOAAAAAAABAA"";
var url2 = ""https://www.youtube.com/latest"";

alert(ytVidId(url1)); // alerts ""p-e2G_VcTms""
alert(ytVidId(url2)); // alerts ""false""
 RegExp.$1 true ","/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: https://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}
 v=aa v=aaaaaaaaaaaaaaaaaa ^https?:\/\/(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ youtube.com/watch?gl=US&hl=en-US&v=bQVoAWSP7k4 ^(?:https?:\/\/)?(?:www\.)?youtube\.com\/watch\?(?=.*v=((\w|-){11}))(?:\S+)?$ ^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$ youtu.be/<video:id>   
 www.youtu.be/<video:id>     
 http://youtu.be/<video:id>   
 http://www.youtu.be/<video:id>   
 https://youtu.be/<video:id>     
 https://www.youtu.be/<video:id>   
 youtube.com/embed/<video:id>   
youtube.com/embed/<video:id>&other_params 
 www.youtube.com/embed/<video:id>   
www.youtube.com/embed/<video:id>&other_params   
 http://youtube.com/embed/<video:id>   
http://youtube.com/embed/<video:id>&other_params  
 http://www.youtube.com/embed/<video:id>   
http://www.youtube.com/embed/<video:id>&other_params  
 https://youtube.com/embed/<video:id>   
https://youtube.com/embed/<video:id>&other_params    
 https://www.youtube.com/embed/<video:id>   
https://www.youtube.com/embed/<video:id>&other_params
 youtube.com/v/<video:id>   
youtube.com/v/<video:id>&other_params 
 www.youtube.com/v/<video:id>   
www.youtube.com/v/<video:id>&other_params   
 http://youtube.com/v/<video:id>   
http://youtube.com/v/<video:id>&other_params  
 http://www.youtube.com/v/<video:id>   
http://www.youtube.com/v/<video:id>&other_params  
 https://youtube.com/v/<video:id>   
https://youtube.com/v/<video:id>&other_params    
 https://www.youtube.com/v/<video:id>   
https://www.youtube.com/v/<video:id>&other_params   
 youtube.com/watch?v=<video:id>   
youtube.com/watch?v=<video:id>&other_params   
youtube.com/watch?other_params&v=<video:id> 
youtube.com/watch?other_params&v=<video:id>&more_params  
 www.youtube.com/watch?v=<video:id>   
www.youtube.com/watch?v=<video:id>&other_params   
www.youtube.com/watch?other_params&v=<video:id>  
www.youtube.com/watch?other_params&v=<video:id>&more_params   
 http://youtube.com/watch?v=<video:id>   
http://youtube.com/watch?v=<video:id>&other_params   
http://youtube.com/watch?other_params&v=<video:id>   
http://youtube.com/watch?other_params&v=<video:id>&more_params  
 http://www.youtube.com/watch?v=<video:id>   
http://www.youtube.com/watch?v=<video:id>&other_params   
http://www.youtube.com/watch?other_params&v=<video:id>   
http://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 https://youtube.com/watch?v=<video:id>   
https://youtube.com/watch?v=<video:id>&other_params   
https://youtube.com/watch?other_params&v=<video:id>   
https://youtube.com/watch?other_params&v=<video:id>&more_params     
 https://www.youtube.com/watch?v=<video:id>   
https://www.youtube.com/watch?v=<video:id>&other_params   
https://www.youtube.com/watch?other_params&v=<video:id>
https://www.youtube.com/watch?other_params&v=<video:id>&more_params  
 /**
 * JavaScript function to match (and return) the video Id
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: https://stackoverflow.com/a/10315969/624466
 */
function ytVidId(url) {
  var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
  return (url.match(p)) ? RegExp.$1 : false;
}

// for example snippet only!
document.body.addEventListener('click', function(e) {
    if (e.target.className == 'yt-url' && 'undefined' !== e.target.value) {
        var ytId = ytVidId(e.target.value);
        alert(e.target.value + ""\r\nResult: "" + (!ytId ? 'false' : ytId));
    }
}, false); <!-- Click the buttons to probe URLs -->
<input type=""button"" value=""https://www.youtube.com/watch?v=p-e2G_VcTms&feature=g-logo&context=G29aead6FOAAAAAAABAA"" class=""yt-url"">
<input type=""button"" value=""https://www.youtube.com/latest"" class=""yt-url""> RegExp.$1 true ",FALSE,"/*
* Youtube Embed Plugin
*
* @author Jonnas Fonini <contato@fonini.net>
* @version 1.0.7
*/
( function() {
	CKEDITOR.plugins.add( 'youtube',
	{
		lang: [ 'en', 'pt', 'ja', 'hu', 'it', 'fr', 'tr', 'ru', 'de' ],
		init: function( editor )
		{
			editor.addCommand( 'youtube', new CKEDITOR.dialogCommand( 'youtube', {
				allowedContent: 'iframe[!width,!height,!src,!frameborder,!allowfullscreen]; object param[*]'
			}));

			editor.ui.addButton( 'Youtube',
			{
				label : editor.lang.youtube.button,
				toolbar : 'insert',
				command : 'youtube',
				icon : this.path + 'images/icon.png'
			});

			CKEDITOR.dialog.add( 'youtube', function ( instance )
			{
				var video;

				return {
					title : editor.lang.youtube.title,
					minWidth : 500,
					minHeight : 200,
					contents :
						[{
							id : 'youtubePlugin',
							expand : true,
							elements :
								[{
									id : 'txtEmbed',
									type : 'textarea',
									label : editor.lang.youtube.txtEmbed,
									autofocus : 'autofocus',
									onKeyUp : function ( api )
									{
										if ( this.getValue().length > 0 )
										{
											this.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).disable();
										}
										else {
											this.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).enable();
										}
									},
									validate : function ()
									{
										if ( this.isEnabled() )
										{
											if ( !this.getValue() )
											{
												alert( editor.lang.youtube.noCode );
												return false;
											}
											else
											if ( this.getValue().length === 0 || this.getValue().indexOf( '//' ) === -1 )
											{
												alert( editor.lang.youtube.invalidEmbed );
												return false;
											}
										}
									}
								},
								{
									type : 'html',
									html : editor.lang.youtube.or + '<hr>'
								},
								{
									type : 'hbox',
									widths : [ '70%', '15%', '15%' ],
									children :
									[
										{
											id : 'txtUrl',
											type : 'text',
											label : editor.lang.youtube.txtUrl,
											onKeyUp : function ( api )
											{
												if ( this.getValue().length > 0 )
												{
													this.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).disable();
												}
												else {
													this.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).enable();
												}
											},
											validate : function ()
											{
												if ( this.isEnabled() )
												{
													if ( !this.getValue() )
													{
														alert( editor.lang.youtube.noCode );
														return false;
													}
													else{
														video = ytVidId(this.getValue());

														if ( this.getValue().length === 0 ||  video === false)
														{
															alert( editor.lang.youtube.invalidUrl );
															return false;
														}
													}
												}
											}
										},
										{
											type : 'text',
											id : 'txtWidth',
											width : '60px',
											label : editor.lang.youtube.txtWidth,
											'default' : editor.config.youtube_width != null ? editor.config.youtube_width : '640',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var width = parseInt ( this.getValue() ) || 0;

													if ( width === 0 )
													{
														alert( editor.lang.youtube.invalidWidth );
														return false;	
													}
												}
												else {
													alert( editor.lang.youtube.noWidth );
													return false;
												}
											}
										},
										{
											type : 'text',
											id : 'txtHeight',
											width : '60px',
											label : editor.lang.youtube.txtHeight,
											'default' : editor.config.youtube_height != null ? editor.config.youtube_height : '360',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var height = parseInt ( this.getValue() ) || 0;

													if ( height === 0 )
													{
														alert( editor.lang.youtube.invalidHeight );
														return false;	
													}
												}
												else {
													alert( editor.lang.youtube.noHeight );
													return false;
												}
											}
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkRelated',
											type : 'checkbox',
											'default' : editor.config.youtube_related != null ? editor.config.youtube_related : true,
											label : editor.lang.youtube.chkRelated
										},
										{
											id : 'chkOlderCode',
											type : 'checkbox',
											'default' : editor.config.youtube_older != null ? editor.config.youtube_older : false,
											label : editor.lang.youtube.chkOlderCode
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkPrivacy',
											type : 'checkbox',
											label : editor.lang.youtube.chkPrivacy,
											'default' : editor.config.youtube_privacy != null ? editor.config.youtube_privacy : false
										},
										{
											id : 'txtStartAt',
											type : 'text',
											label : editor.lang.youtube.txtStartAt,
											validate : function ()
											{
												if ( this.getValue() )
												{
													var str = this.getValue();
													
													if ( !/^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$/i.test( str ) )
													{
														alert( editor.lang.youtube.invalidTime );
														return false;
													}
												}
											}
										}
									]
								}
							]
						}
					],
					onOk: function()
					{
						var content = '';

						if ( this.getContentElement( 'youtubePlugin', 'txtEmbed' ).isEnabled() )
						{
							content = this.getValueOf( 'youtubePlugin', 'txtEmbed' );
						}
						else {
							var url = '//', params = [], startSecs;
							var width = this.getValueOf( 'youtubePlugin', 'txtWidth' );
							var height = this.getValueOf( 'youtubePlugin', 'txtHeight' );

							if ( this.getContentElement( 'youtubePlugin', 'chkPrivacy' ).getValue() === true )
							{
								url += 'www.youtube-nocookie.com/';
							}
							else {
								url += 'www.youtube.com/';
							}

							url += 'embed/' + video;

							if ( this.getContentElement( 'youtubePlugin', 'chkRelated' ).getValue() === false )
							{
								params.push('rel=0');
							}

							startSecs = this.getValueOf( 'youtubePlugin', 'txtStartAt' );
							if ( startSecs ){
								var seconds = hmsToSeconds( startSecs );

								params.push('start=' + seconds);
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkOlderCode' ).getValue() === true )
							{
								url = url.replace('embed/', 'v/');
								url = url.replace(/&/g, '&amp;');

								if ( params.length == 0 )
								{
									url += '?';
								}

								url += 'hl=pt_BR&amp;version=3';

								content = '<object width=""' + width + '"" height=""' + height + '"">';
								content += '<param name=""movie"" value=""' + url + '""></param>';
								content += '<param name=""allowFullScreen"" value=""true""></param>';
								content += '<param name=""allowscriptaccess"" value=""always""></param>';
								content += '<embed src=""' + url + '"" type=""application/x-shockwave-flash"" ';
								content += 'width=""' + width + '"" height=""' + height + '"" allowscriptaccess=""always"" ';
								content += 'allowfullscreen=""true""></embed>';
								content += '</object>';
							}
							else {
								if ( params.length > 0 )
								{
									url = url + '?' + params.join( '&' );
								}

								content = '<iframe width=""' + width + '"" height=""' + height + '"" src=""' + url + '"" ';
								content += 'frameborder=""0"" allowfullscreen></iframe>';	
							}
						}

						var instance = this.getParentEditor();
						instance.insertHtml( content );
					}
				};
			});
		}
	});
})();


/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId( url )
{
	var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
	return ( url.match( p ) ) ? RegExp.$1 : false;
}

/** 
 * Converts time in hms format to seconds only
 */
function hmsToSeconds( time )
{
	var arr = time.split(':'), s = 0, m = 1;

	while (arr.length > 0)
	{
		s += m * parseInt(arr.pop(), 10);
		m *= 60;
	}

	return s;
}
","/*
* Youtube Embed Plugin
*
* @author Jonnas Fonini <contato@fonini.net>
* @version 1.0.7
*/
( function() {
	CKEDITOR.plugins.add( 'youtube',
	{
		lang: [ 'en', 'pt', 'ja', 'hu', 'it', 'fr', 'tr', 'ru', 'de' ],
		init: function( editor )
		{
			editor.addCommand( 'youtube', new CKEDITOR.dialogCommand( 'youtube', {
				allowedContent: 'iframe[!width,!height,!src,!frameborder,!allowfullscreen]; object param[*]'
			}));

			editor.ui.addButton( 'Youtube',
			{
				label : editor.lang.youtube.button,
				toolbar : 'insert',
				command : 'youtube',
				icon : this.path + 'images/icon.png'
			});

			CKEDITOR.dialog.add( 'youtube', function ( instance )
			{
				var video;

				return {
					title : editor.lang.youtube.title,
					minWidth : 500,
					minHeight : 200,
					contents :
						[{
							id : 'youtubePlugin',
							expand : true,
							elements :
								[{
									id : 'txtEmbed',
									type : 'textarea',
									label : editor.lang.youtube.txtEmbed,
									autofocus : 'autofocus',
									onKeyUp : function ( api )
									{
										if ( this.getValue().length > 0 )
										{
											this.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).disable();
										}
										else {
											this.getDialog().getContentElement( 'youtubePlugin', 'txtUrl' ).enable();
										}
									},
									validate : function ()
									{
										if ( this.isEnabled() )
										{
											if ( !this.getValue() )
											{
												alert( editor.lang.youtube.noCode );
												return false;
											}
											else
											if ( this.getValue().length === 0 || this.getValue().indexOf( '//' ) === -1 )
											{
												alert( editor.lang.youtube.invalidEmbed );
												return false;
											}
										}
									}
								},
								{
									type : 'html',
									html : editor.lang.youtube.or + '<hr>'
								},
								{
									type : 'hbox',
									widths : [ '70%', '15%', '15%' ],
									children :
									[
										{
											id : 'txtUrl',
											type : 'text',
											label : editor.lang.youtube.txtUrl,
											onKeyUp : function ( api )
											{
												if ( this.getValue().length > 0 )
												{
													this.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).disable();
												}
												else {
													this.getDialog().getContentElement( 'youtubePlugin', 'txtEmbed' ).enable();
												}
											},
											validate : function ()
											{
												if ( this.isEnabled() )
												{
													if ( !this.getValue() )
													{
														alert( editor.lang.youtube.noCode );
														return false;
													}
													else{
														video = ytVidId(this.getValue());

														if ( this.getValue().length === 0 ||  video === false)
														{
															alert( editor.lang.youtube.invalidUrl );
															return false;
														}
													}
												}
											}
										},
										{
											type : 'text',
											id : 'txtWidth',
											width : '60px',
											label : editor.lang.youtube.txtWidth,
											'default' : editor.config.youtube_width != null ? editor.config.youtube_width : '640',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var width = parseInt ( this.getValue() ) || 0;

													if ( width === 0 )
													{
														alert( editor.lang.youtube.invalidWidth );
														return false;	
													}
												}
												else {
													alert( editor.lang.youtube.noWidth );
													return false;
												}
											}
										},
										{
											type : 'text',
											id : 'txtHeight',
											width : '60px',
											label : editor.lang.youtube.txtHeight,
											'default' : editor.config.youtube_height != null ? editor.config.youtube_height : '360',
											validate : function ()
											{
												if ( this.getValue() )
												{
													var height = parseInt ( this.getValue() ) || 0;

													if ( height === 0 )
													{
														alert( editor.lang.youtube.invalidHeight );
														return false;	
													}
												}
												else {
													alert( editor.lang.youtube.noHeight );
													return false;
												}
											}
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkRelated',
											type : 'checkbox',
											'default' : editor.config.youtube_related != null ? editor.config.youtube_related : true,
											label : editor.lang.youtube.chkRelated
										},
										{
											id : 'chkOlderCode',
											type : 'checkbox',
											'default' : editor.config.youtube_older != null ? editor.config.youtube_older : false,
											label : editor.lang.youtube.chkOlderCode
										}
									]
								},
								{
									type : 'hbox',
									widths : [ '55%', '45%' ],
									children :
									[
										{
											id : 'chkPrivacy',
											type : 'checkbox',
											label : editor.lang.youtube.chkPrivacy,
											'default' : editor.config.youtube_privacy != null ? editor.config.youtube_privacy : false
										},
										{
											id : 'txtStartAt',
											type : 'text',
											label : editor.lang.youtube.txtStartAt,
											validate : function ()
											{
												if ( this.getValue() )
												{
													var str = this.getValue();
													
													if ( !/^(?:(?:([01]?\d|2[0-3]):)?([0-5]?\d):)?([0-5]?\d)$/i.test( str ) )
													{
														alert( editor.lang.youtube.invalidTime );
														return false;
													}
												}
											}
										}
									]
								}
							]
						}
					],
					onOk: function()
					{
						var content = '';

						if ( this.getContentElement( 'youtubePlugin', 'txtEmbed' ).isEnabled() )
						{
							content = this.getValueOf( 'youtubePlugin', 'txtEmbed' );
						}
						else {
							var url = '//', params = [], startSecs;
							var width = this.getValueOf( 'youtubePlugin', 'txtWidth' );
							var height = this.getValueOf( 'youtubePlugin', 'txtHeight' );

							if ( this.getContentElement( 'youtubePlugin', 'chkPrivacy' ).getValue() === true )
							{
								url += 'www.youtube-nocookie.com/';
							}
							else {
								url += 'www.youtube.com/';
							}

							url += 'embed/' + video;

							if ( this.getContentElement( 'youtubePlugin', 'chkRelated' ).getValue() === false )
							{
								params.push('rel=0');
							}

							startSecs = this.getValueOf( 'youtubePlugin', 'txtStartAt' );
							if ( startSecs ){
								var seconds = hmsToSeconds( startSecs );

								params.push('start=' + seconds);
							}

							if ( this.getContentElement( 'youtubePlugin', 'chkOlderCode' ).getValue() === true )
							{
								url = url.replace('embed/', 'v/');
								url = url.replace(/&/g, '&amp;');

								if ( params.length == 0 )
								{
									url += '?';
								}

								url += 'hl=pt_BR&amp;version=3';

								content = '<object width=""' + width + '"" height=""' + height + '"">';
								content += '<param name=""movie"" value=""' + url + '""></param>';
								content += '<param name=""allowFullScreen"" value=""true""></param>';
								content += '<param name=""allowscriptaccess"" value=""always""></param>';
								content += '<embed src=""' + url + '"" type=""application/x-shockwave-flash"" ';
								content += 'width=""' + width + '"" height=""' + height + '"" allowscriptaccess=""always"" ';
								content += 'allowfullscreen=""true""></embed>';
								content += '</object>';
							}
							else {
								if ( params.length > 0 )
								{
									url = url + '?' + params.join( '&' );
								}

								content = '<iframe width=""' + width + '"" height=""' + height + '"" src=""' + url + '"" ';
								content += 'frameborder=""0"" allowfullscreen></iframe>';	
							}
						}

						var instance = this.getParentEditor();
						instance.insertHtml( content );
					}
				};
			});
		}
	});
})();


/**
 * JavaScript function to match (and return) the video Id 
 * of any valid Youtube Url, given as input string.
 * @author: Stephan Schmitz <eyecatchup@gmail.com>
 * @url: http://stackoverflow.com/a/10315969/624466
 */
function ytVidId( url )
{
	var p = /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/;
	return ( url.match( p ) ) ? RegExp.$1 : false;
}

/** 
 * Converts time in hms format to seconds only
 */
function hmsToSeconds( time )
{
	var arr = time.split(':'), s = 0, m = 1;

	while (arr.length > 0)
	{
		s += m * parseInt(arr.pop(), 10);
		m *= 60;
	}

	return s;
}
",TRUE,,4117
3988,InitialSO.csv3988.txt,InitialGit.csv3988.txt,4,"/**
 * Gets the number of cores available in this device, across all processors.
 * Requires: Ability to peruse the filesystem at ""/sys/devices/system/cpu""
 * @return The number of cores, or 1 if failed to get result
 */
private int getNumCores() {
    //Private Class to display only CPU devices in the directory listing
    class CpuFilter implements FileFilter {
        @Override
        public boolean accept(File pathname) {
            //Check if filename is ""cpu"", followed by a single digit number
            if(Pattern.matches(""cpu[0-9]"", pathname.getName())) {
                return true;
            }
            return false;
        }      
    }

    try {
        //Get directory containing CPU info
        File dir = new File(""/sys/devices/system/cpu/"");
        //Filter to only list the devices we care about
        File[] files = dir.listFiles(new CpuFilter());
        //Return the number of cores (virtual CPU devices)
        return files.length;
    } catch(Exception e) {
        //Default to return 1 core
        return 1;
    }
}
 ","/**
 * Gets the number of cores available in this device, across all processors.
 * Requires: Ability to peruse the filesystem at ""/sys/devices/system/cpu""
 * @return The number of cores, or 1 if failed to get result
 */
private int getNumCores() {
    //Private Class to display only CPU devices in the directory listing
    class CpuFilter implements FileFilter {
        @Override
        public boolean accept(File pathname) {
            //Check if filename is ""cpu"", followed by one or more digits
            if(Pattern.matches(""cpu[0-9]+"", pathname.getName())) {
                return true;
            }
            return false;
        }      
    }

    try {
        //Get directory containing CPU info
        File dir = new File(""/sys/devices/system/cpu/"");
        //Filter to only list the devices we care about
        File[] files = dir.listFiles(new CpuFilter());
        //Return the number of cores (virtual CPU devices)
        return files.length;
    } catch(Exception e) {
        //Default to return 1 core
        return 1;
    }
}
 ",FALSE,"package net.nologin.meep.ca;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.preference.PreferenceManager;
import android.util.Log;

import java.io.File;
import java.io.FileFilter;
import java.util.regex.Pattern;

/**
 * Static utility methods for the wolfram app that don't really belong anywhere else.
 */
public class WolframUtils {

    /**
     * Log tag for this app, all messages have the tag ""WolframCA""
     */
    public static final String LOG_TAG = ""WolframCA"";

    private WolframUtils() {
    } // no instantiation

    /**
     * Preference related stuff only here
     */
    public static class Prefs {

        private static SharedPreferences getPrefs(Context ctx) {
            return PreferenceManager.getDefaultSharedPreferences(ctx);
        }


        /**
         * @param ctx context
         * @return <code>true</code> if the 'show debug' preference is enabled
         */
        public static boolean getPrefDebugEnabled(Context ctx) {
            return getPrefs(ctx).getBoolean(SettingsActivity.PREF_KEY_SHOW_DEBUG, false);
        }
    }

    /**
     * Sanitize the provided zoom level
     *
     * @param val The value
     * @return If the value lies outsize the range 1-16, it will be set to 1 or 16 (whichever is closest).  Within
     *         that range, the value will rounded to the nearest multiple of 2 (eg 2, 4, 6,..).
     */
    public static int sanitizeZoom(int val) {

        int step = 2, min = 1, max = 16;

        val = (Math.round(val / step)) * step;

        if (val <= min) {
            return min;
        }
        if (val >= max) {
            return max;
        }

        return val;
    }

    /**
     * Return the <code>android:versionName</code> as defined in the manifest
     *
     * @param ctx The context
     * @return The name as reported by the context's packagemanager.
     */
    public static String getAppVersionName(Context ctx) {

        try {
            PackageInfo info = ctx.getPackageManager().getPackageInfo(ctx.getPackageName(), 0);
            return info.versionName;

        } catch (PackageManager.NameNotFoundException e) {
            Log.e(LOG_TAG, ""Error getting version number! "" + e.getMessage(), e);
            return """";
        }

    }

    /**
     * This code by user 'David' on StackOverflow:
     * <a href=""http://stackoverflow.com/a/10377934/276183"">http://stackoverflow.com/a/10377934/276183</a>
     * <p/>
     * Gets the number of cores available in this device, across all processors.
     * Requires: Ability to peruse the filesystem at ""/sys/devices/system/cpu""
     *
     * @return The number of cores, or 1 if failed to get result
     */
    public static int getNumCores() {
        //Private Class to display only CPU devices in the directory listing
        class CpuFilter implements FileFilter {
            @Override
            public boolean accept(File pathname) {
                return (Pattern.matches(""cpu[0-9]"", pathname.getName()));
            }
        }

        try {
            File dir = new File(""/sys/devices/system/cpu/"");
            File[] files = dir.listFiles(new CpuFilter());

            Log.e(WolframUtils.LOG_TAG, ""NUM CORESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS "" + files.length);
            return files.length;
        } catch (Exception e) {

            Log.e(WolframUtils.LOG_TAG, ""NUM CORESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS = default 1 "");
            e.printStackTrace();

            //Default to return 1 core
            return 1;
        }
    }




}
","/*
 *    WolframCA - an android application to view 1-dimensional cellular automata (CA)
 *    Copyright 2013 Barry O'Neill (http://barryoneill.net/)
 *
 *    Licensed under Apache 2.0 with limited permission from, and no affiliation with Steven
 *    Wolfram, LLC. See the LICENSE file in the root of this project for the full license terms.
 */
package net.nologin.meep.ca;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.preference.PreferenceManager;
import android.util.Log;

import java.io.File;
import java.io.FileFilter;
import java.util.regex.Pattern;

/**
 * Static utility methods for the wolfram app that don't really belong anywhere else.
 */
public class WolframUtils {

    /**
     * Log tag for this app, all messages have the tag ""WolframCA""
     */
    public static final String LOG_TAG = ""WolframCA"";

    private WolframUtils() {
    } // no instantiation

    /**
     * Preference related stuff only here
     */
    public static class Prefs {

        private static SharedPreferences getPrefs(Context ctx) {
            return PreferenceManager.getDefaultSharedPreferences(ctx);
        }


        /**
         * @param ctx context
         * @return <code>true</code> if the 'show debug' preference is enabled
         */
        public static boolean getPrefDebugEnabled(Context ctx) {
            return getPrefs(ctx).getBoolean(SettingsActivity.PREF_KEY_SHOW_DEBUG, false);
        }
    }

    /**
     * Sanitize the provided zoom level
     *
     * @param val The value
     * @return If the value lies outsize the range 1-16, it will be set to 1 or 16 (whichever is closest).  Within
     *         that range, the value will rounded to the nearest multiple of 2 (eg 2, 4, 6,..).
     */
    public static int sanitizeZoom(int val) {

        int step = 2, min = 1, max = 16;

        val = (Math.round(val / step)) * step;

        if (val <= min) {
            return min;
        }
        if (val >= max) {
            return max;
        }

        return val;
    }

    /**
     * Return the <code>android:versionName</code> as defined in the manifest
     *
     * @param ctx The context
     * @return The name as reported by the context's packagemanager.
     */
    public static String getAppVersionName(Context ctx) {

        try {
            PackageInfo info = ctx.getPackageManager().getPackageInfo(ctx.getPackageName(), 0);
            return info.versionName;

        } catch (PackageManager.NameNotFoundException e) {
            Log.e(LOG_TAG, ""Error getting version number! "" + e.getMessage(), e);
            return """";
        }

    }

    /**
     * This code by user 'David' on StackOverflow:
     * <a href=""http://stackoverflow.com/a/10377934/276183"">http://stackoverflow.com/a/10377934/276183</a>
     * <p/>
     * Gets the number of cores available in this device, across all processors.
     * Requires: Ability to peruse the filesystem at ""/sys/devices/system/cpu""
     *
     * @return The number of cores, or 1 if failed to get result
     */
    public static int getNumCores() {
        //Private Class to display only CPU devices in the directory listing
        class CpuFilter implements FileFilter {
            @Override
            public boolean accept(File pathname) {
                return (Pattern.matches(""cpu[0-9]"", pathname.getName()));
            }
        }

        try {
            File dir = new File(""/sys/devices/system/cpu/"");
            File[] files = dir.listFiles(new CpuFilter());

            Log.e(WolframUtils.LOG_TAG, ""NUM CORESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS "" + files.length);
            return files.length;
        } catch (Exception e) {

            Log.e(WolframUtils.LOG_TAG, ""NUM CORESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS = default 1 "");
            e.printStackTrace();

            //Default to return 1 core
            return 1;
        }
    }




}
",FALSE,,4156
3989,InitialSO.csv3989.txt,InitialGit.csv3989.txt,5,"function decimalPlaces(num) {
  var match = (''+num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0)
       // Adjust for scientific notation.
       - (match[2] ? +match[2] : 0));
}
 decimalPlaces('.05')
2
decimalPlaces('.5')
1
decimalPlaces('1')
0
decimalPlaces('25e-100')
100
decimalPlaces('2.5e-99')
100
decimalPlaces('.5e1')
0
decimalPlaces('.25e1')
1
 ","function decimalPlaces(num) {
  var match = (''+num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0)
       // Adjust for scientific notation.
       - (match[2] ? +match[2] : 0));
}
 decimalPlaces('.05')
2
decimalPlaces('.5')
1
decimalPlaces('1')
0
decimalPlaces('25e-100')
100
decimalPlaces('2.5e-99')
100
decimalPlaces('.5e1')
0
decimalPlaces('.25e1')
1
 ",TRUE,"import $ from 'jquery';
import ParsleyUtils from './utils';
import ParsleyDefaults from './defaults';
import ParsleyValidator from './validator';

var ParsleyValidatorRegistry = function (validators, catalog) {
  this.__class__ = 'ParsleyValidatorRegistry';

  // Default Parsley locale is en
  this.locale = 'en';

  this.init(validators || {}, catalog || {});
};

var typeRegexes =  {
  email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
  number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,

  integer: /^-?\d+$/,

  digits: /^\d+$/,

  alphanum: /^\w+$/i,

  url: new RegExp(
      ""^"" +
        // protocol identifier
        ""(?:(?:https?|ftp)://)?"" + // ** mod: make scheme optional
        // user:pass authentication
        ""(?:\\S+(?::\\S*)?@)?"" +
        ""(?:"" +
          // IP address exclusion
          // private & local networks
          // ""(?!(?:10|127)(?:\\.\\d{1,3}){3})"" +   // ** mod: allow local networks
          // ""(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // ""(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // IP address dotted notation octets
          // excludes loopback network 0.0.0.0
          // excludes reserved space >= 224.0.0.0
          // excludes network & broacast addresses
          // (first & last IP address of each class)
          ""(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])"" +
          ""(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}"" +
          ""(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))"" +
        ""|"" +
          // host name
          ""(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)"" +
          // domain name
          ""(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"" +
          // TLD identifier
          ""(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"" +
        "")"" +
        // port number
        ""(?::\\d{2,5})?"" +
        // resource path
        ""(?:/\\S*)?"" +
      ""$"", 'i'
    )
};
typeRegexes.range = typeRegexes.number;

// See http://stackoverflow.com/a/10454560/8279
var decimalPlaces = num => {
  var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0) -
       // Adjust for scientific notation.
       (match[2] ? +match[2] : 0));
};

ParsleyValidatorRegistry.prototype = {
  init: function (validators, catalog) {
    this.catalog = catalog;
    // Copy prototype's validators:
    this.validators = $.extend({}, this.validators);

    for (var name in validators)
      this.addValidator(name, validators[name].fn, validators[name].priority);

    window.Parsley.trigger('parsley:validator:init');
  },

  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
  setLocale: function (locale) {
    if ('undefined' === typeof this.catalog[locale])
      throw new Error(locale + ' is not available in the catalog');

    this.locale = locale;

    return this;
  },

  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
  addCatalog: function (locale, messages, set) {
    if ('object' === typeof messages)
      this.catalog[locale] = messages;

    if (true === set)
      return this.setLocale(locale);

    return this;
  },

  // Add a specific message for a given constraint in a given locale
  addMessage: function (locale, name, message) {
    if ('undefined' === typeof this.catalog[locale])
      this.catalog[locale] = {};

    this.catalog[locale][name] = message;

    return this;
  },

  // Add messages for a given locale
  addMessages: function (locale, nameMessageObject) {
    for (var name in nameMessageObject)
      this.addMessage(locale, name, nameMessageObject[name]);

    return this;
  },

  // Add a new validator
  //
  //    addValidator('custom', {
  //        requirementType: ['integer', 'integer'],
  //        validateString: function(value, from, to) {},
  //        priority: 22,
  //        messages: {
  //          en: ""Hey, that's no good"",
  //          fr: ""Aye aye, pas bon du tout"",
  //        }
  //    })
  //
  // Old API was addValidator(name, function, priority)
  //
  addValidator: function (name, arg1, arg2) {
    if (this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is already defined.');
    else if (ParsleyDefaults.hasOwnProperty(name)) {
      ParsleyUtils.warn('""' + name + '"" is a restricted keyword and is not a valid validator name.');
      return;
    }
    return this._setValidator(...arguments);
  },

  updateValidator: function (name, arg1, arg2) {
    if (!this.validators[name]) {
      ParsleyUtils.warn('Validator ""' + name + '"" is not already defined.');
      return this.addValidator(...arguments);
    }
    return this._setValidator(...arguments);
  },

  removeValidator: function (name) {
    if (!this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is not defined.');

    delete this.validators[name];

    return this;
  },

  _setValidator: function (name, validator, priority) {
    if ('object' !== typeof validator) {
      // Old style validator, with `fn` and `priority`
      validator = {
        fn: validator,
        priority: priority
      };
    }
    if (!validator.validate) {
      validator = new ParsleyValidator(validator);
    }
    this.validators[name] = validator;

    for (var locale in validator.messages || {})
      this.addMessage(locale, name, validator.messages[locale]);

    return this;
  },

  getErrorMessage: function (constraint) {
    var message;

    // Type constraints are a bit different, we have to match their requirements too to find right error message
    if ('type' === constraint.name) {
      var typeMessages = this.catalog[this.locale][constraint.name] || {};
      message = typeMessages[constraint.requirements];
    } else
      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);

    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
  },

  // Kind of light `sprintf()` implementation
  formatMessage: function (string, parameters) {
    if ('object' === typeof parameters) {
      for (var i in parameters)
        string = this.formatMessage(string, parameters[i]);

      return string;
    }

    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';
  },

  // Here is the Parsley default validators list.
  // A validator is an object with the following key values:
  //  - priority: an integer
  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
  // Alternatively, a validator can be a function that returns such an object
  //
  validators: {
    notblank: {
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 2
    },
    required: {
      validateMultiple: function(values) {
        return values.length > 0;
      },
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 512
    },
    type: {
      validateString: function(value, type, {step = '1', base = 0} = {}) {
        var regex = typeRegexes[type];
        if (!regex) {
          throw new Error('validator type `' + type + '` is not supported');
        }
        if (!regex.test(value))
          return false;
        if ('number' === type) {
          if (!/^any$/i.test(step || '')) {
            var nb = Number(value);
            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals
              return false;
            // Be careful of rounding errors by using integers.
            var toInt = f => Math.round(f * Math.pow(10, decimals));
            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)
              return false;
          }
        }
        return true;
      },
      requirementType: {
        '': 'string',
        step: 'string',
        base: 'number'
      },
      priority: 256
    },
    pattern: {
      validateString: function(value, regexp) {
        return regexp.test(value);
      },
      requirementType: 'regexp',
      priority: 64
    },
    minlength: {
      validateString: function (value, requirement) {
        return value.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxlength: {
      validateString: function (value, requirement) {
        return value.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    length: {
      validateString: function (value, min, max) {
        return value.length >= min && value.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    mincheck: {
      validateMultiple: function (values, requirement) {
        return values.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxcheck: {
      validateMultiple: function (values, requirement) {
        return values.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    check: {
      validateMultiple: function (values, min, max) {
        return values.length >= min && values.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    min: {
      validateNumber: function (value, requirement) {
        return value >= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    max: {
      validateNumber: function (value, requirement) {
        return value <= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    range: {
      validateNumber: function (value, min, max) {
        return value >= min && value <= max;
      },
      requirementType: ['number', 'number'],
      priority: 30
    },
    equalto: {
      validateString: function (value, refOrValue) {
        var $reference = $(refOrValue);
        if ($reference.length)
          return value === $reference.val();
        else
          return value === refOrValue;
      },
      priority: 256
    }
  }
};

export default ParsleyValidatorRegistry;
","import $ from 'jquery';
import ParsleyUtils from './utils';
import ParsleyDefaults from './defaults';
import ParsleyValidator from './validator';

var ParsleyValidatorRegistry = function (validators, catalog) {
  this.__class__ = 'ParsleyValidatorRegistry';

  // Default Parsley locale is en
  this.locale = 'en';

  this.init(validators || {}, catalog || {});
};

var typeRegexes =  {
  email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
  number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,

  integer: /^-?\d+$/,

  digits: /^\d+$/,

  alphanum: /^\w+$/i,

  url: new RegExp(
      ""^"" +
        // protocol identifier
        ""(?:(?:https?|ftp)://)?"" + // ** mod: make scheme optional
        // user:pass authentication
        ""(?:\\S+(?::\\S*)?@)?"" +
        ""(?:"" +
          // IP address exclusion
          // private & local networks
          // ""(?!(?:10|127)(?:\\.\\d{1,3}){3})"" +   // ** mod: allow local networks
          // ""(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // ""(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // IP address dotted notation octets
          // excludes loopback network 0.0.0.0
          // excludes reserved space >= 224.0.0.0
          // excludes network & broacast addresses
          // (first & last IP address of each class)
          ""(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])"" +
          ""(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}"" +
          ""(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))"" +
        ""|"" +
          // host name
          ""(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)"" +
          // domain name
          ""(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"" +
          // TLD identifier
          ""(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"" +
        "")"" +
        // port number
        ""(?::\\d{2,5})?"" +
        // resource path
        ""(?:/\\S*)?"" +
      ""$"", 'i'
    )
};
typeRegexes.range = typeRegexes.number;

// See http://stackoverflow.com/a/10454560/8279
var decimalPlaces = num => {
  var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0) -
       // Adjust for scientific notation.
       (match[2] ? +match[2] : 0));
};

ParsleyValidatorRegistry.prototype = {
  init: function (validators, catalog) {
    this.catalog = catalog;
    // Copy prototype's validators:
    this.validators = $.extend({}, this.validators);

    for (var name in validators)
      this.addValidator(name, validators[name].fn, validators[name].priority);

    window.Parsley.trigger('parsley:validator:init');
  },

  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
  setLocale: function (locale) {
    if ('undefined' === typeof this.catalog[locale])
      throw new Error(locale + ' is not available in the catalog');

    this.locale = locale;

    return this;
  },

  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
  addCatalog: function (locale, messages, set) {
    if ('object' === typeof messages)
      this.catalog[locale] = messages;

    if (true === set)
      return this.setLocale(locale);

    return this;
  },

  // Add a specific message for a given constraint in a given locale
  addMessage: function (locale, name, message) {
    if ('undefined' === typeof this.catalog[locale])
      this.catalog[locale] = {};

    this.catalog[locale][name] = message;

    return this;
  },

  // Add messages for a given locale
  addMessages: function (locale, nameMessageObject) {
    for (var name in nameMessageObject)
      this.addMessage(locale, name, nameMessageObject[name]);

    return this;
  },

  // Add a new validator
  //
  //    addValidator('custom', {
  //        requirementType: ['integer', 'integer'],
  //        validateString: function(value, from, to) {},
  //        priority: 22,
  //        messages: {
  //          en: ""Hey, that's no good"",
  //          fr: ""Aye aye, pas bon du tout"",
  //        }
  //    })
  //
  // Old API was addValidator(name, function, priority)
  //
  addValidator: function (name, arg1, arg2) {
    if (this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is already defined.');
    else if (ParsleyDefaults.hasOwnProperty(name)) {
      ParsleyUtils.warn('""' + name + '"" is a restricted keyword and is not a valid validator name.');
      return;
    }
    return this._setValidator(...arguments);
  },

  updateValidator: function (name, arg1, arg2) {
    if (!this.validators[name]) {
      ParsleyUtils.warn('Validator ""' + name + '"" is not already defined.');
      return this.addValidator(...arguments);
    }
    return this._setValidator(...arguments);
  },

  removeValidator: function (name) {
    if (!this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is not defined.');

    delete this.validators[name];

    return this;
  },

  _setValidator: function (name, validator, priority) {
    if ('object' !== typeof validator) {
      // Old style validator, with `fn` and `priority`
      validator = {
        fn: validator,
        priority: priority
      };
    }
    if (!validator.validate) {
      validator = new ParsleyValidator(validator);
    }
    this.validators[name] = validator;

    for (var locale in validator.messages || {})
      this.addMessage(locale, name, validator.messages[locale]);

    return this;
  },

  getErrorMessage: function (constraint) {
    var message;

    // Type constraints are a bit different, we have to match their requirements too to find right error message
    if ('type' === constraint.name) {
      var typeMessages = this.catalog[this.locale][constraint.name] || {};
      message = typeMessages[constraint.requirements];
    } else
      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);

    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
  },

  // Kind of light `sprintf()` implementation
  formatMessage: function (string, parameters) {
    if ('object' === typeof parameters) {
      for (var i in parameters)
        string = this.formatMessage(string, parameters[i]);

      return string;
    }

    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';
  },

  // Here is the Parsley default validators list.
  // A validator is an object with the following key values:
  //  - priority: an integer
  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
  // Alternatively, a validator can be a function that returns such an object
  //
  validators: {
    notblank: {
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 2
    },
    required: {
      validateMultiple: function(values) {
        return values.length > 0;
      },
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 512
    },
    type: {
      validateString: function(value, type, {step = '1', base = 0} = {}) {
        var regex = typeRegexes[type];
        if (!regex) {
          throw new Error('validator type `' + type + '` is not supported');
        }
        if (!regex.test(value))
          return false;
        if ('number' === type) {
          if (!/^any$/i.test(step || '')) {
            var nb = Number(value);
            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals
              return false;
            // Be careful of rounding errors by using integers.
            var toInt = f => Math.round(f * Math.pow(10, decimals));
            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)
              return false;
          }
        }
        return true;
      },
      requirementType: {
        '': 'string',
        step: 'string',
        base: 'number'
      },
      priority: 256
    },
    pattern: {
      validateString: function(value, regexp) {
        return regexp.test(value);
      },
      requirementType: 'regexp',
      priority: 64
    },
    minlength: {
      validateString: function (value, requirement) {
        return value.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxlength: {
      validateString: function (value, requirement) {
        return value.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    length: {
      validateString: function (value, min, max) {
        return value.length >= min && value.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    mincheck: {
      validateMultiple: function (values, requirement) {
        return values.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxcheck: {
      validateMultiple: function (values, requirement) {
        return values.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    check: {
      validateMultiple: function (values, min, max) {
        return values.length >= min && values.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    min: {
      validateNumber: function (value, requirement) {
        return value >= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    max: {
      validateNumber: function (value, requirement) {
        return value <= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    range: {
      validateNumber: function (value, min, max) {
        return value >= min && value <= max;
      },
      requirementType: ['number', 'number'],
      priority: 30
    },
    equalto: {
      validateString: function (value, refOrValue) {
        var $reference = $(refOrValue);
        if ($reference.length)
          return value === $reference.val();
        else
          return value === refOrValue;
      },
      priority: 256
    }
  }
};

export default ParsleyValidatorRegistry;
",TRUE,,4157
3991,InitialSO.csv3991.txt,InitialGit.csv3991.txt,5,"function decimalPlaces(num) {
  var match = (''+num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0)
       // Adjust for scientific notation.
       - (match[2] ? +match[2] : 0));
}
 decimalPlaces('.05')
2
decimalPlaces('.5')
1
decimalPlaces('1')
0
decimalPlaces('25e-100')
100
decimalPlaces('2.5e-99')
100
decimalPlaces('.5e1')
0
decimalPlaces('.25e1')
1
 ","function decimalPlaces(num) {
  var match = (''+num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0)
       // Adjust for scientific notation.
       - (match[2] ? +match[2] : 0));
}
 decimalPlaces('.05')
2
decimalPlaces('.5')
1
decimalPlaces('1')
0
decimalPlaces('25e-100')
100
decimalPlaces('2.5e-99')
100
decimalPlaces('.5e1')
0
decimalPlaces('.25e1')
1
 ",TRUE,"import $ from 'jquery';
import ParsleyUtils from './utils';
import ParsleyDefaults from './defaults';
import ParsleyValidator from './validator';

var ParsleyValidatorRegistry = function (validators, catalog) {
  this.__class__ = 'ParsleyValidatorRegistry';

  // Default Parsley locale is en
  this.locale = 'en';

  this.init(validators || {}, catalog || {});
};

var typeRegexes =  {
  email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
  number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,

  integer: /^-?\d+$/,

  digits: /^\d+$/,

  alphanum: /^\w+$/i,

  url: new RegExp(
      ""^"" +
        // protocol identifier
        ""(?:(?:https?|ftp)://)?"" + // ** mod: make scheme optional
        // user:pass authentication
        ""(?:\\S+(?::\\S*)?@)?"" +
        ""(?:"" +
          // IP address exclusion
          // private & local networks
          // ""(?!(?:10|127)(?:\\.\\d{1,3}){3})"" +   // ** mod: allow local networks
          // ""(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // ""(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // IP address dotted notation octets
          // excludes loopback network 0.0.0.0
          // excludes reserved space >= 224.0.0.0
          // excludes network & broacast addresses
          // (first & last IP address of each class)
          ""(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])"" +
          ""(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}"" +
          ""(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))"" +
        ""|"" +
          // host name
          ""(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)"" +
          // domain name
          ""(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"" +
          // TLD identifier
          ""(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"" +
        "")"" +
        // port number
        ""(?::\\d{2,5})?"" +
        // resource path
        ""(?:/\\S*)?"" +
      ""$"", 'i'
    )
};
typeRegexes.range = typeRegexes.number;

// See http://stackoverflow.com/a/10454560/8279
var decimalPlaces = num => {
  var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0) -
       // Adjust for scientific notation.
       (match[2] ? +match[2] : 0));
};

ParsleyValidatorRegistry.prototype = {
  init: function (validators, catalog) {
    this.catalog = catalog;
    // Copy prototype's validators:
    this.validators = $.extend({}, this.validators);

    for (var name in validators)
      this.addValidator(name, validators[name].fn, validators[name].priority);

    window.Parsley.trigger('parsley:validator:init');
  },

  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
  setLocale: function (locale) {
    if ('undefined' === typeof this.catalog[locale])
      throw new Error(locale + ' is not available in the catalog');

    this.locale = locale;

    return this;
  },

  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
  addCatalog: function (locale, messages, set) {
    if ('object' === typeof messages)
      this.catalog[locale] = messages;

    if (true === set)
      return this.setLocale(locale);

    return this;
  },

  // Add a specific message for a given constraint in a given locale
  addMessage: function (locale, name, message) {
    if ('undefined' === typeof this.catalog[locale])
      this.catalog[locale] = {};

    this.catalog[locale][name] = message;

    return this;
  },

  // Add messages for a given locale
  addMessages: function (locale, nameMessageObject) {
    for (var name in nameMessageObject)
      this.addMessage(locale, name, nameMessageObject[name]);

    return this;
  },

  // Add a new validator
  //
  //    addValidator('custom', {
  //        requirementType: ['integer', 'integer'],
  //        validateString: function(value, from, to) {},
  //        priority: 22,
  //        messages: {
  //          en: ""Hey, that's no good"",
  //          fr: ""Aye aye, pas bon du tout"",
  //        }
  //    })
  //
  // Old API was addValidator(name, function, priority)
  //
  addValidator: function (name, arg1, arg2) {
    if (this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is already defined.');
    else if (ParsleyDefaults.hasOwnProperty(name)) {
      ParsleyUtils.warn('""' + name + '"" is a restricted keyword and is not a valid validator name.');
      return;
    }
    return this._setValidator(...arguments);
  },

  updateValidator: function (name, arg1, arg2) {
    if (!this.validators[name]) {
      ParsleyUtils.warn('Validator ""' + name + '"" is not already defined.');
      return this.addValidator(...arguments);
    }
    return this._setValidator(...arguments);
  },

  removeValidator: function (name) {
    if (!this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is not defined.');

    delete this.validators[name];

    return this;
  },

  _setValidator: function (name, validator, priority) {
    if ('object' !== typeof validator) {
      // Old style validator, with `fn` and `priority`
      validator = {
        fn: validator,
        priority: priority
      };
    }
    if (!validator.validate) {
      validator = new ParsleyValidator(validator);
    }
    this.validators[name] = validator;

    for (var locale in validator.messages || {})
      this.addMessage(locale, name, validator.messages[locale]);

    return this;
  },

  getErrorMessage: function (constraint) {
    var message;

    // Type constraints are a bit different, we have to match their requirements too to find right error message
    if ('type' === constraint.name) {
      var typeMessages = this.catalog[this.locale][constraint.name] || {};
      message = typeMessages[constraint.requirements];
    } else
      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);

    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
  },

  // Kind of light `sprintf()` implementation
  formatMessage: function (string, parameters) {
    if ('object' === typeof parameters) {
      for (var i in parameters)
        string = this.formatMessage(string, parameters[i]);

      return string;
    }

    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';
  },

  // Here is the Parsley default validators list.
  // A validator is an object with the following key values:
  //  - priority: an integer
  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
  // Alternatively, a validator can be a function that returns such an object
  //
  validators: {
    notblank: {
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 2
    },
    required: {
      validateMultiple: function(values) {
        return values.length > 0;
      },
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 512
    },
    type: {
      validateString: function(value, type, {step = '1', base = 0} = {}) {
        var regex = typeRegexes[type];
        if (!regex) {
          throw new Error('validator type `' + type + '` is not supported');
        }
        if (!regex.test(value))
          return false;
        if ('number' === type) {
          if (!/^any$/i.test(step || '')) {
            var nb = Number(value);
            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals
              return false;
            // Be careful of rounding errors by using integers.
            var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };
            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)
              return false;
          }
        }
        return true;
      },
      requirementType: {
        '': 'string',
        step: 'string',
        base: 'number'
      },
      priority: 256
    },
    pattern: {
      validateString: function(value, regexp) {
        return regexp.test(value);
      },
      requirementType: 'regexp',
      priority: 64
    },
    minlength: {
      validateString: function (value, requirement) {
        return value.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxlength: {
      validateString: function (value, requirement) {
        return value.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    length: {
      validateString: function (value, min, max) {
        return value.length >= min && value.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    mincheck: {
      validateMultiple: function (values, requirement) {
        return values.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxcheck: {
      validateMultiple: function (values, requirement) {
        return values.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    check: {
      validateMultiple: function (values, min, max) {
        return values.length >= min && values.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    min: {
      validateNumber: function (value, requirement) {
        return value >= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    max: {
      validateNumber: function (value, requirement) {
        return value <= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    range: {
      validateNumber: function (value, min, max) {
        return value >= min && value <= max;
      },
      requirementType: ['number', 'number'],
      priority: 30
    },
    equalto: {
      validateString: function (value, refOrValue) {
        var $reference = $(refOrValue);
        if ($reference.length)
          return value === $reference.val();
        else
          return value === refOrValue;
      },
      priority: 256
    }
  }
};

export default ParsleyValidatorRegistry;
","import $ from 'jquery';
import ParsleyUtils from './utils';
import ParsleyDefaults from './defaults';
import ParsleyValidator from './validator';

var ParsleyValidatorRegistry = function (validators, catalog) {
  this.__class__ = 'ParsleyValidatorRegistry';

  // Default Parsley locale is en
  this.locale = 'en';

  this.init(validators || {}, catalog || {});
};

var typeRegexes =  {
  email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,

  // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers
  number: /^-?(\d*\.)?\d+(e[-+]?\d+)?$/i,

  integer: /^-?\d+$/,

  digits: /^\d+$/,

  alphanum: /^\w+$/i,

  url: new RegExp(
      ""^"" +
        // protocol identifier
        ""(?:(?:https?|ftp)://)?"" + // ** mod: make scheme optional
        // user:pass authentication
        ""(?:\\S+(?::\\S*)?@)?"" +
        ""(?:"" +
          // IP address exclusion
          // private & local networks
          // ""(?!(?:10|127)(?:\\.\\d{1,3}){3})"" +   // ** mod: allow local networks
          // ""(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // ""(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})"" +  // ** mod: allow local networks
          // IP address dotted notation octets
          // excludes loopback network 0.0.0.0
          // excludes reserved space >= 224.0.0.0
          // excludes network & broacast addresses
          // (first & last IP address of each class)
          ""(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])"" +
          ""(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}"" +
          ""(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))"" +
        ""|"" +
          // host name
          ""(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)"" +
          // domain name
          ""(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"" +
          // TLD identifier
          ""(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))"" +
        "")"" +
        // port number
        ""(?::\\d{2,5})?"" +
        // resource path
        ""(?:/\\S*)?"" +
      ""$"", 'i'
    )
};
typeRegexes.range = typeRegexes.number;

// See http://stackoverflow.com/a/10454560/8279
var decimalPlaces = num => {
  var match = ('' + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) { return 0; }
  return Math.max(
       0,
       // Number of digits right of decimal point.
       (match[1] ? match[1].length : 0) -
       // Adjust for scientific notation.
       (match[2] ? +match[2] : 0));
};

ParsleyValidatorRegistry.prototype = {
  init: function (validators, catalog) {
    this.catalog = catalog;
    // Copy prototype's validators:
    this.validators = $.extend({}, this.validators);

    for (var name in validators)
      this.addValidator(name, validators[name].fn, validators[name].priority);

    window.Parsley.trigger('parsley:validator:init');
  },

  // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n
  setLocale: function (locale) {
    if ('undefined' === typeof this.catalog[locale])
      throw new Error(locale + ' is not available in the catalog');

    this.locale = locale;

    return this;
  },

  // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`
  addCatalog: function (locale, messages, set) {
    if ('object' === typeof messages)
      this.catalog[locale] = messages;

    if (true === set)
      return this.setLocale(locale);

    return this;
  },

  // Add a specific message for a given constraint in a given locale
  addMessage: function (locale, name, message) {
    if ('undefined' === typeof this.catalog[locale])
      this.catalog[locale] = {};

    this.catalog[locale][name] = message;

    return this;
  },

  // Add messages for a given locale
  addMessages: function (locale, nameMessageObject) {
    for (var name in nameMessageObject)
      this.addMessage(locale, name, nameMessageObject[name]);

    return this;
  },

  // Add a new validator
  //
  //    addValidator('custom', {
  //        requirementType: ['integer', 'integer'],
  //        validateString: function(value, from, to) {},
  //        priority: 22,
  //        messages: {
  //          en: ""Hey, that's no good"",
  //          fr: ""Aye aye, pas bon du tout"",
  //        }
  //    })
  //
  // Old API was addValidator(name, function, priority)
  //
  addValidator: function (name, arg1, arg2) {
    if (this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is already defined.');
    else if (ParsleyDefaults.hasOwnProperty(name)) {
      ParsleyUtils.warn('""' + name + '"" is a restricted keyword and is not a valid validator name.');
      return;
    }
    return this._setValidator(...arguments);
  },

  updateValidator: function (name, arg1, arg2) {
    if (!this.validators[name]) {
      ParsleyUtils.warn('Validator ""' + name + '"" is not already defined.');
      return this.addValidator(...arguments);
    }
    return this._setValidator(...arguments);
  },

  removeValidator: function (name) {
    if (!this.validators[name])
      ParsleyUtils.warn('Validator ""' + name + '"" is not defined.');

    delete this.validators[name];

    return this;
  },

  _setValidator: function (name, validator, priority) {
    if ('object' !== typeof validator) {
      // Old style validator, with `fn` and `priority`
      validator = {
        fn: validator,
        priority: priority
      };
    }
    if (!validator.validate) {
      validator = new ParsleyValidator(validator);
    }
    this.validators[name] = validator;

    for (var locale in validator.messages || {})
      this.addMessage(locale, name, validator.messages[locale]);

    return this;
  },

  getErrorMessage: function (constraint) {
    var message;

    // Type constraints are a bit different, we have to match their requirements too to find right error message
    if ('type' === constraint.name) {
      var typeMessages = this.catalog[this.locale][constraint.name] || {};
      message = typeMessages[constraint.requirements];
    } else
      message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);

    return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;
  },

  // Kind of light `sprintf()` implementation
  formatMessage: function (string, parameters) {
    if ('object' === typeof parameters) {
      for (var i in parameters)
        string = this.formatMessage(string, parameters[i]);

      return string;
    }

    return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';
  },

  // Here is the Parsley default validators list.
  // A validator is an object with the following key values:
  //  - priority: an integer
  //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these
  //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise
  // Alternatively, a validator can be a function that returns such an object
  //
  validators: {
    notblank: {
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 2
    },
    required: {
      validateMultiple: function(values) {
        return values.length > 0;
      },
      validateString: function(value) {
        return /\S/.test(value);
      },
      priority: 512
    },
    type: {
      validateString: function(value, type, {step = '1', base = 0} = {}) {
        var regex = typeRegexes[type];
        if (!regex) {
          throw new Error('validator type `' + type + '` is not supported');
        }
        if (!regex.test(value))
          return false;
        if ('number' === type) {
          if (!/^any$/i.test(step || '')) {
            var nb = Number(value);
            var decimals = Math.max(decimalPlaces(step), decimalPlaces(base));
            if (decimalPlaces(nb) > decimals) // Value can't have too many decimals
              return false;
            // Be careful of rounding errors by using integers.
            var toInt = f => { return Math.round(f * Math.pow(10, decimals)); };
            if ((toInt(nb) - toInt(base)) % toInt(step) != 0)
              return false;
          }
        }
        return true;
      },
      requirementType: {
        '': 'string',
        step: 'string',
        base: 'number'
      },
      priority: 256
    },
    pattern: {
      validateString: function(value, regexp) {
        return regexp.test(value);
      },
      requirementType: 'regexp',
      priority: 64
    },
    minlength: {
      validateString: function (value, requirement) {
        return value.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxlength: {
      validateString: function (value, requirement) {
        return value.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    length: {
      validateString: function (value, min, max) {
        return value.length >= min && value.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    mincheck: {
      validateMultiple: function (values, requirement) {
        return values.length >= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    maxcheck: {
      validateMultiple: function (values, requirement) {
        return values.length <= requirement;
      },
      requirementType: 'integer',
      priority: 30
    },
    check: {
      validateMultiple: function (values, min, max) {
        return values.length >= min && values.length <= max;
      },
      requirementType: ['integer', 'integer'],
      priority: 30
    },
    min: {
      validateNumber: function (value, requirement) {
        return value >= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    max: {
      validateNumber: function (value, requirement) {
        return value <= requirement;
      },
      requirementType: 'number',
      priority: 30
    },
    range: {
      validateNumber: function (value, min, max) {
        return value >= min && value <= max;
      },
      requirementType: ['number', 'number'],
      priority: 30
    },
    equalto: {
      validateString: function (value, refOrValue) {
        var $reference = $(refOrValue);
        if ($reference.length)
          return value === $reference.val();
        else
          return value === refOrValue;
      },
      priority: 256
    }
  }
};

export default ParsleyValidatorRegistry;
",TRUE,,4159
3993,InitialSO.csv3993.txt,InitialGit.csv3993.txt,9,"$(function() { 
  //for bootstrap 3 use 'shown.bs.tab' instead of 'shown' in the next line
  $('a[data-toggle=""tab""]').on('shown', function (e) {
    //save the latest tab; use cookies if you like 'em better:
    localStorage.setItem('lastTab', $(e.target).attr('id'));
  });

  //go to the latest tab, if it exists:
  var lastTab = localStorage.getItem('lastTab');
  if (lastTab) {
      $('#'+lastTab).tab('show');
  }
});
 ","$(function() { 
    // for bootstrap 3 use 'shown.bs.tab', for bootstrap 2 use 'shown' in the next line
    $('a[data-toggle=""tab""]').on('shown.bs.tab', function (e) {
        // save the latest tab; use cookies if you like 'em better:
        localStorage.setItem('lastTab', $(this).attr('href'));
    });

    // go to the latest tab, if it exists:
    var lastTab = localStorage.getItem('lastTab');
    if (lastTab) {
        $('[href=""' + lastTab + '""]').tab('show');
    }
});
 ",FALSE,"/**
 * Priceless PHP Base
 * jQuery Observor
 *
 * @author      BizLogic <hire@bizlogicdev.com>
 * @copyright   2012 - 2015 BizLogic
 * @link        http://bizlogicdev.com
 * @link		http://pricelessphp.com
 * @license     GNU Affero General Public License v3
 *
 * @since  	    Wednesday, July 10, 2013, 20:18 GMT+1
 * @modified    $Date: 2014-10-13 11:46:37 +0200 (Mon, 13 Oct 2014) $ $Author: hire@bizlogicdev.com $
 * @version     $Id: jquery.observor.js 109 2014-10-13 09:46:37Z hire@bizlogicdev.com $
 *
 * @category    JavaScript
 * @package     Priceless PHP Base
*/

$(document).ready(function() {	
	$('#adminAddUser').submit(function( event ) {
		event.preventDefault();
		
		var valid	= formIsValid('adminAddUser');
		var errors	= getFormErrors('adminAddUser');
		
		// blockUI
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });	
		if( valid ) {
			$.ajax({
				type: 'POST',
				url: BASEURL + '/admin/ajax',
				data: { 
					method: 'addUser',
					data: $('#adminAddUser').formParams()
				},
				complete: function( jqXHR, textStatus ) {
					// ...
				},
				success: function( response, textStatus, jqXHRresponse ) {
					if( response.status == 'OK' ) {
						window.location.assign( BASEURL + '/admin/profile/edit/' + response.userid );					
					} else {
						// unblock
						$.unblockUI();
						
						var $dialog = $('<div></div>')
						.html( SITE_PHRASES[strtolower( response.error )] )
						.dialog({
							autoOpen: true,
							title: '<i class=""icon-warning-sign""></i> An Error has Occurred',
							modal: true,
							minWidth: 500,
							buttons: {
								'OK': function() {
									$(this).dialog('close');
								}
							}							
						});					
					}
				},
				error: function(  jqXHR, textStatus, errorThrown ) {
					// ...
				},		
				dataType: 'json'
			});	
		} else {
			$.unblockUI();
			var errorSize = errors.length;
			if( errorSize > 0 ) {
			    $('html, body').animate({
			        scrollTop: $('#' + errors[0] ).offset().top - 10
			    }, 'slow');				
			}			
		}
	});
	$('#dropdown-langChange').on('click', function(event) {
		var langId = $(this).data('langid');
		if( strlen( trim( langId ) ) ) {
			langId = parseInt( langId );	
		} else {
			return false;			
		}
		
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });
		$.ajax({
			type: 'POST',
			url: BASEURL + '/users/ajax',
			data: { method: 'changeLang',
					langId: langId
			},
			complete: function( jqXHR, textStatus ) {
				
			},
			success: function( response, textStatus, jqXHRresponse ) {
				if( response.status == 'OK' ) {
					window.location.reload();					
				} else {
					$.unblockUI();
				}
			},
			error: function(  jqXHR, textStatus, errorThrown ) {

			},		
			dataType: 'json'
		});
	});
	
	$('#adminDeleteAvatar').live('click', function(event) {
		event.stopImmediatePropagation();
		event.preventDefault();
		var userId = $(this).data('userid');
		// http://blog.nemikor.com/category/jquery-ui/jquery-ui-dialog/
		var $dialog = $('<div></div>')
						.html('Are you sure that you want to delete this avatar?')
						.dialog({
							title: '<i class=""icon-warning-sign""></i> Delete this Avatar?',
							minWidth: 600,
							minHeight: 200,
							modal: true,
							position: { 
								my: 'center top', 
								at: 'center top', 
								of: $('.box-title')
							},
							buttons: {
								'Yes': function() {
			                		$('#avatarContainer').block({ 
			                			message: null, 
										overlayCSS:  { 
											backgroundColor: '#FFFFFF', 
											opacity:         0.6, 
											cursor:          'wait' 
  	    							  	}
			                		});
			                		$('#avatarContainer').spin();
									$.ajax({
										type: 'POST',
										url: BASEURL + '/admin/ajax',
										data: { 
											method: 'admin-delete-avatar', 				
											userId: userId 
										},
										complete: function( jqXHR, textStatus ) {
										},
										success: function( response, textStatus, jqXHRresponse ) {				
											if( response.status == 'OK' ) {
												$('.ui-dialog-content').dialog('close');
												$('#userAvatar').attr('src', response.url);
								                setTimeout(function() {
													$('#avatarContainer').height( $('#userAvatar').height() + 23 );
													$('#avatarContainer').width( $('#userAvatar').width() );
								                	$('#avatarDeleteContainer').hide();
								                	$('#avatarContainer').unblock();
									                $('#avatarContainer').spin(false);
								              	}, 2000);													
											} else {
							                	$('#avatarContainer').unblock();
								                $('#avatarContainer').spin(false);												
												$('.ui-dialog-content').dialog('close');		
											}								
										},
										error: function(  jqXHR, textStatus, errorThrown ) {
										},		
										dataType: 'json'
									});	
								 },
								 Cancel: function() {
									 $(this).dialog('close');
								 }
							},
							open: function() {
								// http://stackoverflow.com/questions/4103964/icons-in-jquery-ui-dialog-title
								$('.ui-dialog .ui-dialog-title .ui-icon').css({
									'float': 'left',
								    'margin-right': '4px'
								});
								// http://stackoverflow.com/a/3393526
				                $('.ui-dialog-buttonpane').
				                    find('button:contains(""Cancel"")').button({
				                    	icons: {
				                    		primary: 'ui-icon-cancel'
				                    	}
				                });
				                $('.ui-dialog-buttonpane').
			                    	find('button:contains(""Yes"")').button({
			                    		icons: {
			                    			primary: 'ui-icon-check'
			                    		}
			                    });				                
							}
						});
		$dialog.dialog('open');
	});	
	// START:	tab persistence
	// @link	http://stackoverflow.com/a/10524697
	$('a[data-toggle=""tab""]').on('shown', function (e) {
		//save the latest tab; use cookies if you like 'em better:
		localStorage.setItem('lastTab', $(e.target).attr('id'));
	});

	// go to the latest tab, if it exists:
	var lastTab = localStorage.getItem('lastTab');
	if (lastTab) {
		$('#'+lastTab).tab('show');
	}	
	// END:		tab persistence
	
	$('.windowReload').on('click', function(event) {
		window.location.reload();
	});
	
	$('.blockUI-trigger, a:not("".noBlockUI"")').on('click', function(event) {	
		var target = $(this).attr('target');
		if( typeof target !== 'undefined' ) {
			if( target == '_blank' || target == 'new' ) {
				return;				
			}
		}
		
		var toggle = $(this).data('toggle');
		if( typeof toggle !== 'undefined' ) {
			return;
		}
		
		var elementClass = $(this).attr('class');
		if( typeof elementClass !== 'undefined' ) {
			elementClass = explode( ',', elementClass );
			
			$.each(elementClass, function( index, value ) {
				if( preg_match( '/disabled/', value ) ) {
					return;
				}
			});				
			
			if( in_array( 'blockUI-trigger', elementClass ) ) {
				$.blockUI({ message: '<img border=""0"" src=""' + DEFAULT_PRELOADER_IMAGE + '"" />', 
					overlayCSS: { backgroundColor: '#000000' }
				});
				
				return;
			}
		}
		
		var excludedClass = ['dropdown-toggle', 
		                     'fg-button', 
		                     'noBlockUI', 
		                     'Button', 
		                     'close', 
		                     'glyphicons'
		];
						
		// START:	check class
		if( typeof elementClass !== 'undefined' ) {
			var intersect	= new Array();			
			elementClass	= explode( ',', elementClass );
			intersect		= array_intersect( excludedClass, elementClass );
			
			if( !empty( intersect ) ) {
				return;
			}				
		}
		// END:		check class
		
		// START:	check id
		var excludedId = ['recaptcha_reload_btn', 
		                  'recaptcha_switch_audio_btn', 
		                  'recaptcha_switch_img_btn',
		                  'recaptcha_whatsthis_btn'
		];
		
		var elementId = $(this).attr('id');
		if( typeof elementId !== 'undefined' ) {						
			if( in_array( elementId, excludedId ) ) {
				return;
			}			
		}		
		// END:		check id
		
		// START:	check href
		var href = $(this).attr('href');
		if( typeof href !== 'undefined' ) {
			if( href == '#' ) {
				return;
			}
		}
		// END:		check href
		
		$.blockUI({ message: '<img border=""0"" src=""' + DEFAULT_PRELOADER_IMAGE + '"" />', 
					overlayCSS: { backgroundColor: '#000000' }
		});
	});
	
	$('#langSelect').change(function() {
		var langId = $(this).val();
		if( strlen( trim( langId ) ) ) {
			langId = parseInt( langId );	
		} else {
			return false;			
		}
		
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });
		$.ajax({
			type: 'POST',
			url: BASEURL + '/users/ajax',
			data: { method: 'changeLang',
					langId: langId
			},
			complete: function( jqXHR, textStatus ) {
				
			},
			success: function( response, textStatus, jqXHRresponse ) {
				if( response.status == 'OK' ) {
					window.location.reload();					
				} else {
					$.unblockUI();
				}
			},
			error: function(  jqXHR, textStatus, errorThrown ) {

			},		
			dataType: 'json'
		});	
	});	
	
	$('#frmAdminLogin').submit(function( event ) {
		var password = trim( $('#passwordHolder').val() );
		if( strlen( password ) ) {
			$.blockUI();
			event.preventDefault();								
			$.ajax({
				type: 'POST',
				url: BASEURL + '/admin/ajax',
				data: { method: 'login',
						username: $('#username').val(),
						password: sha1( password )
				},
				complete: function( jqXHR, textStatus ) {
					
				},
				success: function( response, textStatus, jqXHRresponse ) {
					if( response.status == 'LOGIN_OK' ) {
						$('#loginErrorMessage').html('');
						$('#loginError').hide();
						window.location.reload();					
					} else {
						$('#loginErrorMessage').html( SITE_PHRASES['invalid_password_or_username'] );
						$('#loginError').show();
						$.unblockUI();
					}
				},
				error: function(  jqXHR, textStatus, errorThrown ) {

				},		
				dataType: 'json'
			});	
		}
	});
	
	$('.cbCheckAllFiles').on('click', function(event) {
	     var checkedStatus = this.checked;
		$('.cbDataTables').prop('checked', checkedStatus);
	});
	
	$('.adminFileDelete').live('click', function(event) {
		var targetId = $(this).data('id');
		bootbox.confirm('Are you sure that you want to delete this upload?', function(result) {
			if( result ) {
				$.blockUI();
				$.ajax({
					'dataType': 'json',
					'type': 'POST',
					'url': BASEURL + '/admin/ajax',
					'data': {id: targetId, method: 'admin-deleteFile'},
					'complete': function() {

					},
					'success': function() {
						window.location.reload();
					}	
		        });				
			}
		}); 
	});
	
});","/**
 * Priceless PHP Base
 * jQuery Observor
 *
 * @author      BizLogic <hire@bizlogicdev.com>
 * @copyright   2012 - 2015 BizLogic
 * @link        http://bizlogicdev.com
 * @link		http://pricelessphp.com
 * @license     GNU Affero General Public License v3
 *
 * @since  	    Wednesday, July 10, 2013, 20:18 GMT+1
 * @modified    $Date: 2014-10-13 11:46:37 +0200 (Mon, 13 Oct 2014) $ $Author: hire@bizlogicdev.com $
 * @version     $Id: jquery.observor.js 109 2014-10-13 09:46:37Z hire@bizlogicdev.com $
 *
 * @category    JavaScript
 * @package     Priceless PHP Base
*/

$(document).ready(function() {	
	$('#adminAddUser').submit(function( event ) {
		event.preventDefault();
		
		var valid	= formIsValid('adminAddUser');
		var errors	= getFormErrors('adminAddUser');
		
		// blockUI
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });	
		if( valid ) {
			$.ajax({
				type: 'POST',
				url: BASEURL + '/admin/ajax',
				data: { 
					method: 'addUser',
					data: $('#adminAddUser').formParams()
				},
				complete: function( jqXHR, textStatus ) {
					// ...
				},
				success: function( response, textStatus, jqXHRresponse ) {
					if( response.status == 'OK' ) {
						window.location.assign( BASEURL + '/admin/profile/edit/' + response.userid );					
					} else {
						// unblock
						$.unblockUI();
						
						var $dialog = $('<div></div>')
						.html( SITE_PHRASES[strtolower( response.error )] )
						.dialog({
							autoOpen: true,
							title: '<i class=""icon-warning-sign""></i> An Error has Occurred',
							modal: true,
							minWidth: 500,
							buttons: {
								'OK': function() {
									$(this).dialog('close');
								}
							}							
						});					
					}
				},
				error: function(  jqXHR, textStatus, errorThrown ) {
					// ...
				},		
				dataType: 'json'
			});	
		} else {
			$.unblockUI();
			var errorSize = errors.length;
			if( errorSize > 0 ) {
			    $('html, body').animate({
			        scrollTop: $('#' + errors[0] ).offset().top - 10
			    }, 'slow');				
			}			
		}
	});
	$('#dropdown-langChange').on('click', function(event) {
		var langId = $(this).data('langid');
		if( strlen( trim( langId ) ) ) {
			langId = parseInt( langId );	
		} else {
			return false;			
		}
		
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });
		$.ajax({
			type: 'POST',
			url: BASEURL + '/users/ajax',
			data: { method: 'changeLang',
					langId: langId
			},
			complete: function( jqXHR, textStatus ) {
				
			},
			success: function( response, textStatus, jqXHRresponse ) {
				if( response.status == 'OK' ) {
					window.location.reload();					
				} else {
					$.unblockUI();
				}
			},
			error: function(  jqXHR, textStatus, errorThrown ) {

			},		
			dataType: 'json'
		});
	});
	
	$('#adminDeleteAvatar').live('click', function(event) {
		event.stopImmediatePropagation();
		event.preventDefault();
		var userId = $(this).data('userid');
		// http://blog.nemikor.com/category/jquery-ui/jquery-ui-dialog/
		var $dialog = $('<div></div>')
						.html('Are you sure that you want to delete this avatar?')
						.dialog({
							title: '<i class=""icon-warning-sign""></i> Delete this Avatar?',
							minWidth: 600,
							minHeight: 200,
							modal: true,
							position: { 
								my: 'center top', 
								at: 'center top', 
								of: $('.box-title')
							},
							buttons: {
								'Yes': function() {
			                		$('#avatarContainer').block({ 
			                			message: null, 
										overlayCSS:  { 
											backgroundColor: '#FFFFFF', 
											opacity:         0.6, 
											cursor:          'wait' 
  	    							  	}
			                		});
			                		$('#avatarContainer').spin();
									$.ajax({
										type: 'POST',
										url: BASEURL + '/admin/ajax',
										data: { 
											method: 'admin-delete-avatar', 				
											userId: userId 
										},
										complete: function( jqXHR, textStatus ) {
										},
										success: function( response, textStatus, jqXHRresponse ) {				
											if( response.status == 'OK' ) {
												$('.ui-dialog-content').dialog('close');
												$('#userAvatar').attr('src', response.url);
								                setTimeout(function() {
													$('#avatarContainer').height( $('#userAvatar').height() + 23 );
													$('#avatarContainer').width( $('#userAvatar').width() );
								                	$('#avatarDeleteContainer').hide();
								                	$('#avatarContainer').unblock();
									                $('#avatarContainer').spin(false);
								              	}, 2000);													
											} else {
							                	$('#avatarContainer').unblock();
								                $('#avatarContainer').spin(false);												
												$('.ui-dialog-content').dialog('close');		
											}								
										},
										error: function(  jqXHR, textStatus, errorThrown ) {
										},		
										dataType: 'json'
									});	
								 },
								 Cancel: function() {
									 $(this).dialog('close');
								 }
							},
							open: function() {
								// http://stackoverflow.com/questions/4103964/icons-in-jquery-ui-dialog-title
								$('.ui-dialog .ui-dialog-title .ui-icon').css({
									'float': 'left',
								    'margin-right': '4px'
								});
								// http://stackoverflow.com/a/3393526
				                $('.ui-dialog-buttonpane').
				                    find('button:contains(""Cancel"")').button({
				                    	icons: {
				                    		primary: 'ui-icon-cancel'
				                    	}
				                });
				                $('.ui-dialog-buttonpane').
			                    	find('button:contains(""Yes"")').button({
			                    		icons: {
			                    			primary: 'ui-icon-check'
			                    		}
			                    });				                
							}
						});
		$dialog.dialog('open');
	});	
	// START:	tab persistence
	// @link	http://stackoverflow.com/a/10524697
	$('a[data-toggle=""tab""]').on('shown', function (e) {
		//save the latest tab; use cookies if you like 'em better:
		localStorage.setItem('lastTab', $(e.target).attr('id'));
	});

	// go to the latest tab, if it exists:
	var lastTab = localStorage.getItem('lastTab');
	if (lastTab) {
		$('#'+lastTab).tab('show');
	}	
	// END:		tab persistence
	
	$('.windowReload').on('click', function(event) {
		window.location.reload();
	});
	
	$('.blockUI-trigger, a:not("".noBlockUI"")').on('click', function(event) {	
		var target = $(this).attr('target');
		if( typeof target !== 'undefined' ) {
			if( target == '_blank' || target == 'new' ) {
				return;				
			}
		}
		
		var toggle = $(this).data('toggle');
		if( typeof toggle !== 'undefined' ) {
			return;
		}
		
		var elementClass = $(this).attr('class');
		if( typeof elementClass !== 'undefined' ) {
			elementClass = explode( ',', elementClass );
			
			$.each(elementClass, function( index, value ) {
				if( preg_match( '/disabled/', value ) ) {
					return;
				}
			});				
			
			if( in_array( 'blockUI-trigger', elementClass ) ) {
				$.blockUI({ message: '<img border=""0"" src=""' + DEFAULT_PRELOADER_IMAGE + '"" />', 
					overlayCSS: { backgroundColor: '#000000' }
				});
				
				return;
			}
		}
		
		var excludedClass = ['dropdown-toggle', 
		                     'fg-button', 
		                     'noBlockUI', 
		                     'Button', 
		                     'close', 
		                     'glyphicons'
		];
						
		// START:	check class
		if( typeof elementClass !== 'undefined' ) {
			var intersect	= new Array();			
			elementClass	= explode( ',', elementClass );
			intersect		= array_intersect( excludedClass, elementClass );
			
			if( !empty( intersect ) ) {
				return;
			}				
		}
		// END:		check class
		
		// START:	check id
		var excludedId = ['recaptcha_reload_btn', 
		                  'recaptcha_switch_audio_btn', 
		                  'recaptcha_switch_img_btn',
		                  'recaptcha_whatsthis_btn'
		];
		
		var elementId = $(this).attr('id');
		if( typeof elementId !== 'undefined' ) {						
			if( in_array( elementId, excludedId ) ) {
				return;
			}			
		}		
		// END:		check id
		
		// START:	check href
		var href = $(this).attr('href');
		if( typeof href !== 'undefined' ) {
			if( href == '#' ) {
				return;
			}
		}
		// END:		check href
		
		$.blockUI({ message: '<img border=""0"" src=""' + DEFAULT_PRELOADER_IMAGE + '"" />', 
					overlayCSS: { backgroundColor: '#000000' }
		});
	});
	
	$('#langSelect').change(function() {
		var langId = $(this).val();
		if( strlen( trim( langId ) ) ) {
			langId = parseInt( langId );	
		} else {
			return false;			
		}
		
		$.blockUI({ baseZ: 2014, message: '<img border=""0"" src=""' + BASEURL + '/images/preloader/168.gif"">' });
		$.ajax({
			type: 'POST',
			url: BASEURL + '/users/ajax',
			data: { method: 'changeLang',
					langId: langId
			},
			complete: function( jqXHR, textStatus ) {
				
			},
			success: function( response, textStatus, jqXHRresponse ) {
				if( response.status == 'OK' ) {
					window.location.reload();					
				} else {
					$.unblockUI();
				}
			},
			error: function(  jqXHR, textStatus, errorThrown ) {

			},		
			dataType: 'json'
		});	
	});	
	
	$('#frmAdminLogin').submit(function( event ) {
		var password = trim( $('#passwordHolder').val() );
		if( strlen( password ) ) {
			$.blockUI();
			event.preventDefault();								
			$.ajax({
				type: 'POST',
				url: BASEURL + '/admin/ajax',
				data: { method: 'login',
						username: $('#username').val(),
						password: sha1( password )
				},
				complete: function( jqXHR, textStatus ) {
					
				},
				success: function( response, textStatus, jqXHRresponse ) {
					if( response.status == 'LOGIN_OK' ) {
						$('#loginErrorMessage').html('');
						$('#loginError').hide();
						window.location.reload();					
					} else {
						$('#loginErrorMessage').html( SITE_PHRASES['invalid_password_or_username'] );
						$('#loginError').show();
						$.unblockUI();
					}
				},
				error: function(  jqXHR, textStatus, errorThrown ) {

				},		
				dataType: 'json'
			});	
		}
	});
	
	$('.cbCheckAllFiles').on('click', function(event) {
	     var checkedStatus = this.checked;
		$('.cbDataTables').prop('checked', checkedStatus);
	});
	
	$('.adminFileDelete').live('click', function(event) {
		var targetId = $(this).data('id');
		bootbox.confirm('Are you sure that you want to delete this upload?', function(result) {
			if( result ) {
				$.blockUI();
				$.ajax({
					'dataType': 'json',
					'type': 'POST',
					'url': BASEURL + '/admin/ajax',
					'data': {id: targetId, method: 'admin-deleteFile'},
					'complete': function() {

					},
					'success': function() {
						window.location.reload();
					}	
		        });				
			}
		}); 
	});
	
});",TRUE,,4160
3994,InitialSO.csv3994.txt,InitialGit.csv3994.txt,11,"import argparse
import os

class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required, 
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)
 import argparse
from envdefault import EnvDefault

parser=argparse.ArgumentParser()
parser.add_argument(
    ""-u"", ""--url"", action=EnvDefault, envvar='URL', 
    help=""Specify the URL to process (can also be specified using URL environment variable)"")
args=parser.parse_args()
 ","import argparse
import os

class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required, 
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)
 import argparse
from envdefault import EnvDefault

parser=argparse.ArgumentParser()
parser.add_argument(
    ""-u"", ""--url"", action=EnvDefault, envvar='URL', 
    help=""Specify the URL to process (can also be specified using URL environment variable)"")
args=parser.parse_args()
 ",TRUE,"#!/usr/bin/env python
# Copyright 2014-2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
import yaml


# Sourced from: https://stackoverflow.com/a/10551190
class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

# Setup argument parsing
parser = argparse.ArgumentParser(
    description='Utility to retrieve the rpc_release version'
                ' based on the series given.',
    epilog='Licensed ""Apache 2.0""')

parser.add_argument(
    '-f',
    '--release_file',
    action=EnvDefault,
    default='/opt/rpc-openstack/playbooks/vars/rpc-release.yml',
    envvar='RELEASE_FILE',
    help='Release file path, optionally set using the RELEASE_FILE'
         ' environment variable.',
    required=False
)

parser.add_argument(
    '-r',
    '--release_series',
    action=EnvDefault,
    default='pike',
    envvar='RPC_PRODUCT_RELEASE',
    help='Release series, optionally set using the RPC_PRODUCT_RELEASE'
         'environment variable.',
    required=False
)

# Parse arguments
args = parser.parse_args()

# Read the file contents
try:
    with open(args.release_file) as f:
        release_file_content = yaml.safe_load(f.read())
except IOError as e:
    print >> sys.stderr, ""Unable to open file '%s'."" % args.release_file
    sys.exit(1)

# Read the series-specific data
try:
    release_data = (
        release_file_content['rpc_product_releases'][args.release_series])
except KeyError as e:
    print >> sys.stderr, ""Unable to find release '%s'."" % args.release_series
    sys.exit(1)

# Get the current rpc_release version
rpc_release = release_data['rpc_release']

# Print out the rpc_release value
print(rpc_release)
","#!/usr/bin/env python
# Copyright 2014-2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
import yaml


# Sourced from: https://stackoverflow.com/a/10551190
class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if envvar in os.environ:
            default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

# Setup argument parsing
parser = argparse.ArgumentParser(
    description='Utility to retrieve the rpc_release version'
                ' based on the series given.',
    epilog='Licensed ""Apache 2.0""')

parser.add_argument(
    '-f',
    '--release_file',
    action=EnvDefault,
    default='/opt/rpc-openstack/playbooks/vars/rpc-release.yml',
    envvar='RELEASE_FILE',
    help='Release file path, optionally set using the RELEASE_FILE'
         ' environment variable.',
    required=False
)

parser.add_argument(
    '-r',
    '--release_series',
    action=EnvDefault,
    default='queens',
    envvar='RPC_PRODUCT_RELEASE',
    help='Release series, optionally set using the RPC_PRODUCT_RELEASE'
         'environment variable.',
    required=False
)

parser.add_argument(
    '-c',
    '--release_component',
    action=EnvDefault,
    default='rpc',
    envvar='RPC_PRODUCT_COMPONENT',
    help='Release component, optionally set using the RPC_PRODUCT_COMPONENT'
         'environment variable.',
    required=False
)

# Parse arguments
args = parser.parse_args()

# Read the file contents
try:
    with open(args.release_file) as f:
        release_file_content = yaml.safe_load(f.read())
except IOError as e:
    print >> sys.stderr, ""Unable to open file '%s'."" % args.release_file
    sys.exit(1)

# Read the series-specific data
try:
    release_data = (
        release_file_content['rpc_product_releases'][args.release_series])
except KeyError as e:
    print >> sys.stderr, ""Unable to find release '%s'."" % args.release_series
    sys.exit(1)

# Get the current component release version
component_release = release_data['%s_release' % args.release_component]

# Print out the component_release value
print(component_release)
",FALSE,,4169
4068,InitialSO.csv4068.txt,InitialGit.csv4068.txt,3,"import argparse
import os
import tempfile
import shutil
import atexit

class readable_dir(argparse.Action):
    def __call__(self,parser, namespace, values, option_string=None):
        prospective_dir=values
        if not os.path.isdir(prospective_dir):
            raise argparse.ArgumentTypeError(""readable_dir:{0} is not a valid path"".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace,self.dest,prospective_dir)
        else:
            raise argparse.ArgumentTypeError(""readable_dir:{0} is not a readable dir"".format(prospective_dir))
        
ldir = tempfile.mkdtemp()
atexit.register(lambda dir=ldir: shutil.rmtree(ldir))

parser = argparse.ArgumentParser(description='test', fromfile_prefix_chars=""@"")
parser.add_argument('-l', '--launch_directory', action=readable_dir, default=ldir)
args = parser.parse_args()
print (args)
 tempfile tempfile ","import argparse
import os
import tempfile
import shutil
import atexit

class readable_dir(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        prospective_dir=values
        if not os.path.isdir(prospective_dir):
            raise argparse.ArgumentTypeError(""readable_dir:{0} is not a valid path"".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace,self.dest,prospective_dir)
        else:
            raise argparse.ArgumentTypeError(""readable_dir:{0} is not a readable dir"".format(prospective_dir))

ldir = tempfile.mkdtemp()
atexit.register(lambda dir=ldir: shutil.rmtree(ldir))

parser = argparse.ArgumentParser(description='test', fromfile_prefix_chars=""@"")
parser.add_argument('-l', '--launch_directory', action=readable_dir, default=ldir)
args = parser.parse_args()
print (args)
 raise argparse.ArgumentError(self, ...) argparse.ArgumentTypeError argparse tempfile tempfile ",FALSE,""""""" Example limit setting script

This script provides an example of how to use the limit setting tools,
built into echidna, to set a 90% confidence limit on neutrinoless double
beta decay.

The numbers used in scaling the signal/backgrounds should set a
reasonable limit, but are not necessariy the optimum choice of
parameters.

Examples:
  To use simply run the script::

    $ python zero_nu_limit.py -s /path/to/signal.hdf5 -t /path/to/2n2b.hdf5 -b /path/to/B8_Solar.hdf5

.. note:: Use the -v option to print out progress and timing information
""""""
import numpy

import echidna.output.store as store
import echidna.limit.limit_config as limit_config
import echidna.limit.limit_setting as limit_setting
import echidna.limit.chi_squared as chi_squared
import echidna.output.plot_chi_squared as plot_chi_squared

import argparse
import os


class ReadableDir(argparse.Action):
    """""" Custom argparse action

    Adapted from http://stackoverflow.com/a/11415816

    Checks that hdf5 files supplied via command line exist and can be read
    """"""
    def __call__(self, parser, namespace, values, option_string=None):
        prospective_dir = values
        if not os.path.isfile(prospective_dir):
            raise argparse.ArgumentTypeError(""ReadableDir:{0} is not a valid ""
                                             ""path"".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace, self.dest, prospective_dir)
        else:
            raise argparse.ArgumentTypeError(""ReadableDir:{0} is not readable""
                                             .format(prospective_dir))

if __name__ == ""__main__"":
    parser = argparse.ArgumentParser(description=""Example limit setting script"")
    parser.add_argument(""-v"", ""--verbose"", action=""store_true"",
                        help=""Print progress and timing information"")
    parser.add_argument(""-s"", ""--signal"", action=ReadableDir,
                        help=""Supply path for signal hdf5 file"")
    parser.add_argument(""-t"", ""--two_nu"", action=ReadableDir,
                        help=""Supply paths for Te130_2n2b hdf5 files"")
    parser.add_argument(""-b"", ""--b8_solar"", action=ReadableDir,
                        help=""Supply paths for B8_Solar hdf5 files"")
    args = parser.parse_args()

    # Create signal spectrum
    Te130_0n2b = store.load(args.signal)

    # Create background spectra
    Te130_2n2b = store.load(args.two_nu)
    B8_Solar = store.load(args.b8_solar)

    Te130_0n2b._num_decays = Te130_0n2b.sum()
    Te130_0n2b._raw_events = 200034
    Te130_2n2b._num_decays = Te130_2n2b.sum()
    Te130_2n2b._raw_events = 75073953
    B8_Solar._num_decays = B8_Solar.sum()
    B8_Solar._raw_events = 106228

    # Shrink spectra to 5 years - livetime used by Andy
    # And make 3.5m fiducial volume cut
    Te130_0n2b.shrink(0.0, 10.0, 0.0, 3500.0, 0.0, 5.0)
    Te130_2n2b.shrink(0.0, 10.0, 0.0, 3500.0, 0.0, 5.0)
    B8_Solar.shrink(0.0, 10.0, 0.0, 3500.0, 0.0, 5.0)

    # Create list of backgrounds
    backgrounds = []
    backgrounds.append(Te130_2n2b)
    backgrounds.append(B8_Solar)

    # Initialise limit setting class
    roi = (2.46, 2.68)  # Define ROI - as used by Andy
    set_limit = limit_setting.LimitSetting(Te130_0n2b, backgrounds, roi=roi,
                                           pre_shrink=True,
                                           verbose=args.verbose)

    # Configure Te130_0n2b
    Te130_0n2b_counts = numpy.arange(5.0, 500.0, 5.0, dtype=float)
    # Expected 0n2b counts = 262.0143. Based on T_1/2 = 9.94e25 y @ 90% CL
    # (SNO+-doc-2593-v8) for 5 year livetime. Note extrapolating here to 10
    # years. But here we want to set prior to 0.0 counts.
    Te130_0n2b_prior = 0.0
    Te130_0n2b_config = limit_config.LimitConfig(Te130_0n2b_prior,
                                                 Te130_0n2b_counts)
    set_limit.configure_signal(Te130_0n2b_config)

    # Configure Te130_2n2b
    Te130_2n2b_counts = numpy.arange(37.396e6, 38.396e6, 1.0e6, dtype=float)
    # no penalty term to start with so just an array containing one value
    Te130_2n2b_prior = 37.396e6  # Based on NEMO-3 T_1/2, for 10 years
    Te130_2n2b_config = limit_config.LimitConfig(Te130_2n2b_prior,
                                                 Te130_2n2b_counts)
    # configs should have same name as background
    set_limit.configure_background(Te130_2n2b._name, Te130_2n2b_config)

    # Configure B8_Solar
    B8_Solar_counts = numpy.arange(12529.9691, 12530.9691, 1.0, dtype=float)
    # again, no penalty term for now
    # from integrating whole spectrum scaled to Valentina's number
    B8_Solar_prior = 12529.9691
    B8_Solar_config = limit_config.LimitConfig(B8_Solar_prior, B8_Solar_counts)
    set_limit.configure_background(B8_Solar._name, B8_Solar_config)

    # Set chi squared calculator
    calculator = chi_squared.ChiSquared()
    set_limit.set_calculator(calculator)

    # Calculate confidence limit
    print ""90% CL at: "" + str(set_limit.get_limit()) + "" counts""
    print ""2n2b ROI events: "" + str(Te130_2n2b.sum()) + "" counts""
    print ""Solar ROI events: "" + str(B8_Solar.sum()) + "" counts""

    raw_input(""RETURN to continue"")

    # Now try with a penalty term
    # Configure Te130_0n2b
    Te130_0n2b_counts = numpy.arange(5.0, 500.0, 5.0, dtype=float)
    # Expected 0n2b counts = 262.0143. Based on T_1/2 = 9.94e25 y @ 90% CL
    # (SNO+-doc-2593-v8) for 5 year livetime. Note extrapolating here to 10
    # years. But here we want to set prior to 0.0 counts.
    Te130_0n2b_prior = 0.0
    Te130_0n2b_penalty_config = limit_config.LimitConfig(Te130_0n2b_prior,
                                                         Te130_0n2b_counts)
    set_limit.configure_signal(Te130_0n2b_penalty_config)

    # Set new configs this time with more counts
    Te130_2n2b_counts = numpy.arange(30.0e6, 45.0e6, 0.1e6, dtype=float)
    # to use in penalty term (20%, Andy's document on systematics)
    sigma = 7.5e6
    Te130_2n2b_penalty_config = limit_config.LimitConfig(Te130_2n2b_prior,
                                                         Te130_2n2b_counts,
                                                         sigma)
    set_limit.configure_background(Te130_2n2b._name, Te130_2n2b_penalty_config,
                                   plot_systematic=True)

    B8_Solar_counts = numpy.arange(12.0e3, 13.0e3, 0.05e3, dtype=float)
    sigma = 501.1988  # To use in penalty term
    B8_Solar_penalty_config = limit_config.LimitConfig(B8_Solar_prior,
                                                       B8_Solar_counts, sigma)
    set_limit.configure_background(B8_Solar._name, B8_Solar_penalty_config,
                                   plot_systematic=True)

    # Calculate confidence limit
    print ""90% CL at: "" + str(set_limit.get_limit()) + "" counts""
    plot_chi_squared.chi_squared_vs_signal(Te130_0n2b_config,
                                           penalty=Te130_0n2b_penalty_config,
                                           save_as=""chi_squared_penalty.png"",
                                           effective_mass=True)

    for syst_analyser in set_limit._syst_analysers.values():
        print syst_analyser._syst_values
        store.dump_ndarray(syst_analyser._name+"".hdf5"", syst_analyser)
    store.dump_ndarray(""Te130_0n2b_config.hdf5"", Te130_0n2b_config)
    store.dump_ndarray(""Te130_0n2b_penalty_config.hdf5"",
                       Te130_0n2b_penalty_config)
",""""""" ***CURRENTLY NOT WORKING***

Example limit setting script

This script provides an example of how to use the limit setting tools,
built into echidna, to set a 90% confidence limit on neutrinoless double
beta decay.

The numbers used in scaling the signal/backgrounds should set a
reasonable limit, but are not necessariy the optimum choice of
parameters.

Note that this script assumes the user has already made a fiducial volume
cut when creating the spectra and the energy par is ""energy_mc"" for all
spectra.

Examples:
  To use simply run the script::

    $ python zero_nu_limit.py -s /path/to/signal.hdf5 -t /path/to/2n2b.hdf5
      -b /path/to/B8_Solar.hdf5

.. note:: Use the -v option to print out progress and timing information
""""""
# TODO(@ashleyrback}: update this script to work with new fitting/limit code
import numpy

import echidna.output.store as store
# These no longer exist
# import echidna.limit.limit_config as limit_config
# import echidna.limit.limit_setting as limit_setting
# import echidna.limit.chi_squared as chi_squared
import echidna.output.plot_chi_squared_root as plot_chi_squared
from echidna.calc import decay

import argparse
import os


class ReadableDir(argparse.Action):
    """""" Custom argparse action

    Adapted from http://stackoverflow.com/a/11415816

    Checks that hdf5 files supplied via command line exist and can be read
    """"""
    def __call__(self, parser, namespace, values, option_string=None):
        prospective_dirs = []
        if type(values) is str:
            prospective_dirs.append(values)
        elif type(values) is list:
            prospective_dirs = values
        else:
            raise TypeError(""Invalid type for arg."")
        for prospective_dir in prospective_dirs:
            if not os.access(prospective_dir, os.R_OK):
                raise argparse.ArgumentTypeError(
                    ""ReadableDir:{0} is not readable"".format(prospective_dir))
            if not os.path.isfile(prospective_dir):
                raise argparse.ArgumentTypeError(
                    ""ReadableDir:{0} not a valid path"".format(prospective_dir))
        setattr(namespace, self.dest, values)  # keeps original format

if __name__ == ""__main__"":
    raise NotImplementedError(""This script has been temporarily disabled"")
    parser = argparse.ArgumentParser(description=""Example limit setting ""
                                     ""script."")
    parser.add_argument(""-v"", ""--verbose"", action=""store_true"",
                        help=""Print progress and timing information"")
    parser.add_argument(""-s"", ""--signal"", action=ReadableDir,
                        help=""Supply path for signal hdf5 file"")
    parser.add_argument(""-t"", ""--two_nu"", action=ReadableDir,
                        help=""Supply paths for Te130_2n2b hdf5 files"")
    parser.add_argument(""-b"", ""--b8_solar"", action=ReadableDir,
                        help=""Supply paths for B8_Solar hdf5 files"")
    args = parser.parse_args()

    # REF: SNO+-doc-2593-v9 (as used by Andy)
    roi = (2.46, 2.68)

    # Create signal spectrum
    Te130_0n2b = store.load(args.signal)
    Te130_0n2b.scale(200.)
    unshrunk = Te130_0n2b.sum()
    Te130_0n2b = store.load(args.signal)
    shrink_dict = {""energy_mc_low"": roi[0], ""energy_mc_high"": roi[1]}
    Te130_0n2b.shrink(**shrink_dict)
    Te130_0n2b.scale(200.)
    shrunk = Te130_0n2b.sum()
    scaling = shrunk/unshrunk

    # Set decay converter

    # REF: SNO+-doc-1728-v2 (all three values)
    atm_weight_iso = 129.9062244
    atm_weight_nat = 127.603
    abundance = 0.3408

    # REF: J. Kotila & F. Iachello, Phys. Rev. C 85, 034316- (2012)
    phase_space = 3.69e-14
    # REF: J. Barea et al. Phys. Rev. C 87, 014315- (2013)
    matrix_element = 4.03

    converter = decay.DBIsotope(
        ""Te130"", atm_weight_iso, atm_weight_nat, abundance, phase_space,
        matrix_element, roi_efficiency=scaling)

    Te130_0n2b = store.load(args.signal)  # Reload spectrum

    # Create background spectra
    Te130_2n2b = store.load(args.two_nu)
    Te130_2n2b.scale(1.e6)
    unshrunk = Te130_2n2b.sum()
    Te130_2n2b = store.load(args.two_nu)
    Te130_2n2b.scale(1.e6)
    shrink_dict = {""energy_mc_low"": roi[0], ""energy_mc_high"": roi[1]}
    Te130_2n2b.shrink(**shrink_dict)
    shrunk = Te130_2n2b.sum()
    scaling = shrunk / unshrunk

    # Set decay converter

    # REF: J. Kotila & F. Iachello, Phys. Rev. C 85, 034316- (2012)
    phase_space = 1.529e-18
    # REF: J. Barea et al. Phys. Rev. C 87, 014315- (2013)
    matrix_element = 3.31

    two_nu_converter = decay.DBIsotope(
        ""Te130_2n2b"", atm_weight_iso, atm_weight_nat, abundance, phase_space,
        matrix_element, roi_efficiency=scaling)

    Te130_2n2b = store.load(args.two_nu)  # Reload spectra
    B8_Solar = store.load(args.b8_solar)

    # 1/ Set limit with no penalty term
    # Create dictionary of backgrounds and priors

    # REF: R. Arnold et al. (NEMO-3 Collaboration), PRL 107, 062504 (2011)
    two_nu_half_life = 7.0e20
    Te130_2n2b_prior = two_nu_converter.half_life_to_counts(two_nu_half_life,
                                                            roi_cut=False)
    # REF: SNO+-doc-507v27 - Valentina's Numbers
    B8_Solar_prior = 1021. * 5.  # 1021 events/year for 5 year livetime
    fixed_backgrounds = {Te130_2n2b._name: [Te130_2n2b, Te130_2n2b_prior],
                         B8_Solar._name: [B8_Solar, B8_Solar_prior]}
    # Create fixed spectrum. Pre-shrink here if pre-shrinking in LimitSetting
    fixed = limit_setting.make_fixed_background(fixed_backgrounds,
                                                roi=roi)

    # Initialise limit setting class
    set_limit = limit_setting.LimitSetting(Te130_0n2b, fixed_background=fixed,
                                           roi=roi, pre_shrink=True,
                                           verbose=args.verbose)

    # Configure Te130_0n2b
    Te130_0n2b_counts = numpy.arange(0.5, 500.0, 0.5, dtype=float)
    Te130_0n2b_prior = 0.  # Setting a 90% CL so no signal in observed
    Te130_0n2b_config = limit_config.LimitConfig(Te130_0n2b_prior,
                                                 Te130_0n2b_counts)
    set_limit.configure_signal(Te130_0n2b_config)

    # Set chi squared calculator
    calculator = chi_squared.ChiSquared()
    set_limit.set_calculator(calculator)

    # Calculate confidence limit
    sig_num_decays = set_limit.get_limit_no_float()

    half_life = converter.counts_to_half_life(sig_num_decays)
    print ""90% CL with no penalty at: "" + str(sig_num_decays) + "" ROI counts""
    print ""90% CL with no penalty at: "" + str(half_life) + "" y""

    # 2/ Now try fixing B8_Solar and floating Te130_2n2b
    Te130_0n2b = store.load(args.signal)

    # Reload background spectra
    Te130_2n2b = store.load(args.two_nu)
    B8_Solar = store.load(args.b8_solar)

    fixed_backgrounds = {B8_Solar._name: [B8_Solar, B8_Solar_prior]}
    fixed = limit_setting.make_fixed_background(fixed_backgrounds,
                                                roi=roi)

    # List of backgrounds to float
    floating = [Te130_2n2b]
    # Reinitialise limit setting
    set_limit = limit_setting.LimitSetting(Te130_0n2b, fixed_background=fixed,
                                           floating_backgrounds=floating,
                                           roi=roi, pre_shrink=True,
                                           verbose=args.verbose)
    # Configure Te130_0n2b
    Te130_0n2b_penalty_config = limit_config.LimitConfig(Te130_0n2b_prior,
                                                         Te130_0n2b_counts)
    set_limit.configure_signal(Te130_0n2b_penalty_config)

    # Set config for Te130_2n2b
    # Sigma of rate:
    # REF: R. Arnold et al. (NEMO-3 Collaboration), Phys. Rev. Lett. 107,
    # 062504 (2011), via SNO+-doc-3000-v1 (Andy's doc on systematics)
    Te130_2n2b_sigma = 0.203 * Te130_2n2b_prior
    # Floating range (+/- 1 sigma):
    Te130_2n2b_counts = numpy.linspace(0.797*Te130_2n2b_prior,
                                       1.203*Te130_2n2b_prior, 51)
    Te130_2n2b_penalty_config = limit_config.LimitConfig(
        Te130_2n2b_prior, Te130_2n2b_counts, Te130_2n2b_sigma)
    set_limit.configure_background(Te130_2n2b._name,
                                   Te130_2n2b_penalty_config,
                                   plot_systematic=True)

    # Set chi squared calculator
    set_limit.set_calculator(calculator)

    # Calculate confidence limit
    sig_num_decays = set_limit.get_limit()
    half_life = converter.counts_to_half_life(sig_num_decays)
    print (""90% CL with Te130_2n2b floating at: "" +
           str(sig_num_decays) + "" ROI counts"")
    print ""90% CL with Te130_2n2b floating at: "" + str(half_life) + "" y""

    fig1 = plot_chi_squared.chi_squared_vs_signal(Te130_0n2b_config)
    fig1.Draw(""AP"")
    raw_input(""RETURN to continue"")

    for syst_analyser in set_limit._syst_analysers.values():
        store.dump_ndarray(syst_analyser._name+""_2.hdf5"", syst_analyser)

    # 3/ Fix no backgrounds and float all#
    Te130_0n2b = store.load(args.signal)
    # Reload background spectra
    Te130_2n2b = store.load(args.two_nu)
    B8_Solar = store.load(args.b8_solar)

    # List of backgrounds to float
    floating = [Te130_2n2b, B8_Solar]

    # Reinitialise limit setting
    set_limit = limit_setting.LimitSetting(Te130_0n2b,
                                           floating_backgrounds=floating,
                                           roi=roi, pre_shrink=True,
                                           verbose=args.verbose)
    # Configure Te130_0n2b
    Te130_0n2b_penalty_config = limit_config.LimitConfig(Te130_0n2b_prior,
                                                         Te130_0n2b_counts)
    set_limit.configure_signal(Te130_0n2b_penalty_config)
    Te130_2n2b_penalty_config = limit_config.LimitConfig(
        Te130_2n2b_prior, Te130_2n2b_counts, Te130_2n2b_sigma)
    set_limit.configure_background(Te130_2n2b._name,
                                   Te130_2n2b_penalty_config,
                                   plot_systematic=True)
    # Set config for B8_Solar
    # Sigma of rate:
    # REF: R. Arnold et al. (NEMO-3 Collaboration), Phys. Rev. Lett. 107,
    # 062504 (2011), via SNO+-doc-3000-v1 (Andy's doc on systematics)
    B8_Solar_sigma = 0.04 * B8_Solar_prior
    # Floating range (+/- 1 sigma):
    B8_Solar_counts = numpy.linspace(0.96*B8_Solar_prior,
                                     1.04*B8_Solar_prior, 11)
    # 11 bins to make sure midpoint (no variation from prior) is included
    B8_Solar_penalty_config = limit_config.LimitConfig(B8_Solar_prior,
                                                       B8_Solar_counts,
                                                       B8_Solar_sigma)
    set_limit.configure_background(B8_Solar._name, B8_Solar_penalty_config,
                                   plot_systematic=True)
    # Set chi squared calculator
    set_limit.set_calculator(calculator)

    # Calculate confidence limit
    sig_num_decays = set_limit.get_limit()
    half_life = converter.counts_to_half_life(sig_num_decays)
    print (""90% CL, with all backgrounds floating, at: "" +
           str(sig_num_decays) + "" ROI counts"")
    print ""90% CL, with all backgrounds floating, at: "" + str(half_life) + "" y""

    fig2 = plot_chi_squared.chi_squared_vs_signal(Te130_0n2b_config)
    fig2.Draw(""AP"")
    raw_input(""RETURN to continue"")

    for syst_analyser in set_limit._syst_analysers.values():
        store.dump_ndarray(syst_analyser._name+""_3.hdf5"", syst_analyser)
    store.dump_ndarray(""Te130_0n2b_config.hdf5"", Te130_0n2b_config)
    store.dump_ndarray(""Te130_0n2b_penalty_config.hdf5"",
                       Te130_0n2b_penalty_config)
",FALSE,,4170
4074,InitialSO.csv4074.txt,InitialGit.csv4074.txt,4,"down-arrow return <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js'></script>
<script src=""https://maps.googleapis.com/maps/api/js?sensor=false&libraries=places""></script>
<script>
    var pac_input = document.getElementById('searchTextField');

    (function pacSelectFirst(input) {
        // store the original event binding function
        var _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;

        function addEventListenerWrapper(type, listener) {
            // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
            // and then trigger the original listener.
            if (type == ""keydown"") {
                var orig_listener = listener;
                listener = function(event) {
                    var suggestion_selected = $("".pac-item-selected"").length > 0;
                    if (event.which == 13 && !suggestion_selected) {
                        var simulated_downarrow = $.Event(""keydown"", {
                            keyCode: 40,
                            which: 40
                        });
                        orig_listener.apply(input, [simulated_downarrow]);
                    }

                    orig_listener.apply(input, [event]);
                };
            }

            _addEventListener.apply(input, [type, listener]);
        }

        input.addEventListener = addEventListenerWrapper;
        input.attachEvent = addEventListenerWrapper;

        var autocomplete = new google.maps.places.Autocomplete(input);

    })(pac_input);
</script>
 ","down-arrow return <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js'></script>
<script src=""https://maps.googleapis.com/maps/api/js?sensor=false&libraries=places""></script>
<script>
    var pac_input = document.getElementById('searchTextField');

    (function pacSelectFirst(input) {
        // store the original event binding function
        var _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;

        function addEventListenerWrapper(type, listener) {
            // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
            // and then trigger the original listener.
            if (type == ""keydown"") {
                var orig_listener = listener;
                listener = function(event) {
                    var suggestion_selected = $("".pac-item-selected"").length > 0;
                    if (event.which == 13 && !suggestion_selected) {
                        var simulated_downarrow = $.Event(""keydown"", {
                            keyCode: 40,
                            which: 40
                        });
                        orig_listener.apply(input, [simulated_downarrow]);
                    }

                    orig_listener.apply(input, [event]);
                };
            }

            _addEventListener.apply(input, [type, listener]);
        }

        input.addEventListener = addEventListenerWrapper;
        input.attachEvent = addEventListenerWrapper;

        var autocomplete = new google.maps.places.Autocomplete(input);

    })(pac_input);
</script>
 ",TRUE,"+(function ( $, window) {

  var pluginName = ""placepicker"";

  var defaults = {
    map: """",
    mapOptions: {
      zoom: 15
    },
    places: {
      icons: false
    },
    autoCompleteOptions: {
    },
    // callbacks
    placeChanged: null,
    location: null,
    preventSubmit: true
  };

  function PlacePicker(element, options) {

    var instance = this;

    var geocoder = null;

    var mapElement, map, marker;

    var service = null;

    var autocomplete;

    // stores the current place
    var _place = null;
    var _latLng = null;

    /**
     * Generates a piece of HTML that is used to replace the input element
     * with one that also contains a globe button.
     */
    function template() {
      var templateString =
        ""<div class=\""input-group\"">"" +
          ""<span class=\""input-group-btn\"">"" +
            ""<button type=\""button\"" data-toggle=\""collapse\"" href=\""#"" + options.mapContainerId + ""\"" class=\""btn btn-default\"">"" +
              ""<span class=\""glyphicon glyphicon-globe\""></span>"" +
            ""</button>"" +
          ""</span>"" +
        ""</div>"";

      return templateString;
    }

    /**
     * Modifies the DOM to add a globe button that hides and shows a map
     * element.
     */
    function initDomElements() {
      if (!options.mapContainerId) {
        return;
      }

      // Find the index of our element under its parent
      var $element = $(element);
      var $parent = $element.parent();
      var index = $parent.children().index(element);

      // Replace the element with our template code
      $element.replaceWith(template());

      // Then inject back in the existing element. This retains all
      // attributes on the element.
      $parent.children().eq(index).append(element);
    }

    function codePlace(query) {

      if (!query) {
        return;
      }

      var request = {
        query: query
      };

      if (service) {
        service.textSearch(request, function (results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (var i = 0; i < results.length; i++) {
              setPlace(results[i]);
              return;
            }
          }
        });
      }
    }

    function codeLatLng(latlng) {
      geocoder.geocode({""latLng"": latlng}, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          if (results[0]) {
            var place = results[0];
            setPlace(place, false);
          } else {
            // alert(""No results found"");
          }
        } else {
          // alert(""Geocoder failed due to: "" + status);
        }
      });
    }

    /**
     * Find and store the DOM element that holds the Google Map.
     * @return a boolean indicating whether an element was successfully
     * set.
     */
    function setMapElement() {

      mapElement = $(options.map).get(0);

      if (!mapElement) {
        if (options.mapContainerId) {
          mapElement = $(""#"" + options.mapContainerId + "" .placepicker-map"").get(0);
        }
      }

      return mapElement ? true : false;
    }

    function initMap() {

      if (!setMapElement()) {
        return;
      }

      map = new google.maps.Map(mapElement, options.mapOptions);

      autocomplete.bindTo(""bounds"", map);

      google.maps.event.addListener(map, ""click"", function(e) {
        var pos = e.latLng;
        marker.setPosition(pos);
        map.panTo(pos);
        element.blur();
        codeLatLng(pos);
      });

      marker = new google.maps.Marker({
        map: map
      });

      service = new google.maps.places.PlacesService(map);

      // When the map is made visible, if we have no location set then
      // attempt geolocation. The css() calls ensure that the map is
      // refreshed.
      $(mapElement).parent().on(""show.bs.collapse"", function(e) {
        $(e.target)
          .css(""display"", ""block"")
          // Fix map icons
          .find(""img[src*='gstatic.com/'], img[src*='googleapis.com/']"").css(""max-width"", ""none"");

        if (!element.value) {
          instance.geoLocation();
        } else {
          instance.resize();
        }

        $(e.target).css(""display"", """");
      });
    }

    function initAutoComplete() {
      autocomplete = new google.maps.places.Autocomplete(element, options.autoCompleteOptions);
      google.maps.event.addListener(autocomplete, ""place_changed"", function() {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          setPlace(place);
        }
      });
    }

    function resizeHandler() {
      instance.resize.call(instance);
    }

    /**
     * We want to be able to select the first suggestion from Google when
     * the user presses return. This function applies a solution from Stack
     * Overflow, shimming the addEventListener function on the input element
     * so that when the Google code adds event listeners, they are actually
     * proxied through a custom handler. If a return keypress is detected
     * (keyCode 13), then a down arrow is inserted first, which has the
     * effect of selecting the first item in the suggestions, if any.
     */
    function overrideAddEventListener() {
      // http://stackoverflow.com/a/11703018/1220963
      var _addEventListener = (element.addEventListener) ? element.addEventListener : element.attachEvent;

      function addEventListenerWrapper(type, listener) {
        // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
        // and then trigger the original listener.
        if (type === ""keydown"") {
          var orig_listener = listener;
          listener = function(event) {
            var suggestion_selected = $("".pac-item-selected"").length > 0;
            if ((event.which === 13 || event.keyCode === 13) && !suggestion_selected) {
              var simulated_downarrow = $.Event(""keydown"", {
                keyCode: 40,
                which: 40
              });
              orig_listener.apply(element, [simulated_downarrow]);
            }

            orig_listener.apply(element, [event]);
          };
        }

        _addEventListener.apply(element, [type, listener]);
      }

      element.addEventListener = addEventListenerWrapper;
      element.attachEvent = addEventListenerWrapper;
    }

    function init() {

      geocoder = new google.maps.Geocoder();

      overrideAddEventListener();

      initDomElements();
      initAutoComplete();
      initMap();

      if (!element.value) {
        var lat = options.latitude || $(options.latitudeInput).prop(""value"");
        var lng = options.longitude || $(options.longitudeInput).prop(""value"");
        if (lat && lng) {
          instance.setLocation(lat, lng);
        }
      } else {
        codePlace(element.value);
      }

      $(window).on(""resize"", resizeHandler);
      $(element).on(""keypress"", function(e) {
        if (options.preventSubmit && e.keyCode === 13) {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
      });

    }

    function setPlace(place, updateMap) {
      updateMap = typeof updateMap === ""undefined"" ? true : false;
      _place = place;

      instance.resize();

      var pos = place.geometry.location;

      if (updateMap) {
        updatePosition(pos);
      }

      $(options.latitudeInput).prop(""value"", pos.lat());
      $(options.longitudeInput).prop(""value"", pos.lng());

      // update inputs
      if (!updateMap) {
        element.value = place.formatted_address;
      }

      if (typeof options.placeChanged === ""function"") {
        options.placeChanged.call(instance, place);
      }
    }

    function updatePosition(pos) {

      if (!map) {
        return;
      }

      map.setCenter(pos);

      var icon = options.icon || options.placesIcon && place.icon ? place.icon : null;

      if (icon) {
        var iconOptions = {
          url: icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
        };
        marker.setIcon(iconOptions);
      }

      marker.setPosition(pos);
      marker.setVisible(true);


    }

    this.setValue = function(value) {
      element.value = value;
      codePlace(value);
    };

    this.getValue = function() {
      return element.value;
    };

    this.setLocation = function(latitude, longitude) {
      var latLng = new google.maps.LatLng(latitude, longitude);
      this.setLatLng(latLng);
    };

    this.getLocation = function() {
      var latLng = this.getLatLng();
      return {
        latitude: latLng && latLng.lat() || options.latitude,
        longitude: latLng && latLng.lng() || options.longitude
      };
    };

    this.setLatLng = function(latLng) {
      _latLng = latLng;
      codeLatLng(_latLng);
    };

    this.getLatLng = function() {
      if (_place && _place.geometry) {
        return _place.geometry.location;
      }
      return _latLng;
    };

    this.getMap = function() {
      return map;
    };

    this.reload = function() {
      if (map) {
        codePlace(element.value);
      }
    };

    this.resize = function() {
      if (map) {
        var center = map.getCenter();
        google.maps.event.trigger(map, ""resize"");
        map.setCenter(center);
      }
    };

    this.geoLocation = function(callback) {
      // Try HTML5 geolocation
      if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          updatePosition(pos);
          codeLatLng(pos);
          if (callback) {
            callback(pos);
          }

        }, function() {
          // error
          if (callback) {
            callback(null);
          }
        });
      } else {
        // Browser doesn't support Geolocation
        if (callback) {
          callback(null);
        }
      }
    };


    init.call(this);
  }

  var pluginClass = PlacePicker;

  // register plugin
  $.fn[pluginName] = function(options) {

    return this.each(function() {
      if (!$(this).data(pluginName)) {
          $(this).data(pluginName, new pluginClass(this, $.extend({}, defaults, options, $(this).data())));
      }
      return $(this);
    });
  };



})( jQuery, window );
","+(function ( $, window) {

  var pluginName = ""placepicker"";

  var defaults = {
    map: """",
    mapOptions: {
      zoom: 15
    },
    places: {
      icons: false
    },
    autoCompleteOptions: {
    },
    // callbacks
    placeChanged: null,
    location: null,
    preventSubmit: true
  };

  function PlacePicker(element, options) {

    var instance = this;

    var geocoder = null;

    var mapElement, map, marker;

    var service = null;

    var autocomplete;

    // stores the current place
    var _place = null;
    var _latLng = null;

    /**
     * Generates a piece of HTML that is used to replace the input element
     * with one that also contains a globe button.
     */
    function template() {
      var templateString =
        ""<div class=\""input-group\"">"" +
          ""<span class=\""input-group-btn\"">"" +
            ""<button type=\""button\"" data-toggle=\""collapse\"" href=\""#"" + options.mapContainerId + ""\"" class=\""btn btn-default\"">"" +
              ""<span class=\""glyphicon glyphicon-globe\""></span>"" +
            ""</button>"" +
          ""</span>"" +
        ""</div>"";

      return templateString;
    }

    /**
     * Modifies the DOM to add a globe button that hides and shows a map
     * element.
     */
    function initDomElements() {
      if (!options.mapContainerId) {
        return;
      }

      // Find the index of our element under its parent
      var $element = $(element);
      var $parent = $element.parent();
      var index = $parent.children().index(element);

      // Replace the element with our template code
      $element.replaceWith(template());

      // Then inject back in the existing element. This retains all
      // attributes on the element.
      $parent.children().eq(index).append(element);
    }

    function codePlace(query) {

      if (!query) {
        return;
      }

      var request = {
        query: query
      };

      if (service) {
        service.textSearch(request, function (results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            for (var i = 0; i < results.length; i++) {
              setPlace(results[i]);
              return;
            }
          }
        });
      }
    }

    function codeLatLng(latlng) {
      geocoder.geocode({""latLng"": latlng}, function(results, status) {
        if (status === google.maps.GeocoderStatus.OK) {
          if (results[0]) {
            var place = results[0];
            setPlace(place, false);
          } else {
            // alert(""No results found"");
          }
        } else {
          // alert(""Geocoder failed due to: "" + status);
        }
      });
    }

    /**
     * Find and store the DOM element that holds the Google Map.
     * @return a boolean indicating whether an element was successfully
     * set.
     */
    function setMapElement() {

      mapElement = $(options.map).get(0);

      if (!mapElement) {
        if (options.mapContainerId) {
          mapElement = $(""#"" + options.mapContainerId + "" .placepicker-map"").get(0);
        }
      }

      return mapElement ? true : false;
    }

    function initMap() {

      if (!setMapElement()) {
        return;
      }

      map = new google.maps.Map(mapElement, options.mapOptions);

      autocomplete.bindTo(""bounds"", map);

      google.maps.event.addListener(map, ""click"", function(e) {
        var pos = e.latLng;
        marker.setPosition(pos);
        map.panTo(pos);
        element.blur();
        codeLatLng(pos);
      });

      marker = new google.maps.Marker({
        map: map
      });

      service = new google.maps.places.PlacesService(map);

      // When the map is made visible, if we have no location set then
      // attempt geolocation. The css() calls ensure that the map is
      // refreshed.
      $(mapElement).parent().on(""show.bs.collapse"", function(e) {
        $(e.target)
          .css(""display"", ""block"")
          // Fix map icons
          .find(""img[src*='gstatic.com/'], img[src*='googleapis.com/']"").css(""max-width"", ""none"");

        if (!element.value) {
          instance.geoLocation();
        } else {
          instance.resize();
        }

        $(e.target).css(""display"", """");
      });
    }

    function initAutoComplete() {
      autocomplete = new google.maps.places.Autocomplete(element, options.autoCompleteOptions);
      google.maps.event.addListener(autocomplete, ""place_changed"", function() {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          setPlace(place);
        }
      });
    }

    function resizeHandler() {
      instance.resize.call(instance);
    }

    /**
     * We want to be able to select the first suggestion from Google when
     * the user presses return. This function applies a solution from Stack
     * Overflow, shimming the addEventListener function on the input element
     * so that when the Google code adds event listeners, they are actually
     * proxied through a custom handler. If a return keypress is detected
     * (keyCode 13), then a down arrow is inserted first, which has the
     * effect of selecting the first item in the suggestions, if any.
     */
    function overrideAddEventListener() {
      // http://stackoverflow.com/a/11703018/1220963
      var _addEventListener = (element.addEventListener) ? element.addEventListener : element.attachEvent;

      function addEventListenerWrapper(type, listener) {
        // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
        // and then trigger the original listener.
        if (type === ""keydown"") {
          var orig_listener = listener;
          listener = function(event) {
            var suggestion_selected = $("".pac-item-selected"").length > 0;
            if ((event.which === 13 || event.keyCode === 13) && !suggestion_selected) {
              var simulated_downarrow = $.Event(""keydown"", {
                keyCode: 40,
                which: 40
              });
              orig_listener.apply(element, [simulated_downarrow]);
            }

            orig_listener.apply(element, [event]);
          };
        }

        _addEventListener.apply(element, [type, listener]);
      }

      element.addEventListener = addEventListenerWrapper;
      element.attachEvent = addEventListenerWrapper;
    }

    function init() {

      geocoder = new google.maps.Geocoder();

      overrideAddEventListener();

      initDomElements();
      initAutoComplete();
      initMap();

      if (!element.value) {
        var lat = options.latitude || $(options.latitudeInput).prop(""value"");
        var lng = options.longitude || $(options.longitudeInput).prop(""value"");
        if (lat && lng) {
          instance.setLocation(lat, lng);
        }
      } else {
        codePlace(element.value);
      }

      $(window).on(""resize"", resizeHandler);
      $(element).on(""keypress"", function(e) {
        if (options.preventSubmit && e.keyCode === 13) {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
      });

    }

    function setPlace(place, updateMap) {
      updateMap = typeof updateMap === ""undefined"" ? true : false;
      _place = place;

      instance.resize();

      var pos = place.geometry.location;

      if (updateMap) {
        updatePosition(pos);
      }

      $(options.latitudeInput).prop(""value"", pos.lat());
      $(options.longitudeInput).prop(""value"", pos.lng());

      // update inputs
      if (!updateMap) {
        element.value = place.formatted_address;
      }

      if (typeof options.placeChanged === ""function"") {
        options.placeChanged.call(instance, place);
      }
    }

    function updatePosition(pos) {

      if (!map) {
        return;
      }

      map.setCenter(pos);

      var icon = options.icon || options.placesIcon && place.icon ? place.icon : null;

      if (icon) {
        var iconOptions = {
          url: icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
        };
        marker.setIcon(iconOptions);
      }

      marker.setPosition(pos);
      marker.setVisible(true);


    }

    this.setValue = function(value) {
      element.value = value;
      codePlace(value);
    };

    this.getValue = function() {
      return element.value;
    };

    this.setLocation = function(latitude, longitude) {
      var latLng = new google.maps.LatLng(latitude, longitude);
      this.setLatLng(latLng);
    };

    this.getLocation = function() {
      var latLng = this.getLatLng();
      return {
        latitude: latLng && latLng.lat() || options.latitude,
        longitude: latLng && latLng.lng() || options.longitude
      };
    };

    this.setLatLng = function(latLng) {
      _latLng = latLng;
      codeLatLng(_latLng);
    };

    this.getLatLng = function() {
      if (_place && _place.geometry) {
        return _place.geometry.location;
      }
      return _latLng;
    };

    this.getMap = function() {
      return map;
    };

    this.reload = function() {
      if (map) {
        codePlace(element.value);
      }
    };

    this.resize = function() {
      if (map) {
        var center = map.getCenter();
        google.maps.event.trigger(map, ""resize"");
        map.setCenter(center);
      }
    };

    this.geoLocation = function(callback) {
      // Try HTML5 geolocation
      if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          updatePosition(pos);
          codeLatLng(pos);
          if (callback) {
            callback(pos);
          }

        }, function() {
          // error
          if (callback) {
            callback(null);
          }
        });
      } else {
        // Browser doesn't support Geolocation
        if (callback) {
          callback(null);
        }
      }
    };


    init.call(this);
  }

  var pluginClass = PlacePicker;

  // register plugin
  $.fn[pluginName] = function(options) {

    return this.each(function() {
      if (!$(this).data(pluginName)) {
          $(this).data(pluginName, new pluginClass(this, $.extend({}, defaults, options, $(this).data())));
      }
      return $(this);
    });
  };



})( jQuery, window );
",TRUE,,4172
4090,InitialSO.csv4090.txt,InitialGit.csv4090.txt,3,"var checkPermission = function (file, mask, cb){
    fs.stat (file, function (error, stats){
        if (error){
            cb (error, false);
        }else{
            cb (null, !!(mask & parseInt ((stats.mode & parseInt (""777"", 8)).toString (8)[0])));
        }
    });
};
 checkPermission (<path>, 1, cb);
 checkPermission (<path>, 4, cb);
 checkPermission (<path>, 2, cb);
 ","var checkPermission = function (file, mask, cb){
    fs.stat (file, function (error, stats){
        if (error){
            cb (error, false);
        }else{
            cb (null, !!(mask & parseInt ((stats.mode & parseInt (""777"", 8)).toString (8)[0])));
        }
    });
};
 checkPermission (<path>, 1, cb);
 checkPermission (<path>, 4, cb);
 checkPermission (<path>, 2, cb);
 ",TRUE,"'use strict';
var EventEmitter = require('events').EventEmitter;
var fs = require('fs');
var os = require('os');
var sysPath = require('path');
var fsevents, recursiveReaddir;
try {
  fsevents = require('fsevents');
  recursiveReaddir = require('recursive-readdir');
} catch (error) {}

var __slice = [].slice;
var createFSEventsInstance = function(path, callback) {
  var watcher = new fsevents.FSEvents(path);
  watcher.on('fsevent', callback);
  return watcher;
};
var nodeVersion = process.versions.node.substring(0, 3);
var directoryEndRe = /[\\\/]$/;
var platform = os.platform();
var canUseFsEvents = platform === 'darwin' && fsevents;

// To disable FSEvents completely.
// var canUseFsEvents = false;

// Binary file handling code.
var _binExts = ['adp', 'au', 'mid', 'mp4a', 'mpga', 'oga', 's3m', 'sil', 'eol', 'dra', 'dts', 'dtshd', 'lvp', 'pya', 'ecelp4800', 'ecelp7470', 'ecelp9600', 'rip', 'weba', 'aac', 'aif', 'caf', 'flac', 'mka', 'm3u', 'wax', 'wma', 'wav', 'xm', 'flac', '3gp', '3g2', 'h261', 'h263', 'h264', 'jpgv', 'jpm', 'mj2', 'mp4', 'mpeg', 'ogv', 'qt', 'uvh', 'uvm', 'uvp', 'uvs', 'dvb', 'fvt', 'mxu', 'pyv', 'uvu', 'viv', 'webm', 'f4v', 'fli', 'flv', 'm4v', 'mkv', 'mng', 'asf', 'vob', 'wm', 'wmv', 'wmx', 'wvx', 'movie', 'smv', 'ts', 'bmp', 'cgm', 'g3', 'gif', 'ief', 'jpg', 'jpeg', 'ktx', 'png', 'btif', 'sgi', 'svg', 'tiff', 'psd', 'uvi', 'sub', 'djvu', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'mdi', 'wdp', 'npx', 'wbmp', 'xif', 'webp', '3ds', 'ras', 'cmx', 'fh', 'ico', 'pcx', 'pic', 'pnm', 'pbm', 'pgm', 'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'zip', 'rar', 'tar', 'bz2', 'eot', 'ttf', 'woff'];
var binExts = Object.create(null);

_binExts.forEach(function(extension) {
  return binExts[extension] = true;
});

var isBinary = function(extension) {
  if (extension === '') return false;
  return !!binExts[extension];
}

var isBinaryPath = function(path) {
  return isBinary(sysPath.extname(path).slice(1));
};

exports.isBinaryPath = isBinaryPath;

// Main code.
//
// Watches files & directories for changes.
//
// Emitted events: `add`, `change`, `unlink`, `error`.
//
// Examples
//
//   var watcher = new FSWatcher()
//     .add(directories)
//     .on('add', function(path) {console.log('File', path, 'was added');})
//     .on('change', function(path) {console.log('File', path, 'was changed');})
//     .on('unlink', function(path) {console.log('File', path, 'was removed');})
//
function FSWatcher(_opts) {
  if (_opts == null) _opts = {};
  var opts = {};
  for (var opt in _opts) opts[opt] = _opts[opt]
  this.close = this.close.bind(this);
  EventEmitter.call(this);
  this.watched = Object.create(null);
  this.watchers = [];

  // Set up default options.
  if (opts.persistent == null) opts.persistent = false;
  if (opts.ignoreInitial == null) opts.ignoreInitial = false;
  if (opts.interval == null) opts.interval = 100;
  if (opts.binaryInterval == null) opts.binaryInterval = 300;
  if (opts.usePolling == null) opts.usePolling = platform !== 'win32';
  if (opts.useFsEvents == null) {
    opts.useFsEvents = !opts.usePolling && canUseFsEvents;
  } else {
    if (!canUseFsEvents) opts.useFsEvents = false;
  }
  if (opts.ignorePermissionErrors == null) {
    opts.ignorePermissionErrors = false;
  }

  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  this._isIgnored = (function(ignored) {
    switch (toString.call(ignored)) {
      case '[object RegExp]':
        return function(string) {
          return ignored.test(string);
        };
      case '[object Function]':
        return ignored;
      default:
        return function() {
          return false;
        };
    }
  })(opts.ignored);

  this.options = opts;

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

FSWatcher.prototype = Object.create(EventEmitter.prototype);

// Directory helpers
// -----------------

FSWatcher.prototype._getWatchedDir = function(directory) {
  var _base;
  var dir = directory.replace(directoryEndRe, '');
  return (_base = this.watched)[dir] != null ? (_base = this.watched)[dir] : _base[dir] = [];
};

FSWatcher.prototype._addToWatchedDir = function(directory, basename) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.push(basename);
};

FSWatcher.prototype._removeFromWatchedDir = function(directory, file) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.some(function(watchedFile, index) {
    if (watchedFile === file) {
      watchedFiles.splice(index, 1);
      return true;
    }
  });
};

// File helpers
// ------------

// Private: Check for read permissions
// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
//
// stats - fs.Stats object
//
// Returns Boolean
FSWatcher.prototype._hasReadPermissions = function(stats) {
  return Boolean(4 & parseInt((stats.mode & 0x1ff).toString(8)[0]));
};

// Private: Handles emitting unlink events for
// files and directories, and via recursion, for
// files and directories within directories that are unlinked
//
// directory - string, directory within which the following item is located
// item      - string, base path of item/directory
//
// Returns nothing.
FSWatcher.prototype._remove = function(directory, item) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  var fullPath, isDirectory, nestedDirectoryChildren,
    _this = this;
  fullPath = sysPath.join(directory, item);
  isDirectory = this.watched[fullPath];

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  nestedDirectoryChildren = this._getWatchedDir(fullPath).slice();

  // Remove directory / file from watched list.
  this._removeFromWatchedDir(directory, item);

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(function(nestedItem) {
    return _this._remove(fullPath, nestedItem);
  });

  if (this.options.usePolling) fs.unwatchFile(fullPath);

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  delete this.watched[fullPath];
  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
  this.emit(eventName, fullPath);
};

FSWatcher.prototype._watchWithFsEvents = function(path) {
  var _this = this;
  var watcher = createFSEventsInstance(path, function(path, flags) {
    var emit, info;
    if (_this._isIgnored(path)) {
      return;
    }
    info = fsevents.getInfo(path, flags);
    emit = function(event) {
      var name;
      name = info.type === 'file' ? event : """" + event + ""Dir"";
      if (event === 'add' || event === 'addDir') {
        _this._addToWatchedDir(sysPath.dirname(path), sysPath.basename(path));
      } else if (event === 'unlink' || event === 'unlinkDir') {
        _this._remove(sysPath.dirname(path), sysPath.basename(path));
        return; // Don't emit event twice.
      }
      return _this.emit(name, path);
    };
    switch (info.event) {
      case 'created':
        return emit('add');
      case 'modified':
        return emit('change');
      case 'deleted':
        return emit('unlink');
      case 'moved':
        return fs.stat(path, function(error, stats) {
          return emit((error || !stats ? 'unlink' : 'add'));
        });
    }
  });
  return this.watchers.push(watcher);
};

// Private: Watch file for changes with fs.watchFile or fs.watch.

// item     - string, path to file or directory.
// callback - function that will be executed on fs change.

// Returns nothing.
FSWatcher.prototype._watch = function(item, callback) {
  var basename, directory, options, parent, watcher;
  if (callback == null) {
    callback = (function() {});
  }
  directory = sysPath.dirname(item);
  basename = sysPath.basename(item);
  parent = this._getWatchedDir(directory);
  if (parent.indexOf(basename) !== -1) return;

  this._addToWatchedDir(directory, basename);
  options = {persistent: this.options.persistent};

  if (this.options.usePolling) {
    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ? this.options.binaryInterval : this.options.interval;
    fs.watchFile(item, options, function(curr, prev) {
      if (curr.mtime.getTime() > prev.mtime.getTime()) {
        callback(item, curr);
      }
    });
  } else {
    watcher = fs.watch(item, options, function(event, path) {
      callback(item);
    });
    this.watchers.push(watcher);
  }
};

// Private: Emit `change` event once and watch file to emit it in the future
// once the file is changed.

// file       - string, fs path.
// stats      - object, result of executing stat(1) on file.
// initialAdd - boolean, was the file added at the launch?

// Returns nothing.
FSWatcher.prototype._handleFile = function(file, stats, initialAdd) {
  var _this = this;
  if (initialAdd == null) initialAdd = false;
  this._watch(file, function(file, newStats) {
    return _this.emit('change', file, newStats);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('add', file, stats);
  }
};

// Private: Read directory to add / remove files from `@watched` list
// and re-read it on change.

// directory - string, fs path.

// Returns nothing.
FSWatcher.prototype._handleDir = function(directory, stats, initialAdd) {
  var _this = this;
  var read = function(directory, initialAdd) {
    return fs.readdir(directory, function(error, current) {
      if (error != null) return _this.emit('error', error);
      if (!current) return;

      var previous = _this._getWatchedDir(directory);

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.filter(function(file) {
        return current.indexOf(file) === -1;
      }).forEach(function(file) {
        return _this._remove(directory, file);
      });

      // Files that present in current directory snapshot
      // but absent in previous are added to watch list and
      // emit `add` event.
      current.filter(function(file) {
        return previous.indexOf(file) === -1;
      }).forEach(function(file) {
        _this._handle(sysPath.join(directory, file), initialAdd);
      });
    });
  };
  read(directory, initialAdd);
  this._watch(directory, function(dir) {
    return read(dir, false);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('addDir', directory, stats);
  }
};

// Private: Handle added file or directory.
// Delegates call to _handleFile / _handleDir after checks.

// item - string, path to file or directory.

// Returns nothing.
FSWatcher.prototype._handle = function(item, initialAdd) {
  var _this = this;
  if (this._isIgnored(item)) return;
  return fs.realpath(item, function(error, path) {
    if (error && error.code === 'ENOENT') return;
    if (error != null) return _this.emit('error', error);
    fs.stat(path, function(error, stats) {
      if (error != null) return _this.emit('error', error);
      if (_this.options.ignorePermissionErrors && (!_this._hasReadPermissions(stats))) {
        return;
      }
      if (_this._isIgnored.length === 2 && _this._isIgnored(item, stats)) {
        return;
      }
      if (stats.isFile()) _this._handleFile(item, stats, initialAdd);
      if (stats.isDirectory()) _this._handleDir(item, stats, initialAdd);
    });
  });
};

FSWatcher.prototype.emit = function() {
  var args, event;
  event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  EventEmitter.prototype.emit.apply(this, [event].concat(__slice.call(args)));
  if (event === 'add' || event === 'addDir' || event === 'change' || event === 'unlink' || event === 'unlinkDir') {
    return EventEmitter.prototype.emit.apply(this, ['all', event].concat(__slice.call(args)));
  }
};

FSWatcher.prototype._addToFsEvents = function(files) {
  var _this = this;
  var handle = function(path) {
    return _this.emit('add', path);
  };
  files.forEach(function(file) {
    if (!_this.options.ignoreInitial) {
      fs.stat(file, function(error, stats) {
        if (error != null) return _this.emit('error', error);

        if (stats.isDirectory()) {
          recursiveReaddir(file, function(error, dirFiles) {
            if (error != null) return _this.emit('error', error);
            dirFiles.filter(function(path) {
              return !_this._isIgnored(path);
            }).forEach(handle);
          });
        } else {
          handle(file);
        }
      });
    }
    _this._watchWithFsEvents(file);
  });
  return this;
};

// Public: Adds directories / files for tracking.

// * files - array of strings (file paths).

// Examples

//   add ['app', 'vendor']

// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.add = function(files) {
  if (this._initialAdd == null) this._initialAdd = true;
  if (!Array.isArray(files)) files = [files];

  if (this.options.useFsEvents) return this._addToFsEvents(files);

  files.forEach(function(file) {
    return this._handle(file, this._initialAdd);
  }, this);
  this._initialAdd = false;
  return this;
};

// Public: Remove all listeners from watched files.
// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.close = function() {
  var useFsEvents = this.options.useFsEvents;
  var method = useFsEvents ? 'stop' : 'close';
  this.watchers.forEach(function(watcher) {
    watcher[method]();
  });

  if (this.options.usePolling) {
    var watched = this.watched;
    Object.keys(watched).forEach(function(directory) {
      return watched[directory].forEach(function(file) {
        return fs.unwatchFile(sysPath.join(directory, file));
      });
    });
  }
  this.watched = Object.create(null);

  this.removeAllListeners();
  return this;
};

exports.FSWatcher = FSWatcher;

exports.watch = function(files, options) {
  return new FSWatcher(options).add(files);
};
","'use strict';
var EventEmitter = require('events').EventEmitter;
var fs = require('fs');
var os = require('os');
var sysPath = require('path');
var fsevents, recursiveReaddir;
try {
  fsevents = require('fsevents');
  recursiveReaddir = require('recursive-readdir');
} catch (error) {}

var __slice = [].slice;
var createFSEventsInstance = function(path, callback) {
  var watcher = new fsevents.FSEvents(path);
  watcher.on('fsevent', callback);
  return watcher;
};
var nodeVersion = process.versions.node.substring(0, 3);
var directoryEndRe = /[\\\/]$/;
var platform = os.platform();
var canUseFsEvents = platform === 'darwin' && fsevents;

// To disable FSEvents completely.
// var canUseFsEvents = false;

// Binary file handling code.
var _binExts = ['adp', 'au', 'mid', 'mp4a', 'mpga', 'oga', 's3m', 'sil', 'eol', 'dra', 'dts', 'dtshd', 'lvp', 'pya', 'ecelp4800', 'ecelp7470', 'ecelp9600', 'rip', 'weba', 'aac', 'aif', 'caf', 'flac', 'mka', 'm3u', 'wax', 'wma', 'wav', 'xm', 'flac', '3gp', '3g2', 'h261', 'h263', 'h264', 'jpgv', 'jpm', 'mj2', 'mp4', 'mpeg', 'ogv', 'qt', 'uvh', 'uvm', 'uvp', 'uvs', 'dvb', 'fvt', 'mxu', 'pyv', 'uvu', 'viv', 'webm', 'f4v', 'fli', 'flv', 'm4v', 'mkv', 'mng', 'asf', 'vob', 'wm', 'wmv', 'wmx', 'wvx', 'movie', 'smv', 'ts', 'bmp', 'cgm', 'g3', 'gif', 'ief', 'jpg', 'jpeg', 'ktx', 'png', 'btif', 'sgi', 'svg', 'tiff', 'psd', 'uvi', 'sub', 'djvu', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'mdi', 'wdp', 'npx', 'wbmp', 'xif', 'webp', '3ds', 'ras', 'cmx', 'fh', 'ico', 'pcx', 'pic', 'pnm', 'pbm', 'pgm', 'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'zip', 'rar', 'tar', 'bz2', 'eot', 'ttf', 'woff'];
var binExts = Object.create(null);

_binExts.forEach(function(extension) {
  return binExts[extension] = true;
});

var isBinary = function(extension) {
  if (extension === '') return false;
  return !!binExts[extension];
}

var isBinaryPath = function(path) {
  return isBinary(sysPath.extname(path).slice(1));
};

exports.isBinaryPath = isBinaryPath;

// Main code.
//
// Watches files & directories for changes.
//
// Emitted events: `add`, `change`, `unlink`, `error`.
//
// Examples
//
//   var watcher = new FSWatcher()
//     .add(directories)
//     .on('add', function(path) {console.log('File', path, 'was added');})
//     .on('change', function(path) {console.log('File', path, 'was changed');})
//     .on('unlink', function(path) {console.log('File', path, 'was removed');})
//
function FSWatcher(_opts) {
  if (_opts == null) _opts = {};
  var opts = {};
  for (var opt in _opts) opts[opt] = _opts[opt]
  this.close = this.close.bind(this);
  EventEmitter.call(this);
  this.watched = Object.create(null);
  this.watchers = [];

  // Set up default options.
  if (opts.persistent == null) opts.persistent = false;
  if (opts.ignoreInitial == null) opts.ignoreInitial = false;
  if (opts.interval == null) opts.interval = 100;
  if (opts.binaryInterval == null) opts.binaryInterval = 300;
  if (opts.usePolling == null) opts.usePolling = platform !== 'win32';
  if (opts.useFsEvents == null) {
    opts.useFsEvents = !opts.usePolling && canUseFsEvents;
  } else {
    if (!canUseFsEvents) opts.useFsEvents = false;
  }
  if (opts.ignorePermissionErrors == null) {
    opts.ignorePermissionErrors = false;
  }

  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  this._isIgnored = (function(ignored) {
    switch (toString.call(ignored)) {
      case '[object RegExp]':
        return function(string) {
          return ignored.test(string);
        };
      case '[object Function]':
        return ignored;
      default:
        return function() {
          return false;
        };
    }
  })(opts.ignored);

  this.options = opts;

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

FSWatcher.prototype = Object.create(EventEmitter.prototype);

// Directory helpers
// -----------------

FSWatcher.prototype._getWatchedDir = function(directory) {
  var _base;
  var dir = directory.replace(directoryEndRe, '');
  return (_base = this.watched)[dir] != null ? (_base = this.watched)[dir] : _base[dir] = [];
};

FSWatcher.prototype._addToWatchedDir = function(directory, basename) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.push(basename);
};

FSWatcher.prototype._removeFromWatchedDir = function(directory, file) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.some(function(watchedFile, index) {
    if (watchedFile === file) {
      watchedFiles.splice(index, 1);
      return true;
    }
  });
};

// File helpers
// ------------

// Private: Check for read permissions
// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
//
// stats - fs.Stats object
//
// Returns Boolean
FSWatcher.prototype._hasReadPermissions = function(stats) {
  return Boolean(4 & parseInt((stats.mode & 0x1ff).toString(8)[0]));
};

// Private: Handles emitting unlink events for
// files and directories, and via recursion, for
// files and directories within directories that are unlinked
//
// directory - string, directory within which the following item is located
// item      - string, base path of item/directory
//
// Returns nothing.
FSWatcher.prototype._remove = function(directory, item) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  var fullPath, isDirectory, nestedDirectoryChildren,
    _this = this;
  fullPath = sysPath.join(directory, item);
  isDirectory = this.watched[fullPath];

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  nestedDirectoryChildren = this._getWatchedDir(fullPath).slice();

  // Remove directory / file from watched list.
  this._removeFromWatchedDir(directory, item);

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(function(nestedItem) {
    return _this._remove(fullPath, nestedItem);
  });

  if (this.options.usePolling) fs.unwatchFile(fullPath);

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  delete this.watched[fullPath];
  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
  this.emit(eventName, fullPath);
};

FSWatcher.prototype._watchWithFsEvents = function(path) {
  var _this = this;
  var watcher = createFSEventsInstance(path, function(path, flags) {
    var emit, info;
    if (_this._isIgnored(path)) {
      return;
    }
    info = fsevents.getInfo(path, flags);
    emit = function(event) {
      var name;
      name = info.type === 'file' ? event : """" + event + ""Dir"";
      if (event === 'add' || event === 'addDir') {
        _this._addToWatchedDir(sysPath.dirname(path), sysPath.basename(path));
      } else if (event === 'unlink' || event === 'unlinkDir') {
        _this._remove(sysPath.dirname(path), sysPath.basename(path));
        return; // Don't emit event twice.
      }
      return _this.emit(name, path);
    };
    switch (info.event) {
      case 'created':
        return emit('add');
      case 'modified':
        return emit('change');
      case 'deleted':
        return emit('unlink');
      case 'moved':
        return fs.stat(path, function(error, stats) {
          return emit((error || !stats ? 'unlink' : 'add'));
        });
    }
  });
  return this.watchers.push(watcher);
};

// Private: Watch file for changes with fs.watchFile or fs.watch.

// item     - string, path to file or directory.
// callback - function that will be executed on fs change.

// Returns nothing.
FSWatcher.prototype._watch = function(item, callback) {
  var basename, directory, options, parent, watcher;
  if (callback == null) {
    callback = (function() {});
  }
  directory = sysPath.dirname(item);
  basename = sysPath.basename(item);
  parent = this._getWatchedDir(directory);
  if (parent.indexOf(basename) !== -1) return;

  this._addToWatchedDir(directory, basename);
  options = {persistent: this.options.persistent};

  if (this.options.usePolling) {
    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ? this.options.binaryInterval : this.options.interval;
    fs.watchFile(item, options, function(curr, prev) {
      if (curr.mtime.getTime() > prev.mtime.getTime()) {
        callback(item, curr);
      }
    });
  } else {
    watcher = fs.watch(item, options, function(event, path) {
      callback(item);
    });
    this.watchers.push(watcher);
  }
};

// Private: Emit `change` event once and watch file to emit it in the future
// once the file is changed.

// file       - string, fs path.
// stats      - object, result of executing stat(1) on file.
// initialAdd - boolean, was the file added at the launch?

// Returns nothing.
FSWatcher.prototype._handleFile = function(file, stats, initialAdd) {
  var _this = this;
  if (initialAdd == null) initialAdd = false;
  this._watch(file, function(file, newStats) {
    return _this.emit('change', file, newStats);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('add', file, stats);
  }
};

// Private: Read directory to add / remove files from `@watched` list
// and re-read it on change.

// directory - string, fs path.

// Returns nothing.
FSWatcher.prototype._handleDir = function(directory, stats, initialAdd) {
  var _this = this;
  var read = function(directory, initialAdd) {
    return fs.readdir(directory, function(error, current) {
      if (error != null) return _this.emit('error', error);
      if (!current) return;

      var previous = _this._getWatchedDir(directory);

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.filter(function(file) {
        return current.indexOf(file) === -1;
      }).forEach(function(file) {
        return _this._remove(directory, file);
      });

      // Files that present in current directory snapshot
      // but absent in previous are added to watch list and
      // emit `add` event.
      current.filter(function(file) {
        return previous.indexOf(file) === -1;
      }).forEach(function(file) {
        _this._handle(sysPath.join(directory, file), initialAdd);
      });
    });
  };
  read(directory, initialAdd);
  this._watch(directory, function(dir) {
    return read(dir, false);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('addDir', directory, stats);
  }
};

// Private: Handle added file or directory.
// Delegates call to _handleFile / _handleDir after checks.

// item - string, path to file or directory.

// Returns nothing.
FSWatcher.prototype._handle = function(item, initialAdd) {
  var _this = this;
  if (this._isIgnored(item)) return;
  return fs.realpath(item, function(error, path) {
    if (error && error.code === 'ENOENT') return;
    if (error != null) return _this.emit('error', error);
    fs.stat(path, function(error, stats) {
      if (error != null) return _this.emit('error', error);
      if (_this.options.ignorePermissionErrors && (!_this._hasReadPermissions(stats))) {
        return;
      }
      if (_this._isIgnored.length === 2 && _this._isIgnored(item, stats)) {
        return;
      }
      if (stats.isFile()) _this._handleFile(item, stats, initialAdd);
      if (stats.isDirectory()) _this._handleDir(item, stats, initialAdd);
    });
  });
};

FSWatcher.prototype.emit = function() {
  var args, event;
  event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  EventEmitter.prototype.emit.apply(this, [event].concat(__slice.call(args)));
  if (event === 'add' || event === 'addDir' || event === 'change' || event === 'unlink' || event === 'unlinkDir') {
    return EventEmitter.prototype.emit.apply(this, ['all', event].concat(__slice.call(args)));
  }
};

FSWatcher.prototype._addToFsEvents = function(files) {
  var _this = this;
  var handle = function(path) {
    return _this.emit('add', path);
  };
  files.forEach(function(file) {
    if (!_this.options.ignoreInitial) {
      fs.stat(file, function(error, stats) {
        if (error != null) return _this.emit('error', error);

        if (stats.isDirectory()) {
          recursiveReaddir(file, function(error, dirFiles) {
            if (error != null) return _this.emit('error', error);
            dirFiles.filter(function(path) {
              return !_this._isIgnored(path);
            }).forEach(handle);
          });
        } else {
          handle(file);
        }
      });
    }
    _this._watchWithFsEvents(file);
  });
  return this;
};

// Public: Adds directories / files for tracking.

// * files - array of strings (file paths).

// Examples

//   add ['app', 'vendor']

// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.add = function(files) {
  if (this._initialAdd == null) this._initialAdd = true;
  if (!Array.isArray(files)) files = [files];

  if (this.options.useFsEvents) return this._addToFsEvents(files);

  files.forEach(function(file) {
    return this._handle(file, this._initialAdd);
  }, this);
  this._initialAdd = false;
  return this;
};

// Public: Remove all listeners from watched files.
// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.close = function() {
  var useFsEvents = this.options.useFsEvents;
  var method = useFsEvents ? 'stop' : 'close';
  this.watchers.forEach(function(watcher) {
    watcher[method]();
  });

  if (this.options.usePolling) {
    var watched = this.watched;
    Object.keys(watched).forEach(function(directory) {
      return watched[directory].forEach(function(file) {
        return fs.unwatchFile(sysPath.join(directory, file));
      });
    });
  }
  this.watched = Object.create(null);

  this.removeAllListeners();
  return this;
};

exports.FSWatcher = FSWatcher;

exports.watch = function(files, options) {
  return new FSWatcher(options).add(files);
};
",TRUE,,4173
4095,InitialSO.csv4095.txt,InitialGit.csv4095.txt,3,"var checkPermission = function (file, mask, cb){
    fs.stat (file, function (error, stats){
        if (error){
            cb (error, false);
        }else{
            cb (null, !!(mask & parseInt ((stats.mode & parseInt (""777"", 8)).toString (8)[0])));
        }
    });
};
 checkPermission (<path>, 1, cb);
 checkPermission (<path>, 4, cb);
 checkPermission (<path>, 2, cb);
 ","var checkPermission = function (file, mask, cb){
    fs.stat (file, function (error, stats){
        if (error){
            cb (error, false);
        }else{
            cb (null, !!(mask & parseInt ((stats.mode & parseInt (""777"", 8)).toString (8)[0])));
        }
    });
};
 checkPermission (<path>, 1, cb);
 checkPermission (<path>, 4, cb);
 checkPermission (<path>, 2, cb);
 ",TRUE,"'use strict';
var EventEmitter = require('events').EventEmitter;
var fs = require('fs');
var os = require('os');
var sysPath = require('path');

var fsevents, recursiveReaddir;
try {
  fsevents = require('fsevents');
  recursiveReaddir = require('recursive-readdir');
} catch (error) {}

var isWindows = os.platform() === 'win32';
var canUseFsEvents = os.platform() === 'darwin' && !!fsevents;

// To disable FSEvents completely.
// var canUseFsEvents = false;

// Binary file handling code.
var _binExts = ['adp', 'au', 'mid', 'mp4a', 'mpga', 'oga', 's3m', 'sil', 'eol', 'dra', 'dts', 'dtshd', 'lvp', 'pya', 'ecelp4800', 'ecelp7470', 'ecelp9600', 'rip', 'weba', 'aac', 'aif', 'caf', 'flac', 'mka', 'm3u', 'wax', 'wma', 'wav', 'xm', 'flac', '3gp', '3g2', 'h261', 'h263', 'h264', 'jpgv', 'jpm', 'mj2', 'mp4', 'mpeg', 'ogv', 'qt', 'uvh', 'uvm', 'uvp', 'uvs', 'dvb', 'fvt', 'mxu', 'pyv', 'uvu', 'viv', 'webm', 'f4v', 'fli', 'flv', 'm4v', 'mkv', 'mng', 'asf', 'vob', 'wm', 'wmv', 'wmx', 'wvx', 'movie', 'smv', 'ts', 'bmp', 'cgm', 'g3', 'gif', 'ief', 'jpg', 'jpeg', 'ktx', 'png', 'btif', 'sgi', 'svg', 'tiff', 'psd', 'uvi', 'sub', 'djvu', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'mdi', 'wdp', 'npx', 'wbmp', 'xif', 'webp', '3ds', 'ras', 'cmx', 'fh', 'ico', 'pcx', 'pic', 'pnm', 'pbm', 'pgm', 'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'zip', 'rar', 'tar', 'bz2', 'eot', 'ttf', 'woff'];

var binExts = Object.create(null);
_binExts.forEach(function(ext) { binExts[ext] = true; });

var isBinary = function(extension) {
  if (extension === '') return false;
  return !!binExts[extension];
}

var isBinaryPath = function(path) {
  return isBinary(sysPath.extname(path).slice(1));
};

exports.isBinaryPath = isBinaryPath;

// Main code.
//
// Watches files & directories for changes.
//
// Emitted events: `add`, `change`, `unlink`, `error`.
//
// Examples
//
//   var watcher = new FSWatcher()
//     .add(directories)
//     .on('add', function(path) {console.log('File', path, 'was added');})
//     .on('change', function(path) {console.log('File', path, 'was changed');})
//     .on('unlink', function(path) {console.log('File', path, 'was removed');})
//
function FSWatcher(_opts) {
  if (_opts == null) _opts = {};
  var opts = {};
  for (var opt in _opts) opts[opt] = _opts[opt]
  this.close = this.close.bind(this);
  EventEmitter.call(this);
  this.watched = Object.create(null);
  this.watchers = [];
  this.closed = false;

  // Set up default options.
  if (opts.persistent == null) opts.persistent = false;
  if (opts.ignoreInitial == null) opts.ignoreInitial = false;
  if (opts.interval == null) opts.interval = 100;
  if (opts.binaryInterval == null) opts.binaryInterval = 300;

  // Use polling on Mac and Linux.
  // Disable polling on Windows.
  if (opts.usePolling == null) opts.usePolling = !isWindows;

  // Enable fsevents on OS X when polling is disabled.
  // Which is basically super fast watcher.
  if (opts.useFsEvents == null) opts.useFsEvents = !opts.usePolling;
  // If we can't use fs events, disable it in any case.
  if (!canUseFsEvents) opts.useFsEvents = false;

  if (opts.ignorePermissionErrors == null) opts.ignorePermissionErrors = false;

  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  this._isIgnored = (function(ignored) {
    switch (toString.call(ignored)) {
      case '[object RegExp]':
        return function(string) {
          return ignored.test(string);
        };
      case '[object Function]':
        return ignored;
      default:
        return function() {
          return false;
        };
    }
  })(opts.ignored);

  this.options = opts;

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

FSWatcher.prototype = Object.create(EventEmitter.prototype);

// Directory helpers
// -----------------

var directoryEndRegex = /[\\\/]$/;
FSWatcher.prototype._getWatchedDir = function(directory) {
  var dir = directory.replace(directoryEndRegex, '');
  if (this.watched[dir] == null) { this.watched[dir] = []; }
  return this.watched[dir];
};

FSWatcher.prototype._addToWatchedDir = function(directory, basename) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.push(basename);
};

FSWatcher.prototype._removeFromWatchedDir = function(directory, file) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.some(function(watchedFile, index) {
    if (watchedFile === file) {
      watchedFiles.splice(index, 1);
      return true;
    }
  });
};

// File helpers
// ------------

// Private: Check for read permissions
// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
//
// stats - fs.Stats object
//
// Returns Boolean
FSWatcher.prototype._hasReadPermissions = function(stats) {
  return Boolean(4 & parseInt((stats.mode & 0x1ff).toString(8)[0]));
};

// Private: Handles emitting unlink events for
// files and directories, and via recursion, for
// files and directories within directories that are unlinked
//
// directory - string, directory within which the following item is located
// item      - string, base path of item/directory
//
// Returns nothing.
FSWatcher.prototype._remove = function(directory, item) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  var fullPath = sysPath.join(directory, item);
  var isDirectory = this.watched[fullPath];

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  var nestedDirectoryChildren = this._getWatchedDir(fullPath).slice();

  // Remove directory / file from watched list.
  this._removeFromWatchedDir(directory, item);

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(function(nestedItem) {
    return this._remove(fullPath, nestedItem);
  }, this);

  if (this.options.usePolling) fs.unwatchFile(fullPath);

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  delete this.watched[fullPath];
  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
  this.emit(eventName, fullPath);
};

// FS Events helper.
var createFSEventsInstance = function(path, callback) {
  var watcher = new fsevents(path);
  watcher.on('fsevent', callback);
  watcher.start();
  return watcher;
};

FSWatcher.prototype._watchWithFsEvents = function(path) {
  var _this = this;
  var watcher = createFSEventsInstance(path, function(path, flags) {
    var emit, info;
    if (_this._isIgnored(path)) {
      return;
    }
    info = fsevents.getInfo(path, flags);
    emit = function(event) {
      var name;
      name = info.type === 'file' ? event : """" + event + ""Dir"";
      if (event === 'add' || event === 'addDir') {
        _this._addToWatchedDir(sysPath.dirname(path), sysPath.basename(path));
      } else if (event === 'unlink' || event === 'unlinkDir') {
        _this._remove(sysPath.dirname(path), sysPath.basename(path));
        return; // Don't emit event twice.
      }
      return _this.emit(name, path);
    };
    switch (info.event) {
      case 'created':
        return emit('add');
      case 'modified':
        return emit('change');
      case 'deleted':
        return emit('unlink');
      case 'moved':
        return fs.stat(path, function(error, stats) {
          return emit(error || !stats ? 'unlink' : 'add');
        });
    }
  });
  return this.watchers.push(watcher);
};

// Private: Watch file for changes with fs.watchFile or fs.watch.

// item     - string, path to file or directory.
// callback - function that will be executed on fs change.

// Returns nothing.
FSWatcher.prototype._watch = function(item, callback) {
  var basename, directory, options, parent, watcher;
  if (callback == null) callback = Function.prototype; // empty function
  directory = sysPath.dirname(item);
  basename = sysPath.basename(item);
  parent = this._getWatchedDir(directory);
  if (parent.indexOf(basename) !== -1) return;

  this._addToWatchedDir(directory, basename);
  options = {persistent: this.options.persistent};

  if (this.options.usePolling) {
    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ?
      this.options.binaryInterval : this.options.interval;
    fs.watchFile(item, options, function(curr, prev) {
      if (curr.mtime.getTime() > prev.mtime.getTime()) {
        callback(item, curr);
      }
    });
  } else {
    watcher = fs.watch(item, options, function(event, path) {
      callback(item);
    });
    this.watchers.push(watcher);
  }
};

// Workaround for the ""Windows rough edge"" regarding the deletion of directories
// (https://github.com/joyent/node/issues/4337)
FSWatcher.prototype._emitError = function(error) {
  var emit = (function() {
    this.emit('error', error);
  }).bind(this);

  if (isWindows && error.code === 'EPERM') {
    fs.exists(item, function(exists) {
      if (exists) emit();
    });
  } else {
    emit();
  }
};

// Private: Emit `change` event once and watch file to emit it in the future
// once the file is changed.

// file       - string, fs path.
// stats      - object, result of executing stat(1) on file.
// initialAdd - boolean, was the file added at the launch?

// Returns nothing.
FSWatcher.prototype._handleFile = function(file, stats, initialAdd) {
  var _this = this;
  if (initialAdd == null) initialAdd = false;
  this._watch(file, function(file, newStats) {
    return _this.emit('change', file, newStats);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('add', file, stats);
  }
};

// Private: Read directory to add / remove files from `@watched` list
// and re-read it on change.

// directory - string, fs path.

// Returns nothing.
FSWatcher.prototype._handleDir = function(directory, stats, initialAdd) {
  var _this = this;
  var read = function(directory, initialAdd) {
    return fs.readdir(directory, function(error, current) {
      if (error != null) return _this._emitError(error);
      if (!current) return;

      var previous = _this._getWatchedDir(directory);

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.filter(function(file) {
        return current.indexOf(file) === -1;
      }).forEach(function(file) {
        return _this._remove(directory, file);
      });

      // Files that present in current directory snapshot
      // but absent in previous are added to watch list and
      // emit `add` event.
      current.filter(function(file) {
        return previous.indexOf(file) === -1;
      }).forEach(function(file) {
        _this._handle(sysPath.join(directory, file), initialAdd);
      });
    });
  };
  read(directory, initialAdd);
  this._watch(directory, function(dir) {
    return read(dir, false);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('addDir', directory, stats);
  }
};

// Private: Handle added file or directory.
// Delegates call to _handleFile / _handleDir after checks.

// item - string, path to file or directory.

// Returns nothing.
FSWatcher.prototype._handle = function(item, initialAdd) {
  var _this = this;
  if (this._isIgnored(item)) return;
  if (_this.closed) return;

  return fs.realpath(item, function(error, path) {
    if (_this.closed) return;
    if (error && error.code === 'ENOENT') return;
    if (error != null) return _this._emitError(error);
    fs.stat(path, function(error, stats) {
      if (_this.closed) return;
      if (error && error.code === 'ENOENT') return;
      if (error != null) return _this._emitError(error);
      if (_this.options.ignorePermissionErrors && (!_this._hasReadPermissions(stats))) {
        return;
      }
      if (_this._isIgnored.length === 2 && _this._isIgnored(item, stats)) {
        return;
      }
      if (stats.isFile()) _this._handleFile(item, stats, initialAdd);
      if (stats.isDirectory()) _this._handleDir(item, stats, initialAdd);
    });
  });
};

FSWatcher.prototype.emit = function(event, arg1) {
  var data = arguments.length === 2 ? [arg1] : [].slice.call(arguments, 1);
  var args = [event].concat(data);
  EventEmitter.prototype.emit.apply(this, args);
  if (event === 'add' || event === 'addDir' || event === 'change' ||
      event === 'unlink' || event === 'unlinkDir') {
    EventEmitter.prototype.emit.apply(this, ['all'].concat(args));
  }
};

FSWatcher.prototype._addToFsEvents = function(files) {
  var _this = this;
  var handle = function(path) {
    return _this.emit('add', path);
  };
  files.forEach(function(file) {
    if (!_this.options.ignoreInitial) {
      fs.stat(file, function(error, stats) {
        if (error != null) return _this._emitError(error);

        if (stats.isDirectory()) {
          recursiveReaddir(file, function(error, dirFiles) {
            if (error != null) return _this._emitError(error);
            dirFiles
            .filter(function(path) {
              return !_this._isIgnored(path);
            })
            .forEach(handle);
          });
        } else {
          handle(file);
        }
      });
    }
    _this._watchWithFsEvents(file);
  });
  return this;
};

// Public: Adds directories / files for tracking.

// * files - array of strings (file paths).

// Examples

//   add ['app', 'vendor']

// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.add = function(files) {
  if (this._initialAdd == null) this._initialAdd = true;
  if (!Array.isArray(files)) files = [files];

  if (this.options.useFsEvents) return this._addToFsEvents(files);

  files.forEach(function(file) {
    return this._handle(file, this._initialAdd);
  }, this);
  this._initialAdd = false;
  return this;
};

// Public: Remove all listeners from watched files.
// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.close = function() {
  if(this.closed) {
    return this;
  }

  var useFsEvents = this.options.useFsEvents;
  var method = useFsEvents ? 'stop' : 'close';

  this.closed = true;
  this.watchers.forEach(function(watcher) {
    watcher[method]();
  });

  if (this.options.usePolling) {
    var watched = this.watched;
    Object.keys(watched).forEach(function(directory) {
      return watched[directory].forEach(function(file) {
        return fs.unwatchFile(sysPath.join(directory, file));
      });
    });
  }
  this.watched = Object.create(null);

  this.removeAllListeners();
  return this;
};

exports.FSWatcher = FSWatcher;

exports.watch = function(files, options) {
  return new FSWatcher(options).add(files);
};
","'use strict';
var EventEmitter = require('events').EventEmitter;
var fs = require('fs');
var os = require('os');
var sysPath = require('path');

var fsevents, recursiveReaddir;
try {
  fsevents = require('fsevents');
  recursiveReaddir = require('recursive-readdir');
} catch (error) {}

var isWindows = os.platform() === 'win32';
var canUseFsEvents = os.platform() === 'darwin' && !!fsevents;

// To disable FSEvents completely.
// var canUseFsEvents = false;

// Binary file handling code.
var _binExts = ['adp', 'au', 'mid', 'mp4a', 'mpga', 'oga', 's3m', 'sil', 'eol', 'dra', 'dts', 'dtshd', 'lvp', 'pya', 'ecelp4800', 'ecelp7470', 'ecelp9600', 'rip', 'weba', 'aac', 'aif', 'caf', 'flac', 'mka', 'm3u', 'wax', 'wma', 'wav', 'xm', 'flac', '3gp', '3g2', 'h261', 'h263', 'h264', 'jpgv', 'jpm', 'mj2', 'mp4', 'mpeg', 'ogv', 'qt', 'uvh', 'uvm', 'uvp', 'uvs', 'dvb', 'fvt', 'mxu', 'pyv', 'uvu', 'viv', 'webm', 'f4v', 'fli', 'flv', 'm4v', 'mkv', 'mng', 'asf', 'vob', 'wm', 'wmv', 'wmx', 'wvx', 'movie', 'smv', 'ts', 'bmp', 'cgm', 'g3', 'gif', 'ief', 'jpg', 'jpeg', 'ktx', 'png', 'btif', 'sgi', 'svg', 'tiff', 'psd', 'uvi', 'sub', 'djvu', 'dwg', 'dxf', 'fbs', 'fpx', 'fst', 'mmr', 'rlc', 'mdi', 'wdp', 'npx', 'wbmp', 'xif', 'webp', '3ds', 'ras', 'cmx', 'fh', 'ico', 'pcx', 'pic', 'pnm', 'pbm', 'pgm', 'ppm', 'rgb', 'tga', 'xbm', 'xpm', 'xwd', 'zip', 'rar', 'tar', 'bz2', 'eot', 'ttf', 'woff'];

var binExts = Object.create(null);
_binExts.forEach(function(ext) { binExts[ext] = true; });

var isBinary = function(extension) {
  if (extension === '') return false;
  return !!binExts[extension];
}

var isBinaryPath = function(path) {
  return isBinary(sysPath.extname(path).slice(1));
};

exports.isBinaryPath = isBinaryPath;

// Main code.
//
// Watches files & directories for changes.
//
// Emitted events: `add`, `change`, `unlink`, `error`.
//
// Examples
//
//   var watcher = new FSWatcher()
//     .add(directories)
//     .on('add', function(path) {console.log('File', path, 'was added');})
//     .on('change', function(path) {console.log('File', path, 'was changed');})
//     .on('unlink', function(path) {console.log('File', path, 'was removed');})
//
function FSWatcher(_opts) {
  if (_opts == null) _opts = {};
  var opts = {};
  for (var opt in _opts) opts[opt] = _opts[opt]
  this.close = this.close.bind(this);
  EventEmitter.call(this);
  this.watched = Object.create(null);
  this.watchers = [];
  this.closed = false;

  // Set up default options.
  if (opts.persistent == null) opts.persistent = false;
  if (opts.ignoreInitial == null) opts.ignoreInitial = false;
  if (opts.interval == null) opts.interval = 100;
  if (opts.binaryInterval == null) opts.binaryInterval = 300;

  // Use polling on Mac and Linux.
  // Disable polling on Windows.
  if (opts.usePolling == null) opts.usePolling = !isWindows;

  // Enable fsevents on OS X when polling is disabled.
  // Which is basically super fast watcher.
  if (opts.useFsEvents == null) opts.useFsEvents = !opts.usePolling;
  // If we can't use fs events, disable it in any case.
  if (!canUseFsEvents) opts.useFsEvents = false;

  if (opts.ignorePermissionErrors == null) opts.ignorePermissionErrors = false;

  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;

  this._isIgnored = (function(ignored) {
    switch (toString.call(ignored)) {
      case '[object RegExp]':
        return function(string) {
          return ignored.test(string);
        };
      case '[object Function]':
        return ignored;
      default:
        return function() {
          return false;
        };
    }
  })(opts.ignored);

  this.options = opts;

  // You’re frozen when your heart’s not open.
  Object.freeze(opts);
}

FSWatcher.prototype = Object.create(EventEmitter.prototype);

// Directory helpers
// -----------------

var directoryEndRegex = /[\\\/]$/;
FSWatcher.prototype._getWatchedDir = function(directory) {
  var dir = directory.replace(directoryEndRegex, '');
  if (this.watched[dir] == null) { this.watched[dir] = []; }
  return this.watched[dir];
};

FSWatcher.prototype._addToWatchedDir = function(directory, basename) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.push(basename);
};

FSWatcher.prototype._removeFromWatchedDir = function(directory, file) {
  var watchedFiles = this._getWatchedDir(directory);
  return watchedFiles.some(function(watchedFile, index) {
    if (watchedFile === file) {
      watchedFiles.splice(index, 1);
      return true;
    }
  });
};

// File helpers
// ------------

// Private: Check for read permissions
// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
//
// stats - fs.Stats object
//
// Returns Boolean
FSWatcher.prototype._hasReadPermissions = function(stats) {
  return Boolean(4 & parseInt((stats.mode & 0x1ff).toString(8)[0]));
};

// Private: Handles emitting unlink events for
// files and directories, and via recursion, for
// files and directories within directories that are unlinked
//
// directory - string, directory within which the following item is located
// item      - string, base path of item/directory
//
// Returns nothing.
FSWatcher.prototype._remove = function(directory, item) {
  // if what is being deleted is a directory, get that directory's paths
  // for recursive deleting and cleaning of watched object
  // if it is not a directory, nestedDirectoryChildren will be empty array
  var fullPath = sysPath.join(directory, item);
  var isDirectory = this.watched[fullPath];

  // This will create a new entry in the watched object in either case
  // so we got to do the directory check beforehand
  var nestedDirectoryChildren = this._getWatchedDir(fullPath).slice();

  // Remove directory / file from watched list.
  this._removeFromWatchedDir(directory, item);

  // Recursively remove children directories / files.
  nestedDirectoryChildren.forEach(function(nestedItem) {
    return this._remove(fullPath, nestedItem);
  }, this);

  if (this.options.usePolling) fs.unwatchFile(fullPath);

  // The Entry will either be a directory that just got removed
  // or a bogus entry to a file, in either case we have to remove it
  delete this.watched[fullPath];
  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
  this.emit(eventName, fullPath);
};

// FS Events helper.
var createFSEventsInstance = function(path, callback) {
  var watcher = new fsevents(path);
  watcher.on('fsevent', callback);
  watcher.start();
  return watcher;
};

FSWatcher.prototype._watchWithFsEvents = function(path) {
  var _this = this;
  var watcher = createFSEventsInstance(path, function(path, flags) {
    var emit, info;
    if (_this._isIgnored(path)) {
      return;
    }
    info = fsevents.getInfo(path, flags);
    emit = function(event) {
      var name;
      name = info.type === 'file' ? event : """" + event + ""Dir"";
      if (event === 'add' || event === 'addDir') {
        _this._addToWatchedDir(sysPath.dirname(path), sysPath.basename(path));
      } else if (event === 'unlink' || event === 'unlinkDir') {
        _this._remove(sysPath.dirname(path), sysPath.basename(path));
        return; // Don't emit event twice.
      }
      return _this.emit(name, path);
    };
    switch (info.event) {
      case 'created':
        return emit('add');
      case 'modified':
        return emit('change');
      case 'deleted':
        return emit('unlink');
      case 'moved':
        return fs.stat(path, function(error, stats) {
          return emit(error || !stats ? 'unlink' : 'add');
        });
    }
  });
  return this.watchers.push(watcher);
};

// Private: Watch file for changes with fs.watchFile or fs.watch.

// item     - string, path to file or directory.
// callback - function that will be executed on fs change.

// Returns nothing.
FSWatcher.prototype._watch = function(item, callback) {
  var basename, directory, options, parent, watcher;
  if (callback == null) callback = Function.prototype; // empty function
  directory = sysPath.dirname(item);
  basename = sysPath.basename(item);
  parent = this._getWatchedDir(directory);
  if (parent.indexOf(basename) !== -1) return;

  this._addToWatchedDir(directory, basename);
  options = {persistent: this.options.persistent};

  if (this.options.usePolling) {
    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ?
      this.options.binaryInterval : this.options.interval;
    fs.watchFile(item, options, function(curr, prev) {
      if (curr.mtime.getTime() > prev.mtime.getTime()) {
        callback(item, curr);
      }
    });
  } else {
    watcher = fs.watch(item, options, function(event, path) {
      callback(item);
    });
    this.watchers.push(watcher);
  }
};

// Workaround for the ""Windows rough edge"" regarding the deletion of directories
// (https://github.com/joyent/node/issues/4337)
FSWatcher.prototype._emitError = function(error) {
  var emit = (function() {
    this.emit('error', error);
  }).bind(this);

  if (isWindows && error.code === 'EPERM') {
    fs.exists(item, function(exists) {
      if (exists) emit();
    });
  } else {
    emit();
  }
};

// Private: Emit `change` event once and watch file to emit it in the future
// once the file is changed.

// file       - string, fs path.
// stats      - object, result of executing stat(1) on file.
// initialAdd - boolean, was the file added at the launch?

// Returns nothing.
FSWatcher.prototype._handleFile = function(file, stats, initialAdd) {
  var _this = this;
  if (initialAdd == null) initialAdd = false;
  this._watch(file, function(file, newStats) {
    return _this.emit('change', file, newStats);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('add', file, stats);
  }
};

// Private: Read directory to add / remove files from `@watched` list
// and re-read it on change.

// directory - string, fs path.

// Returns nothing.
FSWatcher.prototype._handleDir = function(directory, stats, initialAdd) {
  var _this = this;
  var read = function(directory, initialAdd) {
    return fs.readdir(directory, function(error, current) {
      if (error != null) return _this._emitError(error);
      if (!current) return;

      var previous = _this._getWatchedDir(directory);

      // Files that absent in current directory snapshot
      // but present in previous emit `remove` event
      // and are removed from @watched[directory].
      previous.filter(function(file) {
        return current.indexOf(file) === -1;
      }).forEach(function(file) {
        return _this._remove(directory, file);
      });

      // Files that present in current directory snapshot
      // but absent in previous are added to watch list and
      // emit `add` event.
      current.filter(function(file) {
        return previous.indexOf(file) === -1;
      }).forEach(function(file) {
        _this._handle(sysPath.join(directory, file), initialAdd);
      });
    });
  };
  read(directory, initialAdd);
  this._watch(directory, function(dir) {
    return read(dir, false);
  });
  if (!(initialAdd && this.options.ignoreInitial)) {
    return this.emit('addDir', directory, stats);
  }
};

// Private: Handle added file or directory.
// Delegates call to _handleFile / _handleDir after checks.

// item - string, path to file or directory.

// Returns nothing.
FSWatcher.prototype._handle = function(item, initialAdd) {
  var _this = this;
  if (this._isIgnored(item)) return;
  if (_this.closed) return;

  return fs.realpath(item, function(error, path) {
    if (_this.closed) return;
    if (error && error.code === 'ENOENT') return;
    if (error != null) return _this._emitError(error);
    fs.stat(path, function(error, stats) {
      if (_this.closed) return;
      if (error && error.code === 'ENOENT') return;
      if (error != null) return _this._emitError(error);
      if (_this.options.ignorePermissionErrors && (!_this._hasReadPermissions(stats))) {
        return;
      }
      if (_this._isIgnored.length === 2 && _this._isIgnored(item, stats)) {
        return;
      }
      if (stats.isFile()) _this._handleFile(item, stats, initialAdd);
      if (stats.isDirectory()) _this._handleDir(item, stats, initialAdd);
    });
  });
};

FSWatcher.prototype.emit = function(event, arg1) {
  var data = arguments.length === 2 ? [arg1] : [].slice.call(arguments, 1);
  var args = [event].concat(data);
  EventEmitter.prototype.emit.apply(this, args);
  if (event === 'add' || event === 'addDir' || event === 'change' ||
      event === 'unlink' || event === 'unlinkDir') {
    EventEmitter.prototype.emit.apply(this, ['all'].concat(args));
  }
};

FSWatcher.prototype._addToFsEvents = function(files) {
  var _this = this;
  var handle = function(path) {
    return _this.emit('add', path);
  };
  files.forEach(function(file) {
    if (!_this.options.ignoreInitial) {
      fs.stat(file, function(error, stats) {
        if (error != null) return _this._emitError(error);

        if (stats.isDirectory()) {
          recursiveReaddir(file, function(error, dirFiles) {
            if (error != null) return _this._emitError(error);
            dirFiles
            .filter(function(path) {
              return !_this._isIgnored(path);
            })
            .forEach(handle);
          });
        } else {
          handle(file);
        }
      });
    }
    _this._watchWithFsEvents(file);
  });
  return this;
};

// Public: Adds directories / files for tracking.

// * files - array of strings (file paths).

// Examples

//   add ['app', 'vendor']

// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.add = function(files) {
  if (this._initialAdd == null) this._initialAdd = true;
  if (!Array.isArray(files)) files = [files];

  if (this.options.useFsEvents) return this._addToFsEvents(files);

  files.forEach(function(file) {
    return this._handle(file, this._initialAdd);
  }, this);
  this._initialAdd = false;
  return this;
};

// Public: Remove all listeners from watched files.
// Returns an instance of FSWatcher for chaning.
FSWatcher.prototype.close = function() {
  if(this.closed) {
    return this;
  }

  var useFsEvents = this.options.useFsEvents;
  var method = useFsEvents ? 'stop' : 'close';

  this.closed = true;
  this.watchers.forEach(function(watcher) {
    watcher[method]();
  });

  if (this.options.usePolling) {
    var watched = this.watched;
    Object.keys(watched).forEach(function(directory) {
      return watched[directory].forEach(function(file) {
        return fs.unwatchFile(sysPath.join(directory, file));
      });
    });
  }
  this.watched = Object.create(null);

  this.removeAllListeners();
  return this;
};

exports.FSWatcher = FSWatcher;

exports.watch = function(files, options) {
  return new FSWatcher(options).add(files);
};
",TRUE,,4174
4112,InitialSO.csv4112.txt,InitialGit.csv4112.txt,4," var entityMap = {
    ""&"": ""&amp;"",
    ""<"": ""&lt;"",
    "">"": ""&gt;"",
    '""': '&quot;',
    ""'"": '&#39;',
    ""/"": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>""'\/]/g, function (s) {
      return entityMap[s];
    });
  }
 ","var entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '""': '&quot;',
  ""'"": '&#39;',
  '/': '&#x2F;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

function escapeHtml (string) {
  return String(string).replace(/[&<>""'`=\/]/g, function (s) {
    return entityMap[s];
  });
}
 ",FALSE,"'use strict';

var htmlEntityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '""': '&quot;',
  '\'': '&#39;',
  '/': '&#x2F;'
};

function escapeHTML(str) {
  if (typeof str !== 'string') throw new TypeError('str must be a string!');

  // http://stackoverflow.com/a/12034334
  return str.replace(/[&<>""'\/]/g, function(a) {
    return htmlEntityMap[a];
  });
}

module.exports = escapeHTML;
","'use strict';

var htmlEntityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '""': '&quot;',
  '\'': '&#39;',
  '/': '&#x2F;'
};

function escapeHTML(str) {
  if (typeof str !== 'string') throw new TypeError('str must be a string!');

  // http://stackoverflow.com/a/12034334
  return str.replace(/[&<>""'\/]/g, function(a) {
    return htmlEntityMap[a];
  });
}

module.exports = escapeHTML;
",TRUE,,4181
4117,InitialSO.csv4117.txt,InitialGit.csv4117.txt,10,"public String getDeviceName() {
    String manufacturer = Build.MANUFACTURER;
    String model = Build.MODEL;
    if (model.startsWith(manufacturer)) {
        return capitalize(model);
    } else {
        return capitalize(manufacturer) + "" "" + model;
    }
}


private String capitalize(String s) {
    if (s == null || s.length() == 0) {
        return """";
    }
    char first = s.charAt(0);
    if (Character.isUpperCase(first)) {
        return s;
    } else {
        return Character.toUpperCase(first) + s.substring(1);
    }
} 
 ","public String getDeviceName() {
    String manufacturer = Build.MANUFACTURER;
    String model = Build.MODEL;
    if (model.toLowerCase().startsWith(manufacturer.toLowerCase())) {
        return capitalize(model);
    } else {
        return capitalize(manufacturer) + "" "" + model;
    }
}


private String capitalize(String s) {
    if (s == null || s.length() == 0) {
        return """";
    }
    char first = s.charAt(0);
    if (Character.isUpperCase(first)) {
        return s;
    } else {
        return Character.toUpperCase(first) + s.substring(1);
    }
} 
 ",FALSE,"/*
 * Copyright 2015 Eduard Ereza Martínez
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cat.ereza.customactivityoncrash;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;

import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringWriter;
import java.lang.ref.WeakReference;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import cat.ereza.customactivityoncrash.activity.DefaultErrorActivity;

@SuppressLint(""NewApi"")
public final class CustomActivityOnCrash {
    //Extras passed to the error activity
    private static final String EXTRA_STACK_TRACE = ""cat.ereza.customactivityoncrash.EXTRA_STACK_TRACE"";
    private static final String EXTRA_RESTART_ACTIVITY_CLASS = ""cat.ereza.customactivityoncrash.EXTRA_RESTART_ACTIVITY_CLASS"";
    private static final String EXTRA_SHOW_ERROR_DETAILS = ""cat.ereza.customactivityoncrash.EXTRA_SHOW_ERROR_DETAILS"";

    //General constants
    private final static String TAG = ""CustomActivityOnCrash"";
    private static final String CAOC_HANDLER_PACKAGE_NAME = ""cat.ereza.customactivityoncrash"";
    private static final String DEFAULT_HANDLER_PACKAGE_NAME = ""com.android.internal.os"";
    private static final int MAX_STACK_TRACE_SIZE = 131071; //128 KB - 1

    //Internal variables
    private static WeakReference<Activity> lastActivityCreated = new WeakReference<>(null);
    private static Application application;
    private static boolean isInBackground = false;

    //Settable properties and their defaults
    private static boolean launchActivityEvenIfInBackground = true;
    private static Class<? extends Activity> errorActivityClass = DefaultErrorActivity.class;
    private static Class<? extends Activity> restartActivityClass = null;
    private static boolean showErrorDetails = true;

    /**
     * Installs CustomActivityOnCrash on the application using the default error activity.
     *
     * @param context Context to use for obtaining the ApplicationContext. Must not be null.
     */
    public static void install(Context context) {
        try {
            if (context == null) {
                Log.e(TAG, ""Install failed: context is null!"");
            } else {
                if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                    Log.w(TAG, ""CustomActivityOnCrash will be installed, but may not be reliable in API lower than 14"");
                }

                //INSTALL!
                Thread.UncaughtExceptionHandler oldHandler = Thread.getDefaultUncaughtExceptionHandler();

                if (oldHandler != null && oldHandler.getClass().getName().startsWith(CAOC_HANDLER_PACKAGE_NAME)) {
                    Log.e(TAG, ""You have already installed CustomActivityOnCrash, doing nothing!"");
                } else {
                    if (oldHandler != null && !oldHandler.getClass().getName().startsWith(DEFAULT_HANDLER_PACKAGE_NAME)) {
                        Log.e(TAG, ""IMPORTANT WARNING! You already have an UncaughtExceptionHandler, are you sure this is correct? If you use ACRA, Crashlytics or similar libraries, you must initialize them AFTER CustomActivityOnCrash! Installing anyway, but your original handler will not be called."");
                    }

                    application = (Application) context.getApplicationContext();

                    //We define a default exception handler that does what we want so it can be called from Crashlytics/ACRA
                    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
                        @Override
                        public void uncaughtException(Thread thread, final Throwable throwable) {
                            Log.e(TAG, ""App has crashed, executing CustomActivityOnCrash's UncaughtExceptionHandler"", throwable);

                            if (isStackTraceLikelyConflictive(throwable, errorActivityClass)) {
                                Log.e(TAG, ""Your application class or your error activity have crashed, the custom activity will not be launched!"");
                            } else {
                                if (launchActivityEvenIfInBackground || !isInBackground) {
                                    final Intent intent = new Intent(application, errorActivityClass);
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    throwable.printStackTrace(pw);
                                    String stackTraceString = sw.toString();

                                    //Reduce data to 128KB so we don't get a TransactionTooLargeException when sending the intent.
                                    //The limit is 1MB on Android but some devices seem to have it lower.
                                    //See: http://developer.android.com/reference/android/os/TransactionTooLargeException.html
                                    //And: http://stackoverflow.com/questions/11451393/what-to-do-on-transactiontoolargeexception#comment46697371_12809171
                                    if (stackTraceString.length() > MAX_STACK_TRACE_SIZE) {
                                        String disclaimer = "" [stack trace too large]"";
                                        stackTraceString = stackTraceString.substring(0, MAX_STACK_TRACE_SIZE - disclaimer.length()) + disclaimer;
                                    }

                                    intent.putExtra(EXTRA_STACK_TRACE, stackTraceString);
                                    intent.putExtra(EXTRA_RESTART_ACTIVITY_CLASS, restartActivityClass);
                                    intent.putExtra(EXTRA_SHOW_ERROR_DETAILS, showErrorDetails);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                                    application.startActivity(intent);
                                }
                            }
                            final Activity lastActivity = lastActivityCreated.get();
                            if (lastActivity != null) {
                                //We finish the activity, this solves a bug which causes infinite recursion.
                                //This is unsolvable in API<14, so beware!
                                //See: https://github.com/ACRA/acra/issues/42
                                lastActivity.finish();
                                lastActivityCreated.clear();
                            }
                            android.os.Process.killProcess(android.os.Process.myPid());
                            System.exit(10);
                        }
                    });
                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                        application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
                            int currentlyStartedActivities = 0;

                            @Override
                            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                                if (activity.getClass() != errorActivityClass) {
                                    // Copied from ACRA:
                                    // Ignore activityClass because we want the last
                                    // application Activity that was started so that we can
                                    // explicitly kill it off.
                                    lastActivityCreated = new WeakReference<>(activity);
                                }
                            }

                            @Override
                            public void onActivityStarted(Activity activity) {
                                currentlyStartedActivities++;
                                isInBackground = (currentlyStartedActivities == 0);
                                //Do nothing
                            }

                            @Override
                            public void onActivityResumed(Activity activity) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityPaused(Activity activity) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityStopped(Activity activity) {
                                //Do nothing
                                currentlyStartedActivities--;
                                isInBackground = (currentlyStartedActivities == 0);
                            }

                            @Override
                            public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityDestroyed(Activity activity) {
                                //Do nothing
                            }
                        });
                    }

                    Log.i(TAG, ""CustomActivityOnCrash has been installed."");
                }
            }
        } catch (Throwable t) {
            Log.e(TAG, ""An unknown error occurred while installing CustomActivityOnCrash, it may not have been properly initialized. Please report this as a bug if needed."", t);
        }
    }

    /**
     * Given an Intent, returns if the error details button should be displayed.
     *
     * @param intent The Intent. Must not be null.
     * @return true if the button must be shown, false otherwise.
     */
    public static boolean isShowErrorDetailsFromIntent(Intent intent) {
        return intent.getBooleanExtra(CustomActivityOnCrash.EXTRA_SHOW_ERROR_DETAILS, true);
    }

    /**
     * Given an Intent, returns the stack trace extra from it.
     *
     * @param intent The Intent. Must not be null.
     * @return The stacktrace, or null if not provided.
     */
    public static String getStackTraceFromIntent(Intent intent) {
        return intent.getStringExtra(CustomActivityOnCrash.EXTRA_STACK_TRACE);
    }

    /**
     * Given an Intent, returns several error details including the stack trace extra from the intent.
     *
     * @param context A valid context. Must not be null.
     * @param intent  The Intent. Must not be null.
     * @return The full error details.
     */
    public static String getAllErrorDetailsFromIntent(Context context, Intent intent) {
        //I don't think that this needs localization because it's a development string...

        Date crashDate = new Date();
        DateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.US);

        //Get build date
        String buildDateAsString = getBuildDateAsString(context, dateFormat);

        //Get app version
        String versionName = getVersionName(context);

        String errorDetails = """";

        errorDetails += ""Build version: "" + versionName + "" \n"";
        errorDetails += ""Build date: "" + buildDateAsString + "" \n"";
        errorDetails += ""Crash date: "" + dateFormat.format(crashDate) + "" \n"";
        errorDetails += ""Device: "" + getDeviceModelName() + "" \n\n"";
        errorDetails += ""Stack trace:  \n"";
        errorDetails += getStackTraceFromIntent(intent);
        return errorDetails;
    }

    /**
     * Given an Intent, returns the restart activity class extra from it.
     *
     * @param intent The Intent. Must not be null.
     * @return The restart activity class, or null if not provided.
     */
    @SuppressWarnings(""unchecked"")
    public static Class<? extends Activity> getRestartActivityClassFromIntent(Intent intent) {
        Serializable serializedClass = intent.getSerializableExtra(CustomActivityOnCrash.EXTRA_RESTART_ACTIVITY_CLASS);

        if (serializedClass != null && serializedClass instanceof Class) {
            return (Class<? extends Activity>) serializedClass;
        } else {
            return null;
        }
    }


    /// SETTERS AND GETTERS FOR THE CUSTOMIZABLE PROPERTIES

    /**
     * Returns the error activity class to launch when a crash occurs.
     *
     * @return The class, or DefaultErrorActivity if not set.
     */
    public static Class<? extends Activity> getErrorActivityClass() {
        return errorActivityClass;
    }

    /**
     * Sets the error activity class to launch when a crash occurs.
     * If null,the default error activity will be used.
     */
    public static void setErrorActivityClass(Class<? extends Activity> errorActivityClass) {
        if (errorActivityClass != null) {
            CustomActivityOnCrash.errorActivityClass = errorActivityClass;
        } else {
            CustomActivityOnCrash.errorActivityClass = DefaultErrorActivity.class;
        }
    }

    /**
     * Returns the main activity class that the error activity must launch when a crash occurs.
     *
     * @return The class, or null if not set.
     */
    public static Class<? extends Activity> getRestartActivityClass() {
        return restartActivityClass;
    }

    /**
     * Sets the main activity class that the error activity must launch when a crash occurs.
     * If not set or set to null, the default error activity will close instead.
     */
    public static void setRestartActivityClass(Class<? extends Activity> restartActivityClass) {
        CustomActivityOnCrash.restartActivityClass = restartActivityClass;
    }

    /**
     * Returns if the error activity must be launched even if the app is on background.
     *
     * @return true if it will be launched, false otherwise.
     */
    public static boolean isLaunchActivityEvenIfInBackground() {
        return launchActivityEvenIfInBackground;
    }

    /**
     * Defines if the error activity must be launched even if the app is on background.
     * Set it to true if you want to launch the error activity even if the app is in background,
     * false if you want it not to launch and crash silently.
     * This has no effect in API<14 and the error activity is always launched.
     * The default is true (the app will be brought to front when a crash occurs).
     */
    public static void setLaunchActivityEvenIfInBackground(boolean launchActivityEvenIfInBackground) {
        CustomActivityOnCrash.launchActivityEvenIfInBackground = launchActivityEvenIfInBackground;
    }

    /**
     * Returns if the error activity will show the error details button.
     *
     * @return true if it will be shown, false otherwise.
     */
    public static boolean isShowErrorDetails() {
        return showErrorDetails;
    }

    /**
     * Defines if the error activity must shown the error details button.
     * Set it to true if you want to show the full stack trace and device info,
     * false if you want it to be hidden.
     * The default is true.
     */
    public static void setShowErrorDetails(boolean showErrorDetails) {
        CustomActivityOnCrash.showErrorDetails = showErrorDetails;
    }


    /// INTERNAL METHODS NOT TO BE USED BY THIRD PARTIES

    /**
     * INTERNAL method that checks if the stack trace that just crashed is conflictive. This is true in the following scenarios:
     * - The application has crashed while initializing (handleBindApplication is in the stack)
     * - The error activity has crashed (activityClass is in the stack)
     *
     * @param throwable     The throwable from which the stack trace will be checked
     * @param activityClass The activity class to launch when the app crashes
     * @return true if this stack trace is conflictive and the activity must not be launched, false otherwise
     */
    private static boolean isStackTraceLikelyConflictive(Throwable throwable, Class<? extends Activity> activityClass) {
        do {
            StackTraceElement[] stackTrace = throwable.getStackTrace();
            for (StackTraceElement element : stackTrace) {
                if ((element.getClassName().equals(""android.app.ActivityThread"") && element.getMethodName().equals(""handleBindApplication"")) || element.getClassName().equals(activityClass.getName())) {
                    return true;
                }
            }
        } while ((throwable = throwable.getCause()) != null);
        return false;
    }

    /**
     * INTERNAL method that returns the build date of the current APK as a string, or null if unable to determine it.
     *
     * @param context    A valid context. Must not be null.
     * @param dateFormat DateFormat to use to convert from Date to String
     * @return The formatted date, or ""Unknown"" if unable to determine it.
     */
    private static String getBuildDateAsString(Context context, DateFormat dateFormat) {
        String buildDate;
        try {
            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);
            ZipFile zf = new ZipFile(ai.sourceDir);
            ZipEntry ze = zf.getEntry(""classes.dex"");
            long time = ze.getTime();
            buildDate = dateFormat.format(new Date(time));
            zf.close();
        } catch (Exception e) {
            buildDate = ""Unknown"";
        }
        return buildDate;
    }

    /**
     * INTERNAL method that returns the version name of the current app, or null if unable to determine it.
     *
     * @param context A valid context. Must not be null.
     * @return The version name, or ""Unknown if unable to determine it.
     */
    private static String getVersionName(Context context) {
        try {
            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
            return packageInfo.versionName;
        } catch (Exception e) {
            return ""Unknown"";
        }
    }

    /**
     * INTERNAL method that returns the device model name with correct capitalization.
     * Taken from: http://stackoverflow.com/a/12707479/1254846
     *
     * @return The device model name (i.e., ""LGE Nexus 5"")
     */
    private static String getDeviceModelName() {
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        if (model.startsWith(manufacturer)) {
            return capitalize(model);
        } else {
            return capitalize(manufacturer) + "" "" + model;
        }
    }

    /**
     * INTERNAL method that capitalizes the first character of a string
     *
     * @param s The string to capitalize
     * @return The capitalized string
     */
    private static String capitalize(String s) {
        if (s == null || s.length() == 0) {
            return """";
        }
        char first = s.charAt(0);
        if (Character.isUpperCase(first)) {
            return s;
        } else {
            return Character.toUpperCase(first) + s.substring(1);
        }
    }


    /// DEPRECATED METHODS - DO NOT USE! - TO BE REMOVED IN LATER VERSIONS!

    /**
     * Initializes CustomActivityOnCrash on the application.
     *
     * @param context            Context to use for obtaining the ApplicationContext. Must not be null.
     * @param errorActivityClass Activity to launch when the app crashes. Must not be null.
     * @deprecated Will be removed in the future. Use setErrorActivityClass(class) and install(context).
     */
    @Deprecated
    public static void init(Context context, final Class<? extends Activity> errorActivityClass) {
        setErrorActivityClass(errorActivityClass);
        setLaunchActivityEvenIfInBackground(true);
        install(context);
    }

    /**
     * Initializes CustomActivityOnCrash on the application.
     *
     * @param context                          Context to use for obtaining the ApplicationContext. Must not be null.
     * @param errorActivityClass               Activity to launch when the app crashes. Must not be null.
     * @param launchActivityEvenIfInBackground true if you want to launch the error activity even if the app is in background, false otherwise. This has no effect in API<14 and the activity is always launched.
     * @deprecated Will be removed in the future. Use setErrorActivityClass(class), setLaunchActivityEvenIfInBackground(boolean) and install(context)
     */
    @Deprecated
    public static void init(Context context, final Class<? extends Activity> errorActivityClass, boolean launchActivityEvenIfInBackground) {
        setErrorActivityClass(errorActivityClass);
        setLaunchActivityEvenIfInBackground(launchActivityEvenIfInBackground);
        install(context);
    }
}
","/*
 * Copyright 2015 Eduard Ereza Martínez
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cat.ereza.customactivityoncrash;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;

import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringWriter;
import java.lang.ref.WeakReference;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import cat.ereza.customactivityoncrash.activity.DefaultErrorActivity;

@SuppressLint(""NewApi"")
public final class CustomActivityOnCrash {

    //Extras passed to the error activity
    private static final String EXTRA_RESTART_ACTIVITY_CLASS = ""cat.ereza.customactivityoncrash.EXTRA_RESTART_ACTIVITY_CLASS"";
    private static final String EXTRA_SHOW_ERROR_DETAILS = ""cat.ereza.customactivityoncrash.EXTRA_SHOW_ERROR_DETAILS"";
    private static final String EXTRA_STACK_TRACE = ""cat.ereza.customactivityoncrash.EXTRA_STACK_TRACE"";

    //General constants
    private final static String TAG = ""CustomActivityOnCrash"";
    private static final String INTENT_ACTION_ERROR_ACTIVITY = ""cat.ereza.customactivityoncrash.ERROR"";
    private static final String INTENT_ACTION_RESTART_ACTIVITY = ""cat.ereza.customactivityoncrash.RESTART"";
    private static final String CAOC_HANDLER_PACKAGE_NAME = ""cat.ereza.customactivityoncrash"";
    private static final String DEFAULT_HANDLER_PACKAGE_NAME = ""com.android.internal.os"";
    private static final int MAX_STACK_TRACE_SIZE = 131071; //128 KB - 1

    //Internal variables
    private static Application application;
    private static WeakReference<Activity> lastActivityCreated = new WeakReference<>(null);
    private static boolean isInBackground = false;

    //Settable properties and their defaults
    private static boolean launchErrorActivityWhenInBackground = true;
    private static boolean showErrorDetails = true;
    private static boolean enableAppRestart = true;
    private static Class<? extends Activity> errorActivityClass = null;
    private static Class<? extends Activity> restartActivityClass = null;

    /**
     * Installs CustomActivityOnCrash on the application using the default error activity.
     *
     * @param context Context to use for obtaining the ApplicationContext. Must not be null.
     */
    public static void install(Context context) {
        try {
            if (context == null) {
                Log.e(TAG, ""Install failed: context is null!"");
            } else {
                if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                    Log.w(TAG, ""CustomActivityOnCrash will be installed, but may not be reliable in API lower than 14"");
                }

                //INSTALL!
                Thread.UncaughtExceptionHandler oldHandler = Thread.getDefaultUncaughtExceptionHandler();

                if (oldHandler != null && oldHandler.getClass().getName().startsWith(CAOC_HANDLER_PACKAGE_NAME)) {
                    Log.e(TAG, ""You have already installed CustomActivityOnCrash, doing nothing!"");
                } else {
                    if (oldHandler != null && !oldHandler.getClass().getName().startsWith(DEFAULT_HANDLER_PACKAGE_NAME)) {
                        Log.e(TAG, ""IMPORTANT WARNING! You already have an UncaughtExceptionHandler, are you sure this is correct? If you use ACRA, Crashlytics or similar libraries, you must initialize them AFTER CustomActivityOnCrash! Installing anyway, but your original handler will not be called."");
                    }

                    application = (Application) context.getApplicationContext();

                    //We define a default exception handler that does what we want so it can be called from Crashlytics/ACRA
                    Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
                        @Override
                        public void uncaughtException(Thread thread, final Throwable throwable) {
                            Log.e(TAG, ""App has crashed, executing CustomActivityOnCrash's UncaughtExceptionHandler"", throwable);

                            if (errorActivityClass == null) {
                                errorActivityClass = guessErrorActivityClass(application);
                            }

                            if (isStackTraceLikelyConflictive(throwable, errorActivityClass)) {
                                Log.e(TAG, ""Your application class or your error activity have crashed, the custom activity will not be launched!"");
                            } else {
                                if (launchErrorActivityWhenInBackground || !isInBackground) {
                                    final Intent intent = new Intent(application, errorActivityClass);
                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    throwable.printStackTrace(pw);
                                    String stackTraceString = sw.toString();

                                    //Reduce data to 128KB so we don't get a TransactionTooLargeException when sending the intent.
                                    //The limit is 1MB on Android but some devices seem to have it lower.
                                    //See: http://developer.android.com/reference/android/os/TransactionTooLargeException.html
                                    //And: http://stackoverflow.com/questions/11451393/what-to-do-on-transactiontoolargeexception#comment46697371_12809171
                                    if (stackTraceString.length() > MAX_STACK_TRACE_SIZE) {
                                        String disclaimer = "" [stack trace too large]"";
                                        stackTraceString = stackTraceString.substring(0, MAX_STACK_TRACE_SIZE - disclaimer.length()) + disclaimer;
                                    }

                                    if (enableAppRestart && restartActivityClass == null) {
                                        //We can set the restartActivityClass because the app will terminate right now,
                                        //and when relaunched, will be null again by default.
                                        restartActivityClass = guessRestartActivityClass(application);
                                    } else if (!enableAppRestart) {
                                        //In case someone sets the activity and then decides to not restart
                                        restartActivityClass = null;
                                    }

                                    intent.putExtra(EXTRA_STACK_TRACE, stackTraceString);
                                    intent.putExtra(EXTRA_RESTART_ACTIVITY_CLASS, restartActivityClass);
                                    intent.putExtra(EXTRA_SHOW_ERROR_DETAILS, showErrorDetails);
                                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                                    application.startActivity(intent);
                                }
                            }
                            final Activity lastActivity = lastActivityCreated.get();
                            if (lastActivity != null) {
                                //We finish the activity, this solves a bug which causes infinite recursion.
                                //This is unsolvable in API<14, so beware!
                                //See: https://github.com/ACRA/acra/issues/42
                                lastActivity.finish();
                                lastActivityCreated.clear();
                            }
                            killCurrentProcess();
                        }
                    });
                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                        application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
                            int currentlyStartedActivities = 0;

                            @Override
                            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                                if (activity.getClass() != errorActivityClass) {
                                    // Copied from ACRA:
                                    // Ignore activityClass because we want the last
                                    // application Activity that was started so that we can
                                    // explicitly kill it off.
                                    lastActivityCreated = new WeakReference<>(activity);
                                }
                            }

                            @Override
                            public void onActivityStarted(Activity activity) {
                                currentlyStartedActivities++;
                                isInBackground = (currentlyStartedActivities == 0);
                                //Do nothing
                            }

                            @Override
                            public void onActivityResumed(Activity activity) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityPaused(Activity activity) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityStopped(Activity activity) {
                                //Do nothing
                                currentlyStartedActivities--;
                                isInBackground = (currentlyStartedActivities == 0);
                            }

                            @Override
                            public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
                                //Do nothing
                            }

                            @Override
                            public void onActivityDestroyed(Activity activity) {
                                //Do nothing
                            }
                        });
                    }

                    Log.i(TAG, ""CustomActivityOnCrash has been installed."");
                }
            }
        } catch (Throwable t) {
            Log.e(TAG, ""An unknown error occurred while installing CustomActivityOnCrash, it may not have been properly initialized. Please report this as a bug if needed."", t);
        }
    }

    /**
     * Given an Intent, returns if the error details button should be displayed.
     *
     * @param intent The Intent. Must not be null.
     * @return true if the button must be shown, false otherwise.
     */
    public static boolean isShowErrorDetailsFromIntent(Intent intent) {
        return intent.getBooleanExtra(CustomActivityOnCrash.EXTRA_SHOW_ERROR_DETAILS, true);
    }

    /**
     * Given an Intent, returns the stack trace extra from it.
     *
     * @param intent The Intent. Must not be null.
     * @return The stacktrace, or null if not provided.
     */
    public static String getStackTraceFromIntent(Intent intent) {
        return intent.getStringExtra(CustomActivityOnCrash.EXTRA_STACK_TRACE);
    }

    /**
     * Given an Intent, returns several error details including the stack trace extra from the intent.
     *
     * @param context A valid context. Must not be null.
     * @param intent  The Intent. Must not be null.
     * @return The full error details.
     */
    public static String getAllErrorDetailsFromIntent(Context context, Intent intent) {
        //I don't think that this needs localization because it's a development string...

        Date currentDate = new Date();
        DateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"", Locale.US);

        //Get build date
        String buildDateAsString = getBuildDateAsString(context, dateFormat);

        //Get app version
        String versionName = getVersionName(context);

        String errorDetails = """";

        errorDetails += ""Build version: "" + versionName + "" \n"";
        errorDetails += ""Build date: "" + buildDateAsString + "" \n"";
        errorDetails += ""Current date: "" + dateFormat.format(currentDate) + "" \n"";
        errorDetails += ""Device: "" + getDeviceModelName() + "" \n\n"";
        errorDetails += ""Stack trace:  \n"";
        errorDetails += getStackTraceFromIntent(intent);
        return errorDetails;
    }

    /**
     * Given an Intent, returns the restart activity class extra from it.
     *
     * @param intent The Intent. Must not be null.
     * @return The restart activity class, or null if not provided.
     */
    @SuppressWarnings(""unchecked"")
    public static Class<? extends Activity> getRestartActivityClassFromIntent(Intent intent) {
        Serializable serializedClass = intent.getSerializableExtra(CustomActivityOnCrash.EXTRA_RESTART_ACTIVITY_CLASS);

        if (serializedClass != null && serializedClass instanceof Class) {
            return (Class<? extends Activity>) serializedClass;
        } else {
            return null;
        }
    }

    /**
     * Given an Intent, restarts the app and launches a startActivity to that intent.
     * The flags NEW_TASK and CLEAR_TASK are set if the Intent does not have them, to ensure
     * the app stack is fully cleared.
     * Must only be used from your error activity.
     *
     * @param activity The current error activity. Must not be null.
     * @param intent   The Intent. Must not be null.
     */
    public static void restartApplicationWithIntent(Activity activity, Intent intent) {
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        activity.finish();
        activity.startActivity(intent);
        killCurrentProcess();
    }

    /**
     * Closes the app. Must only be used from your error activity.
     *
     * @param activity The current error activity. Must not be null.
     */
    public static void closeApplication(Activity activity) {
        activity.finish();
        killCurrentProcess();
    }


    /// SETTERS AND GETTERS FOR THE CUSTOMIZABLE PROPERTIES

    /**
     * Returns if the error activity must be launched when the app is on background.
     *
     * @return true if it will be launched, false otherwise.
     */
    public static boolean isLaunchErrorActivityWhenInBackground() {
        return launchErrorActivityWhenInBackground;
    }

    /**
     * Defines if the error activity must be launched when the app is on background.
     * Set it to true if you want to launch the error activity when the app is in background,
     * false if you want it not to launch and crash silently.
     * This has no effect in API<14 and the error activity is always launched.
     * The default is true (the app will be brought to front when a crash occurs).
     */
    public static void setLaunchErrorActivityWhenInBackground(boolean launchErrorActivityWhenInBackground) {
        CustomActivityOnCrash.launchErrorActivityWhenInBackground = launchErrorActivityWhenInBackground;
    }

    /**
     * Returns if the error activity will show the error details button.
     *
     * @return true if it will be shown, false otherwise.
     */
    public static boolean isShowErrorDetails() {
        return showErrorDetails;
    }

    /**
     * Defines if the error activity must shown the error details button.
     * Set it to true if you want to show the full stack trace and device info,
     * false if you want it to be hidden.
     * The default is true.
     */
    public static void setShowErrorDetails(boolean showErrorDetails) {
        CustomActivityOnCrash.showErrorDetails = showErrorDetails;
    }

    /**
     * Returns if the error activity should show a restart button.
     * Note that even if restart is enabled, a valid restart activity could not be found.
     * In that case, a close button will still be used.
     *
     * @return true if a restart button should be shown, false if a close button must be used.
     */
    public static boolean isEnableAppRestart() {
        return enableAppRestart;
    }

    /**
     * Defines if the error activity should show a restart button.
     * Set it to true if you want to show a restart button,
     * false if you want to show a close button.
     * Note that even if restart is enabled, a valid restart activity could not be found.
     * In that case, a close button will still be used.
     * The default is true.
     */
    public static void setEnableAppRestart(boolean enableAppRestart) {
        CustomActivityOnCrash.enableAppRestart = enableAppRestart;
    }

    /**
     * Returns the error activity class to launch when a crash occurs.
     *
     * @return The class, or null if not set.
     */
    public static Class<? extends Activity> getErrorActivityClass() {
        return errorActivityClass;
    }

    /**
     * Sets the error activity class to launch when a crash occurs.
     * If null,the default error activity will be used.
     */
    public static void setErrorActivityClass(Class<? extends Activity> errorActivityClass) {
        CustomActivityOnCrash.errorActivityClass = errorActivityClass;
    }

    /**
     * Returns the main activity class that the error activity must launch when a crash occurs.
     *
     * @return The class, or null if not set.
     */
    public static Class<? extends Activity> getRestartActivityClass() {
        return restartActivityClass;
    }

    /**
     * Sets the main activity class that the error activity must launch when a crash occurs.
     * If not set or set to null, the default error activity will close instead.
     */
    public static void setRestartActivityClass(Class<? extends Activity> restartActivityClass) {
        CustomActivityOnCrash.restartActivityClass = restartActivityClass;
    }


    /// INTERNAL METHODS NOT TO BE USED BY THIRD PARTIES

    /**
     * INTERNAL method that checks if the stack trace that just crashed is conflictive. This is true in the following scenarios:
     * - The application has crashed while initializing (handleBindApplication is in the stack)
     * - The error activity has crashed (activityClass is in the stack)
     *
     * @param throwable     The throwable from which the stack trace will be checked
     * @param activityClass The activity class to launch when the app crashes
     * @return true if this stack trace is conflictive and the activity must not be launched, false otherwise
     */
    private static boolean isStackTraceLikelyConflictive(Throwable throwable, Class<? extends Activity> activityClass) {
        do {
            StackTraceElement[] stackTrace = throwable.getStackTrace();
            for (StackTraceElement element : stackTrace) {
                if ((element.getClassName().equals(""android.app.ActivityThread"") && element.getMethodName().equals(""handleBindApplication"")) || element.getClassName().equals(activityClass.getName())) {
                    return true;
                }
            }
        } while ((throwable = throwable.getCause()) != null);
        return false;
    }

    /**
     * INTERNAL method that returns the build date of the current APK as a string, or null if unable to determine it.
     *
     * @param context    A valid context. Must not be null.
     * @param dateFormat DateFormat to use to convert from Date to String
     * @return The formatted date, or ""Unknown"" if unable to determine it.
     */
    private static String getBuildDateAsString(Context context, DateFormat dateFormat) {
        String buildDate;
        try {
            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0);
            ZipFile zf = new ZipFile(ai.sourceDir);
            ZipEntry ze = zf.getEntry(""classes.dex"");
            long time = ze.getTime();
            buildDate = dateFormat.format(new Date(time));
            zf.close();
        } catch (Exception e) {
            buildDate = ""Unknown"";
        }
        return buildDate;
    }

    /**
     * INTERNAL method that returns the version name of the current app, or null if unable to determine it.
     *
     * @param context A valid context. Must not be null.
     * @return The version name, or ""Unknown if unable to determine it.
     */
    private static String getVersionName(Context context) {
        try {
            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
            return packageInfo.versionName;
        } catch (Exception e) {
            return ""Unknown"";
        }
    }

    /**
     * INTERNAL method that returns the device model name with correct capitalization.
     * Taken from: http://stackoverflow.com/a/12707479/1254846
     *
     * @return The device model name (i.e., ""LGE Nexus 5"")
     */
    private static String getDeviceModelName() {
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;
        if (model.startsWith(manufacturer)) {
            return capitalize(model);
        } else {
            return capitalize(manufacturer) + "" "" + model;
        }
    }

    /**
     * INTERNAL method that capitalizes the first character of a string
     *
     * @param s The string to capitalize
     * @return The capitalized string
     */
    private static String capitalize(String s) {
        if (s == null || s.length() == 0) {
            return """";
        }
        char first = s.charAt(0);
        if (Character.isUpperCase(first)) {
            return s;
        } else {
            return Character.toUpperCase(first) + s.substring(1);
        }
    }

    /**
     * INTERNAL method used to guess which activity must be called from the error activity to restart the app.
     * It will first get activities from the AndroidManifest with intent filter <action android:name=""cat.ereza.customactivityoncrash.RESTART"" />,
     * if it cannot find them, then it will get the default launcher.
     * If there is no default launcher, this returns null.
     *
     * @param context A valid context. Must not be null.
     * @return The guessed restart activity class, or null if no suitable one is found
     */
    private static Class<? extends Activity> guessRestartActivityClass(Context context) {
        Class<? extends Activity> resolvedActivityClass;

        //If action is defined, use that
        resolvedActivityClass = CustomActivityOnCrash.getRestartActivityClassWithIntentFilter(context);

        //Else, get the default launcher activity
        if (resolvedActivityClass == null) {
            resolvedActivityClass = getLauncherActivity(context);
        }

        return resolvedActivityClass;
    }

    /**
     * INTERNAL method used to get the first activity with an intent-filter <action android:name=""cat.ereza.customactivityoncrash.RESTART"" />,
     * If there is no activity with that intent filter, this returns null.
     *
     * @param context A valid context. Must not be null.
     * @return A valid activity class, or null if no suitable one is found
     */
    @SuppressWarnings(""unchecked"")
    private static Class<? extends Activity> getRestartActivityClassWithIntentFilter(Context context) {
        List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentActivities(
                new Intent().setAction(INTENT_ACTION_RESTART_ACTIVITY),
                PackageManager.GET_RESOLVED_FILTER);

        if (resolveInfos != null && resolveInfos.size() > 0) {
            ResolveInfo resolveInfo = resolveInfos.get(0);
            try {
                return (Class<? extends Activity>) Class.forName(resolveInfo.activityInfo.name);
            } catch (ClassNotFoundException e) {
                //Should not happen, print it to the log!
                Log.e(TAG, ""Failed when resolving the restart activity class via intent filter, stack trace follows!"", e);
            }
        }

        return null;
    }

    /**
     * INTERNAL method used to get the default launcher activity for the app.
     * If there is no launchable activity, this returns null.
     *
     * @param context A valid context. Must not be null.
     * @return A valid activity class, or null if no suitable one is found
     */
    @SuppressWarnings(""unchecked"")
    private static Class<? extends Activity> getLauncherActivity(Context context) {
        Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());
        if (intent != null) {
            try {
                return (Class<? extends Activity>) Class.forName(intent.getComponent().getClassName());
            } catch (ClassNotFoundException e) {
                //Should not happen, print it to the log!
                Log.e(TAG, ""Failed when resolving the restart activity class via getLaunchIntentForPackage, stack trace follows!"", e);
            }
        }

        return null;
    }

    /**
     * INTERNAL method used to guess which error activity must be called when the app crashes.
     * It will first get activities from the AndroidManifest with intent filter <action android:name=""cat.ereza.customactivityoncrash.ERROR"" />,
     * if it cannot find them, then it will use the default error activity.
     *
     * @param context A valid context. Must not be null.
     * @return The guessed error activity class, or the default error activity if not found
     */
    private static Class<? extends Activity> guessErrorActivityClass(Context context) {
        Class<? extends Activity> resolvedActivityClass;

        //If action is defined, use that
        resolvedActivityClass = CustomActivityOnCrash.getErrorActivityClassWithIntentFilter(context);

        //Else, get the default launcher activity
        if (resolvedActivityClass == null) {
            resolvedActivityClass = DefaultErrorActivity.class;
        }

        return resolvedActivityClass;
    }

    /**
     * INTERNAL method used to get the first activity with an intent-filter <action android:name=""cat.ereza.customactivityoncrash.ERROR"" />,
     * If there is no activity with that intent filter, this returns null.
     *
     * @param context A valid context. Must not be null.
     * @return A valid activity class, or null if no suitable one is found
     */
    @SuppressWarnings(""unchecked"")
    private static Class<? extends Activity> getErrorActivityClassWithIntentFilter(Context context) {
        List<ResolveInfo> resolveInfos = context.getPackageManager().queryIntentActivities(
                new Intent().setAction(INTENT_ACTION_ERROR_ACTIVITY),
                PackageManager.GET_RESOLVED_FILTER);

        if (resolveInfos != null && resolveInfos.size() > 0) {
            ResolveInfo resolveInfo = resolveInfos.get(0);
            try {
                return (Class<? extends Activity>) Class.forName(resolveInfo.activityInfo.name);
            } catch (ClassNotFoundException e) {
                //Should not happen, print it to the log!
                Log.e(TAG, ""Failed when resolving the error activity class via intent filter, stack trace follows!"", e);
            }
        }

        return null;
    }

    /**
     * INTERNAL method that kills the current process.
     * It is used after restarting or killing the app.
     */
    private static void killCurrentProcess() {
        android.os.Process.killProcess(android.os.Process.myPid());
        System.exit(10);
    }
}
",FALSE,,4185
4154,InitialSO.csv4154.txt,InitialGit.csv4154.txt,3,"toString #08a35c percent percent percent function shadeColor1(color, percent) {  // deprecated. See below.
    var num = parseInt(color,16),
    amt = Math.round(2.55 * percent),
    R = (num >> 16) + amt,
    G = (num >> 8 & 0x00FF) + amt,
    B = (num & 0x0000FF) + amt;
    return (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (G<255?G<1?0:G:255)*0x100 + (B<255?B<1?0:B:255)).toString(16).slice(1);
}
 function shadeColor1(color, percent) {  // deprecated. See below.
    var num = parseInt(color.slice(1),16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, G = (num >> 8 & 0x00FF) + amt, B = (num & 0x0000FF) + amt;
    return ""#"" + (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (G<255?G<1?0:G:255)*0x100 + (B<255?B<1?0:B:255)).toString(16).slice(1);
}
 blendColors shadeColor2 shadeRGBColor shadeBlendConvert shadeColor1 function shadeColor2(color, percent) {   
    var f=parseInt(color.slice(1),16),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=f>>16,G=f>>8&0x00FF,B=f&0x0000FF;
    return ""#""+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+(Math.round((t-B)*p)+B)).toString(16).slice(1);
}
        
function blendColors(c0, c1, p) {
    var f=parseInt(c0.slice(1),16),t=parseInt(c1.slice(1),16),R1=f>>16,G1=f>>8&0x00FF,B1=f&0x0000FF,R2=t>>16,G2=t>>8&0x00FF,B2=t&0x0000FF;
    return ""#""+(0x1000000+(Math.round((R2-R1)*p)+R1)*0x10000+(Math.round((G2-G1)*p)+G1)*0x100+(Math.round((B2-B1)*p)+B1)).toString(16).slice(1);
}
 #08a35c # #FF0000 shadeColor2 -1.0 1.0 blendColors 0.0 1.0 1.0 -1.0 blendColors(color, ""#FFFFFF"", 0.5) shadeColor2(color,0.5) blendColors(color,""#000000"", 0.5) shadeColor2(color,-0.5) shadeColor2 shadeColor1 function shadeRGBColor(color, percent) {
    var f=color.split("",""),t=percent<0?0:255,p=percent<0?percent*-1:percent,R=parseInt(f[0].slice(4)),G=parseInt(f[1]),B=parseInt(f[2]);
    return ""rgb(""+(Math.round((t-R)*p)+R)+"",""+(Math.round((t-G)*p)+G)+"",""+(Math.round((t-B)*p)+B)+"")"";
}

function blendRGBColors(c0, c1, p) {
    var f=c0.split("",""),t=c1.split("",""),R=parseInt(f[0].slice(4)),G=parseInt(f[1]),B=parseInt(f[2]);
    return ""rgb(""+(Math.round((parseInt(t[0].slice(4))-R)*p)+R)+"",""+(Math.round((parseInt(t[1])-G)*p)+G)+"",""+(Math.round((parseInt(t[2])-B)*p)+B)+"")"";
}
 var color1 = ""rbg(63,131,163)"";
var lighterColor = shadeRGBColor(color1, 0.5);  //  rgb(159,193,209)
var darkerColor = shadeRGBColor(color1, -0.25); //  rgb(47,98,122)

var color2 = ""rbg(244,128,0)"";
var blend1 = blendRGBColors(color1, color2, 0.75);  //  rgb(199,129,41)
var blend2 = blendRGBColors(color2, color1, 0.62);  //  rgb(132,130,101)
 function shade(color, percent){
    if (color.length > 7 ) return shadeRGBColor(color,percent);
    else return shadeColor2(color,percent);
}
        
function blend(color1, color2, percent){
    if (color1.length > 7) return blendRGBColors(color1,color2,percent);
    else return blendColors(color1,color2,percent);
}
 var color1 = shade(""rbg(63,131,163)"", 0.5);
var color2 = shade(""#3f83a3"", 0.5);
var color3 = blend(""rbg(63,131,163)"", ""rbg(244,128,0)"", 0.5);
var color4 = blend(""#3f83a3"", ""#f48000"", 0.5);
 function shadeBlend(p,c0,c1) {
    var n=p<0?p*-1:p,u=Math.round,w=parseInt;
    if(c0.length>7){
        var f=c0.split("",""),t=(c1?c1:p<0?""rgb(0,0,0)"":""rgb(255,255,255)"").split("",""),R=w(f[0].slice(4)),G=w(f[1]),B=w(f[2]);
        return ""rgb(""+(u((w(t[0].slice(4))-R)*n)+R)+"",""+(u((w(t[1])-G)*n)+G)+"",""+(u((w(t[2])-B)*n)+B)+"")""
    }else{
        var f=w(c0.slice(1),16),t=w((c1?c1:p<0?""#000000"":""#FFFFFF"").slice(1),16),R1=f>>16,G1=f>>8&0x00FF,B1=f&0x0000FF;
        return ""#""+(0x1000000+(u(((t>>16)-R1)*n)+R1)*0x10000+(u(((t>>8&0x00FF)-G1)*n)+G1)*0x100+(u(((t&0x0000FF)-B1)*n)+B1)).toString(16).slice(1)
    }
}
 var color1 = ""#FF343B"";
var color2 = ""#343BFF"";
var color3 = ""rgb(234,47,120)"";
var color4 = ""rgb(120,99,248)"";
var shadedcolor1 = shadeBlend(0.75,color1);
var shadedcolor3 = shadeBlend(-0.5,color3);
var blendedcolor1 = shadeBlend(0.333,color1,color2);
var blendedcolor34 = shadeBlend(-0.8,color3,color4); // Same as using 0.8
 ;) @ Mevin extension UIColor {
    func shadeColor(factor: CGFloat) -> UIColor {
        var r: CGFloat = 0
        var g: CGFloat = 0
        var b: CGFloat = 0
        var a: CGFloat = 0
        var t: CGFloat = factor < 0 ? 0 : 1
        var p: CGFloat = factor < 0 ? -factor : factor
        getRed(&r, green: &g, blue: &b, alpha: &a)
        r = (t-r)*p+r
        g = (t-g)*p+g
        b = (t-b)*p+b
        return UIColor(red: r, green: g, blue: b, alpha: a)
    }
}
 function shadeColor2($color, $percent) {
    $color = str_replace(""#"", """", $color);
    $t=$percent<0?0:255;
    $p=$percent<0?$percent*-1:$percent;
    $RGB = str_split($color, 2);
    $R=hexdec($RGB[0]);
    $G=hexdec($RGB[1]);
    $B=hexdec($RGB[2]);
    return '#'.substr(dechex(0x1000000+(round(($t-$R)*$p)+$R)*0x10000+(round(($t-$G)*$p)+$G‌​)*0x100+(round(($t-$B)*$p)+$B)),1);
}
 function shadeBlendConvert(p, from, to) {
    if(typeof(p)!=""number""||p<-1||p>1||typeof(from)!=""string""||(from[0]!='r'&&from[0]!='#')||(typeof(to)!=""string""&&typeof(to)!=""undefined""))return null; //ErrorCheck
    if(!this.sbcRip)this.sbcRip=function(d){
        var l=d.length,RGB=new Object();
        if(l>9){
            d=d.split("","");
            if(d.length<3||d.length>4)return null;//ErrorCheck
            RGB[0]=i(d[0].slice(4)),RGB[1]=i(d[1]),RGB[2]=i(d[2]),RGB[3]=d[3]?parseFloat(d[3]):-1;
        }else{
            if(l==8||l==6||l<4)return null; //ErrorCheck
            if(l<6)d=""#""+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(l>4?d[4]+""""+d[4]:""""); //3 digit
            d=i(d.slice(1),16),RGB[0]=d>>16&255,RGB[1]=d>>8&255,RGB[2]=d&255,RGB[3]=l==9||l==5?r(((d>>24&255)/255)*10000)/10000:-1;
        }
        return RGB;}
    var i=parseInt,r=Math.round,h=from.length>9,h=typeof(to)==""string""?to.length>9?true:to==""c""?!h:false:h,b=p<0,p=b?p*-1:p,to=to&&to!=""c""?to:b?""#000000"":""#FFFFFF"",f=sbcRip(from),t=sbcRip(to);
    if(!f||!t)return null; //ErrorCheck
    if(h)return ""rgb(""+r((t[0]-f[0])*p+f[0])+"",""+r((t[1]-f[1])*p+f[1])+"",""+r((t[2]-f[2])*p+f[2])+(f[3]<0&&t[3]<0?"")"":"",""+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*10000)/10000:t[3]<0?f[3]:t[3])+"")"");
    else return ""#""+(0x100000000+(f[3]>-1&&t[3]>-1?r(((t[3]-f[3])*p+f[3])*255):t[3]>-1?r(t[3]*255):f[3]>-1?r(f[3]*255):255)*0x1000000+r((t[0]-f[0])*p+f[0])*0x10000+r((t[1]-f[1])*p+f[1])*0x100+r((t[2]-f[2])*p+f[2])).toString(16).slice(f[3]>-1||t[3]>-1?1:3);
}
 //3 digit from to rgb(0,0,0,1) rgb(255,255,255,1) to to to 'c' to 0 sbcRip {0:R,1:G,2:B,0.3:A} 0 255 -1 0.0000 1.0000 null shadeBlendConvert(0.5,""salt"") = null #salt //ErrorCheck var color1 = ""rgb(114,93,20)"";
var color2 = ""rgb(114,93,20,0.37423)"";
var color3 = ""#67DAF0"";
var color4 = ""#5567DAF0"";
var color5 = ""#F3A"";
var color6 = ""#DF3A"";
var color7 = ""rgb(75,200,112)"";
var color8 = ""rgb(75,200,112,0.98631)"";
var c;

// Shade (Lighten or Darken)
c = shadeBlendConvert(0.3,color1); // rgb(114,93,20) + [30% Lighter] => rgb(156,142,91)
c = shadeBlendConvert(-0.13,color5); // #F3A + [13% Darker]  => #de2c94
// Shade with Conversion (use 'c' as your 'to' color)
c = shadeBlendConvert(0.42,color2,""c""); //rgb(114,93,20,0.37423) + [42% Lighter] + [Convert] => #5fada177
// RGB2Hex & Hex2RGB Conversion Only (set percentage to zero)
c = shadeBlendConvert(0,color6,""c""); // #DF3A + [Convert] => rgb(255,51,170,0.8667)
// Blending
c = shadeBlendConvert(-0.13,color2,color8); // rgb(114,93,20,0.37423) + rgb(75,200,112,0.98631) + [13% Blend] => rgb(109,107,32,0.4538)
c = shadeBlendConvert(0.65,color2,color7); // rgb(114,93,20,0.37423) + rgb(75,200,112) + [65% Blend] => rgb(89,163,80,0.37423)
// Blending with Conversion  (result is in the 'to' color format)
c = shadeBlendConvert(0.3,color1,color3); // rgb(114,93,20) + #67DAF0 + [30% Blend] + [Convert] => #6f8356
c = shadeBlendConvert(-0.13,color4,color2); // #5567DAF0 + rgb(114,93,20,0.37423) + [13% Blend] + [Convert] => rgb(104,202,211,0.3386)
// Error Checking
c = shadeBlendConvert(0.3,""#FFBAA""); // #FFBAA + [30% Lighter] => null
c = shadeBlendConvert(30,color1,color5); // rgb(114,93,20) + #F3A + [3000% Blend] => null
// A pound of salt is jibberish  (Error Check Fail)
c = shadeBlendConvert(0.3,""#salt"");  // #salt + [30% Lighter] => #004d4d4d
// Ripping
c = sbcRip(color4); // #5567DAF0 + [Rip] =>> {0:103,1:218,2:240,3:0.3333}
 ","pSBC pSBC ""#AA6622"" ""#bb551144"" ""rgb(123,45,76)"" ""rgba(45,15,74,0.45)"" ""#C41"" ""#CC4411"" c0 c1 rgb(0,0,0,1) rgb(255,255,255,1) c1 c0 c1 c1 'c' c1 c0 0 p c1 string pSBCr .r .g .b .a .a rgba() rgb() c0 c1 null pSBC(0.5,""salt"") == null #salt return null; true l // Version 4.0
const pSBC=(p,c0,c1,l)=>{
    let r,g,b,P,f,t,h,i=parseInt,m=Math.round,a=typeof(c1)==""string"";
    if(typeof(p)!=""number""||p<-1||p>1||typeof(c0)!=""string""||(c0[0]!='r'&&c0[0]!='#')||(c1&&!a))return null;
    if(!this.pSBCr)this.pSBCr=(d)=>{
        let n=d.length,x={};
        if(n>9){
            [r,g,b,a]=d=d.split("",""),n=d.length;
            if(n<3||n>4)return null;
            x.r=i(r[3]==""a""?r.slice(5):r.slice(4)),x.g=i(g),x.b=i(b),x.a=a?parseFloat(a):-1
        }else{
            if(n==8||n==6||n<4)return null;
            if(n<6)d=""#""+d[1]+d[1]+d[2]+d[2]+d[3]+d[3]+(n>4?d[4]+d[4]:"""");
            d=i(d.slice(1),16);
            if(n==9||n==5)x.r=d>>24&255,x.g=d>>16&255,x.b=d>>8&255,x.a=m((d&255)/0.255)/1000;
            else x.r=d>>16,x.g=d>>8&255,x.b=d&255,x.a=-1
        }return x};
    h=c0.length>9,h=a?c1.length>9?true:c1==""c""?!h:false:h,f=this.pSBCr(c0),P=p<0,t=c1&&c1!=""c""?this.pSBCr(c1):P?{r:0,g:0,b:0,a:-1}:{r:255,g:255,b:255,a:-1},p=P?p*-1:p,P=1-p;
    if(!f||!t)return null;
    if(l)r=m(P*f.r+p*t.r),g=m(P*f.g+p*t.g),b=m(P*f.b+p*t.b);
    else r=m((P*f.r**2+p*t.r**2)**0.5),g=m((P*f.g**2+p*t.g**2)**0.5),b=m((P*f.b**2+p*t.b**2)**0.5);
    a=f.a,t=t.a,f=a>=0||t>=0,a=f?a<0?t:t<0?a:a*P+t*p:0;
    if(h)return""rgb""+(f?""a("":""("")+r+"",""+g+"",""+b+(f?"",""+m(a*1000)/1000:"""")+"")"";
    else return""#""+(4294967296+r*16777216+g*65536+b*256+(f?m(a*255):0)).toString(16).slice(1,f?undefined:-2)
}
 // Setup:

let color1 = ""rgb(20,60,200)"";
let color2 = ""rgba(20,60,200,0.67423)"";
let color3 = ""#67DAF0"";
let color4 = ""#5567DAF0"";
let color5 = ""#F3A"";
let color6 = ""#F3A9"";
let color7 = ""rgb(200,60,20)"";
let color8 = ""rgba(200,60,20,0.98631)"";

// Tests:

/*** Log Blending ***/
// Shade (Lighten or Darken)
pSBC ( 0.42, color1 ); // rgb(20,60,200) + [42% Lighter] => rgb(166,171,225)
pSBC ( -0.4, color5 ); // #F3A + [40% Darker] => #c62884
pSBC ( 0.42, color8 ); // rgba(200,60,20,0.98631) + [42% Lighter] => rgba(225,171,166,0.98631)

// Shade with Conversion (use ""c"" as your ""to"" color)
pSBC ( 0.42, color2, ""c"" ); // rgba(20,60,200,0.67423) + [42% Lighter] + [Convert] => #a6abe1ac

// RGB2Hex & Hex2RGB Conversion Only (set percentage to zero)
pSBC ( 0, color6, ""c"" ); // #F3A9 + [Convert] => rgba(255,51,170,0.6)

// Blending
pSBC ( -0.5, color2, color8 ); // rgba(20,60,200,0.67423) + rgba(200,60,20,0.98631) + [50% Blend] => rgba(142,60,142,0.83)
pSBC ( 0.7, color2, color7 ); // rgba(20,60,200,0.67423) + rgb(200,60,20) + [70% Blend] => rgba(168,60,111,0.67423)
pSBC ( 0.25, color3, color7 ); // #67DAF0 + rgb(200,60,20) + [25% Blend] => rgb(134,191,208)
pSBC ( 0.75, color7, color3 ); // rgb(200,60,20) + #67DAF0 + [75% Blend] => #86bfd0

/*** Linear Blending ***/
// Shade (Lighten or Darken)
pSBC ( 0.42, color1, false, true ); // rgb(20,60,200) + [42% Lighter] => rgb(119,142,223)
pSBC ( -0.4, color5, false, true ); // #F3A + [40% Darker] => #991f66
pSBC ( 0.42, color8, false, true ); // rgba(200,60,20,0.98631) + [42% Lighter] => rgba(223,142,119,0.98631)

// Shade with Conversion (use ""c"" as your ""to"" color)
pSBC ( 0.42, color2, ""c"", true ); // rgba(20,60,200,0.67423) + [42% Lighter] + [Convert] => #778edfac

// RGB2Hex & Hex2RGB Conversion Only (set percentage to zero)
pSBC ( 0, color6, ""c"", true ); // #F3A9 + [Convert] => rgba(255,51,170,0.6)

// Blending
pSBC ( -0.5, color2, color8, true ); // rgba(20,60,200,0.67423) + rgba(200,60,20,0.98631) + [50% Blend] => rgba(110,60,110,0.83)
pSBC ( 0.7, color2, color7, true ); // rgba(20,60,200,0.67423) + rgb(200,60,20) + [70% Blend] => rgba(146,60,74,0.67423)
pSBC ( 0.25, color3, color7, true ); // #67DAF0 + rgb(200,60,20) + [25% Blend] => rgb(127,179,185)
pSBC ( 0.75, color7, color3, true ); // rgb(200,60,20) + #67DAF0 + [75% Blend] => #7fb3b9

/*** Other Stuff ***/
// Error Checking
pSBC ( 0.42, ""#FFBAA"" ); // #FFBAA + [42% Lighter] => null  (Invalid Input Color)
pSBC ( 42, color1, color5 ); // rgb(20,60,200) + #F3A + [4200% Blend] => null  (Invalid Percentage Range)
pSBC ( 0.42, {} ); // [object Object] + [42% Lighter] => null  (Strings Only for Color)
pSBC ( ""42"", color1 ); // rgb(20,60,200) + [""42""] => null  (Numbers Only for Percentage)
pSBC ( 0.42, ""salt"" ); // salt + [42% Lighter] => null  (A Little Salt is No Good...)

// Error Check Fails (Some Errors are not Caught)
pSBC ( 0.42, ""#salt"" ); // #salt + [42% Lighter] => #a5a5a500  (...and a Pound of Salt is Jibberish)

// Ripping
pSBCr ( color4 ); // #5567DAF0 + [Rip] => [object Object] => {'r':85,'g':103,'b':218,'a':0.941}
 const RGB_Linear_Blend=(p,c0,c1)=>{
    var i=parseInt,r=Math.round,P=1-p,[a,b,c,d]=c0.split("",""),[e,f,g,h]=c1.split("",""),x=d||h,j=x?"",""+(!d?h:!h?d:r((parseFloat(d)*P+parseFloat(h)*p)*1000)/1000+"")""):"")"";
    return""rgb""+(x?""a("":""("")+r(i(a[3]==""a""?a.slice(5):a.slice(4))*P+i(e[3]==""a""?e.slice(5):e.slice(4))*p)+"",""+r(i(b)*P+i(f)*p)+"",""+r(i(c)*P+i(g)*p)+j;
}

const RGB_Linear_Shade=(p,c)=>{
    var i=parseInt,r=Math.round,[a,b,c,d]=c.split("",""),P=p<0,t=P?0:255*p,P=P?1+p:1-p;
    return""rgb""+(d?""a("":""("")+r(i(a[3]==""a""?a.slice(5):a.slice(4))*P+t)+"",""+r(i(b)*P+t)+"",""+r(i(c)*P+t)+(d?"",""+d:"")"");
}

const RGB_Log_Blend=(p,c0,c1)=>{
    var i=parseInt,r=Math.round,P=1-p,[a,b,c,d]=c0.split("",""),[e,f,g,h]=c1.split("",""),x=d||h,j=x?"",""+(!d?h:!h?d:r((parseFloat(d)*P+parseFloat(h)*p)*1000)/1000+"")""):"")"";
    return""rgb""+(x?""a("":""("")+r((P*i(a[3]==""a""?a.slice(5):a.slice(4))**2+p*i(e[3]==""a""?e.slice(5):e.slice(4))**2)**0.5)+"",""+r((P*i(b)**2+p*i(f)**2)**0.5)+"",""+r((P*i(c)**2+p*i(g)**2)**0.5)+j;
}

const RGB_Log_Shade=(p,c)=>{
    var i=parseInt,r=Math.round,[a,b,c,d]=c.split("",""),P=p<0,t=P?0:p*255**2,P=P?1+p:1-p;
    return""rgb""+(d?""a("":""("")+r((P*i(a[3]==""a""?a.slice(5):a.slice(4))**2+t)**0.5)+"",""+r((P*i(b)**2+t)**0.5)+"",""+r((P*i(c)**2+t)**0.5)+(d?"",""+d:"")"");
}
 ",FALSE,"function sbcRip(d) {
    var i = parseInt, r = Math.round;
    var l = d.length, RGB = new Object();
    if (l > 9) {
        d = d.split("","");
        if (d.length < 3 || d.length > 4)
            return null; //ErrorCheck
        RGB[0] = i(d[0].slice(4)), RGB[1] = i(d[1]), RGB[2] = i(d[2]), RGB[3] = d[3] ? parseFloat(d[3]) : -1;
    }
    else {
        if (l == 8 || l == 6 || l < 4)
            return null; //ErrorCheck
        if (l < 6)
            d = ""#"" + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (l > 4 ? d[4] + """" + d[4] : """"); //3 digit
        d = i(d.slice(1), 16), RGB[0] = d >> 16 & 255, RGB[1] = d >> 8 & 255, RGB[2] = d & 255, RGB[3] = l == 9 || l == 5 ? r(((d >> 24 & 255) / 255) * 10000) / 10000 : -1;
    }
    return RGB;
}
// http://stackoverflow.com/a/13542669/6364886
function shadeBlendConvert(p, from, to = null) {
    if (typeof (p) != ""number"" || p < -1 || p > 1 || typeof (from) != ""string"" || (from[0] != 'r' && from[0] != '#') || (typeof (to) != ""string"" && typeof (to) != ""undefined""))
        return null; //ErrorCheck
    var i = parseInt, r = Math.round, h = from.length > 9, h = typeof (to) == ""string"" ? to.length > 9 ? true : to == ""c"" ? !h : false : h, b = p < 0, p = b ? p * -1 : p, to = to && to != ""c"" ? to : b ? ""#000000"" : ""#FFFFFF"", f = sbcRip(from), t = sbcRip(to);
    if (!f || !t)
        return null; //ErrorCheck
    if (h)
        return ""rgb("" + r((t[0] - f[0]) * p + f[0]) + "","" + r((t[1] - f[1]) * p + f[1]) + "","" + r((t[2] - f[2]) * p + f[2]) + (f[3] < 0 && t[3] < 0 ? "")"" : "","" + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3]) + "")"");
    else
        return ""#"" + (0x100000000 + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 255) : t[3] > -1 ? r(t[3] * 255) : f[3] > -1 ? r(f[3] * 255) : 255) * 0x1000000 + r((t[0] - f[0]) * p + f[0]) * 0x10000 + r((t[1] - f[1]) * p + f[1]) * 0x100 + r((t[2] - f[2]) * p + f[2])).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3);
}
//# sourceMappingURL=util.js.map","function sbcRip(d) {
    var i = parseInt, r = Math.round;
    var l = d.length, RGB = new Object();
    if (l > 9) {
        d = d.split("","");
        if (d.length < 3 || d.length > 4)
            return null; //ErrorCheck
        RGB[0] = i(d[0].slice(4)), RGB[1] = i(d[1]), RGB[2] = i(d[2]), RGB[3] = d[3] ? parseFloat(d[3]) : -1;
    }
    else {
        if (l == 8 || l == 6 || l < 4)
            return null; //ErrorCheck
        if (l < 6)
            d = ""#"" + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (l > 4 ? d[4] + """" + d[4] : """"); //3 digit
        d = i(d.slice(1), 16), RGB[0] = d >> 16 & 255, RGB[1] = d >> 8 & 255, RGB[2] = d & 255, RGB[3] = l == 9 || l == 5 ? r(((d >> 24 & 255) / 255) * 10000) / 10000 : -1;
    }
    return RGB;
}
// http://stackoverflow.com/a/13542669/6364886
function shadeBlendConvert(p, from, to = null) {
    if (typeof (p) != ""number"" || p < -1 || p > 1 || typeof (from) != ""string"" || (from[0] != 'r' && from[0] != '#') || (typeof (to) != ""string"" && typeof (to) != ""undefined""))
        return null; //ErrorCheck
    var i = parseInt, r = Math.round, h = from.length > 9, h = typeof (to) == ""string"" ? to.length > 9 ? true : to == ""c"" ? !h : false : h, b = p < 0, p = b ? p * -1 : p, to = to && to != ""c"" ? to : b ? ""#000000"" : ""#FFFFFF"", f = sbcRip(from), t = sbcRip(to);
    if (!f || !t)
        return null; //ErrorCheck
    if (h)
        return ""rgb("" + r((t[0] - f[0]) * p + f[0]) + "","" + r((t[1] - f[1]) * p + f[1]) + "","" + r((t[2] - f[2]) * p + f[2]) + (f[3] < 0 && t[3] < 0 ? "")"" : "","" + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 10000) / 10000 : t[3] < 0 ? f[3] : t[3]) + "")"");
    else
        return ""#"" + (0x100000000 + (f[3] > -1 && t[3] > -1 ? r(((t[3] - f[3]) * p + f[3]) * 255) : t[3] > -1 ? r(t[3] * 255) : f[3] > -1 ? r(f[3] * 255) : 255) * 0x1000000 + r((t[0] - f[0]) * p + f[0]) * 0x10000 + r((t[1] - f[1]) * p + f[1]) * 0x100 + r((t[2] - f[2]) * p + f[2])).toString(16).slice(f[3] > -1 || t[3] > -1 ? 1 : 3);
}
function randomizeArray(field) {
    // Fisher-Yates shuffle https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    for (var i = 0; i < field.length; i++) {
        var j = Math.round(Math.random() * i);
        var temp = field[i];
        field[i] = field[j];
        field[j] = temp;
    }
    return field;
}
function getValueFromHMTLInput(id) {
    var input = document.getElementById(id);
    if (input == null)
        return null;
    if (input.type == ""checkbox"")
        return input.checked;
    else if (input.type == ""number"")
        return input.valueAsNumber;
    else
        return input.value;
}
function setHtmlInputValue(id, val) {
    var input = document.getElementById(id);
    if (input != null) {
        if (input.type == ""checkbox"")
            input.checked = val == '1' ? true : false;
        else
            input.value = val;
    }
}
// fill the configuration inputs on the html page
function fillHtmlInputs(config) {
    Object.keys(config).forEach(function (key, index) {
        setHtmlInputValue(key, config[key]);
    });
}
function readConfigurationValues(config) {
    Object.keys(config).forEach(function (key, index) {
        var val = getValueFromHMTLInput(key);
        if (val != null) {
            config[key] = val;
        }
    });
}
//# sourceMappingURL=util.js.map",FALSE,,4187
4156,InitialSO.csv4156.txt,InitialGit.csv4156.txt,12,"import re

def replace(file, pattern, subst):
    # Read contents from file as a single string
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()
    
    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
    file_string = (re.sub(pattern, subst, file_string))
    
    # Write contents to file.
    # Using mode 'w' truncates the file.
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()
    
 ","import re

def replace(file, pattern, subst):
    # Read contents from file as a single string
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()

    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
    file_string = (re.sub(pattern, subst, file_string))

    # Write contents to file.
    # Using mode 'w' truncates the file.
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()
 ",FALSE,"import requests, glob, re, os

# taken from here: http://stackoverflow.com/a/13641746
def replace(file, pattern, subst):
    # Read contents from file as a single string
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()

    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
    file_string = (re.sub(pattern, subst, file_string))

    # Write contents to file.
    # Using mode 'w' truncates the file.
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()

# list of all puml files
fileList = glob.glob('*/etc/*.puml')
for puml in fileList:
    pathSplit = puml.split(""/"")
    # parent folder
    parent = pathSplit[0]
    # individual artifact/project name
    artifact = pathSplit[2].replace("".urm.puml"", """")
    print ""parent: "" + parent + ""; artifact: "" + artifact

    # do a POST to the official plantuml hosting site with a little trick ""!includeurl"" and raw github content
    data = {
        'text': ""!includeurl https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/"" + puml
    }
    r = requests.post('http://plantuml.com/plantuml/uml', data=data)
    pumlId = r.url.replace(""http://plantuml.com/plantuml/uml/"", """")
    
    # the only thing needed to get a png/svg/ascii from the server back
    print ""Puml Server ID: "" + pumlId
    
    # add the id so jekyll/liquid can use it
    if (parent == artifact):
        replace(""./"" + parent + ""/README.md"", ""categories:"", ""pumlid: {}\\ncategories:"".format(pumlId))
    else:
        print ""I dont want to program this, just add the following lines to the README.md file that corresponds to this puml file '"" + puml + ""'\npumlid: {}"".format(pumlId)

","#
# The MIT License
# Copyright (c) 2014-2016 Ilkka Seppälä
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the ""Software""), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import requests, glob, re, os

# taken from here: http://stackoverflow.com/a/13641746
def replace(file, pattern, subst):
    # Read contents from file as a single string
    file_handle = open(file, 'r')
    file_string = file_handle.read()
    file_handle.close()

    # Use RE package to allow for replacement (also allowing for (multiline) REGEX)
    file_string = (re.sub(pattern, subst, file_string))

    # Write contents to file.
    # Using mode 'w' truncates the file.
    file_handle = open(file, 'w')
    file_handle.write(file_string)
    file_handle.close()

# list of all puml files
fileList = glob.glob('*/etc/*.puml')
for puml in fileList:
    pathSplit = puml.split(""/"")
    # parent folder
    parent = pathSplit[0]
    # individual artifact/project name
    artifact = pathSplit[2].replace("".urm.puml"", """")
    print ""parent: "" + parent + ""; artifact: "" + artifact

    # do a POST to the official plantuml hosting site with a little trick ""!includeurl"" and raw github content
    data = {
        'text': ""!includeurl https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/"" + puml
    }
    r = requests.post('http://plantuml.com/plantuml/uml', data=data)
    pumlId = r.url.replace(""http://plantuml.com/plantuml/uml/"", """")
    
    # the only thing needed to get a png/svg/ascii from the server back
    print ""Puml Server ID: "" + pumlId
    
    # add the id so jekyll/liquid can use it
    if (parent == artifact):
        replace(""./"" + parent + ""/README.md"", ""categories:"", ""pumlid: {}\\ncategories:"".format(pumlId))
    else:
        print ""I dont want to program this, just add the following lines to the README.md file that corresponds to this puml file '"" + puml + ""'\npumlid: {}"".format(pumlId)

",FALSE,,4985
4157,InitialSO.csv4157.txt,InitialGit.csv4157.txt,22,"uniqid uniqid openssl_random_pseudo_bytes() bin2hex(openssl_random_pseudo_bytes($bits))
 [a-f][0-9] function crypto_rand_secure($min, $max) {
        $range = $max - $min;
        if ($range < 0) return $min; // not so random...
        $log = log($range, 2);
        $bytes = (int) ($log / 8) + 1; // length in bytes
        $bits = (int) $log + 1; // length in bits
        $filter = (int) (1 << $bits) - 1; // set all lower bits to 1
        do {
            $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
            $rnd = $rnd & $filter; // discard irrelevant bits
        } while ($rnd >= $range);
        return $min + $rnd;
}

function getToken($length){
    $token = """";
    $codeAlphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    $codeAlphabet.= ""abcdefghijklmnopqrstuvwxyz"";
    $codeAlphabet.= ""0123456789"";
    for($i=0;$i<$length;$i++){
        $token .= $codeAlphabet[crypto_rand_secure(0,strlen($codeAlphabet))];
    }
    return $token;
}
 crypto_rand_secure($min, $max) rand() mt_rand getToken($length) $length ","random_bytes($length) $bytes = random_bytes(20);
var_dump(bin2hex($bytes));
 string(40) ""5fe69c95ed70a9869d9f9af7d8400a6673bb9ce9""
 uniqid uniqid openssl_random_pseudo_bytes() bin2hex(openssl_random_pseudo_bytes($bytes))
 [a-f][0-9] function crypto_rand_secure($min, $max)
{
    $range = $max - $min;
    if ($range < 1) return $min; // not so random...
    $log = ceil(log($range, 2));
    $bytes = (int) ($log / 8) + 1; // length in bytes
    $bits = (int) $log + 1; // length in bits
    $filter = (int) (1 << $bits) - 1; // set all lower bits to 1
    do {
        $rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
        $rnd = $rnd & $filter; // discard irrelevant bits
    } while ($rnd > $range);
    return $min + $rnd;
}

function getToken($length)
{
    $token = """";
    $codeAlphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    $codeAlphabet.= ""abcdefghijklmnopqrstuvwxyz"";
    $codeAlphabet.= ""0123456789"";
    $max = strlen($codeAlphabet); // edited

    for ($i=0; $i < $length; $i++) {
        $token .= $codeAlphabet[crypto_rand_secure(0, $max-1)];
    }

    return $token;
}
 crypto_rand_secure($min, $max) rand() mt_rand getToken($length) $length ",FALSE,"<?php
	require_once dirname(__FILE__) . ""/config.php"";

	$username = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['username'])));
	$password = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['password'])));
	$verify = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['verify'])));
	$bot_check = mysqli_real_escape_string($mysqli,stripslashes(strtolower(htmlspecialchars($_POST['bot_check']))));
	$email = mysqli_real_escape_string($mysqli,stripslashes(strtolower(htmlspecialchars($_POST['email']))));
	$dateadd = time();

	// http://stackoverflow.com/a/13733588
	function crypto_rand_secure($min, $max) {
			$range = $max - $min;
			if ($range < 0) return $min; // not so random...
			$log = log($range, 2);
			$bytes = (int) ($log / 8) + 1; // length in bytes
			$bits = (int) $log + 1; // length in bits
			$filter = (int) (1 << $bits) - 1; // set all lower bits to 1
			do {
				$rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
				$rnd = $rnd & $filter; // discard irrelevant bits
			} while ($rnd >= $range);
			return $min + $rnd;
	}

	function getToken($length){
		$token = """";
		$codeAlphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
		$codeAlphabet.= ""abcdefghijklmnopqrstuvwxyz"";
		$codeAlphabet.= ""0123456789"";
		for($i=0;$i<$length;$i++){
			$token .= $codeAlphabet[crypto_rand_secure(0,strlen($codeAlphabet))];
		}
		return $token;
	}

	if($password != $verify)
		die(""Passwords do not match, please try again."");
	if($bot_check != 151)
		die(""This is needed to make sure you are human."");

	if(strlen($username) >= 2 && strlen($username) < 64) {
		if(strlen($password) >= 4) {
			$query = 'SELECT * FROM users WHERE USERNAME=""' . $username . '""';
			$result = mysqli_query($mysqli,$query);

			if(mysqli_num_rows($result) <= 0) {
				$query = 'INSERT INTO users (USERNAME, HASH, MD5, VERIFIED, REGISTER_DATE, EMAIL) VALUES (""' . $username . '"", ""' . hash(""sha512"",$password . ""-:-"" . $dateadd) . '"", ""' . md5(htmlspecialchars($_POST['username'])) . '"", 0, ' . $dateadd . ', ""' . $email . '"")';
				mysqli_real_query($mysqli,$query);

				$token = getToken(32);
				$query = 'INSERT INTO verifications (MD5,V_KEY,DATE_ADDED) VALUES (""' . md5(htmlspecialchars($_POST['username'])) . '"", ""' . $token . '"", ' . time() . ')';
				mysqli_real_query($mysqli,$query);

				$subject = 'pos7d verification';
				$message = ""Please click this link to verify your forum account.\r\n"" . $setting['root_domain'] . ""verify.php?code="" . $token;

				$headers   = array();
				$headers[] = ""MIME-Version: 1.0"";
				$headers[] = ""Content-type: text/plain; charset=iso-8859-1"";
				$headers[] = ""From: no-reply@theblackparrot.us"";
				$headers[] = ""Reply-To: {$email}"";
				$headers[] = ""Subject: {$subject}"";
				$headers[] = ""X-Mailer: PHP/"".phpversion();

				mail($email, $subject, $message, implode(""\r\n"", $headers));

				die(""Please check your e-mail for a verification link.<br/>(This frontend here is currently being worked on, excuse the lack of style)."");
			}
			else {
				header(""Location: "" . $setting['root_domain']);
				exit;
			}
		}
		else {
			header(""Location: "" . $setting['root_domain']);
			exit;
		}
	}
	else {
		header(""Location: "" . $setting['root_domain']);
		exit;
	}
?>","<?php
	require_once dirname(__FILE__) . ""/config.php"";

	$username = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['username'])));
	$password = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['password'])));
	$verify = mysqli_real_escape_string($mysqli,stripslashes(htmlspecialchars($_POST['verify'])));
	$bot_check = mysqli_real_escape_string($mysqli,stripslashes(strtolower(htmlspecialchars($_POST['bot_check']))));
	$email = mysqli_real_escape_string($mysqli,stripslashes(strtolower(htmlspecialchars($_POST['email']))));
	$dateadd = time();

	// http://stackoverflow.com/a/13733588
	function crypto_rand_secure($min, $max) {
			$range = $max - $min;
			if ($range < 0) return $min; // not so random...
			$log = log($range, 2);
			$bytes = (int) ($log / 8) + 1; // length in bytes
			$bits = (int) $log + 1; // length in bits
			$filter = (int) (1 << $bits) - 1; // set all lower bits to 1
			do {
				$rnd = hexdec(bin2hex(openssl_random_pseudo_bytes($bytes)));
				$rnd = $rnd & $filter; // discard irrelevant bits
			} while ($rnd >= $range);
			return $min + $rnd;
	}

	function getToken($length){
		$token = """";
		$codeAlphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
		$codeAlphabet.= ""abcdefghijklmnopqrstuvwxyz"";
		$codeAlphabet.= ""0123456789"";
		for($i=0;$i<$length;$i++){
			$token .= $codeAlphabet[crypto_rand_secure(0,strlen($codeAlphabet))];
		}
		return $token;
	}

	if($password != $verify)
		die(""Passwords do not match, please try again."");
	if($bot_check != 151)
		die(""This is needed to make sure you are human."");

	if(strlen($username) >= 2 && strlen($username) < 64) {
		if(strlen($password) >= 4) {
			$query = 'SELECT * FROM users WHERE USERNAME=""' . $username . '""';
			$result = mysqli_query($mysqli,$query);

			if(mysqli_num_rows($result) <= 0) {
				$query = 'INSERT INTO users (USERNAME, HASH, MD5, VERIFIED, REGISTER_DATE, EMAIL) VALUES (""' . $username . '"", ""' . hash(""sha512"",$password . ""-:-"" . $dateadd) . '"", ""' . md5(htmlspecialchars($_POST['username'])) . '"", 0, ' . $dateadd . ', ""' . $email . '"")';
				mysqli_real_query($mysqli,$query);

				$token = getToken(32);
				$query = 'INSERT INTO verifications (MD5,V_KEY,DATE_ADDED) VALUES (""' . md5(htmlspecialchars($_POST['username'])) . '"", ""' . $token . '"", ' . time() . ')';
				mysqli_real_query($mysqli,$query);

				$subject = 'pos7d verification';
				$message = ""Please click this link to verify your forum account.\r\n"" . $setting['root_domain'] . ""verify.php?code="" . $token;

				$headers   = array();
				$headers[] = ""MIME-Version: 1.0"";
				$headers[] = ""Content-type: text/plain; charset=iso-8859-1"";
				$headers[] = ""From: no-reply@theblackparrot.us"";
				$headers[] = ""Reply-To: {$email}"";
				$headers[] = ""Subject: {$subject}"";
				$headers[] = ""X-Mailer: PHP/"".phpversion();

				mail($email, $subject, $message, implode(""\r\n"", $headers));

				die(""Please check your e-mail for a verification link.<br/>(This frontend here is currently being worked on, excuse the lack of style)."");
			}
			else {
				header(""Location: "" . $setting['root_domain']);
				exit;
			}
		}
		else {
			header(""Location: "" . $setting['root_domain']);
			exit;
		}
	}
	else {
		header(""Location: "" . $setting['root_domain']);
		exit;
	}
?>",TRUE,,4986
4159,InitialSO.csv4159.txt,InitialGit.csv4159.txt,8,"import pysideuic
import xml.etree.ElementTree as xml
from cStringIO import StringIO

def loadUiType(uiFile):
    """"""
    Pyside ""loadUiType"" command like PyQt4 has one, so we have to convert the 
    ui file to py code in-memory first and then execute it in a special frame
    to retrieve the form_class.
    """"""
    parsed = xml.parse(uiFile)
    widget_class = parsed.find('widget').get('class')
    form_class = parsed.find('class').text

    with open(uiFile, 'r') as f:
        o = StringIO()
        frame = {}
        
        pysideuic.compileUi(f, o, indent=0)
        pyc = compile(o.getvalue(), '<string>', 'exec')
        exec pyc in frame
        
        # Fetch the base_class and form class based on their type
        # in the xml from designer
        form_class = frame['Ui_%s'%form_class]
        base_class = eval('QtGui.%s'%widget_class)
        
    return form_class, base_class
 pyside-uic.exe MyWindow.ui -o MyWindow.py
 ","import pysideuic
import xml.etree.ElementTree as xml
from cStringIO import StringIO

def loadUiType(uiFile):
    """"""
    Pyside ""loadUiType"" command like PyQt4 has one, so we have to convert the 
    ui file to py code in-memory first and then execute it in a special frame
    to retrieve the form_class.
    """"""
    parsed = xml.parse(uiFile)
    widget_class = parsed.find('widget').get('class')
    form_class = parsed.find('class').text

    with open(uiFile, 'r') as f:
        o = StringIO()
        frame = {}

        pysideuic.compileUi(f, o, indent=0)
        pyc = compile(o.getvalue(), '<string>', 'exec')
        exec pyc in frame

        # Fetch the base_class and form class based on their type
        # in the xml from designer
        form_class = frame['Ui_%s'%form_class]
        base_class = eval('QtGui.%s'%widget_class)

    return form_class, base_class
 pyside-uic.exe MyWindow.ui -o MyWindow.py
 ",FALSE,"""""""
This module exists to smooth out some of the differences between PySide and PyQt4:

* Automatically import either PyQt4 or PySide depending on availability
* Allow to import QtCore/QtGui pyqtgraph.Qt without specifying which Qt wrapper
  you want to use.
* Declare QtCore.Signal, .Slot in PyQt4
* Declare loadUiType function for Pyside

""""""

import os, sys, re, time

from .python2_3 import asUnicode

PYSIDE = 'PySide'
PYQT4 = 'PyQt4'
PYQT5 = 'PyQt5'

QT_LIB = os.getenv('PYQTGRAPH_QT_LIB')

## Automatically determine whether to use PyQt or PySide (unless specified by
## environment variable).
## This is done by first checking to see whether one of the libraries
## is already imported. If not, then attempt to import PyQt4, then PySide.
if QT_LIB is None:
    libOrder = [PYQT4, PYSIDE, PYQT5]

    for lib in libOrder:
        if lib in sys.modules:
            QT_LIB = lib
            break

if QT_LIB is None:
    for lib in libOrder:
        try:
            __import__(lib)
            QT_LIB = lib
            break
        except ImportError:
            pass

if QT_LIB is None:
    raise Exception(""PyQtGraph requires one of PyQt4, PyQt5 or PySide; none of these packages could be imported."")

if QT_LIB == PYSIDE:
    from PySide import QtGui, QtCore, QtOpenGL, QtSvg
    try:
        from PySide import QtTest
        if not hasattr(QtTest.QTest, 'qWait'):
            @staticmethod
            def qWait(msec):
                start = time.time()
                QtGui.QApplication.processEvents()
                while time.time() < start + msec * 0.001:
                    QtGui.QApplication.processEvents()
            QtTest.QTest.qWait = qWait
                
    except ImportError:
        pass
    import PySide
    try:
        from PySide import shiboken
        isQObjectAlive = shiboken.isValid
    except ImportError:
        def isQObjectAlive(obj):
            try:
                if hasattr(obj, 'parent'):
                    obj.parent()
                elif hasattr(obj, 'parentItem'):
                    obj.parentItem()
                else:
                    raise Exception(""Cannot determine whether Qt object %s is still alive."" % obj)
            except RuntimeError:
                return False
            else:
                return True
    
    VERSION_INFO = 'PySide ' + PySide.__version__
    
    # Make a loadUiType function like PyQt has
    
    # Credit:
    # http://stackoverflow.com/questions/4442286/python-code-genration-with-pyside-uic/14195313#14195313

    class StringIO(object):
        """"""Alternative to built-in StringIO needed to circumvent unicode/ascii issues""""""
        def __init__(self):
            self.data = []
        
        def write(self, data):
            self.data.append(data)
            
        def getvalue(self):
            return ''.join(map(asUnicode, self.data)).encode('utf8')
        
    def loadUiType(uiFile):
        """"""
        Pyside ""loadUiType"" command like PyQt4 has one, so we have to convert
        the ui file to py code in-memory first and then execute it in a
        special frame to retrieve the form_class.

        from stackoverflow: http://stackoverflow.com/a/14195313/3781327

        seems like this might also be a legitimate solution, but I'm not sure
        how to make PyQt4 and pyside look the same...
            http://stackoverflow.com/a/8717832
        """"""
        import pysideuic
        import xml.etree.ElementTree as xml
        #from io import StringIO
        
        parsed = xml.parse(uiFile)
        widget_class = parsed.find('widget').get('class')
        form_class = parsed.find('class').text
        
        with open(uiFile, 'r') as f:
            o = StringIO()
            frame = {}

            pysideuic.compileUi(f, o, indent=0)
            pyc = compile(o.getvalue(), '<string>', 'exec')
            exec(pyc, frame)

            #Fetch the base_class and form class based on their type in the xml from designer
            form_class = frame['Ui_%s'%form_class]
            base_class = eval('QtGui.%s'%widget_class)

        return form_class, base_class

elif QT_LIB == PYQT4:

    from PyQt4 import QtGui, QtCore, uic
    try:
        from PyQt4 import QtSvg
    except ImportError:
        pass
    try:
        from PyQt4 import QtOpenGL
    except ImportError:
        pass
    try:
        from PyQt4 import QtTest
    except ImportError:
        pass

    VERSION_INFO = 'PyQt4 ' + QtCore.PYQT_VERSION_STR + ' Qt ' + QtCore.QT_VERSION_STR

elif QT_LIB == PYQT5:
    
    # We're using PyQt5 which has a different structure so we're going to use a shim to
    # recreate the Qt4 structure for Qt5
    from PyQt5 import QtGui, QtCore, QtWidgets, uic
    try:
        from PyQt5 import QtSvg
    except ImportError:
        pass
    try:
        from PyQt5 import QtOpenGL
    except ImportError:
        pass
    try:
        from PyQt5 import QtTest
        QtTest.QTest.qWaitForWindowShown = QtTest.QTest.qWaitForWindowExposed
    except ImportError:
        pass

    # Re-implement deprecated APIs

    __QGraphicsItem_scale = QtWidgets.QGraphicsItem.scale

    def scale(self, *args):
        if args:
            sx, sy = args
            tr = self.transform()
            tr.scale(sx, sy)
            self.setTransform(tr)
        else:
            return __QGraphicsItem_scale(self)

    QtWidgets.QGraphicsItem.scale = scale

    def rotate(self, angle):
        tr = self.transform()
        tr.rotate(angle)
        self.setTransform(tr)
    QtWidgets.QGraphicsItem.rotate = rotate

    def translate(self, dx, dy):
        tr = self.transform()
        tr.translate(dx, dy)
        self.setTransform(tr)
    QtWidgets.QGraphicsItem.translate = translate

    def setMargin(self, i):
        self.setContentsMargins(i, i, i, i)
    QtWidgets.QGridLayout.setMargin = setMargin

    def setResizeMode(self, *args):
        self.setSectionResizeMode(*args)
    QtWidgets.QHeaderView.setResizeMode = setResizeMode

    
    QtGui.QApplication = QtWidgets.QApplication
    QtGui.QGraphicsScene = QtWidgets.QGraphicsScene
    QtGui.QGraphicsObject = QtWidgets.QGraphicsObject
    QtGui.QGraphicsWidget = QtWidgets.QGraphicsWidget

    QtGui.QApplication.setGraphicsSystem = None
    
    # Import all QtWidgets objects into QtGui
    for o in dir(QtWidgets):
        if o.startswith('Q'):
            setattr(QtGui, o, getattr(QtWidgets,o) )
    
    VERSION_INFO = 'PyQt5 ' + QtCore.PYQT_VERSION_STR + ' Qt ' + QtCore.QT_VERSION_STR

else:
    raise ValueError(""Invalid Qt lib '%s'"" % QT_LIB)

# Common to PyQt4 and 5
if QT_LIB.startswith('PyQt'):
    import sip
    def isQObjectAlive(obj):
        return not sip.isdeleted(obj)
    loadUiType = uic.loadUiType

    QtCore.Signal = QtCore.pyqtSignal
    

    
## Make sure we have Qt >= 4.7
versionReq = [4, 7]
USE_PYSIDE = QT_LIB == PYSIDE
USE_PYQT4 = QT_LIB == PYQT4
USE_PYQT5 = QT_LIB == PYQT5
QtVersion = PySide.QtCore.__version__ if QT_LIB == PYSIDE else QtCore.QT_VERSION_STR
m = re.match(r'(\d+)\.(\d+).*', QtVersion)
if m is not None and list(map(int, m.groups())) < versionReq:
    print(list(map(int, m.groups())))
    raise Exception('pyqtgraph requires Qt version >= %d.%d  (your version is %s)' % (versionReq[0], versionReq[1], QtVersion))
","""""""
This module exists to smooth out some of the differences between PySide and PyQt4:

* Automatically import either PyQt4 or PySide depending on availability
* Allow to import QtCore/QtGui pyqtgraph.Qt without specifying which Qt wrapper
  you want to use.
* Declare QtCore.Signal, .Slot in PyQt4
* Declare loadUiType function for Pyside

""""""

import os, sys, re, time

from .python2_3 import asUnicode

PYSIDE = 'PySide'
PYQT4 = 'PyQt4'
PYQT5 = 'PyQt5'

QT_LIB = os.getenv('PYQTGRAPH_QT_LIB')

## Automatically determine whether to use PyQt or PySide (unless specified by
## environment variable).
## This is done by first checking to see whether one of the libraries
## is already imported. If not, then attempt to import PyQt4, then PySide.
if QT_LIB is None:
    libOrder = [PYQT4, PYSIDE, PYQT5]

    for lib in libOrder:
        if lib in sys.modules:
            QT_LIB = lib
            break

if QT_LIB is None:
    for lib in libOrder:
        try:
            __import__(lib)
            QT_LIB = lib
            break
        except ImportError:
            pass

if QT_LIB is None:
    raise Exception(""PyQtGraph requires one of PyQt4, PyQt5 or PySide; none of these packages could be imported."")

if QT_LIB == PYSIDE:
    from PySide import QtGui, QtCore, QtOpenGL, QtSvg
    try:
        from PySide import QtTest
        if not hasattr(QtTest.QTest, 'qWait'):
            @staticmethod
            def qWait(msec):
                start = time.time()
                QtGui.QApplication.processEvents()
                while time.time() < start + msec * 0.001:
                    QtGui.QApplication.processEvents()
            QtTest.QTest.qWait = qWait
                
    except ImportError:
        pass
    import PySide
    try:
        from PySide import shiboken
        isQObjectAlive = shiboken.isValid
    except ImportError:
        def isQObjectAlive(obj):
            try:
                if hasattr(obj, 'parent'):
                    obj.parent()
                elif hasattr(obj, 'parentItem'):
                    obj.parentItem()
                else:
                    raise Exception(""Cannot determine whether Qt object %s is still alive."" % obj)
            except RuntimeError:
                return False
            else:
                return True
    
    VERSION_INFO = 'PySide ' + PySide.__version__
    
    # Make a loadUiType function like PyQt has
    
    # Credit:
    # http://stackoverflow.com/questions/4442286/python-code-genration-with-pyside-uic/14195313#14195313

    class StringIO(object):
        """"""Alternative to built-in StringIO needed to circumvent unicode/ascii issues""""""
        def __init__(self):
            self.data = []
        
        def write(self, data):
            self.data.append(data)
            
        def getvalue(self):
            return ''.join(map(asUnicode, self.data)).encode('utf8')
        
    def loadUiType(uiFile):
        """"""
        Pyside ""loadUiType"" command like PyQt4 has one, so we have to convert
        the ui file to py code in-memory first and then execute it in a
        special frame to retrieve the form_class.

        from stackoverflow: http://stackoverflow.com/a/14195313/3781327

        seems like this might also be a legitimate solution, but I'm not sure
        how to make PyQt4 and pyside look the same...
            http://stackoverflow.com/a/8717832
        """"""
        import pysideuic
        import xml.etree.ElementTree as xml
        #from io import StringIO
        
        parsed = xml.parse(uiFile)
        widget_class = parsed.find('widget').get('class')
        form_class = parsed.find('class').text
        
        with open(uiFile, 'r') as f:
            o = StringIO()
            frame = {}

            pysideuic.compileUi(f, o, indent=0)
            pyc = compile(o.getvalue(), '<string>', 'exec')
            exec(pyc, frame)

            #Fetch the base_class and form class based on their type in the xml from designer
            form_class = frame['Ui_%s'%form_class]
            base_class = eval('QtGui.%s'%widget_class)

        return form_class, base_class

elif QT_LIB == PYQT4:

    from PyQt4 import QtGui, QtCore, uic
    try:
        from PyQt4 import QtSvg
    except ImportError:
        pass
    try:
        from PyQt4 import QtOpenGL
    except ImportError:
        pass
    try:
        from PyQt4 import QtTest
    except ImportError:
        pass

    VERSION_INFO = 'PyQt4 ' + QtCore.PYQT_VERSION_STR + ' Qt ' + QtCore.QT_VERSION_STR

elif QT_LIB == PYQT5:
    
    # We're using PyQt5 which has a different structure so we're going to use a shim to
    # recreate the Qt4 structure for Qt5
    from PyQt5 import QtGui, QtCore, QtWidgets, uic
    try:
        from PyQt5 import QtSvg
    except ImportError:
        pass
    try:
        from PyQt5 import QtOpenGL
    except ImportError:
        pass
    try:
        from PyQt5 import QtTest
        QtTest.QTest.qWaitForWindowShown = QtTest.QTest.qWaitForWindowExposed
    except ImportError:
        pass

    # Re-implement deprecated APIs

    __QGraphicsItem_scale = QtWidgets.QGraphicsItem.scale

    def scale(self, *args):
        if args:
            sx, sy = args
            tr = self.transform()
            tr.scale(sx, sy)
            self.setTransform(tr)
        else:
            return __QGraphicsItem_scale(self)

    QtWidgets.QGraphicsItem.scale = scale

    def rotate(self, angle):
        tr = self.transform()
        tr.rotate(angle)
        self.setTransform(tr)
    QtWidgets.QGraphicsItem.rotate = rotate

    def translate(self, dx, dy):
        tr = self.transform()
        tr.translate(dx, dy)
        self.setTransform(tr)
    QtWidgets.QGraphicsItem.translate = translate

    def setMargin(self, i):
        self.setContentsMargins(i, i, i, i)
    QtWidgets.QGridLayout.setMargin = setMargin

    def setResizeMode(self, *args):
        self.setSectionResizeMode(*args)
    QtWidgets.QHeaderView.setResizeMode = setResizeMode

    
    QtGui.QApplication = QtWidgets.QApplication
    QtGui.QGraphicsScene = QtWidgets.QGraphicsScene
    QtGui.QGraphicsObject = QtWidgets.QGraphicsObject
    QtGui.QGraphicsWidget = QtWidgets.QGraphicsWidget

    QtGui.QApplication.setGraphicsSystem = None
    
    # Import all QtWidgets objects into QtGui
    for o in dir(QtWidgets):
        if o.startswith('Q'):
            setattr(QtGui, o, getattr(QtWidgets,o) )
    
    VERSION_INFO = 'PyQt5 ' + QtCore.PYQT_VERSION_STR + ' Qt ' + QtCore.QT_VERSION_STR

else:
    raise ValueError(""Invalid Qt lib '%s'"" % QT_LIB)

# Common to PyQt4 and 5
if QT_LIB.startswith('PyQt'):
    import sip
    def isQObjectAlive(obj):
        return not sip.isdeleted(obj)
    loadUiType = uic.loadUiType

    QtCore.Signal = QtCore.pyqtSignal
    

    
## Make sure we have Qt >= 4.7
versionReq = [4, 7]
USE_PYSIDE = QT_LIB == PYSIDE
USE_PYQT4 = QT_LIB == PYQT4
USE_PYQT5 = QT_LIB == PYQT5
QtVersion = PySide.QtCore.__version__ if QT_LIB == PYSIDE else QtCore.QT_VERSION_STR
m = re.match(r'(\d+)\.(\d+).*', QtVersion)
if m is not None and list(map(int, m.groups())) < versionReq:
    print(list(map(int, m.groups())))
    raise Exception('pyqtgraph requires Qt version >= %d.%d  (your version is %s)' % (versionReq[0], versionReq[1], QtVersion))
",TRUE,,4987
4160,InitialSO.csv4160.txt,InitialGit.csv4160.txt,20,"function copyFile(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on(""error"", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on(""error"", function(err) {
    done(err);
  });
  wr.on(""close"", function(ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}
 ","function copyFile(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on(""error"", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on(""error"", function(err) {
    done(err);
  });
  wr.on(""close"", function(ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}
 ",TRUE,"var fs = require('fs');

// Taken from 
// http://stackoverflow.com/a/14387791/837649
function copyFile(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on(""error"", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on(""error"", function(err) {
    done(err);
  });
  wr.on(""close"", function(ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}

module.exports = copyFile;","var fs = require('fs');

// Taken from 
// http://stackoverflow.com/a/14387791/837649
function copyFile(source, target, cb) {
  var cbCalled = false;

  var rd = fs.createReadStream(source);
  rd.on(""error"", function(err) {
    done(err);
  });
  var wr = fs.createWriteStream(target);
  wr.on(""error"", function(err) {
    done(err);
  });
  wr.on(""close"", function(ex) {
    done();
  });
  rd.pipe(wr);

  function done(err) {
    if (!cbCalled) {
      cb(err);
      cbCalled = true;
    }
  }
}

module.exports = copyFile;",TRUE,,4988
4169,InitialSO.csv4169.txt,InitialGit.csv4169.txt,20,"require.cache[moduleName] moduleName delete require.cache[moduleName] require /**
 * Removes a module from the cache
 */
function purgeCache(moduleName) {
    // Traverse the cache looking for the files
    // loaded by the specified module name
    searchCache(moduleName, function (mod) {
        delete require.cache[mod.id];
    });

    // Remove cached paths to the module.
    // Thanks to @bentael for pointing this out.
    Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
        if (cacheKey.indexOf(moduleName)>0) {
            delete module.constructor._pathCache[cacheKey];
        }
    });
};

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 */
function searchCache(moduleName, callback) {
    // Resolve the module identified by the specified name
    var mod = require.resolve(moduleName);

    // Check if the module has been resolved and found within
    // the cache
    if (mod && ((mod = require.cache[mod]) !== undefined)) {
        // Recursively go over the results
        (function traverse(mod) {
            // Go over each of the module's children and
            // traverse them
            mod.children.forEach(function (child) {
                traverse(child);
            });

            // Call the specified callback providing the
            // found cached module
            callback(mod);
        }(mod));
    }
};
 // Load the package
var mypackage = require('./mypackage');

// Purge the package from cache
purgeCache('./mypackage');
 require ","require.cache[moduleName] moduleName delete require.cache[moduleName] require /**
 * Removes a module from the cache
 */
function purgeCache(moduleName) {
    // Traverse the cache looking for the files
    // loaded by the specified module name
    searchCache(moduleName, function (mod) {
        delete require.cache[mod.id];
    });

    // Remove cached paths to the module.
    // Thanks to @bentael for pointing this out.
    Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
        if (cacheKey.indexOf(moduleName)>0) {
            delete module.constructor._pathCache[cacheKey];
        }
    });
};

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 */
function searchCache(moduleName, callback) {
    // Resolve the module identified by the specified name
    var mod = require.resolve(moduleName);

    // Check if the module has been resolved and found within
    // the cache
    if (mod && ((mod = require.cache[mod]) !== undefined)) {
        // Recursively go over the results
        (function traverse(mod) {
            // Go over each of the module's children and
            // traverse them
            mod.children.forEach(function (child) {
                traverse(child);
            });

            // Call the specified callback providing the
            // found cached module
            callback(mod);
        }(mod));
    }
};
 // Load the package
var mypackage = require('./mypackage');

// Purge the package from cache
purgeCache('./mypackage');
 require ",TRUE,"'use strict';

var _ = require('lodash');
var fs = require('fs');
var crypto = require('crypto');
var MongoMock = require('mongomock');

var config = {
  collections: {}
};

function init (env, callback) {

  var configPath = env.storageURI.split('openaps://').pop();
  console.info('>>>openaps config path', configPath);

  function addId (data) {
    var shasum = crypto.createHash('sha1');
    shasum.update(JSON.stringify(data));
    data._id = shasum.digest('hex');
  }

  function loadData (path) {

    if (!path || !_.isString(path)) {
      return [ ];
    }

    try {
      purgeCache(path);
      var inputData = require(path);
      if (_.isArray(inputData)) {
        //console.info('>>>input is an array', path);
        _.forEach(inputData, addId);
      } else if (!_.isEmpty(inputData) && _.isObject(inputData)) {
        //console.info('>>>input is an object', path);
        inputData.created_at = new Date(fs.statSync(path).mtime).toISOString();
        addId(inputData);
        inputData = [ inputData ];
      } else {
        //console.info('>>>input is something else', path, inputData);
        inputData = [ ];
      }

      return inputData;
    } catch (err) {
      console.error('unable to find input data for', path, err);
      return [ ];
    }

  }

  function reportAsCollection (name) {
    var data = { };
    var input = _.get(config, 'collections.' + name + '.input');

    if (_.isArray(input)) {
      //console.info('>>>input is an array', input);
      data[name] = _.flatten(_.map(input, loadData));
    } else {
      data[name] = loadData(input);
    }

    var mock = new MongoMock(data);

    var collection = mock.collection(name);

    var wrapper = {
      findQuery: null
      , sortQuery: null
      , limitCount: null
      , find: function find (query) {
        wrapper.findQuery = query;
        collection.find(query);
        return wrapper;
      }
      , limit: function limit (count) {
        wrapper.limitCount = count;
        return wrapper;
      }
      , sort: function sort (query) {
        wrapper.sortQuery = query;
        return wrapper;
      }
      , toArray: function toArray(callback) {
        collection.toArray(function intercept (err, results) {
          if (err) {
            return callback(err, results);
          }

          if (wrapper.sortQuery) {
            var field = _.keys(wrapper.sortQuery).pop();
            //console.info('>>>sortField', field);
            if (field) {
              results = _.sortBy(results, field);
              if (-1 === wrapper.sortQuery[field]) {
                //console.info('>>>sort reverse');
                results = _.reverse(results);
              }
            }
          }

          if (wrapper.limitCount !== null && _.isNumber(wrapper.limitCount)) {
            //console.info('>>>limit count', wrapper.limitCount);
            results = _.take(results, wrapper.limitCount);
          }

          console.info('>>>toArray', name, wrapper.findQuery, wrapper.sortQuery, wrapper.limitCount, results.length);

          callback(null, results);
        });
        return wrapper;
      }
    };

    return wrapper;

  }

  try {
    var customConfig = require(configPath);

    config = _.merge({}, customConfig, config);

    callback(null, {
      collection: reportAsCollection
      , ensureIndexes: _.noop
    });
  } catch (err) {
    callback(err);
  }
}

/**
 * Removes a module from the cache
 *
 * see http://stackoverflow.com/a/14801711
 */
function purgeCache(moduleName) {
  // Traverse the cache looking for the files
  // loaded by the specified module name
  searchCache(moduleName, function (mod) {
    delete require.cache[mod.id];
  });

  // Remove cached paths to the module.
  // Thanks to @bentael for pointing this out.
  Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
    if (cacheKey.indexOf(moduleName)>0) {
      delete module.constructor._pathCache[cacheKey];
    }
  });
}

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 *
 * see http://stackoverflow.com/a/14801711
 */
function searchCache(moduleName, callback) {
  // Resolve the module identified by the specified name
  var mod = require.resolve(moduleName);

  // Check if the module has been resolved and found within
  // the cache
  if (mod && ((mod = require.cache[mod]) !== undefined)) {
    // Recursively go over the results
    (function traverse(mod) {
      // Go over each of the module's children and
      // traverse them
      mod.children.forEach(function (child) {
        traverse(child);
      });

      // Call the specified callback providing the
      // found cached module
      callback(mod);
    }(mod));
  }
}

module.exports = init;
","'use strict';

var _ = require('lodash');
var fs = require('fs');
var crypto = require('crypto');
var MongoMock = require('mongomock');

var config = {
  collections: {}
};

function init (env, callback) {

  if (!env.storageURI || !_.isString(env.storageURI)) {
    throw new Error('openaps config uri is missing or invalid');
  }

  var configPath = env.storageURI.split('openaps://').pop();

  function addId (data) {
    var shasum = crypto.createHash('sha1');
    shasum.update(JSON.stringify(data));
    data._id = shasum.digest('hex');
  }

  function loadData (path) {

    if (!path || !_.isString(path)) {
      return [ ];
    }

    try {
      purgeCache(path);
      var inputData = require(path);
      if (_.isArray(inputData)) {
        //console.info('>>>input is an array', path);
        _.forEach(inputData, addId);
      } else if (!_.isEmpty(inputData) && _.isObject(inputData)) {
        //console.info('>>>input is an object', path);
        inputData.created_at = new Date(fs.statSync(path).mtime).toISOString();
        addId(inputData);
        inputData = [ inputData ];
      } else {
        //console.info('>>>input is something else', path, inputData);
        inputData = [ ];
      }

      return inputData;
    } catch (err) {
      console.error('unable to find input data for', path, err);
      return [ ];
    }

  }

  function reportAsCollection (name) {
    var data = { };
    var input = _.get(config, 'collections.' + name + '.input');

    if (_.isArray(input)) {
      //console.info('>>>input is an array', input);
      data[name] = _.flatten(_.map(input, loadData));
    } else {
      data[name] = loadData(input);
    }

    var mock = new MongoMock(data);

    var collection = mock.collection(name);

    var wrapper = {
      findQuery: null
      , sortQuery: null
      , limitCount: null
      , find: function find (query) {
        query = _.cloneDeepWith(query, function booleanize (value) {
          //TODO: for some reason we're getting {$exists: NaN} instead of true/false
          if (value && _.isObject(value) && '$exists' in value) {
            return {$exists: true};
          }
        });
        wrapper.findQuery = query;
        return wrapper;
      }
      , limit: function limit (count) {
        wrapper.limitCount = count;
        return wrapper;
      }
      , sort: function sort (query) {
        wrapper.sortQuery = query;
        return wrapper;
      }
      , toArray: function toArray(callback) {
        collection.find(wrapper.findQuery).toArray(function intercept (err, results) {
          if (err) {
            return callback(err, results);
          }

          if (wrapper.sortQuery) {
            var field = _.keys(wrapper.sortQuery).pop();
            //console.info('>>>sortField', field);
            if (field) {
              results = _.sortBy(results, field);
              if (-1 === wrapper.sortQuery[field]) {
                //console.info('>>>sort reverse');
                results = _.reverse(results);
              }
            }
          }

          if (wrapper.limitCount !== null && _.isNumber(wrapper.limitCount)) {
            //console.info('>>>limit count', wrapper.limitCount);
            results = _.take(results, wrapper.limitCount);
          }

          //console.info('>>>toArray', name, wrapper.findQuery, wrapper.sortQuery, wrapper.limitCount, results.length);

          callback(null, results);
        });
        return wrapper;
      }
    };

    return wrapper;

  }

  try {
    var customConfig = require(configPath);

    config = _.merge({}, customConfig, config);

    callback(null, {
      collection: reportAsCollection
      , ensureIndexes: _.noop
    });
  } catch (err) {
    callback(err);
  }
}

/**
 * Removes a module from the cache
 *
 * see http://stackoverflow.com/a/14801711
 */
function purgeCache(moduleName) {
  // Traverse the cache looking for the files
  // loaded by the specified module name
  searchCache(moduleName, function (mod) {
    delete require.cache[mod.id];
  });

  // Remove cached paths to the module.
  // Thanks to @bentael for pointing this out.
  Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
    if (cacheKey.indexOf(moduleName)>0) {
      delete module.constructor._pathCache[cacheKey];
    }
  });
}

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 *
 * see http://stackoverflow.com/a/14801711
 */
function searchCache(moduleName, callback) {
  // Resolve the module identified by the specified name
  var mod = require.resolve(moduleName);

  // Check if the module has been resolved and found within
  // the cache
  if (mod && ((mod = require.cache[mod]) !== undefined)) {
    // Recursively go over the results
    (function traverse(mod) {
      // Go over each of the module's children and
      // traverse them
      mod.children.forEach(function (child) {
        traverse(child);
      });

      // Call the specified callback providing the
      // found cached module
      callback(mod);
    }(mod));
  }
}

module.exports = init;
",FALSE,,5035
4170,InitialSO.csv4170.txt,InitialGit.csv4170.txt,20,"require.cache[moduleName] moduleName delete require.cache[moduleName] require /**
 * Removes a module from the cache
 */
function purgeCache(moduleName) {
    // Traverse the cache looking for the files
    // loaded by the specified module name
    searchCache(moduleName, function (mod) {
        delete require.cache[mod.id];
    });

    // Remove cached paths to the module.
    // Thanks to @bentael for pointing this out.
    Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
        if (cacheKey.indexOf(moduleName)>0) {
            delete module.constructor._pathCache[cacheKey];
        }
    });
};

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 */
function searchCache(moduleName, callback) {
    // Resolve the module identified by the specified name
    var mod = require.resolve(moduleName);

    // Check if the module has been resolved and found within
    // the cache
    if (mod && ((mod = require.cache[mod]) !== undefined)) {
        // Recursively go over the results
        (function traverse(mod) {
            // Go over each of the module's children and
            // traverse them
            mod.children.forEach(function (child) {
                traverse(child);
            });

            // Call the specified callback providing the
            // found cached module
            callback(mod);
        }(mod));
    }
};
 // Load the package
var mypackage = require('./mypackage');

// Purge the package from cache
purgeCache('./mypackage');
 require ","require.cache[moduleName] moduleName delete require.cache[moduleName] require /**
 * Removes a module from the cache
 */
function purgeCache(moduleName) {
    // Traverse the cache looking for the files
    // loaded by the specified module name
    searchCache(moduleName, function (mod) {
        delete require.cache[mod.id];
    });

    // Remove cached paths to the module.
    // Thanks to @bentael for pointing this out.
    Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
        if (cacheKey.indexOf(moduleName)>0) {
            delete module.constructor._pathCache[cacheKey];
        }
    });
};

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 */
function searchCache(moduleName, callback) {
    // Resolve the module identified by the specified name
    var mod = require.resolve(moduleName);

    // Check if the module has been resolved and found within
    // the cache
    if (mod && ((mod = require.cache[mod]) !== undefined)) {
        // Recursively go over the results
        (function traverse(mod) {
            // Go over each of the module's children and
            // traverse them
            mod.children.forEach(function (child) {
                traverse(child);
            });

            // Call the specified callback providing the
            // found cached module
            callback(mod);
        }(mod));
    }
};
 // Load the package
var mypackage = require('./mypackage');

// Purge the package from cache
purgeCache('./mypackage');
 require ",TRUE,"'use strict';

var _ = require('lodash');
var fs = require('fs');
var crypto = require('crypto');
var MongoMock = require('mongomock');

var config = {
  collections: {}
};

function init (env, callback) {

  if (!env.storageURI || !_.isString(env.storageURI)) {
    throw new Error('openaps config uri is missing or invalid');
  }

  var configPath = env.storageURI.split('openaps://').pop();

  function addId (data) {
    var shasum = crypto.createHash('sha1');
    shasum.update(JSON.stringify(data));
    data._id = shasum.digest('hex');
  }

  function loadData (path) {

    if (!path || !_.isString(path)) {
      return [ ];
    }

    try {
      purgeCache(path);
      var inputData = require(path);
      if (_.isArray(inputData)) {
        //console.info('>>>input is an array', path);
        _.forEach(inputData, addId);
      } else if (!_.isEmpty(inputData) && _.isObject(inputData)) {
        //console.info('>>>input is an object', path);
        inputData.created_at = new Date(fs.statSync(path).mtime).toISOString();
        addId(inputData);
        inputData = [ inputData ];
      } else {
        //console.info('>>>input is something else', path, inputData);
        inputData = [ ];
      }

      return inputData;
    } catch (err) {
      console.error('unable to find input data for', path, err);
      return [ ];
    }

  }

  function reportAsCollection (name) {
    var data = { };
    var input = _.get(config, 'collections.' + name + '.input');

    if (_.isArray(input)) {
      //console.info('>>>input is an array', input);
      data[name] = _.flatten(_.map(input, loadData));
    } else {
      data[name] = loadData(input);
    }

    var mock = new MongoMock(data);

    var collection = mock.collection(name);

    var wrapper = {
      findQuery: null
      , sortQuery: null
      , limitCount: null
      , find: function find (query) {
        query = _.cloneDeepWith(query, function booleanize (value) {
          //TODO: for some reason we're getting {$exists: NaN} instead of true/false
          if (value && _.isObject(value) && '$exists' in value) {
            return {$exists: true};
          }
        });
        wrapper.findQuery = query;
        return wrapper;
      }
      , limit: function limit (count) {
        wrapper.limitCount = count;
        return wrapper;
      }
      , sort: function sort (query) {
        wrapper.sortQuery = query;
        return wrapper;
      }
      , toArray: function toArray(callback) {
        collection.find(wrapper.findQuery).toArray(function intercept (err, results) {
          if (err) {
            return callback(err, results);
          }

          if (wrapper.sortQuery) {
            var field = _.keys(wrapper.sortQuery).pop();
            //console.info('>>>sortField', field);
            if (field) {
              results = _.sortBy(results, field);
              if (-1 === wrapper.sortQuery[field]) {
                //console.info('>>>sort reverse');
                results = _.reverse(results);
              }
            }
          }

          if (wrapper.limitCount !== null && _.isNumber(wrapper.limitCount)) {
            //console.info('>>>limit count', wrapper.limitCount);
            results = _.take(results, wrapper.limitCount);
          }

          //console.info('>>>toArray', name, wrapper.findQuery, wrapper.sortQuery, wrapper.limitCount, results.length);

          callback(null, results);
        });
        return wrapper;
      }
    };

    return wrapper;

  }

  try {
    var customConfig = require(configPath);

    config = _.merge({}, customConfig, config);

    callback(null, {
      collection: reportAsCollection
      , ensureIndexes: _.noop
    });
  } catch (err) {
    callback(err);
  }
}

/**
 * Removes a module from the cache
 *
 * see http://stackoverflow.com/a/14801711
 */
function purgeCache(moduleName) {
  // Traverse the cache looking for the files
  // loaded by the specified module name
  searchCache(moduleName, function (mod) {
    delete require.cache[mod.id];
  });

  // Remove cached paths to the module.
  // Thanks to @bentael for pointing this out.
  Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
    if (cacheKey.indexOf(moduleName)>0) {
      delete module.constructor._pathCache[cacheKey];
    }
  });
}

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 *
 * see http://stackoverflow.com/a/14801711
 */
function searchCache(moduleName, callback) {
  // Resolve the module identified by the specified name
  var mod = require.resolve(moduleName);

  // Check if the module has been resolved and found within
  // the cache
  if (mod && ((mod = require.cache[mod]) !== undefined)) {
    // Recursively go over the results
    (function traverse(mod) {
      // Go over each of the module's children and
      // traverse them
      mod.children.forEach(function (child) {
        traverse(child);
      });

      // Call the specified callback providing the
      // found cached module
      callback(mod);
    }(mod));
  }
}

module.exports = init;
","'use strict';

var _ = require('lodash');
var fs = require('fs');
var crypto = require('crypto');
var MongoMock = require('mongomock');

var config = {
  collections: {}
};

function init (env, callback) {

  if (!env.storageURI || !_.isString(env.storageURI)) {
    throw new Error('openaps config uri is missing or invalid');
  }

  var configPath = env.storageURI.split('openaps://').pop();

  function addId (data) {
    var shasum = crypto.createHash('sha1');
    shasum.update(JSON.stringify(data));
    data._id = shasum.digest('hex');
  }

  function loadData (path) {

    if (!path || !_.isString(path)) {
      return [ ];
    }

    try {
      purgeCache(path);
      var inputData = require(path);
      if (_.isArray(inputData)) {
        //console.info('>>>input is an array', path);
        _.forEach(inputData, addId);
      } else if (!_.isEmpty(inputData) && _.isObject(inputData)) {
        //console.info('>>>input is an object', path);
        inputData.created_at = new Date(fs.statSync(path).mtime).toISOString();
        addId(inputData);
        inputData = [ inputData ];
      } else {
        //console.info('>>>input is something else', path, inputData);
        inputData = [ ];
      }

      return inputData;
    } catch (err) {
      console.error('unable to find input data for', path, err);
      return [ ];
    }

  }

  function reportAsCollection (name) {
    var data = { };
    var input = _.get(config, 'collections.' + name + '.input');

    if (_.isArray(input)) {
      //console.info('>>>input is an array', input);
      data[name] = _.flatten(_.map(input, loadData));
    } else {
      data[name] = loadData(input);
    }

    var mock = new MongoMock(data);

    var collection = mock.collection(name);

    var wrapper = {
      findQuery: null
      , sortQuery: null
      , limitCount: null
      , find: function find (query) {
        query = _.cloneDeepWith(query, function booleanize (value) {
          //TODO: for some reason we're getting {$exists: NaN} instead of true/false
          if (value && _.isObject(value) && '$exists' in value) {
            return {$exists: true};
          }
        });
        wrapper.findQuery = query;
        return wrapper;
      }
      , limit: function limit (count) {
        wrapper.limitCount = count;
        return wrapper;
      }
      , sort: function sort (query) {
        wrapper.sortQuery = query;
        return wrapper;
      }
      , toArray: function toArray(callback) {
        collection.find(wrapper.findQuery).toArray(function intercept (err, results) {
          if (err) {
            return callback(err, results);
          }

          if (wrapper.sortQuery) {
            var field = _.keys(wrapper.sortQuery).pop();
            //console.info('>>>sortField', field);
            if (field) {
              results = _.sortBy(results, field);
              if (-1 === wrapper.sortQuery[field]) {
                //console.info('>>>sort reverse');
                results = _.reverse(results);
              }
            }
          }

          if (wrapper.limitCount !== null && _.isNumber(wrapper.limitCount)) {
            //console.info('>>>limit count', wrapper.limitCount);
            results = _.take(results, wrapper.limitCount);
          }

          //console.info('>>>toArray', name, wrapper.findQuery, wrapper.sortQuery, wrapper.limitCount, results.length);

          callback(null, results);
        });
        return wrapper;
      }
    };

    return wrapper;

  }

  try {
    var customConfig = require(configPath);

    config = _.merge({}, customConfig, config);

    callback(null, {
      collection: reportAsCollection
      , ensureIndexes: _.noop
    });
  } catch (err) {
    callback(err);
  }
}

/**
 * Removes a module from the cache
 *
 * see http://stackoverflow.com/a/14801711
 */
function purgeCache(moduleName) {
  // Traverse the cache looking for the files
  // loaded by the specified module name
  searchCache(moduleName, function (mod) {
    delete require.cache[mod.id];
  });

  // Remove cached paths to the module.
  // Thanks to @bentael for pointing this out.
  Object.keys(module.constructor._pathCache).forEach(function(cacheKey) {
    if (cacheKey.indexOf(moduleName)>0) {
      delete module.constructor._pathCache[cacheKey];
    }
  });
}

/**
 * Traverses the cache to search for all the cached
 * files of the specified module name
 *
 * see http://stackoverflow.com/a/14801711
 */
function searchCache(moduleName, callback) {
  // Resolve the module identified by the specified name
  var mod = require.resolve(moduleName);

  // Check if the module has been resolved and found within
  // the cache
  if (mod && ((mod = require.cache[mod]) !== undefined)) {
    // Recursively go over the results
    (function traverse(mod) {
      // Go over each of the module's children and
      // traverse them
      mod.children.forEach(function (child) {
        traverse(child);
      });

      // Call the specified callback providing the
      // found cached module
      callback(mod);
    }(mod));
  }
}

module.exports = init;
",TRUE,,5036
4172,InitialSO.csv4172.txt,InitialGit.csv4172.txt,6,"scrollTop $(""#nav ul li a[href^='#']"").on('click', function(e) {

   // prevent default anchor click behavior
   e.preventDefault();

   // store hash
   var hash = this.hash;

   // animate
   $('html, body').animate({
       scrollTop: $(hash).offset().top
     }, 300, function(){

       // when done, add hash to url
       // (default click behaviour)
       window.location.hash = hash;
     });

});
 ","scrollTop $(""#nav ul li a[href^='#']"").on('click', function(e) {

   // prevent default anchor click behavior
   e.preventDefault();

   // store hash
   var hash = this.hash;

   // animate
   $('html, body').animate({
       scrollTop: $(hash).offset().top
     }, 300, function(){

       // when done, add hash to url
       // (default click behaviour)
       window.location.hash = hash;
     });

});
 ",TRUE,"// Support for smooth scrolling
// (simplified version, taken from http://stackoverflow.com/a/14805098/1173184)
$(window).load(function(){
  $('a[href^=""#""]:not([href^=""#carousel""]):not([data-toggle=""dropdown""])').on('click', function(e) {

     // prevent default anchor click behavior
     e.preventDefault();

     // store hash
     var hash = this.hash;

     // animate
     $('html, body').animate({
         scrollTop: $(this.hash).offset().top
       }, 300, function(){

         // when done, add hash to url
         // (default click behaviour)
         window.location.hash = hash;
       });

  });
});
","// Support for smooth scrolling
// (simplified version, taken from http://stackoverflow.com/a/14805098/1173184)
$(window).load(function(){
  $('a[href^=""#""]:not([href^=""#carousel""]):not([data-toggle=""dropdown""])').on('click', function(e) {

     // prevent default anchor click behavior
     e.preventDefault();

     // store hash
     var hash = this.hash;

     // animate
     $('html, body').animate({
         scrollTop: $(this.hash).offset().top
       }, 300, function(){

         // when done, add hash to url
         // (default click behaviour)
         window.location.hash = hash;
       });

  });
});
",TRUE,,5039
4173,InitialSO.csv4173.txt,InitialGit.csv4173.txt,26,"// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;       
        }           
        else if (this[i] != array[i]) { 
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;   
        }           
    }       
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, ""equals"", {enumerable: false});
 [1, 2, [3, 4]].equals([1, 2, [3, 2]]) === false;
[1, ""2,3""].equals([1, 2, 3]) === false;
[1, 2, [3, 4]].equals([1, 2, [3, 4]]) === true;
[1, 2, 1, 2].equals([1, 2, 1, 2]) === true;
 ({a:1, foo:""bar"", numberOfTheBeast: 666}) == ({a:1, foo:""bar"", numberOfTheBeast: 666})  //false
 Object.prototype.equals = function(object2) {
    //For the first loop, we only check for types
    for (propName in this) {
        //Check for inherited methods and properties - like .equals itself
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
        //Return false if the return value is different
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        //Check instance type
        else if (typeof this[propName] != typeof object2[propName]) {
            //Different types => not equal
            return false;
        }
    }
    //Now a deeper check using other objects property names
    for(propName in object2) {
        //We must check instances anyway, there may be a property that only exists in object2
            //I wonder, if remembering the checked values from the first loop would be faster or not 
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        else if (typeof this[propName] != typeof object2[propName]) {
            return false;
        }
        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)
        if(!this.hasOwnProperty(propName))
          continue;
        
        //Now the detail check and recursion
        
        //This returns the script back to the array comparing
        /**REQUIRES Array.equals**/
        if (this[propName] instanceof Array && object2[propName] instanceof Array) {
                   // recurse into the nested arrays
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {
                   // recurse into another objects
                   //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        //Normal value comparison for strings and numbers
        else if(this[propName] != object2[propName]) {
           return false;
        }
    }
    //If everything passed, let's say YES
    return true;
}  
 Array.equals ...
    // Check if we have nested arrays
    if (this[i] instanceof Array && array[i] instanceof Array) {
        // recurse into the nested arrays
        if (!this[i].equals(array[i]))
            return false;
    }
    /**REQUIRES OBJECT COMPARE**/
    else if (this[i] instanceof Object && array[i] instanceof Object) {
        // recurse into another objects
        //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
        if (!this[i].equals(array[i]))
            return false;
        }
    else if (this[i] != array[i]) {
...
 ","// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;       
        }           
        else if (this[i] != array[i]) { 
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;   
        }           
    }       
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, ""equals"", {enumerable: false});
 [1, 2, [3, 4]].equals([1, 2, [3, 2]]) === false;
[1, ""2,3""].equals([1, 2, 3]) === false;
[1, 2, [3, 4]].equals([1, 2, [3, 4]]) === true;
[1, 2, 1, 2].equals([1, 2, 1, 2]) === true;
 ({a:1, foo:""bar"", numberOfTheBeast: 666}) == ({a:1, foo:""bar"", numberOfTheBeast: 666})  //false
 Object.prototype.equals = function(object2) {
    //For the first loop, we only check for types
    for (propName in this) {
        //Check for inherited methods and properties - like .equals itself
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
        //Return false if the return value is different
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        //Check instance type
        else if (typeof this[propName] != typeof object2[propName]) {
            //Different types => not equal
            return false;
        }
    }
    //Now a deeper check using other objects property names
    for(propName in object2) {
        //We must check instances anyway, there may be a property that only exists in object2
            //I wonder, if remembering the checked values from the first loop would be faster or not 
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        else if (typeof this[propName] != typeof object2[propName]) {
            return false;
        }
        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)
        if(!this.hasOwnProperty(propName))
          continue;
        
        //Now the detail check and recursion
        
        //This returns the script back to the array comparing
        /**REQUIRES Array.equals**/
        if (this[propName] instanceof Array && object2[propName] instanceof Array) {
                   // recurse into the nested arrays
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {
                   // recurse into another objects
                   //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        //Normal value comparison for strings and numbers
        else if(this[propName] != object2[propName]) {
           return false;
        }
    }
    //If everything passed, let's say YES
    return true;
}  
 Array.equals ...
    // Check if we have nested arrays
    if (this[i] instanceof Array && array[i] instanceof Array) {
        // recurse into the nested arrays
        if (!this[i].equals(array[i]))
            return false;
    }
    /**REQUIRES OBJECT COMPARE**/
    else if (this[i] instanceof Object && array[i] instanceof Object) {
        // recurse into another objects
        //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
        if (!this[i].equals(array[i]))
            return false;
        }
    else if (this[i] != array[i]) {
...
 indexOf contains ",FALSE,"String.prototype.insert = function (index, string) {
  if (index > 0)
    return this.substring(0, index) + string + this.substring(index, this.length);
  else
    return string + this;
};

/* String Splitting
 * Supplied Argument:
 * <Nothing>
 * Returned value:
 * Array of characters
-----------------------------------------------*/
String.prototype.toArray = function() {
	return this.split("""");
};

/* Number Padding
 * Supplied Argument:
 * <Optional> Digits (any invalid value / less than 1, forced to 1)
-----------------------------------------------*/
Number.prototype.toDigits = Number.prototype.toArray = function(digits) {
	var ret = this.toString();
	try{
		if(isNaN(this)||!isFinite(this)){throw new Error(""Cannot convert constants to padded array"");}
		if(ret == this.toExponential()){throw new Error(""Cannot convert number in exponential form"");}
		if (!isFinite(digits)) { digits = undefined; }
		digits = Math.max(digits || 1,1);
		// Pad the array until
		ret = (""0"").repeat(Math.max(digits - ret.length,0)) + ret; // O(1) complexity XD
	}catch(e){
		console.error(e);
	}finally{
		return ret;
	}
};

Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|""[^""]*""|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = ""0"" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the ""UTC:"" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == ""[object String]"" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date();
        if (isNaN(date)) throw SyntaxError(""invalid date"");

        mask = String(dF.masks[mask] || mask || dF.masks[""default""]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == ""UTC:"") {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? ""getUTC"" : ""get"",
            d = date[_ + ""Date""](),
            D = date[_ + ""Day""](),
            m = date[_ + ""Month""](),
            y = date[_ + ""FullYear""](),
            H = date[_ + ""Hours""](),
            M = date[_ + ""Minutes""](),
            s = date[_ + ""Seconds""](),
            L = date[_ + ""Milliseconds""](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? ""a""  : ""p"",
                tt:   H < 12 ? ""am"" : ""pm"",
                T:    H < 12 ? ""A""  : ""P"",
                TT:   H < 12 ? ""AM"" : ""PM"",
                Z:    utc ? ""UTC"" : (String(date).match(timezone) || [""""]).pop().replace(timezoneClip, """"),
                o:    (o > 0 ? ""-"" : ""+"") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    [""th"", ""st"", ""nd"", ""rd""][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    ""default"":      ""ddd mmm dd yyyy HH:MM:ss"",
    shortDate:      ""m/d/yy"",
    mediumDate:     ""mmm d, yyyy"",
    longDate:       ""mmmm d, yyyy"",
    fullDate:       ""dddd, mmmm d, yyyy"",
    shortTime:      ""h:MM TT"",
    mediumTime:     ""h:MM:ss TT"",
    longTime:       ""h:MM:ss TT Z"",
    isoDate:        ""yyyy-mm-dd"",
    isoTime:        ""HH:MM:ss"",
    isoDateTime:    ""yyyy-mm-dd'T'HH:MM:ss"",
    isoUtcDateTime: ""UTC:yyyy-mm-dd'T'HH:MM:ss'Z'""
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        ""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"",
        ""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
    ],
    monthNames: [
        ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"",
        ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""
    ]
};

Date.prototype.format = function (mask, utc) {
    return dateFormat(this, mask, utc);
};


/* SECONDS TO HH:MM:SS
-------------------------------*/
String.prototype.toHHMMSS = function () {
	var sec_num = parseInt(this, 10); // don't forget the second param
	var time;
	if(isNaN(sec_num)) {
		time = ""--:--:--"";
	} else {
		var isNeg   = sec_num < 0;
		
		if(isNeg) sec_num = -sec_num;
		
		var hours   = (Math.floor(sec_num / 3600)).toDigits(2);
		var minutes = (Math.floor((sec_num - (hours * 3600)) / 60)).toDigits(2);
		var seconds = (sec_num - (hours * 3600) - (minutes * 60)).toDigits(2);
		
		time    = (isNeg ? ""-"" : """")+hours+':'+minutes+':'+seconds;
	}
	return time;
};

/* SECONDS TO HH:MM:SS, ADDING CURRENT TIME
-------------------------------*/
String.prototype.plusCurrentTime = function() {
    var currentTime = new Date();
    var secondsAfterMidnight = 
        3600 * currentTime.getHours() +
        60   * currentTime.getMinutes() +
               currentTime.getSeconds();

    var secondsRemaining = parseInt(this, 10);
    var timeFinished = (secondsAfterMidnight + secondsRemaining) % 86400;
    return String(timeFinished).toHHMMSS();
};

/* LIMIT ROUNDING
-------------------------------*/
Math.qckInt = function(command,value,rate) {
	if ([""round"",""ceil"",""floor""].indexOf(command) < 0)
		command = null;
	command = command || ""round"";
	value   = value   || 0;
	rate    = rate    || 0;
	var shift = Math.pow(10,rate);
	return Math[command](value * shift) / shift;
};

/* GOOGLE ANALYTICS
-------------------------------*/
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-9789944-12']);
(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = 'https://ssl.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

/* GET DATE IN JP
http://stackoverflow.com/a/10088053/483704
-------------------------------*/
function getJPDate(){
    // create Date object for current location
    d = new Date();
    
    // convert to msec
    // add local time zone offset
    // get UTC time in msec
    utc = d.getTime() + (d.getTimezoneOffset() * 60000);

    // create new Date object for different city
    // using supplied offset
    return new Date(utc + (3600000*9));
}

/*
Comparing arrays
http://stackoverflow.com/a/14853974/483704
*/
// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;       
        }           
        else if (this[i] != array[i]) { 
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;   
        }           
    }       
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, ""equals"", {enumerable: false});
","/*******************************\
|*** Global                     |
\*******************************/
/* GOOGLE ANALYTICS
-------------------------------*/
if (typeof NO_GA == ""undefined"") {
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-9789944-12']);
	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = 'https://ssl.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();
}

/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
	var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|""[^""]*""|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function (val, len) {
			val = String(val);
			len = len || 2;
			while (val.length < len) val = ""0"" + val;
			return val;
		};

	// Regexes and supporting functions are cached through closure
	return function (date, mask, utc) {
		var dF = dateFormat;

		// You can't provide utc if you skip other args (use the ""UTC:"" mask prefix)
		if (arguments.length == 1 && Object.prototype.toString.call(date) == ""[object String]"" && !/\d/.test(date)) {
			mask = date;
			date = undefined;
		}

		// Passing date through Date applies Date.parse, if necessary
		date = date ? new Date(date) : new Date();
		if (isNaN(date)) throw SyntaxError(""invalid date"");

		mask = String(dF.masks[mask] || mask || dF.masks[""default""]);

		// Allow setting the utc argument via the mask
		if (mask.slice(0, 4) == ""UTC:"") {
			mask = mask.slice(4);
			utc = true;
		}

		var _ = utc ? ""getUTC"" : ""get"",
			d = date[_ + ""Date""](),
			D = date[_ + ""Day""](),
			m = date[_ + ""Month""](),
			y = date[_ + ""FullYear""](),
			H = date[_ + ""Hours""](),
			M = date[_ + ""Minutes""](),
			s = date[_ + ""Seconds""](),
			L = date[_ + ""Milliseconds""](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
				d:    d,
				dd:   pad(d),
				ddd:  dF.i18n.dayNames[D],
				dddd: dF.i18n.dayNames[D + 7],
				m:    m + 1,
				mm:   pad(m + 1),
				mmm:  dF.i18n.monthNames[m],
				mmmm: dF.i18n.monthNames[m + 12],
				yy:   String(y).slice(2),
				yyyy: y,
				h:    H % 12 || 12,
				hh:   pad(H % 12 || 12),
				H:    H,
				HH:   pad(H),
				M:    M,
				MM:   pad(M),
				s:    s,
				ss:   pad(s),
				l:    pad(L, 3),
				L:    pad(L > 99 ? Math.round(L / 10) : L),
				t:    H < 12 ? ""a""  : ""p"",
				tt:   H < 12 ? ""am"" : ""pm"",
				T:    H < 12 ? ""A""  : ""P"",
				TT:   H < 12 ? ""AM"" : ""PM"",
				Z:    utc ? ""UTC"" : (String(date).match(timezone) || [""""]).pop().replace(timezoneClip, """"),
				o:    (o > 0 ? ""-"" : ""+"") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
				S:    [""th"", ""st"", ""nd"", ""rd""][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

			return mask.replace(token, function ($0) {
				return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
			});
		};
}();

// Some common format strings
dateFormat.masks = {
	""default"":      ""ddd mmm dd yyyy HH:MM:ss"",
	shortDate:      ""m/d/yy"",
	mediumDate:     ""mmm d, yyyy"",
	longDate:       ""mmmm d, yyyy"",
	fullDate:       ""dddd, mmmm d, yyyy"",
	shortTime:      ""h:MM TT"",
	mediumTime:     ""h:MM:ss TT"",
	longTime:       ""h:MM:ss TT Z"",
	isoDate:        ""yyyy-mm-dd"",
	isoTime:        ""HH:MM:ss"",
	isoDateTime:    ""yyyy-mm-dd'T'HH:MM:ss"",
	isoUtcDateTime: ""UTC:yyyy-mm-dd'T'HH:MM:ss'Z'""
};

// Internationalization strings
dateFormat.i18n = {
	dayNames: [
		""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"",
		""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""
	],
	monthNames: [
		""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"",
		""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""
	]
};

/* GET DATE IN Japan Standard TimeZone
http://stackoverflow.com/a/10088053/483704
-------------------------------*/
Date.getJstDate = function() {
	// create Date object for current location
	d = new Date();
	// convert to msec
	// add local time zone offset
	// get UTC time in msec
	utc = d.getTime() + (d.getTimezoneOffset() * 60000);
	// create new Date object for different city
	// using supplied offset
	return new Date(utc + (3600000*9));
};

/**
 * Convert any String to UTC timestamp.
 * return Date.now() on any exception.
 */
Date.safeToUtcTime = function(date) {
	var ts = new Date(date).getTime();
	return isNaN(ts) ? Date.now() : ts;
};
/**
 * Convert String to UTC timestamp/1000.
 */
Date.toUTCseconds = function(dateStr) {
	return Math.floor(Date.safeToUtcTime(dateStr)/1000);
};

/* BASE */
/*******************************\
|*** Object                     |
\*******************************/
Object.size = function(obj) {
	var size = 0, key;
	for (key in obj) {
		if (obj.hasOwnProperty(key)) size++;
	}
	return size;
};

/* PRIMITIVE */
/*******************************\
|*** String                     |
\*******************************/
/* String Insertion
-----------------------------------------------*/
String.prototype.insert = function (index, string) {
	if (index > 0)
		return this.substring(0, index) + string + this.substring(index, this.length);
	else
		return string + this;
};

/* String Splitting
 * Supplied Argument:
 * <Nothing>
 * Returned value:
 * Array of characters
-----------------------------------------------*/
String.prototype.toArray = function() {
	return this.split("""");
};

/**
 * String.format(""msg {0} is {1}"", args) - convenient placeholders replacing,
 * from http://jqueryvalidation.org/jQuery.validator.format/
 *
 * @return a new string replaced with given expressions like template literals in ES6
 * @param {an Array/String..} args - the real values to be replaced with
 * notes:
 *   - in fact, NO l10n format feature like Date, Currency, Float Number
 *   - placeholders can be commented via {0:commentGoesHere} (no space)
 *   - if first parameter is Array, left params will be ignored
 *   - if param or element in Array is not String, will be auto toString
------------------------------------------------------------ */
String.prototype.format = function(params) {
	var source = this.toString();
	if (arguments.length < 1) {
		return source;
	} else if(!Array.isArray(params)) {
		params = $.makeArray(arguments);
	}
	// A-Z a-z 0-9 _ $ [more unicodes]
	var validCommentChars = ""[_$\\w\\d\\xA0-\\uFFFF]*"";
	$.each(params, function( i, n ) {
		source = source.replace( new RegExp(""\\{"" + i
			+ ""(:"" + validCommentChars + "")?\\}"", ""g""), function() {
			return n;
		});
	});
	return source;
};

/* SECONDS TO HH:MM:SS
-------------------------------*/
String.prototype.toHHMMSS = function () {
	var sec_num = parseInt(this, 10); // don't forget the second param
	var time;
	if(isNaN(sec_num)) {
		time = ""--:--:--"";
	} else {
		var isNeg   = sec_num < 0;

		if(isNeg) sec_num = -sec_num;

		var hours   = (Math.floor(sec_num / 3600)).toDigits(2);
		var minutes = (Math.floor((sec_num - (hours * 3600)) / 60)).toDigits(2);
		var seconds = (sec_num - (hours * 3600) - (minutes * 60)).toDigits(2);

		time    = (isNeg ? ""-"" : """")+hours+':'+minutes+':'+seconds;
	}
	return time;
};

/* SECONDS TO HH:MM:SS, ADDING CURRENT TIME
-------------------------------*/
String.prototype.plusCurrentTime = function() {
	var currentTime = new Date();
	var secondsAfterMidnight =
		3600 * currentTime.getHours() +
		60   * currentTime.getMinutes() +
		       currentTime.getSeconds();

	var secondsRemaining = parseInt(this, 10);
	var timeFinished = (secondsAfterMidnight + secondsRemaining) % 86400;
	return String(timeFinished).toHHMMSS();
};

/* hashing for integrity checks
-----------------------------------*/
String.prototype.hashCode = function() {
  var hash = 0, i, chr, len;
  if (this.length === 0) return hash;
  for (i = 0, len = this.length; i < len; i++) {
    chr   = this.charCodeAt(i);
    hash  = ((hash << 5) - hash) + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
};

/*******************************\
|*** Number                     |
\*******************************/
(function(){
	/* Number Inclusion
	 * Supplied Argument:
	 * -- Pattern 1
	 *   <Optional x2> Boundary  (defaults: -Inf ~ Inf)
	 *   <Optional ~2> Inclusion (defaults: true, true)
	 * -- Pattern 2
	 *   <Optional>    RangeObject
	-----------------------------------------------*/
	Number.prototype.inside = function(bLeft,bRight,iLeft,iRight){
		if(bLeft instanceof Range) { return this.inside.apply(this,bLeft); }
		bLeft  = parseInt(bLeft,10);
		bRight = parseInt(bRight,10);
		iLeft  = typeof iLeft  == 'undefined' ? true : !!iLeft;
		iRight = typeof iRight == 'undefined' ? true : !!iRight;

		bLeft  = isNaN(bLeft)  ? -Infinity : bLeft ;
		bRight = isNaN(bRight) ? +Infinity : bRight;

		if(bLeft > bRight) { return this.inside(bRight,bLeft,iRight,iLeft); }
		return (
			(iLeft  ? this >= bLeft  : this > bLeft ) &&
			(iRight ? this <= bRight : this < bRight)
		);
	};

	/* Number Padding
	 * Supplied Argument:
	 * <Optional> Digits (any invalid value / less than 1, forced to 1)
	-----------------------------------------------*/
	Number.prototype.toDigits = Number.prototype.toArray = function(digits) {
		var ret = this.toString();
		try{
			if(isNaN(this)||!isFinite(this)){throw new Error(""Cannot convert constants to padded array"");}
			if(ret == this.toExponential()){throw new Error(""Cannot convert number in exponential form"");}
			if (!isFinite(digits)) { digits = undefined; }
			digits = Math.max(digits || 1,1);
			// Pad the array until
			ret = (""0"").repeat(Math.max(digits - ret.length,0)) + ret; // O(1) complexity XD
		}catch(e){
			console.error(e);
		}finally{
			return ret;
		}
	};
	/* Number Shortener
	 * shortens the number up to 3 digits
	 * Supplied Argument:
	 * < Nothing >
	-----------------------------------------------*/
	var shorten = {
		expRegex : /([\+\-]?)(.+)e(.)(\d+)/,
		sgnArray : ['-','','+'],
		metPrefx : ['','k','M','G','T','P','E','Z','Y']
	};

	Number.prototype.shorten = function(decimals) {
		var ret = this.toString();
		try{
			if(isNaN(this)||!isFinite(this)){ throw ret; }
			if(Math.abs(this) < 1) {
				console.error(""Cannot shorten any magnitude from negative log10"");
				throw 0;
			} else if (Math.abs(this) < 1000) {
				throw this;
			} else {
				var
					sgof = shorten.expRegex.exec(this.toExponential()),
					sgch = shorten.sgnArray.indexOf(sgof[1]) - 1,
					udfg = sgof[3] == '-';

				if (!isFinite(decimals)) { decimals = undefined; }
				decimals = Math.min(Math.max(decimals || 1,1),3);

				if(ret == this.toExponential()){
					throw [sgch < 0 ? ""Ng"" : ""Ps"",(udfg ? 'Under' : 'Over') + 'flow'].join(' ');
				} else {
					ret = [Math.qckInt('floor',(sgof[1] + sgof[2]) * (1 + (""0"").repeat(sgof[4] % 3)),decimals,false,true),shorten.metPrefx[ parseInt(sgof[4] / 3,10) ]].join('');
				}
			}
		}catch(errval){
			return errval;
		}finally{
			return ret;
		}
	};
}).call(Number);

/* JS NATIVE CLASS */
/*******************************\
|*** Array                      |
\*******************************/
(function(){
	var
		nop  = function(){},
		over = {
			equals: [
				function(){
					console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
				},
				nop
			],
			fill: [
				function(){ delete meth.fill; },
				function(){
					console.warn(""It seems that your chrome doesn't support Array.prototype.fill method."");
				}
			]
		},
		meth = {
			/*
				Comparing arrays
				http://stackoverflow.com/a/14853974/483704
			*/
			equals: {
				value: function (array) {
					// if the other array is a falsy value, return
					if (!array)
						return false;

					// compare lengths - can save a lot of time
					if (this.length != array.length)
						return false;

					for (var i = 0, l=this.length; i < l; i++) {
						// Check if we have nested arrays
						if (this[i] instanceof Array && array[i] instanceof Array) {
							// recurse into the nested arrays
							if (!this[i].equals(array[i]))
								return false;
						} else if (this[i] != array[i]) {
							// Warning - two different object instances will never be equal: {x:20} != {x:20}
							return false;
						}
					}
					return true;
				},
				configurable:true
			},

			/*
				Fill method polyfill
				https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
			*/
			fill:{
				value: function(value) {
					// Steps 1-2.
					if (this === null) {
						throw new TypeError('this is null or not defined');
					}

					var O = Object(this);

					// Steps 3-5.
					var len = O.length >>> 0;

					// Steps 6-7.
					var start = arguments[1];
					var relativeStart = start >> 0;

					// Step 8.
					var k = relativeStart < 0 ?
						Math.max(len + relativeStart, 0) :
						Math.min(relativeStart, len);

					// Steps 9-10.
					var end = arguments[2];
					var relativeEnd = end === undefined ?
						len : end >> 0;

					// Step 11.
					var last = relativeEnd < 0 ?
						Math.max(len + relativeEnd, 0) :
						Math.min(relativeEnd, len);

					// Step 12.
					while (k < last) {
						O[k] = value;
						k++;
					}

					// Step 13.
					return O;
				},
				configurable:true
			},
		};

	Object.keys(over).forEach((function(method){
		over[method][(!this.prototype[method])>>0].call(this);
	}).bind(this));
	/*jshint: validthis true*/
	Object.defineProperties(this.prototype,meth);
}).call(Array);

/** Construct a Number array contains range from N to M */
Array.numbers = function(start, end){
	var n = parseInt(start, 10), m = parseInt(end, 10);
	var i = m - n + 1, a = [];
	while(i-- > 0) a[i] = n + i;
	return a;
};

/*******************************\
|*** Date                       |
\*******************************/
(function(){
	var
		WeekStrings   = dateFormat.i18n.dayNames.reduce(function(ary,val){
			ary[ (val.length != 3)+0 ].push(val);
			return ary;
		},[[],[]]),
		ResetableKeys = ['Milliseconds', 'Seconds','Minutes','Hours','Date','Month'],
		ShiftableKeys = ResetableKeys.concat(['FullYear']);

	function shiftTime(key,step,clear,offset) {
		var self = this;

		if(ShiftableKeys.indexOf(key) < 0) {
			console.log(arguments);
			throw new Error(""Cannot shift invalid time key (""+key+"")"");
		}

		clear  = !!clear;
		step   = parseInt(step,10);
		step   = (!isNaN(step) && isFinite(step)) ? (step+clear) : 1;
		offset = $.extend({},offset);

		var ki = ShiftableKeys.indexOf(key);

		if(clear) {
			this.resetTime(ResetableKeys.filter(function(k,i){return i < ki;}));
		}

		Object.keys(offset).forEach(function(k){
			if(ResetableKeys.indexOf(k) < ki &&
				['number','string'].some(function(desiredType){
					return typeof offset[k] == desiredType;
				})
			) {
				offset[k] = parseInt(offset[k],10);
				if(isNaN(offset[k]) || !isFinite(offset[k]))
					return false;

				self['setUTC'+k](self['getUTC'+k]()+(offset[k]));
			} else {
				delete offset.k;
			}
		});

		this['setUTC'+key](this['getUTC'+key]()+(step));
		return this;
	}

	Object.defineProperties(Date.prototype,{
		format: { value: function format(mask, utc) {
			return dateFormat(this, mask, utc);
		}},
		shiftHour : { get: function () { return shiftTime.bind(this,'Hours'); } },
		shiftDate : { get: function () { return shiftTime.bind(this,'Date' ); } },
		shiftWeek : { get: function () {
			return (function shiftWeek (target,lookType,step,clear,offset) {
				/* Test Object: Monday, 4 January 2016
					shiftWeek('Sun',0,false,null) => Sunday, 3 January 2016
					shiftWeek(0, +1,false,null) => Sunday, 10 January 2016
					shiftWeek('Tuesday',-1,false,null) => Tuesday, 28 December 2015
				*/
				var calibr;
				var args = Array.apply(null,arguments);
				lookType = parseInt(lookType,10);
				lookType = isFinite(lookType) && lookType || 0;

				switch(typeof target){
					case 'number':
						var check = WeekStrings.map(function(array){return array[target];})
							.filter(function(value){return typeof value == 'string';}).pop();
						if(typeof check !== 'undefined') {
							// Correct index detection

						} else {
							// Invalid index detection
							throw new RangeError([""Invalid range ("",String(target),"")""].join(''));
						}
					break;
					case 'undefined':
						// ""Empty"" argument treated as current day
						args[0] = this.getUTCDay();
						return this.shiftWeek.apply(this,args);
					default:
						if(target === null) {
							// Nullity check
							args[0] = undefined;
							return this.shiftWeek.apply(this,args);
						}

						var checkKey = parseInt(target,10);
						if(!isNaN(checkKey)) {
							// Number (on string) detection
							args[0] = checkKey;
							return this.shiftWeek.apply(this,args);
						}

						// Any type detection
						checkKey = WeekStrings.filter(function(array){return array.indexOf(target)>=0;}).pop();
						if(typeof checkKey === 'undefined') {
							// Bad string conversion variable detection
							throw new ReferenceError([""Bad week name reference ("",String(target),"")""].join(''));
						} else {
							target = checkKey.indexOf(target);
						}
					break;
				}

				calibr = (target - this.getDay());
				// Adjust calibrator boundary
				while(calibr >  3 && lookType <= 0) calibr -= 7;
				while(calibr < -3 && lookType >= 0) calibr += 7;
				calibr -= parseInt(calibr / 7,10) * 7 * Math.sign(lookType);

				args.splice(0,2);

				step = parseInt(step,10);
				if(isNaN(step) || !isFinite(step))
					step = 0;

				/*
				  UTCD DATE CALB
					 20   21   -1
					  2    1   +1
					  1   30  -29? => +1
					 31    1  +30? => -1
				*/
				var utcDayCalib = this.getUTCDate() - this.getDate();
				args[0] = 7 * step + calibr - (!!clear + (Math.abs(utcDayCalib) <= 1 ? utcDayCalib : -Math.sign(utcDayCalib)));
				return this.shiftDate.apply(this,args);
			}).bind(this);
		}},
		shiftMonth: { get: function () { return shiftTime.bind(this,'Month'); } },
		shiftYear : { get: function () { return shiftTime.bind(this,'FullYear'); } },
		resetTime : { value: function(clearTable) {
			var
				self = this,
				cFunc = function(){return false;};

			switch(typeof clearTable) {
				case 'number':
				case 'string':
					// Pick nth+1 element from ResetableKeys
					// Invalid >> pick all elements
					clearTable = parseInt(clearTable,10);
					clearTable = ((clearTable >= 0) && !isNaN(clearTable) && isFinite(clearTable) || ResetableKeys.length) && clearTable;

					// Provided String or Number ->
					// Pick nth+1 elements from start
					cFunc = function(x,i){
						return i <= clearTable;
					};
					break;
				default:
					// Pick any matching element from Resetable Array
					// Invalid >> pick all elements
					clearTable = ((typeof clearTable === 'object' && clearTable instanceof Array && clearTable) || ResetableKeys);

					// Provided Anything else
					// Pick any element that match the clearTable data (either value or index)
					// ['Seconds',2,3] => ['Seconds','Hours','Date']
					cFunc = function(key,ind){
						return [key,ind].some(function(val){ return clearTable.indexOf(val) >= 0; });
					};
					break;
			}

			clearTable = ResetableKeys.filter(cFunc);

			clearTable.forEach(function(k){
				self['setUTC' + k](k === 'Date' ? 1 : 0);
			});
			return this;
		}},
	});
})(Date);

/* JS NATIVE MODULE */
/*******************************\
|*** Math                       |
\*******************************/
/* STATISTICS (STANDARD DEVIATION)
 - Sample based deviation (default)
 - Population based deviation
-------------------------------*/
Math.stdev  = function(p1f /*, data*/){
	// obtain a real array for carrying data
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
	var data = Array.prototype.slice.call( arguments );
	if(typeof p1f === 'boolean') {
		data.splice(0,1);
	} else {
		p1f = false;
	}
	// special handling for cases:
	// * Math.stdev( <bool>, <an array object> )
	// * Math.stdev( <an array object> )
	if (data.length > 0 && (data[0] instanceof Array)) {
		if (data.length !== 1)
			throw ""Math.stdev called with unexpected form"";
		data = data[0];
	}
	var args = [].map.call(data,function(val){
		return Number(val);
	});

	if(args.length <= 0)
		return 0;

	var avg;
	avg = args.reduce(function(cAve,nVal,nInd){
		return ((cAve * nInd) + nVal) / (nInd + 1);
	},0);

	return Math.sqrt(args.reduce(function(tDev,nVal,nInd){
		return tDev + Math.pow(nVal - avg,2);
	},0)/(args.length - !p1f));
};

/** LIMIT ROUNDING
 * @param command: do Math.""round""(default) or ""ceil"" or ""floor""
 * @param value: the number to be rounded
 * @param rate: how many decimal digits to be reserved
 * @param rev: if false, moving decimal point ""rate"" place(s) to the right,
 *             then integer will be returned
 * @param magn: if true, negative rounding behaves like positive
 * @return the rounded number
-------------------------------*/
Math.qckInt = function(command,value,rate,rev,magn) {
	if ([""round"",""ceil"",""floor""].indexOf(command) < 0)
		command = null;
	command = command || ""round"";
	value   = value   || 0;
	rate    = rate    || 0;
	rev     = !rev;
	magn    = !!magn;

	var shift = Math.pow(10,rate);
	return (magn ? Math.sign(value) : 1) *
		Math[command]((magn ? Math.abs(value) : value) * shift) / (rev ? shift : 1);
};
/* Rounding towards left side of decimal point */
Math.hrdInt = function(command,value,rate,rev) {
	return Math.qckInt(command,value,-rate,rev);
};

/* CHROME NATIVE CLASS */
/*******************************\
|*** Storage                    |
\*******************************/
/*
	Storage JSON Conversion
	http://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage/2010994
*/
Storage.prototype.setObject = function(key, value) {
	this.setItem(key,JSON.stringify(value));
};

Storage.prototype.getObject = function(key) {
	return JSON.parse(this.getItem(key));
};

/*******************************\
|*** Element                    |
\*******************************/
(function(){
	/*jshint: validthis true*/
	Object.defineProperties(this.prototype,{
		/* ELEMENT OVERFLOW CHECK
		------------------------------------ */
		overflow:{
			get:function(){ return this.overflowHorz || this.overflowVert; },
			configurable: true
		},
		overflowHorz:{
			get:function(){ return this.scrollWidth  > this.clientWidth ; },
			configurable: true
		},
		overflowVert:{
			get:function(){ return this.scrollHeight > this.clientHeight; },
			configurable: true
		},
	});
}).call(Element);

/* USER-DEFINED CLASS */
/*******************************\
|*** Range                      |
\*******************************/
(function(){
	var base = Object.freeze([-Infinity,+Infinity,true,true]);

	function exclusiveClamp(rangeObj){
		if(rangeObj instanceof Range) {
			if(
				Math.abs(rangeObj.end - rangeObj.begin) < Number.EPSILON &&
				rangeObj.exclusive()
			) {
				rangeObj.inFirst = rangeObj.inLast = false;
			}
		} else {
			return false;
		}
	}

	window.Range = function Range(b1,b2,i1,i2){
		/*jshint: validthis true*/
		if(!(this instanceof Range)){ return new Range(b1,b2,i1,i2); } else {
			// Single Range Object
			if((b1 instanceof Range) || (typeof b1 == 'object' && b1.length == 4)){
				i2 = b1[3]; i1 = b1[2];
				b2 = b1[1]; b1 = b1[0];
			// Two Pair of Values
			} else if ([b1,b2].every(function(pair){ return typeof pair == 'object' && pair.length == 2;})) {
				i2 = b2[1]; i1 = b2[0];
				b2 = b1[1]; b1 = b1[0];
			}

			b1 = parseInt(b1,10);
			b2 = parseInt(b2,10);
			i1 = typeof i1 == 'undefined' ? base[2] : !!i1;
			i2 = typeof i2 == 'undefined' ? base[3] : !!i2;

			b1 = isNaN(b1) ? base[0] : b1;
			b2 = isNaN(b2) ? base[1] : b2;

			if(b1 > b2){
			// Swap bad ranges
				var tp;
				tp = b2; b2 = b1; b1 = tp;
				tp = i2; i2 = i1; i1 = tp;
			}

			Object.defineProperties(this,{
				begin  :{get:function(){return b1;},set:function(v){v = parseInt(v,10); b1 = isNaN(v) ? base[0] : v;}},
				end    :{get:function(){return b2;},set:function(v){v = parseInt(v,10); b2 = isNaN(v) ? base[1] : v;}},
				inFirst:{get:function(){return i1;},set:function(v){v = !!v; i1 = v;}},
				inLast :{get:function(){return i2;},set:function(v){v = !!v; i2 = v;}},

				first  :{get:function(){return this.begin;},set:function(v){this.begin=v;exclusiveClamp(this);}},
				last   :{get:function(){return this.end  ;},set:function(v){this.end  =v;exclusiveClamp(this);}},
			});
		}
	};

	Object.defineProperties(Range.prototype,{
		begin    :{get:function(){return base[0];}},
		first    :{get:function(){return base[0];}},

		last     :{get:function(){return base[1];}},
		end      :{get:function(){return base[1];}},

		inFirst  :{get:function(){return !!base[2];}},
		inLast   :{get:function(){return !!base[3];}},

		inside   :{value:function(x){return Number(x).inside(this);}},
		exclusive:{value:function( ){return this.inFirst || this.inLast;}},

		0        :{get:function(){return this.begin;}  ,set:function(v){this.begin=v;}  },
		1        :{get:function(){return this.end;}    ,set:function(v){this.end=v;}    },
		2        :{get:function(){return this.inFirst;},set:function(v){this.inFirst=v;}},
		3        :{get:function(){return this.inLast;} ,set:function(v){this.inLast=v;} },

		toJSON   :{value:function(){ return Array.apply(null,this); }},
		toString :{value:function(){
			return (""%L%B,%E%R"")
				.replace(""%L"",this.inFirst ? '[' : '(').replace(""%R"",this.inLast  ? ']' : ')')
				.replace(""%B"",this.begin).replace(""%E"",this.end);
		}},
		valueOf  :{value:function(){return [this.begin,this.end,this.inFirst,this.inLast];}},
		length   :{value:4}, // for array operation
	});

})();
",FALSE,,5040
4174,InitialSO.csv4174.txt,InitialGit.csv4174.txt,5,"// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;       
        }           
        else if (this[i] != array[i]) { 
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;   
        }           
    }       
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, ""equals"", {enumerable: false});
 [1, 2, [3, 4]].equals([1, 2, [3, 2]]) === false;
[1, ""2,3""].equals([1, 2, 3]) === false;
[1, 2, [3, 4]].equals([1, 2, [3, 4]]) === true;
[1, 2, 1, 2].equals([1, 2, 1, 2]) === true;
 ({a:1, foo:""bar"", numberOfTheBeast: 666}) == ({a:1, foo:""bar"", numberOfTheBeast: 666})  //false
 Object.prototype.equals = function(object2) {
    //For the first loop, we only check for types
    for (propName in this) {
        //Check for inherited methods and properties - like .equals itself
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
        //Return false if the return value is different
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        //Check instance type
        else if (typeof this[propName] != typeof object2[propName]) {
            //Different types => not equal
            return false;
        }
    }
    //Now a deeper check using other objects property names
    for(propName in object2) {
        //We must check instances anyway, there may be a property that only exists in object2
            //I wonder, if remembering the checked values from the first loop would be faster or not 
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        else if (typeof this[propName] != typeof object2[propName]) {
            return false;
        }
        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)
        if(!this.hasOwnProperty(propName))
          continue;
        
        //Now the detail check and recursion
        
        //This returns the script back to the array comparing
        /**REQUIRES Array.equals**/
        if (this[propName] instanceof Array && object2[propName] instanceof Array) {
                   // recurse into the nested arrays
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {
                   // recurse into another objects
                   //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        //Normal value comparison for strings and numbers
        else if(this[propName] != object2[propName]) {
           return false;
        }
    }
    //If everything passed, let's say YES
    return true;
}  
 Array.equals ...
    // Check if we have nested arrays
    if (this[i] instanceof Array && array[i] instanceof Array) {
        // recurse into the nested arrays
        if (!this[i].equals(array[i]))
            return false;
    }
    /**REQUIRES OBJECT COMPARE**/
    else if (this[i] instanceof Object && array[i] instanceof Object) {
        // recurse into another objects
        //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
        if (!this[i].equals(array[i]))
            return false;
        }
    else if (this[i] != array[i]) {
...
 indexOf contains ","// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn(""Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code."");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time 
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;       
        }           
        else if (this[i] != array[i]) { 
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;   
        }           
    }       
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, ""equals"", {enumerable: false});
 [1, 2, [3, 4]].equals([1, 2, [3, 2]]) === false;
[1, ""2,3""].equals([1, 2, 3]) === false;
[1, 2, [3, 4]].equals([1, 2, [3, 4]]) === true;
[1, 2, 1, 2].equals([1, 2, 1, 2]) === true;
 ({a:1, foo:""bar"", numberOfTheBeast: 666}) == ({a:1, foo:""bar"", numberOfTheBeast: 666})  //false
 Object.prototype.equals = function(object2) {
    //For the first loop, we only check for types
    for (propName in this) {
        //Check for inherited methods and properties - like .equals itself
        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
        //Return false if the return value is different
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        //Check instance type
        else if (typeof this[propName] != typeof object2[propName]) {
            //Different types => not equal
            return false;
        }
    }
    //Now a deeper check using other objects property names
    for(propName in object2) {
        //We must check instances anyway, there may be a property that only exists in object2
            //I wonder, if remembering the checked values from the first loop would be faster or not 
        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {
            return false;
        }
        else if (typeof this[propName] != typeof object2[propName]) {
            return false;
        }
        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)
        if(!this.hasOwnProperty(propName))
          continue;
        
        //Now the detail check and recursion
        
        //This returns the script back to the array comparing
        /**REQUIRES Array.equals**/
        if (this[propName] instanceof Array && object2[propName] instanceof Array) {
                   // recurse into the nested arrays
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        else if (this[propName] instanceof Object && object2[propName] instanceof Object) {
                   // recurse into another objects
                   //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
           if (!this[propName].equals(object2[propName]))
                        return false;
        }
        //Normal value comparison for strings and numbers
        else if(this[propName] != object2[propName]) {
           return false;
        }
    }
    //If everything passed, let's say YES
    return true;
}  
 Array.equals ...
    // Check if we have nested arrays
    if (this[i] instanceof Array && array[i] instanceof Array) {
        // recurse into the nested arrays
        if (!this[i].equals(array[i]))
            return false;
    }
    /**REQUIRES OBJECT COMPARE**/
    else if (this[i] instanceof Object && array[i] instanceof Object) {
        // recurse into another objects
        //console.log(""Recursing to compare "", this[propName],""with"",object2[propName], "" both named \""""+propName+""\"""");
        if (!this[i].equals(array[i]))
            return false;
        }
    else if (this[i] != array[i]) {
...
 indexOf contains ",TRUE,"/* global window: false */
/* global document: false */
'use strict';

var color = require('chartjs-color');

module.exports = function(Chart) {
	// Global Chart helpers object for utility methods and classes
	var helpers = Chart.helpers = {};

	// -- Basic js utility methods
	helpers.each = function(loopable, callback, self, reverse) {
		// Check to see if null or undefined firstly.
		var i, len;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					callback.call(self, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[i], i);
				}
			}
		} else if (typeof loopable === 'object') {
			var keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				callback.call(self, loopable[keys[i]], keys[i]);
			}
		}
	};
	helpers.clone = function(obj) {
		var objClone = {};
		helpers.each(obj, function(value, key) {
			if (helpers.isArray(value)) {
				objClone[key] = value.slice(0);
			} else if (typeof value === 'object' && value !== null) {
				objClone[key] = helpers.clone(value);
			} else {
				objClone[key] = value;
			}
		});
		return objClone;
	};
	helpers.extend = function(base) {
		var setFn = function(value, key) {
			base[key] = value;
		};
		for (var i = 1, ilen = arguments.length; i < ilen; i++) {
			helpers.each(arguments[i], setFn);
		}
		return base;
	};
	// Need a special merge function to chart configs since they are now grouped
	helpers.configMerge = function(_base) {
		var base = helpers.clone(_base);
		helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
			helpers.each(extension, function(value, key) {
				var baseHasProperty = base.hasOwnProperty(key);
				var baseVal = baseHasProperty ? base[key] : {};

				if (key === 'scales') {
					// Scale config merging is complex. Add our own function here for that
					base[key] = helpers.scaleMerge(baseVal, value);
				} else if (key === 'scale') {
					// Used in polar area & radar charts since there is only one scale
					base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
				} else if (baseHasProperty
						&& typeof baseVal === 'object'
						&& !helpers.isArray(baseVal)
						&& baseVal !== null
						&& typeof value === 'object'
						&& !helpers.isArray(value)) {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(baseVal, value);
				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			});
		});

		return base;
	};
	helpers.scaleMerge = function(_base, extension) {
		var base = helpers.clone(_base);

		helpers.each(extension, function(value, key) {
			if (key === 'xAxes' || key === 'yAxes') {
				// These properties are arrays of items
				if (base.hasOwnProperty(key)) {
					helpers.each(value, function(valueObj, index) {
						var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
						var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
						if (index >= base[key].length || !base[key][index].type) {
							base[key].push(helpers.configMerge(axisDefaults, valueObj));
						} else if (valueObj.type && valueObj.type !== base[key][index].type) {
							// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
							base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
						} else {
							// Type is the same
							base[key][index] = helpers.configMerge(base[key][index], valueObj);
						}
					});
				} else {
					base[key] = [];
					helpers.each(value, function(valueObj) {
						var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
						base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
					});
				}
			} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
				// If we are overwriting an object with an object, do a merge of the properties.
				base[key] = helpers.configMerge(base[key], value);

			} else {
				// can just overwrite the value in this case
				base[key] = value;
			}
		});

		return base;
	};
	helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
		if (value === undefined || value === null) {
			return defaultValue;
		}

		if (helpers.isArray(value)) {
			return index < value.length ? value[index] : defaultValue;
		}

		return value;
	};
	helpers.getValueOrDefault = function(value, defaultValue) {
		return value === undefined ? defaultValue : value;
	};
	helpers.indexOf = Array.prototype.indexOf?
		function(array, item) {
			return array.indexOf(item);
		}:
		function(array, item) {
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (array[i] === item) {
					return i;
				}
			}
			return -1;
		};
	helpers.where = function(collection, filterCallback) {
		if (helpers.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers.findIndex = Array.prototype.findIndex?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.inherits = function(extensions) {
		// Basic javascript inheritance based on the model created in Backbone.js
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};
		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();

		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;

		return ChartElement;
	};
	helpers.noop = function() {};
	helpers.uid = (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}());
	// -- Math methods
	helpers.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
	};
	helpers.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers.sign = Math.sign?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers.log10 = Math.log10?
		function(x) {
			return Math.log10(x);
		} :
		function(x) {
			return Math.log(x) / Math.LN10;
		};
	helpers.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};
	// Gets the angle from vertical upright to the point about a centre.
	helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x,
			distanceFromYCenter = anglePoint.y - centrePoint.y,
			radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};
	helpers.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};
	helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect ""skipped"" points

		var previous = firstPoint.skip ? middlePoint : firstPoint,
			current = middlePoint,
			next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers.EPSILON = Number.EPSILON || 1e-14;
	helpers.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers.niceNum = function(range, round) {
		var exponent = Math.floor(helpers.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Easing functions adapted from Robert Penner's easing equations
	// http://www.robertpenner.com/easing/
	var easingEffects = helpers.easingEffects = {
		linear: function(t) {
			return t;
		},
		easeInQuad: function(t) {
			return t * t;
		},
		easeOutQuad: function(t) {
			return -1 * t * (t - 2);
		},
		easeInOutQuad: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t;
			}
			return -1 / 2 * ((--t) * (t - 2) - 1);
		},
		easeInCubic: function(t) {
			return t * t * t;
		},
		easeOutCubic: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t + 1);
		},
		easeInOutCubic: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t + 2);
		},
		easeInQuart: function(t) {
			return t * t * t * t;
		},
		easeOutQuart: function(t) {
			return -1 * ((t = t / 1 - 1) * t * t * t - 1);
		},
		easeInOutQuart: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t;
			}
			return -1 / 2 * ((t -= 2) * t * t * t - 2);
		},
		easeInQuint: function(t) {
			return 1 * (t /= 1) * t * t * t * t;
		},
		easeOutQuint: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
		},
		easeInOutQuint: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
		},
		easeInSine: function(t) {
			return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
		},
		easeOutSine: function(t) {
			return 1 * Math.sin(t / 1 * (Math.PI / 2));
		},
		easeInOutSine: function(t) {
			return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
		},
		easeInExpo: function(t) {
			return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
		},
		easeOutExpo: function(t) {
			return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
		},
		easeInOutExpo: function(t) {
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * Math.pow(2, 10 * (t - 1));
			}
			return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
		},
		easeInCirc: function(t) {
			if (t >= 1) {
				return t;
			}
			return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
		},
		easeOutCirc: function(t) {
			return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
		},
		easeInOutCirc: function(t) {
			if ((t /= 1 / 2) < 1) {
				return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
			}
			return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
		},
		easeInElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
		},
		easeOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
		},
		easeInOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1 / 2) === 2) {
				return 1;
			}
			if (!p) {
				p = 1 * (0.3 * 1.5);
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			if (t < 1) {
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			}
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
		},
		easeInBack: function(t) {
			var s = 1.70158;
			return 1 * (t /= 1) * t * ((s + 1) * t - s);
		},
		easeOutBack: function(t) {
			var s = 1.70158;
			return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
		},
		easeInOutBack: function(t) {
			var s = 1.70158;
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
			}
			return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
		},
		easeInBounce: function(t) {
			return 1 - easingEffects.easeOutBounce(1 - t);
		},
		easeOutBounce: function(t) {
			if ((t /= 1) < (1 / 2.75)) {
				return 1 * (7.5625 * t * t);
			} else if (t < (2 / 2.75)) {
				return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
			} else if (t < (2.5 / 2.75)) {
				return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
			}
			return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
		},
		easeInOutBounce: function(t) {
			if (t < 1 / 2) {
				return easingEffects.easeInBounce(t * 2) * 0.5;
			}
			return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
		}
	};
	// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers.requestAnimFrame = (function() {
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt,
			canvas = evt.currentTarget || evt.srcElement,
			boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};
	helpers.addEvent = function(node, eventType, method) {
		if (node.addEventListener) {
			node.addEventListener(eventType, method);
		} else if (node.attachEvent) {
			node.attachEvent('on' + eventType, method);
		} else {
			node['on' + eventType] = method;
		}
	};
	helpers.removeEvent = function(node, eventType, handler) {
		if (node.removeEventListener) {
			node.removeEventListener(eventType, handler, false);
		} else if (node.detachEvent) {
			node.detachEvent('on' + eventType, handler);
		} else {
			node['on' + eventType] = helpers.noop;
		}
	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof(styleValue) === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	// Private helper to get a constraint dimension
	// @param domNode : the node to check the constraint on
	// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
	// @param percentageProperty : property of parent to use when calculating width as a percentage
	// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = domNode.parentNode;
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	helpers.getMaximumWidth = function(domNode) {
		var container = domNode.parentNode;
		var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
		var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
		var w = container.clientWidth - paddingLeft - paddingRight;
		var cw = helpers.getConstraintWidth(domNode);
		return isNaN(cw)? w : Math.min(w, cw);
	};
	helpers.getMaximumHeight = function(domNode) {
		var container = domNode.parentNode;
		var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
		var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
		var h = container.clientHeight - paddingTop - paddingBottom;
		var ch = helpers.getConstraintHeight(domNode);
		return isNaN(ch)? h : Math.min(h, ch);
	};
	helpers.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers.retinaScale = function(chart) {
		var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the ""correct"" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		canvas.style.height = height + 'px';
		canvas.style.width = width + 'px';
	};
	// -- Canvas methods
	helpers.clear = function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	};
	helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		helpers.each(arrayOfThings, function(thing) {
			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
				longest = helpers.measureText(ctx, data, gc, longest, thing);
			} else if (helpers.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				helpers.each(thing, function(nestedThing) {
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
						longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
					}
				});
			}
		});

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (var i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};
	helpers.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers.each(arrayOfThings, function(thing) {
			if (helpers.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};
	helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();
	};
	helpers.color = function(c) {
		if (!color) {
			console.error('Color.js not found!');
			return c;
		}

		/* global CanvasGradient */
		if (c instanceof CanvasGradient) {
			return color(Chart.defaults.global.defaultColor);
		}

		return color(c);
	};
	helpers.isArray = Array.isArray?
		function(obj) {
			return Array.isArray(obj);
		} :
		function(obj) {
			return Object.prototype.toString.call(obj) === '[object Array]';
		};
	// ! @see http://stackoverflow.com/a/14853974
	helpers.arrayEquals = function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen=a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	};
	helpers.callCallback = function(fn, args, _tArg) {
		if (fn && typeof fn.call === 'function') {
			fn.apply(_tArg, args);
		}
	};
	helpers.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern) ?
			colorValue :
			helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};
","/* global window: false */
/* global document: false */
'use strict';

var color = require('chartjs-color');

module.exports = function(Chart) {
	// Global Chart helpers object for utility methods and classes
	var helpers = Chart.helpers = {};

	// -- Basic js utility methods
	helpers.each = function(loopable, callback, self, reverse) {
		// Check to see if null or undefined firstly.
		var i, len;
		if (helpers.isArray(loopable)) {
			len = loopable.length;
			if (reverse) {
				for (i = len - 1; i >= 0; i--) {
					callback.call(self, loopable[i], i);
				}
			} else {
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[i], i);
				}
			}
		} else if (typeof loopable === 'object') {
			var keys = Object.keys(loopable);
			len = keys.length;
			for (i = 0; i < len; i++) {
				callback.call(self, loopable[keys[i]], keys[i]);
			}
		}
	};
	helpers.clone = function(obj) {
		var objClone = {};
		helpers.each(obj, function(value, key) {
			if (helpers.isArray(value)) {
				objClone[key] = value.slice(0);
			} else if (typeof value === 'object' && value !== null) {
				objClone[key] = helpers.clone(value);
			} else {
				objClone[key] = value;
			}
		});
		return objClone;
	};
	helpers.extend = function(base) {
		var setFn = function(value, key) {
			base[key] = value;
		};
		for (var i = 1, ilen = arguments.length; i < ilen; i++) {
			helpers.each(arguments[i], setFn);
		}
		return base;
	};
	// Need a special merge function to chart configs since they are now grouped
	helpers.configMerge = function(_base) {
		var base = helpers.clone(_base);
		helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
			helpers.each(extension, function(value, key) {
				var baseHasProperty = base.hasOwnProperty(key);
				var baseVal = baseHasProperty ? base[key] : {};

				if (key === 'scales') {
					// Scale config merging is complex. Add our own function here for that
					base[key] = helpers.scaleMerge(baseVal, value);
				} else if (key === 'scale') {
					// Used in polar area & radar charts since there is only one scale
					base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
				} else if (baseHasProperty
						&& typeof baseVal === 'object'
						&& !helpers.isArray(baseVal)
						&& baseVal !== null
						&& typeof value === 'object'
						&& !helpers.isArray(value)) {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(baseVal, value);
				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			});
		});

		return base;
	};
	helpers.scaleMerge = function(_base, extension) {
		var base = helpers.clone(_base);

		helpers.each(extension, function(value, key) {
			if (key === 'xAxes' || key === 'yAxes') {
				// These properties are arrays of items
				if (base.hasOwnProperty(key)) {
					helpers.each(value, function(valueObj, index) {
						var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
						var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
						if (index >= base[key].length || !base[key][index].type) {
							base[key].push(helpers.configMerge(axisDefaults, valueObj));
						} else if (valueObj.type && valueObj.type !== base[key][index].type) {
							// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
							base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
						} else {
							// Type is the same
							base[key][index] = helpers.configMerge(base[key][index], valueObj);
						}
					});
				} else {
					base[key] = [];
					helpers.each(value, function(valueObj) {
						var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
						base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
					});
				}
			} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
				// If we are overwriting an object with an object, do a merge of the properties.
				base[key] = helpers.configMerge(base[key], value);

			} else {
				// can just overwrite the value in this case
				base[key] = value;
			}
		});

		return base;
	};
	helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
		if (value === undefined || value === null) {
			return defaultValue;
		}

		if (helpers.isArray(value)) {
			return index < value.length ? value[index] : defaultValue;
		}

		return value;
	};
	helpers.getValueOrDefault = function(value, defaultValue) {
		return value === undefined ? defaultValue : value;
	};
	helpers.indexOf = Array.prototype.indexOf?
		function(array, item) {
			return array.indexOf(item);
		}:
		function(array, item) {
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (array[i] === item) {
					return i;
				}
			}
			return -1;
		};
	helpers.where = function(collection, filterCallback) {
		if (helpers.isArray(collection) && Array.prototype.filter) {
			return collection.filter(filterCallback);
		}
		var filtered = [];

		helpers.each(collection, function(item) {
			if (filterCallback(item)) {
				filtered.push(item);
			}
		});

		return filtered;
	};
	helpers.findIndex = Array.prototype.findIndex?
		function(array, callback, scope) {
			return array.findIndex(callback, scope);
		} :
		function(array, callback, scope) {
			scope = scope === undefined? array : scope;
			for (var i = 0, ilen = array.length; i < ilen; ++i) {
				if (callback.call(scope, array[i], i, array)) {
					return i;
				}
			}
			return -1;
		};
	helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to start of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = -1;
		}
		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
		// Default to end of the array
		if (startIndex === undefined || startIndex === null) {
			startIndex = arrayToSearch.length;
		}
		for (var i = startIndex - 1; i >= 0; i--) {
			var currentItem = arrayToSearch[i];
			if (filterCallback(currentItem)) {
				return currentItem;
			}
		}
	};
	helpers.inherits = function(extensions) {
		// Basic javascript inheritance based on the model created in Backbone.js
		var me = this;
		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
			return me.apply(this, arguments);
		};

		var Surrogate = function() {
			this.constructor = ChartElement;
		};
		Surrogate.prototype = me.prototype;
		ChartElement.prototype = new Surrogate();

		ChartElement.extend = helpers.inherits;

		if (extensions) {
			helpers.extend(ChartElement.prototype, extensions);
		}

		ChartElement.__super__ = me.prototype;

		return ChartElement;
	};
	helpers.noop = function() {};
	helpers.uid = (function() {
		var id = 0;
		return function() {
			return id++;
		};
	}());
	// -- Math methods
	helpers.isNumber = function(n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};
	helpers.almostEquals = function(x, y, epsilon) {
		return Math.abs(x - y) < epsilon;
	};
	helpers.almostWhole = function(x, epsilon) {
		var rounded = Math.round(x);
		return (((rounded - epsilon) < x) && ((rounded + epsilon) > x));
	};
	helpers.max = function(array) {
		return array.reduce(function(max, value) {
			if (!isNaN(value)) {
				return Math.max(max, value);
			}
			return max;
		}, Number.NEGATIVE_INFINITY);
	};
	helpers.min = function(array) {
		return array.reduce(function(min, value) {
			if (!isNaN(value)) {
				return Math.min(min, value);
			}
			return min;
		}, Number.POSITIVE_INFINITY);
	};
	helpers.sign = Math.sign?
		function(x) {
			return Math.sign(x);
		} :
		function(x) {
			x = +x; // convert to a number
			if (x === 0 || isNaN(x)) {
				return x;
			}
			return x > 0 ? 1 : -1;
		};
	helpers.log10 = Math.log10?
		function(x) {
			return Math.log10(x);
		} :
		function(x) {
			return Math.log(x) / Math.LN10;
		};
	helpers.toRadians = function(degrees) {
		return degrees * (Math.PI / 180);
	};
	helpers.toDegrees = function(radians) {
		return radians * (180 / Math.PI);
	};
	// Gets the angle from vertical upright to the point about a centre.
	helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
		var distanceFromXCenter = anglePoint.x - centrePoint.x,
			distanceFromYCenter = anglePoint.y - centrePoint.y,
			radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

		if (angle < (-0.5 * Math.PI)) {
			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
		}

		return {
			angle: angle,
			distance: radialDistanceFromCenter
		};
	};
	helpers.distanceBetweenPoints = function(pt1, pt2) {
		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
	};
	helpers.aliasPixel = function(pixelWidth) {
		return (pixelWidth % 2 === 0) ? 0 : 0.5;
	};
	helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
		// Props to Rob Spencer at scaled innovation for his post on splining between points
		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

		// This function must also respect ""skipped"" points

		var previous = firstPoint.skip ? middlePoint : firstPoint,
			current = middlePoint,
			next = afterPoint.skip ? middlePoint : afterPoint;

		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

		var s01 = d01 / (d01 + d12);
		var s12 = d12 / (d01 + d12);

		// If all points are the same, s01 & s02 will be inf
		s01 = isNaN(s01) ? 0 : s01;
		s12 = isNaN(s12) ? 0 : s12;

		var fa = t * s01; // scaling factor for triangle Ta
		var fb = t * s12;

		return {
			previous: {
				x: current.x - fa * (next.x - previous.x),
				y: current.y - fa * (next.y - previous.y)
			},
			next: {
				x: current.x + fb * (next.x - previous.x),
				y: current.y + fb * (next.y - previous.y)
			}
		};
	};
	helpers.EPSILON = Number.EPSILON || 1e-14;
	helpers.splineCurveMonotone = function(points) {
		// This function calculates Bézier control points in a similar way than |splineCurve|,
		// but preserves monotonicity of the provided data and ensures no local extremums are added
		// between the dataset discrete points due to the interpolation.
		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

		var pointsWithTangents = (points || []).map(function(point) {
			return {
				model: point._model,
				deltaK: 0,
				mK: 0
			};
		});

		// Calculate slopes (deltaK) and initialize tangents (mK)
		var pointsLen = pointsWithTangents.length;
		var i, pointBefore, pointCurrent, pointAfter;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointAfter && !pointAfter.model.skip) {
				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
			}

			if (!pointBefore || pointBefore.model.skip) {
				pointCurrent.mK = pointCurrent.deltaK;
			} else if (!pointAfter || pointAfter.model.skip) {
				pointCurrent.mK = pointBefore.deltaK;
			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
				pointCurrent.mK = 0;
			} else {
				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
			}
		}

		// Adjust tangents to ensure monotonic properties
		var alphaK, betaK, tauK, squaredMagnitude;
		for (i = 0; i < pointsLen - 1; ++i) {
			pointCurrent = pointsWithTangents[i];
			pointAfter = pointsWithTangents[i + 1];
			if (pointCurrent.model.skip || pointAfter.model.skip) {
				continue;
			}

			if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
				pointCurrent.mK = pointAfter.mK = 0;
				continue;
			}

			alphaK = pointCurrent.mK / pointCurrent.deltaK;
			betaK = pointAfter.mK / pointCurrent.deltaK;
			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
			if (squaredMagnitude <= 9) {
				continue;
			}

			tauK = 3 / Math.sqrt(squaredMagnitude);
			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
		}

		// Compute control points
		var deltaX;
		for (i = 0; i < pointsLen; ++i) {
			pointCurrent = pointsWithTangents[i];
			if (pointCurrent.model.skip) {
				continue;
			}

			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
			if (pointBefore && !pointBefore.model.skip) {
				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
			}
			if (pointAfter && !pointAfter.model.skip) {
				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
			}
		}
	};
	helpers.nextItem = function(collection, index, loop) {
		if (loop) {
			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
		}
		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
	};
	helpers.previousItem = function(collection, index, loop) {
		if (loop) {
			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
		}
		return index <= 0 ? collection[0] : collection[index - 1];
	};
	// Implementation of the nice number algorithm used in determining where axis labels will go
	helpers.niceNum = function(range, round) {
		var exponent = Math.floor(helpers.log10(range));
		var fraction = range / Math.pow(10, exponent);
		var niceFraction;

		if (round) {
			if (fraction < 1.5) {
				niceFraction = 1;
			} else if (fraction < 3) {
				niceFraction = 2;
			} else if (fraction < 7) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}
		} else if (fraction <= 1.0) {
			niceFraction = 1;
		} else if (fraction <= 2) {
			niceFraction = 2;
		} else if (fraction <= 5) {
			niceFraction = 5;
		} else {
			niceFraction = 10;
		}

		return niceFraction * Math.pow(10, exponent);
	};
	// Easing functions adapted from Robert Penner's easing equations
	// http://www.robertpenner.com/easing/
	var easingEffects = helpers.easingEffects = {
		linear: function(t) {
			return t;
		},
		easeInQuad: function(t) {
			return t * t;
		},
		easeOutQuad: function(t) {
			return -1 * t * (t - 2);
		},
		easeInOutQuad: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t;
			}
			return -1 / 2 * ((--t) * (t - 2) - 1);
		},
		easeInCubic: function(t) {
			return t * t * t;
		},
		easeOutCubic: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t + 1);
		},
		easeInOutCubic: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t + 2);
		},
		easeInQuart: function(t) {
			return t * t * t * t;
		},
		easeOutQuart: function(t) {
			return -1 * ((t = t / 1 - 1) * t * t * t - 1);
		},
		easeInOutQuart: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t;
			}
			return -1 / 2 * ((t -= 2) * t * t * t - 2);
		},
		easeInQuint: function(t) {
			return 1 * (t /= 1) * t * t * t * t;
		},
		easeOutQuint: function(t) {
			return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
		},
		easeInOutQuint: function(t) {
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * t * t * t * t * t;
			}
			return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
		},
		easeInSine: function(t) {
			return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
		},
		easeOutSine: function(t) {
			return 1 * Math.sin(t / 1 * (Math.PI / 2));
		},
		easeInOutSine: function(t) {
			return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
		},
		easeInExpo: function(t) {
			return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
		},
		easeOutExpo: function(t) {
			return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
		},
		easeInOutExpo: function(t) {
			if (t === 0) {
				return 0;
			}
			if (t === 1) {
				return 1;
			}
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * Math.pow(2, 10 * (t - 1));
			}
			return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
		},
		easeInCirc: function(t) {
			if (t >= 1) {
				return t;
			}
			return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
		},
		easeOutCirc: function(t) {
			return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
		},
		easeInOutCirc: function(t) {
			if ((t /= 1 / 2) < 1) {
				return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
			}
			return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
		},
		easeInElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
		},
		easeOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1) === 1) {
				return 1;
			}
			if (!p) {
				p = 1 * 0.3;
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
		},
		easeInOutElastic: function(t) {
			var s = 1.70158;
			var p = 0;
			var a = 1;
			if (t === 0) {
				return 0;
			}
			if ((t /= 1 / 2) === 2) {
				return 1;
			}
			if (!p) {
				p = 1 * (0.3 * 1.5);
			}
			if (a < Math.abs(1)) {
				a = 1;
				s = p / 4;
			} else {
				s = p / (2 * Math.PI) * Math.asin(1 / a);
			}
			if (t < 1) {
				return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			}
			return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
		},
		easeInBack: function(t) {
			var s = 1.70158;
			return 1 * (t /= 1) * t * ((s + 1) * t - s);
		},
		easeOutBack: function(t) {
			var s = 1.70158;
			return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
		},
		easeInOutBack: function(t) {
			var s = 1.70158;
			if ((t /= 1 / 2) < 1) {
				return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
			}
			return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
		},
		easeInBounce: function(t) {
			return 1 - easingEffects.easeOutBounce(1 - t);
		},
		easeOutBounce: function(t) {
			if ((t /= 1) < (1 / 2.75)) {
				return 1 * (7.5625 * t * t);
			} else if (t < (2 / 2.75)) {
				return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
			} else if (t < (2.5 / 2.75)) {
				return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
			}
			return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
		},
		easeInOutBounce: function(t) {
			if (t < 1 / 2) {
				return easingEffects.easeInBounce(t * 2) * 0.5;
			}
			return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
		}
	};
	// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	helpers.requestAnimFrame = (function() {
		return window.requestAnimationFrame ||
			window.webkitRequestAnimationFrame ||
			window.mozRequestAnimationFrame ||
			window.oRequestAnimationFrame ||
			window.msRequestAnimationFrame ||
			function(callback) {
				return window.setTimeout(callback, 1000 / 60);
			};
	}());
	// -- DOM methods
	helpers.getRelativePosition = function(evt, chart) {
		var mouseX, mouseY;
		var e = evt.originalEvent || evt,
			canvas = evt.currentTarget || evt.srcElement,
			boundingRect = canvas.getBoundingClientRect();

		var touches = e.touches;
		if (touches && touches.length > 0) {
			mouseX = touches[0].clientX;
			mouseY = touches[0].clientY;

		} else {
			mouseX = e.clientX;
			mouseY = e.clientY;
		}

		// Scale mouse coordinates into canvas coordinates
		// by following the pattern laid out by 'jerryj' in the comments of
		// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
		var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
		var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
		var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
		var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

		return {
			x: mouseX,
			y: mouseY
		};

	};
	helpers.addEvent = function(node, eventType, method) {
		if (node.addEventListener) {
			node.addEventListener(eventType, method);
		} else if (node.attachEvent) {
			node.attachEvent('on' + eventType, method);
		} else {
			node['on' + eventType] = method;
		}
	};
	helpers.removeEvent = function(node, eventType, handler) {
		if (node.removeEventListener) {
			node.removeEventListener(eventType, handler, false);
		} else if (node.detachEvent) {
			node.detachEvent('on' + eventType, handler);
		} else {
			node['on' + eventType] = helpers.noop;
		}
	};

	// Private helper function to convert max-width/max-height values that may be percentages into a number
	function parseMaxStyle(styleValue, node, parentProperty) {
		var valueInPixels;
		if (typeof(styleValue) === 'string') {
			valueInPixels = parseInt(styleValue, 10);

			if (styleValue.indexOf('%') !== -1) {
				// percentage * size in dimension
				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
			}
		} else {
			valueInPixels = styleValue;
		}

		return valueInPixels;
	}

	/**
	 * Returns if the given value contains an effective constraint.
	 * @private
	 */
	function isConstrainedValue(value) {
		return value !== undefined && value !== null && value !== 'none';
	}

	// Private helper to get a constraint dimension
	// @param domNode : the node to check the constraint on
	// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
	// @param percentageProperty : property of parent to use when calculating width as a percentage
	// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
		var view = document.defaultView;
		var parentNode = domNode.parentNode;
		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
		var hasCNode = isConstrainedValue(constrainedNode);
		var hasCContainer = isConstrainedValue(constrainedContainer);
		var infinity = Number.POSITIVE_INFINITY;

		if (hasCNode || hasCContainer) {
			return Math.min(
				hasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
				hasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
		}

		return 'none';
	}
	// returns Number or undefined if no constraint
	helpers.getConstraintWidth = function(domNode) {
		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
	};
	// returns Number or undefined if no constraint
	helpers.getConstraintHeight = function(domNode) {
		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
	};
	helpers.getMaximumWidth = function(domNode) {
		var container = domNode.parentNode;
		var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
		var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
		var w = container.clientWidth - paddingLeft - paddingRight;
		var cw = helpers.getConstraintWidth(domNode);
		return isNaN(cw)? w : Math.min(w, cw);
	};
	helpers.getMaximumHeight = function(domNode) {
		var container = domNode.parentNode;
		var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
		var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
		var h = container.clientHeight - paddingTop - paddingBottom;
		var ch = helpers.getConstraintHeight(domNode);
		return isNaN(ch)? h : Math.min(h, ch);
	};
	helpers.getStyle = function(el, property) {
		return el.currentStyle ?
			el.currentStyle[property] :
			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
	};
	helpers.retinaScale = function(chart) {
		var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
		if (pixelRatio === 1) {
			return;
		}

		var canvas = chart.canvas;
		var height = chart.height;
		var width = chart.width;

		canvas.height = height * pixelRatio;
		canvas.width = width * pixelRatio;
		chart.ctx.scale(pixelRatio, pixelRatio);

		// If no style has been set on the canvas, the render size is used as display size,
		// making the chart visually bigger, so let's enforce it to the ""correct"" values.
		// See https://github.com/chartjs/Chart.js/issues/3575
		canvas.style.height = height + 'px';
		canvas.style.width = width + 'px';
	};
	// -- Canvas methods
	helpers.clear = function(chart) {
		chart.ctx.clearRect(0, 0, chart.width, chart.height);
	};
	helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
	};
	helpers.longestText = function(ctx, font, arrayOfThings, cache) {
		cache = cache || {};
		var data = cache.data = cache.data || {};
		var gc = cache.garbageCollect = cache.garbageCollect || [];

		if (cache.font !== font) {
			data = cache.data = {};
			gc = cache.garbageCollect = [];
			cache.font = font;
		}

		ctx.font = font;
		var longest = 0;
		helpers.each(arrayOfThings, function(thing) {
			// Undefined strings and arrays should not be measured
			if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
				longest = helpers.measureText(ctx, data, gc, longest, thing);
			} else if (helpers.isArray(thing)) {
				// if it is an array lets measure each element
				// to do maybe simplify this function a bit so we can do this more recursively?
				helpers.each(thing, function(nestedThing) {
					// Undefined strings and arrays should not be measured
					if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
						longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
					}
				});
			}
		});

		var gcLen = gc.length / 2;
		if (gcLen > arrayOfThings.length) {
			for (var i = 0; i < gcLen; i++) {
				delete data[gc[i]];
			}
			gc.splice(0, gcLen);
		}
		return longest;
	};
	helpers.measureText = function(ctx, data, gc, longest, string) {
		var textWidth = data[string];
		if (!textWidth) {
			textWidth = data[string] = ctx.measureText(string).width;
			gc.push(string);
		}
		if (textWidth > longest) {
			longest = textWidth;
		}
		return longest;
	};
	helpers.numberOfLabelLines = function(arrayOfThings) {
		var numberOfLines = 1;
		helpers.each(arrayOfThings, function(thing) {
			if (helpers.isArray(thing)) {
				if (thing.length > numberOfLines) {
					numberOfLines = thing.length;
				}
			}
		});
		return numberOfLines;
	};
	helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
		ctx.beginPath();
		ctx.moveTo(x + radius, y);
		ctx.lineTo(x + width - radius, y);
		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
		ctx.lineTo(x + width, y + height - radius);
		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
		ctx.lineTo(x + radius, y + height);
		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
		ctx.lineTo(x, y + radius);
		ctx.quadraticCurveTo(x, y, x + radius, y);
		ctx.closePath();
	};
	helpers.color = function(c) {
		if (!color) {
			console.error('Color.js not found!');
			return c;
		}

		/* global CanvasGradient */
		if (c instanceof CanvasGradient) {
			return color(Chart.defaults.global.defaultColor);
		}

		return color(c);
	};
	helpers.isArray = Array.isArray?
		function(obj) {
			return Array.isArray(obj);
		} :
		function(obj) {
			return Object.prototype.toString.call(obj) === '[object Array]';
		};
	// ! @see http://stackoverflow.com/a/14853974
	helpers.arrayEquals = function(a0, a1) {
		var i, ilen, v0, v1;

		if (!a0 || !a1 || a0.length !== a1.length) {
			return false;
		}

		for (i = 0, ilen=a0.length; i < ilen; ++i) {
			v0 = a0[i];
			v1 = a1[i];

			if (v0 instanceof Array && v1 instanceof Array) {
				if (!helpers.arrayEquals(v0, v1)) {
					return false;
				}
			} else if (v0 !== v1) {
				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
				return false;
			}
		}

		return true;
	};
	helpers.callCallback = function(fn, args, _tArg) {
		if (fn && typeof fn.call === 'function') {
			fn.apply(_tArg, args);
		}
	};
	helpers.getHoverColor = function(colorValue) {
		/* global CanvasPattern */
		return (colorValue instanceof CanvasPattern) ?
			colorValue :
			helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
	};
};
",TRUE,,5044
4181,InitialSO.csv4181.txt,InitialGit.csv4181.txt,5,"myApp.filter('makeRange', function() {
        return function(input) {
            var lowBound, highBound;
            switch (input.length) {
            case 1:
                lowBound = 0;
                highBound = parseInt(input[0]) - 1;
                break;
            case 2:
                lowBound = parseInt(input[0]);
                highBound = parseInt(input[1]);
                break;
            default:
                return input;
            }
            var result = [];
            for (var i = lowBound; i <= highBound; i++)
                result.push(i);
            return result;
        };
    });
 <div ng-repeat=""n in [10] | makeRange"">Do something 0..9: {{n}}</div>
 <div ng-repeat=""n in [20, 29] | makeRange"">Do something 20..29: {{n}}</div>
 ","myApp.filter('makeRange', function() {
        return function(input) {
            var lowBound, highBound;
            switch (input.length) {
            case 1:
                lowBound = 0;
                highBound = parseInt(input[0]) - 1;
                break;
            case 2:
                lowBound = parseInt(input[0]);
                highBound = parseInt(input[1]);
                break;
            default:
                return input;
            }
            var result = [];
            for (var i = lowBound; i <= highBound; i++)
                result.push(i);
            return result;
        };
    });
 <div ng-repeat=""n in [10] | makeRange"">Do something 0..9: {{n}}</div>
 <div ng-repeat=""n in [20, 29] | makeRange"">Do something 20..29: {{n}}</div>
 ",TRUE,"(function() {
  'use strict';

  // 1 2 5 10 25 50 100 250 500 etc
  function quantizedNumber(i) {
    var adjust = [1, 2.5, 5];
    return Math.floor(Math.pow(10, Math.floor(i/3)) * adjust[i % 3]);
  }

  // the j such that quantizedNumber(j) is closest to i
  function quantizedIndex(i) {
    if(i < 1) { return 0; }
    var group = Math.floor(Math.log(i) / Math.LN10),
        offset = i/(2.5 * Math.pow(10, group));
    if(offset >= 3) {
      group++;
      offset = 0;
    }
    return 3*group + Math.round(Math.min(2, offset));
  }

  function quantize(i) {
    if(i === Infinity) { return Infinity; }
    return quantizedNumber(quantizedIndex(i));
  }

  angular.module('bgf.paginateAnything', []).

    directive('bgfPagination', function () {
      var defaultLinkGroupSize = 3, defaultClientLimit = 250, defaultPerPage = 50;

      return {
        restrict: 'AE',
        scope: {
          // required
          url: '=',
          collection: '=',

          // optional
          urlParams: '=?',
          headers: '=?',
          page: '=?',
          perPage: '=?',
          perPagePresets: '=?',
          autoPresets: '=?',
          clientLimit: '=?',
          linkGroupSize: '=?',
          reloadPage: '=?',
          size: '=?',
          passive: '@',

          // directive -> app communication only
          numPages: '=?',
          numItems: '=?',
          serverLimit: '=?',
          rangeFrom: '=?',
          rangeTo: '=?'
        },
        templateUrl: function(element, attr) {
          return attr.templateUrl || 'tpl/paginate-anything.html';
        },
        replace: true,
        controller: ['$scope', '$http', function($scope, $http) {

          $scope.reloadPage   = false;
          $scope.serverLimit  = Infinity; // it's not known yet
          $scope.Math         = window.Math; // Math for the template

          if(typeof $scope.autoPresets !== 'boolean') {
            $scope.autoPresets = true;
          }

          var lgs = $scope.linkGroupSize, cl = $scope.clientLimit;
          $scope.linkGroupSize  = typeof lgs === 'number' ? lgs : defaultLinkGroupSize;
          $scope.clientLimit    = typeof cl  === 'number' ? cl : defaultClientLimit;

          $scope.updatePresets  = function () {
            if($scope.autoPresets) {
              var presets = [], i;
              for(i = Math.min(3, quantizedIndex($scope.perPage || defaultPerPage));
                  i <= quantizedIndex(Math.min($scope.clientLimit, $scope.serverLimit));
                  i++) {
                presets.push(quantizedNumber(i));
              }
              $scope.perPagePresets = presets;
            } else {
              $scope.perPagePresets = $scope.perPagePresets.filter(
                function (preset) { return preset <= $scope.serverLimit; }
              ).concat([$scope.serverLimit]);
            }
          };

          $scope.gotoPage = function (i) {
            $scope.page = i;
          };

          $scope.linkGroupFirst = function() {
            var rightDebt = Math.max( 0,
              $scope.linkGroupSize - ($scope.numPages - 1 - ($scope.page + 2))
            );
            return Math.max( 0,
              $scope.page - ($scope.linkGroupSize + rightDebt)
            );
          };

          $scope.linkGroupLast = function() {
            var leftDebt = Math.max( 0,
              $scope.linkGroupSize - ($scope.page - 2)
            );
            return Math.min( $scope.numPages-1,
              $scope.page + ($scope.linkGroupSize + leftDebt)
            );
          };

          $scope.isFinite = function() {
            return $scope.numPages < Infinity;
          };

          function requestRange(request) {
            $scope.$emit('pagination:loadStart', request);
            $http({
              method: 'GET',
              url: $scope.url,
              params: $scope.urlParams,
              headers: angular.extend(
                {}, $scope.headers,
                { 'Range-Unit': 'items', Range: [request.from, request.to].join('-') }
              )
            }).success(function (data, status, headers, config) {
              var response = parseRange(headers('Content-Range'));
              if(status === 204 || (response && response.total === 0)) {
                $scope.numItems = 0;
                $scope.collection = [];
              } else {
                $scope.numItems = response ? response.total : data.length;
                $scope.collection = data || [];
              }

              if(response) {
                $scope.rangeFrom = response.from;
                $scope.rangeTo   = response.to;
                if(length(response) < response.total) {
                  if(
                    ( request.to < response.total - 1) ||
                    (response.to < response.total - 1 && response.total < request.to)
                  ) {
                    if(!$scope.perPage || length(response) < $scope.perPage) {
                      if($scope.autoPresets) {
                        var idx = quantizedIndex(length(response));
                        if(quantizedNumber(idx) > length(response)) {
                          idx--;
                        }
                        $scope.serverLimit = quantizedNumber(idx);
                      } else {
                        $scope.serverLimit = length(response);
                      }
                      $scope.perPage = $scope.Math.min(
                        $scope.serverLimit,
                        $scope.clientLimit
                      );
                    }
                  }
                }
              }
              $scope.numPages = Math.ceil($scope.numItems / ($scope.perPage || defaultPerPage));

              $scope.$emit('pagination:loadPage', status, config);
            }).error(function (data, status, headers, config) {
              $scope.$emit('pagination:error', status, config);
            });
          }

          $scope.page = $scope.page || 0;
          $scope.size = $scope.size || 'md';
          if($scope.autoPresets) {
            $scope.updatePresets();
          }

          $scope.$watch('page', function(newPage, oldPage) {
            if($scope.passive === 'true') { return; }

            if(newPage !== oldPage) {
              if(newPage < 0 || newPage*$scope.perPage >= $scope.numItems) {
                return;
              }

              var pp = $scope.perPage || defaultPerPage;

              if($scope.autoPresets) {
                pp = quantize(pp);
              }

              requestRange({
                from: newPage * pp,
                to: (newPage+1) * pp - 1
              });
            }
          });

          $scope.$watch('perPage', function(newPp, oldPp) {
            if($scope.passive === 'true') { return; }

            if(typeof(oldPp) === 'number' && newPp !== oldPp) {
              var first = $scope.page * oldPp;
              var newPage = Math.floor(first / newPp);

              if($scope.page !== newPage) {
                $scope.page = newPage;
              } else {
                requestRange({
                  from: $scope.page * newPp,
                  to: ($scope.page+1) * newPp - 1
                });
              }
            }
          });

          $scope.$watch('serverLimit', function(newLimit, oldLimit) {
            if($scope.passive === 'true') { return; }

            if(newLimit !== oldLimit) {
              $scope.updatePresets();
            }
          });

          $scope.$watch('url', function(newUrl, oldUrl) {
            if($scope.passive === 'true') { return; }

            if(newUrl !== oldUrl) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          });

          $scope.$watch('urlParams', function(newParams, oldParams) {
            if($scope.passive === 'true') { return; }

            if(!angular.equals(newParams, oldParams)) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          }, true);

          $scope.$watch('headers', function(newHeaders, oldHeaders) {
            if($scope.passive === 'true') { return; }

            if(!angular.equals(newHeaders, oldHeaders)) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          }, true);

          $scope.$watch('reloadPage', function(newVal, oldVal) {
            if($scope.passive === 'true') { return; }

            if(newVal === true && oldVal === false) {
              $scope.reloadPage = false;
              requestRange({
                from: $scope.page * $scope.perPage,
                to: ($scope.page+1) * $scope.perPage - 1
              });
            }
          });

          if($scope.passive === 'true') { return; }

          var pp = $scope.perPage || defaultPerPage;

          if($scope.autoPresets) {
            pp = quantize(pp);
          }

          requestRange({
            from: $scope.page * pp,
            to: ($scope.page+1) * pp - 1
          });
        }]
      };
    }).

    filter('makeRange', function() {
      // http://stackoverflow.com/a/14932395/3102996
      return function(input) {
        var lowBound, highBound;
        switch (input.length) {
        case 1:
          lowBound = 0;
          highBound = parseInt(input[0], 10) - 1;
          break;
        case 2:
          lowBound = parseInt(input[0], 10);
          highBound = parseInt(input[1], 10);
          break;
        default:
          return input;
        }
        var result = [];
        for (var i = lowBound; i <= highBound; i++) { result.push(i); }
        return result;
      };
    });


  function parseRange(hdr) {
    var m = hdr && hdr.match(/^(\d+)-(\d+)\/(\d+|\*)$/);
    if(m) {
      return {
        from: +m[1],
        to: +m[2],
        total: m[3] === '*' ? Infinity : +m[3]
      };
    } else if(hdr === '*/0') {
      return { total: 0 };
    }
    return null;
  }

  function length(range) {
    return range.to - range.from + 1;
  }
}());
","(function() {
  'use strict';

  // 1 2 5 10 25 50 100 250 500 etc
  function quantizedNumber(i) {
    var adjust = [1, 2.5, 5];
    return Math.floor(Math.pow(10, Math.floor(i/3)) * adjust[i % 3]);
  }

  // the j such that quantizedNumber(j) is closest to i
  function quantizedIndex(i) {
    if(i < 1) { return 0; }
    var group = Math.floor(Math.log(i) / Math.LN10),
        offset = i/(2.5 * Math.pow(10, group));
    if(offset >= 3) {
      group++;
      offset = 0;
    }
    return 3*group + Math.round(Math.min(2, offset));
  }

  function quantize(i) {
    if(i === Infinity) { return Infinity; }
    return quantizedNumber(quantizedIndex(i));
  }

  angular.module('bgf.paginateAnything', []).

    directive('bgfPagination', function () {
      var defaultLinkGroupSize = 3, defaultClientLimit = 250, defaultPerPage = 50;

      return {
        restrict: 'AE',
        scope: {
          // required
          url: '=',
          collection: '=',

          // optional
          urlParams: '=?',
          headers: '=?',
          page: '=?',
          perPage: '=?',
          perPagePresets: '=?',
          autoPresets: '=?',
          clientLimit: '=?',
          linkGroupSize: '=?',
          reloadPage: '=?',
          size: '=?',
          passive: '@',

          // directive -> app communication only
          numPages: '=?',
          numItems: '=?',
          serverLimit: '=?',
          rangeFrom: '=?',
          rangeTo: '=?'
        },
        templateUrl: function(element, attr) {
          return attr.templateUrl || 'tpl/paginate-anything.html';
        },
        replace: true,
        controller: ['$scope', '$http', function($scope, $http) {

          $scope.reloadPage   = false;
          $scope.serverLimit  = Infinity; // it's not known yet
          $scope.Math         = window.Math; // Math for the template

          if(typeof $scope.autoPresets !== 'boolean') {
            $scope.autoPresets = true;
          }

          var lgs = $scope.linkGroupSize, cl = $scope.clientLimit;
          $scope.linkGroupSize  = typeof lgs === 'number' ? lgs : defaultLinkGroupSize;
          $scope.clientLimit    = typeof cl  === 'number' ? cl : defaultClientLimit;

          $scope.updatePresets  = function () {
            if($scope.autoPresets) {
              var presets = [], i;
              for(i = Math.min(3, quantizedIndex($scope.perPage || defaultPerPage));
                  i <= quantizedIndex(Math.min($scope.clientLimit, $scope.serverLimit));
                  i++) {
                presets.push(quantizedNumber(i));
              }
              $scope.perPagePresets = presets;
            } else {
              $scope.perPagePresets = $scope.perPagePresets.filter(
                function (preset) { return preset <= $scope.serverLimit; }
              ).concat([$scope.serverLimit]);
            }
          };

          $scope.gotoPage = function (i) {
            $scope.page = i;
          };

          $scope.linkGroupFirst = function() {
            var rightDebt = Math.max( 0,
              $scope.linkGroupSize - ($scope.numPages - 1 - ($scope.page + 2))
            );
            return Math.max( 0,
              $scope.page - ($scope.linkGroupSize + rightDebt)
            );
          };

          $scope.linkGroupLast = function() {
            var leftDebt = Math.max( 0,
              $scope.linkGroupSize - ($scope.page - 2)
            );
            return Math.min( $scope.numPages-1,
              $scope.page + ($scope.linkGroupSize + leftDebt)
            );
          };

          $scope.isFinite = function() {
            return $scope.numPages < Infinity;
          };

          function requestRange(request) {
            $scope.$emit('pagination:loadStart', request);
            $http({
              method: 'GET',
              url: $scope.url,
              params: $scope.urlParams,
              headers: angular.extend(
                {}, $scope.headers,
                { 'Range-Unit': 'items', Range: [request.from, request.to].join('-') }
              )
            }).success(function (data, status, headers, config) {
              var response = parseRange(headers('Content-Range'));
              if(status === 204 || (response && response.total === 0)) {
                $scope.numItems = 0;
                $scope.collection = [];
              } else {
                $scope.numItems = response ? response.total : data.length;
                $scope.collection = data || [];
              }

              if(response) {
                $scope.rangeFrom = response.from;
                $scope.rangeTo   = response.to;
                if(length(response) < response.total) {
                  if(
                    ( request.to < response.total - 1) ||
                    (response.to < response.total - 1 && response.total < request.to)
                  ) {
                    if(!$scope.perPage || length(response) < $scope.perPage) {
                      if($scope.autoPresets) {
                        var idx = quantizedIndex(length(response));
                        if(quantizedNumber(idx) > length(response)) {
                          idx--;
                        }
                        $scope.serverLimit = quantizedNumber(idx);
                      } else {
                        $scope.serverLimit = length(response);
                      }
                      $scope.perPage = $scope.Math.min(
                        $scope.serverLimit,
                        $scope.clientLimit
                      );
                    }
                  }
                }
              }
              $scope.numPages = Math.ceil($scope.numItems / ($scope.perPage || defaultPerPage));

              $scope.$emit('pagination:loadPage', status, config);
            }).error(function (data, status, headers, config) {
              $scope.$emit('pagination:error', status, config);
            });
          }

          $scope.page = $scope.page || 0;
          $scope.size = $scope.size || 'md';
          if($scope.autoPresets) {
            $scope.updatePresets();
          }

          $scope.$watch('page', function(newPage, oldPage) {
            if($scope.passive === 'true') { return; }

            if(newPage !== oldPage) {
              if(newPage < 0 || newPage*$scope.perPage >= $scope.numItems) {
                return;
              }

              var pp = $scope.perPage || defaultPerPage;

              if($scope.autoPresets) {
                pp = quantize(pp);
              }

              requestRange({
                from: newPage * pp,
                to: (newPage+1) * pp - 1
              });
            }
          });

          $scope.$watch('perPage', function(newPp, oldPp) {
            if($scope.passive === 'true') { return; }

            if(typeof(oldPp) === 'number' && newPp !== oldPp) {
              var first = $scope.page * oldPp;
              var newPage = Math.floor(first / newPp);

              if($scope.page !== newPage) {
                $scope.page = newPage;
              } else {
                requestRange({
                  from: $scope.page * newPp,
                  to: ($scope.page+1) * newPp - 1
                });
              }
            }
          });

          $scope.$watch('serverLimit', function(newLimit, oldLimit) {
            if($scope.passive === 'true') { return; }

            if(newLimit !== oldLimit) {
              $scope.updatePresets();
            }
          });

          $scope.$watch('url', function(newUrl, oldUrl) {
            if($scope.passive === 'true') { return; }

            if(newUrl !== oldUrl) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          });

          $scope.$watch('urlParams', function(newParams, oldParams) {
            if($scope.passive === 'true') { return; }

            if(!angular.equals(newParams, oldParams)) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          }, true);

          $scope.$watch('headers', function(newHeaders, oldHeaders) {
            if($scope.passive === 'true') { return; }

            if(!angular.equals(newHeaders, oldHeaders)) {
              if($scope.page === 0){
                $scope.reloadPage = true;
              } else {
                $scope.page = 0;
              }
            }
          }, true);

          $scope.$watch('reloadPage', function(newVal, oldVal) {
            if($scope.passive === 'true') { return; }

            if(newVal === true && oldVal === false) {
              $scope.reloadPage = false;
              requestRange({
                from: $scope.page * $scope.perPage,
                to: ($scope.page+1) * $scope.perPage - 1
              });
            }
          });

          if($scope.passive === 'true') { return; }

          var pp = $scope.perPage || defaultPerPage;

          if($scope.autoPresets) {
            pp = quantize(pp);
          }

          requestRange({
            from: $scope.page * pp,
            to: ($scope.page+1) * pp - 1
          });
        }]
      };
    }).

    filter('makeRange', function() {
      // http://stackoverflow.com/a/14932395/3102996
      return function(input) {
        var lowBound, highBound;
        switch (input.length) {
        case 1:
          lowBound = 0;
          highBound = parseInt(input[0], 10) - 1;
          break;
        case 2:
          lowBound = parseInt(input[0], 10);
          highBound = parseInt(input[1], 10);
          break;
        default:
          return input;
        }
        var result = [];
        for (var i = lowBound; i <= highBound; i++) { result.push(i); }
        return result;
      };
    });


  function parseRange(hdr) {
    var m = hdr && hdr.match(/^(\d+)-(\d+)\/(\d+|\*)$/);
    if(m) {
      return {
        from: +m[1],
        to: +m[2],
        total: m[3] === '*' ? Infinity : +m[3]
      };
    } else if(hdr === '*/0') {
      return { total: 0 };
    }
    return null;
  }

  function length(range) {
    return range.to - range.from + 1;
  }
}());
",TRUE,,5053
4185,InitialSO.csv4185.txt,InitialGit.csv4185.txt,5,"private byte[] rotateYUV420Degree90(byte[] data, int imageWidth, int imageHeight) 
{
    byte [] yuv = new byte[imageWidth*imageHeight*3/2];
    // Rotate the Y luma
    int i = 0;
    for(int x = 0;x < imageWidth;x++)
    {
        for(int y = imageHeight-1;y >= 0;y--)                               
        {
            yuv[i] = data[y*imageWidth+x];
            i++;
        }
    }
    // Rotate the U and V color components 
    i = imageWidth*imageHeight*3/2-1;
    for(int x = imageWidth-1;x > 0;x=x-2)
    {
        for(int y = 0;y < imageHeight/2;y++)                                
        {
            yuv[i] = data[(imageWidth*imageHeight)+(y*imageWidth)+x];
            i--;
            yuv[i] = data[(imageWidth*imageHeight)+(y*imageWidth)+(x-1)];
            i--;
        }
    }
    return yuv;
}
 ","private byte[] rotateYUV420Degree90(byte[] data, int imageWidth, int imageHeight) 
{
    byte [] yuv = new byte[imageWidth*imageHeight*3/2];
    // Rotate the Y luma
    int i = 0;
    for(int x = 0;x < imageWidth;x++)
    {
        for(int y = imageHeight-1;y >= 0;y--)                               
        {
            yuv[i] = data[y*imageWidth+x];
            i++;
        }
    }
    // Rotate the U and V color components 
    i = imageWidth*imageHeight*3/2-1;
    for(int x = imageWidth-1;x > 0;x=x-2)
    {
        for(int y = 0;y < imageHeight/2;y++)                                
        {
            yuv[i] = data[(imageWidth*imageHeight)+(y*imageWidth)+x];
            i--;
            yuv[i] = data[(imageWidth*imageHeight)+(y*imageWidth)+(x-1)];
            i--;
        }
    }
    return yuv;
}
 ",TRUE,"package com.journeyapps.barcodescanner;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.YuvImage;

import com.google.zxing.PlanarYUVLuminanceSource;

import java.io.ByteArrayOutputStream;

/**
 * Represents raw preview data from a camera.
 */
public class SourceData {
    /** Raw YUV data */
    private byte[] data;

    /** Source data width */
    private int dataWidth;

    /** Source data height */
    private int dataHeight;

    /** The format of the image data. ImageFormat.NV21 and ImageFormat.YUY2 are supported. */
    private int imageFormat;

    /** Rotation in degrees (0, 90, 180 or 270). This is camera rotation relative to display rotation. */
    private int rotation;

    /** Crop rectangle, in display orientation. */
    private Rect cropRect;

    /**
     *
     * @param data the image data
     * @param dataWidth width of the data
     * @param dataHeight height of the data
     * @param imageFormat ImageFormat.NV21 or ImageFormat.YUY2
     * @param rotation camera rotation relative to display rotation, in degrees (0, 90, 180 or 270).
     */
    public SourceData(byte[] data, int dataWidth, int dataHeight, int imageFormat, int rotation) {
        this.data = data;
        this.dataWidth = dataWidth;
        this.dataHeight = dataHeight;
        this.rotation = rotation;
        this.imageFormat = imageFormat;
    }

    public Rect getCropRect() {
        return cropRect;
    }

    /**
     * Set the crop rectangle.
     *
     * @param cropRect the new crop rectangle.
     */
    public void setCropRect(Rect cropRect) {
        this.cropRect = cropRect;
    }

    public byte[] getData() {
        return data;
    }

    public int getDataWidth() {
        return dataWidth;
    }

    public int getDataHeight() {
        return dataHeight;
    }

    public int getWidth() {
        return isRotated() ? dataHeight : dataWidth;
    }

    public int getHeight() {
        return isRotated() ? dataWidth : dataHeight;
    }

    public int getRotation() {
        return rotation;
    }

    public boolean isRotated() {
        return rotation % 180 != 0;
    }

    public int getImageFormat() {
        return imageFormat;
    }

    public PlanarYUVLuminanceSource createSource() {
        byte[] rotated = rotateCameraPreview(rotation, data, dataWidth, dataHeight);
        // TODO: handle mirrored (front) camera. Probably only the ResultPoints should be mirrored,
        // not the preview for decoding.
        if (isRotated()) {
            //noinspection SuspiciousNameCombination
            return new PlanarYUVLuminanceSource(rotated, dataHeight, dataWidth, cropRect.left, cropRect.top, cropRect.width(), cropRect.height(), false);
        } else {
            return new PlanarYUVLuminanceSource(rotated, dataWidth, dataHeight, cropRect.left, cropRect.top, cropRect.width(), cropRect.height(), false);
        }
    }

    /**
     * Return the source bitmap (cropped; in display orientation).
     *
     * @return the bitmap
     */
    public Bitmap getBitmap() {
        return getBitmap(cropRect);
    }

    private Bitmap getBitmap(Rect cropRect) {
        if(isRotated()) {
            //noinspection SuspiciousNameCombination
            cropRect = new Rect(cropRect.top, cropRect.left, cropRect.bottom, cropRect.right);
        }

        // TODO: there should be a way to do this without JPEG compression / decompression cycle.
        YuvImage img = new YuvImage(data, imageFormat, dataWidth, dataHeight, null);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        img.compressToJpeg(cropRect, 90, buffer);
        byte[] jpegData = buffer.toByteArray();

        Bitmap bitmap = BitmapFactory.decodeByteArray(jpegData, 0, jpegData.length);

        // Rotate if required
        if (rotation != 0) {
            Matrix imageMatrix = new Matrix();
            imageMatrix.postRotate(rotation);
            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), imageMatrix, false);
        }

        return bitmap;
    }

    public static byte[] rotateCameraPreview(int cameraRotation, byte[] data, int imageWidth, int imageHeight) {
        switch (cameraRotation) {
            case 0:
                return data;
            case 90:
                return rotateCW(data, imageWidth, imageHeight);
            case 180:
                return rotate180(data, imageWidth, imageHeight);
            case 270:
                return rotateCCW(data, imageWidth, imageHeight);
            default:
                // Should not happen
                return data;
        }
    }

    /**
     * Rotate an image by 90 degrees CW.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotateCW(byte[] data, int imageWidth, int imageHeight) {
        // Adapted from http://stackoverflow.com/a/15775173
        // data may contain more than just y (u and v), but we are only interested in the y section.

        byte[] yuv = new byte[imageWidth * imageHeight];
        int i = 0;
        for (int x = 0; x < imageWidth; x++) {
            for (int y = imageHeight - 1; y >= 0; y--) {
                yuv[i] = data[y * imageWidth + x];
                i++;
            }
        }
        return yuv;
    }

    /**
     * Rotate an image by 180 degrees.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotate180(byte[] data, int imageWidth, int imageHeight) {
        int n = imageWidth * imageHeight;
        byte[] yuv = new byte[n];

        int i = n - 1;
        for (int j = 0; j < n; j++) {
            yuv[i] = data[j];
            i--;
        }
        return yuv;
    }

    /**
     * Rotate an image by 90 degrees CCW.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotateCCW(byte[] data, int imageWidth, int imageHeight) {
        int n = imageWidth * imageHeight;
        byte[] yuv = new byte[n];
        int i = n - 1;
        for (int x = 0; x < imageWidth; x++) {
            for (int y = imageHeight - 1; y >= 0; y--) {
                yuv[i] = data[y * imageWidth + x];
                i--;
            }
        }
        return yuv;
    }

}
","package com.journeyapps.barcodescanner;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.YuvImage;

import com.google.zxing.PlanarYUVLuminanceSource;

import java.io.ByteArrayOutputStream;

/**
 * Raw preview data from a camera.
 */
public class SourceData {
    /** Raw YUV data */
    private byte[] data;

    /** Source data width */
    private int dataWidth;

    /** Source data height */
    private int dataHeight;

    /** The format of the image data. ImageFormat.NV21 and ImageFormat.YUY2 are supported. */
    private int imageFormat;

    /** Rotation in degrees (0, 90, 180 or 270). This is camera rotation relative to display rotation. */
    private int rotation;

    /** Crop rectangle, in display orientation. */
    private Rect cropRect;

    /**
     *
     * @param data the image data
     * @param dataWidth width of the data
     * @param dataHeight height of the data
     * @param imageFormat ImageFormat.NV21 or ImageFormat.YUY2
     * @param rotation camera rotation relative to display rotation, in degrees (0, 90, 180 or 270).
     */
    public SourceData(byte[] data, int dataWidth, int dataHeight, int imageFormat, int rotation) {
        this.data = data;
        this.dataWidth = dataWidth;
        this.dataHeight = dataHeight;
        this.rotation = rotation;
        this.imageFormat = imageFormat;
    }

    public Rect getCropRect() {
        return cropRect;
    }

    /**
     * Set the crop rectangle.
     *
     * @param cropRect the new crop rectangle.
     */
    public void setCropRect(Rect cropRect) {
        this.cropRect = cropRect;
    }

    public byte[] getData() {
        return data;
    }

    /**
     *
     * @return width of the data
     */
    public int getDataWidth() {
        return dataWidth;
    }

    /**
     *
     * @return height of the data
     */
    public int getDataHeight() {
        return dataHeight;
    }

    /**
     *
     * @return true if the preview image is rotated orthogonal to the display
     */
    public boolean isRotated() {
        return rotation % 180 != 0;
    }

    public int getImageFormat() {
        return imageFormat;
    }

    public PlanarYUVLuminanceSource createSource() {
        byte[] rotated = rotateCameraPreview(rotation, data, dataWidth, dataHeight);
        // TODO: handle mirrored (front) camera. Probably only the ResultPoints should be mirrored,
        // not the preview for decoding.
        if (isRotated()) {
            //noinspection SuspiciousNameCombination
            return new PlanarYUVLuminanceSource(rotated, dataHeight, dataWidth, cropRect.left, cropRect.top, cropRect.width(), cropRect.height(), false);
        } else {
            return new PlanarYUVLuminanceSource(rotated, dataWidth, dataHeight, cropRect.left, cropRect.top, cropRect.width(), cropRect.height(), false);
        }
    }

    /**
     * Return the source bitmap (cropped; in display orientation).
     *
     * @return the bitmap
     */
    public Bitmap getBitmap() {
        return getBitmap(1);
    }

    /**
     * Return the source bitmap (cropped; in display orientation).
     *
     * @param scaleFactor factor to scale down by. Must be a power of 2.
     * @return the bitmap
     */
    public Bitmap getBitmap(int scaleFactor) {
        return getBitmap(cropRect, scaleFactor);
    }

    private Bitmap getBitmap(Rect cropRect, int scaleFactor) {
        if(isRotated()) {
            //noinspection SuspiciousNameCombination
            cropRect = new Rect(cropRect.top, cropRect.left, cropRect.bottom, cropRect.right);
        }

        // TODO: there should be a way to do this without JPEG compression / decompression cycle.
        YuvImage img = new YuvImage(data, imageFormat, dataWidth, dataHeight, null);
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        img.compressToJpeg(cropRect, 90, buffer);
        byte[] jpegData = buffer.toByteArray();

        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inSampleSize = scaleFactor;
        Bitmap bitmap = BitmapFactory.decodeByteArray(jpegData, 0, jpegData.length, options);

        // Rotate if required
        if (rotation != 0) {
            Matrix imageMatrix = new Matrix();
            imageMatrix.postRotate(rotation);
            bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), imageMatrix, false);
        }

        return bitmap;
    }

    public static byte[] rotateCameraPreview(int cameraRotation, byte[] data, int imageWidth, int imageHeight) {
        switch (cameraRotation) {
            case 0:
                return data;
            case 90:
                return rotateCW(data, imageWidth, imageHeight);
            case 180:
                return rotate180(data, imageWidth, imageHeight);
            case 270:
                return rotateCCW(data, imageWidth, imageHeight);
            default:
                // Should not happen
                return data;
        }
    }

    /**
     * Rotate an image by 90 degrees CW.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotateCW(byte[] data, int imageWidth, int imageHeight) {
        // Adapted from http://stackoverflow.com/a/15775173
        // data may contain more than just y (u and v), but we are only interested in the y section.

        byte[] yuv = new byte[imageWidth * imageHeight];
        int i = 0;
        for (int x = 0; x < imageWidth; x++) {
            for (int y = imageHeight - 1; y >= 0; y--) {
                yuv[i] = data[y * imageWidth + x];
                i++;
            }
        }
        return yuv;
    }

    /**
     * Rotate an image by 180 degrees.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotate180(byte[] data, int imageWidth, int imageHeight) {
        int n = imageWidth * imageHeight;
        byte[] yuv = new byte[n];

        int i = n - 1;
        for (int j = 0; j < n; j++) {
            yuv[i] = data[j];
            i--;
        }
        return yuv;
    }

    /**
     * Rotate an image by 90 degrees CCW.
     *
     * @param data        the image data, in with the first width * height bytes being the luminance data.
     * @param imageWidth  the width of the image
     * @param imageHeight the height of the image
     * @return the rotated bytes
     */
    public static byte[] rotateCCW(byte[] data, int imageWidth, int imageHeight) {
        int n = imageWidth * imageHeight;
        byte[] yuv = new byte[n];
        int i = n - 1;
        for (int x = 0; x < imageWidth; x++) {
            for (int y = imageHeight - 1; y >= 0; y--) {
                yuv[i] = data[y * imageWidth + x];
                i--;
            }
        }
        return yuv;
    }

}
",FALSE,,5054
4187,InitialSO.csv4187.txt,InitialGit.csv4187.txt,3,"import multiprocessing

def fun(f,q_in,q_out):
    while True:
        i,x = q_in.get()
        if i is None:
            break
        q_out.put((i,f(x)))

def parmap(f, X, nprocs = multiprocessing.cpu_count()):
    q_in   = multiprocessing.Queue(1)
    q_out  = multiprocessing.Queue()

    proc = [multiprocessing.Process(target=fun,args=(f,q_in,q_out)) for _ in range(nprocs)]
    for p in proc:
        p.daemon = True
        p.start()

    sent = [q_in.put((i,x)) for i,x in enumerate(X)]
    [q_in.put((None,None)) for _ in range(nprocs)]
    res = [q_out.get() for _ in range(len(sent))]

    [p.join() for p in proc]

    return [x for i,x in sorted(res)]

if __name__ == '__main__':
    print(parmap(lambda i: i*2, [1,2,3,4,6,7,8]))
 ","import multiprocessing


def fun(f, q_in, q_out):
    while True:
        i, x = q_in.get()
        if i is None:
            break
        q_out.put((i, f(x)))


def parmap(f, X, nprocs=multiprocessing.cpu_count()):
    q_in = multiprocessing.Queue(1)
    q_out = multiprocessing.Queue()

    proc = [multiprocessing.Process(target=fun, args=(f, q_in, q_out))
            for _ in range(nprocs)]
    for p in proc:
        p.daemon = True
        p.start()

    sent = [q_in.put((i, x)) for i, x in enumerate(X)]
    [q_in.put((None, None)) for _ in range(nprocs)]
    res = [q_out.get() for _ in range(len(sent))]

    [p.join() for p in proc]

    return [x for i, x in sorted(res)]


if __name__ == '__main__':
    print(parmap(lambda i: i * 2, [1, 2, 3, 4, 6, 7, 8]))
 ",FALSE,"from abc import ABCMeta, abstractmethod, abstractproperty
from .constants import PARALLEL_PROFILE
from .utils import setup_progressbar, grouper, flatten_list
import logging
import multiprocessing
logger = logging.getLogger(__name__)

__author__ = 'kgori'

def fun(f, q_in, q_out):
    while True:
        (i, x) = q_in.get()
        if i is None:
            break
        q_out.put((i, f(*x)))

def async_avail():
    from IPython import parallel
    try:
        client = parallel.Client(PARALLEL_PROFILE)
        return len(client) > 0
    except IOError:
        return False
    except Exception:
        return False

def get_client():
    from IPython import parallel
    try:
        client = parallel.Client(profile=PARALLEL_PROFILE)
        return client if len(client) > 0 else None
    except IOError:
        return None
    except Exception:
        return None

def tupleise(args):
    return [a if isinstance(a, (tuple, list)) else (a,) for a in args]

def parallel_map(client, task, args, message, batchsize=1, background=False):
    """"""
    Helper to map a function over a sequence of inputs, in parallel, with progress meter.
    :param client: IPython.parallel.Client instance
    :param task: Function
    :param args: Must be a list of tuples of arguments that the task function will be mapped onto.
                 If the function takes a single argument, it still must be a 1-tuple.
    :param message: String for progress bar
    :param batchsize: Jobs are shipped in batches of this size. Higher numbers mean less network traffic,
                      but longer execution time per job.
    :return: IPython.parallel.AsyncMapResult
    """"""
    njobs = len(args)
    nproc = len(client)
    logger.debug('parallel_map: len(client) = {}'.format(len(client)))
    view = client.load_balanced_view()
    message += ' (IP:{}w:{}b)'.format(nproc, batchsize)
    pbar = setup_progressbar(message, njobs, simple_progress=True)
    if not background:
        pbar.start()
    map_result = view.map(task, *list(zip(*args)), chunksize=batchsize)
    if background:
        return map_result, client
    while not map_result.ready():
        map_result.wait(1)
        pbar.update(min(njobs, map_result.progress * batchsize))
    pbar.finish()
    return map_result

def sequential_map(task, args, message):
    """"""
    Helper to map a function over a sequence of inputs, sequentially, with progress meter.
    :param client: IPython.parallel.Client instance
    :param task: Function
    :param args: Must be a list of tuples of arguments that the task function will be mapped onto.
                 If the function takes a single argument, it still must be a 1-tuple.
    :param message: String for progress bar
    :param batchsize: Jobs are shipped in batches of this size. Higher numbers mean less network traffic,
                      but longer execution time per job.
    :return: IPython.parallel.AsyncMapResult
    """"""
    njobs = len(args)
    pbar = setup_progressbar(message, njobs, simple_progress=True)
    pbar.start()
    map_result = []
    for (i, arglist) in enumerate(tupleise(args)):
        map_result.append(task(*arglist))
        pbar.update(i)
    pbar.finish()
    return map_result

def threadpool_map(task, args, message, concurrency, batchsize=1):
    """"""
    Helper to map a function over a range of inputs, using a threadpool, with a progress meter
    """"""
    import concurrent.futures

    njobs = len(args)
    batches = grouper(batchsize, tupleise(args))
    batched_task = lambda batch: [task(*job) for job in batch]
    PROGRESS = message is not None
    if PROGRESS:
        message += ' (TP:{}w:{}b)'.format(concurrency, batchsize)
        pbar = setup_progressbar(message, njobs, simple_progress=True)
        pbar.start()
    with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency) as executor:
        futures = []
        completed_count = 0
        for batch in batches:
            futures.append(executor.submit(batched_task, batch))

        if PROGRESS:
            for i, fut in enumerate(concurrent.futures.as_completed(futures), start=1):
                completed_count += len(fut.result())
                pbar.update(completed_count)

        else:
            concurrent.futures.wait(futures)

    if PROGRESS:
        pbar.finish()

    return flatten_list([fut.result() for fut in futures])

def processpool_map(task, args, message, concurrency, batchsize=1):
    """"""
    See http://stackoverflow.com/a/16071616
    """"""
    njobs = len(args)
    batches = grouper(batchsize, tupleise(args))
    def batched_task(*batch):
        return [task(*job) for job in batch]

    PROGRESS = message is not None
    if PROGRESS:
        message += ' (PP:{}w:{}b)'.format(concurrency, batchsize)
        pbar = setup_progressbar(message, len(args), simple_progress=True)
        pbar.start()
    
    q_in   = multiprocessing.Queue()  # Should I limit either queue size? Limiting in-queue
    q_out  = multiprocessing.Queue()  # increases time taken to send jobs, makes pbar less useful

    proc = [multiprocessing.Process(target=fun, args=(batched_task, q_in, q_out)) for _ in range(concurrency)]
    for p in proc:
        p.daemon = True
        p.start()
    sent = [q_in.put((i, x)) for (i, x) in enumerate(batches)]
    [q_in.put((None, None)) for _ in range(concurrency)]
    res = []
    completed_count = 0
    for _ in range(len(sent)):
        result = q_out.get()
        res.append(result)
        completed_count += len(result[1])
        if PROGRESS:
            pbar.update(completed_count)

    [p.join() for p in proc]
    if PROGRESS:
        pbar.finish()

    return flatten_list([x for (i, x) in sorted(res)])


class JobHandler(object):
    """"""
    Base class to provide uniform interface for all job handlers
    """"""
    metaclass = ABCMeta

    @abstractmethod
    def __call__(self, task, args, message, batchsize):
        """""" If you define a message, then progress will be written to stderr """"""
        pass


class SequentialJobHandler(JobHandler):
    """"""
    Jobs are handled using a simple map
    """"""

    def __call__(self, task, args, message, batchsize):
        if batchsize > 1:
            logger.warn(""Setting batchsize > 1 has no effect when using a SequentialJobHandler"")
        return sequential_map(task, args, message)


class ThreadpoolJobHandler(JobHandler):
    """"""
    Jobs are handled by a threadpool using concurrent.futures
    """"""
    def __init__(self, concurrency):
        self.concurrency = concurrency

    def __call__(self, task, args, message, batchsize):
        return threadpool_map(task, args, message, self.concurrency, batchsize)


class ProcesspoolJobHandler(JobHandler):
    """"""
    Jobs are handled by a threadpool using concurrent.futures
    """"""
    def __init__(self, concurrency):
        self.concurrency = concurrency

    def __call__(self, task, args, message, batchsize):
        return processpool_map(task, args, message, self.concurrency, batchsize)


class IPythonJobHandler(JobHandler):
    """"""
    Jobs are handled using an IPython.parallel.Client
    """"""
    def __init__(self, profile=None):
        """"""
        Initialise the IPythonJobHandler using the given ipython profile.

        Parameters
        ----------

        profile:  string
                  The ipython profile to connect to - this should already be running an ipcluster
                  If the connection fails it raises a RuntimeError
        """"""
        import IPython.parallel
        try:
            self.client=IPython.parallel.Client(profile=profile)
            logger.debug('__init__: len(client) = {}'.format(len(self.client)))
        except IOError, IPython.parallel.TimeoutError:
            msg = 'Could not obtain an IPython parallel Client using profile ""{}""'.format(profile)
            logger.error(msg)
            raise RuntimeError(msg)

    def __call__(self, task, args, message, batchsize):
        logger.debug('__call__: len(client) = {}'.format(len(self.client)))
        return list(parallel_map(self.client, task, args, message, batchsize))
","from abc import ABCMeta, abstractmethod
from .constants import PARALLEL_PROFILE
from .utils import setup_progressbar, grouper, flatten_list
import logging
import multiprocessing
import sys
logger = logging.getLogger(__name__)

__author__ = 'kgori'

""""""
Introduced this workaround for a bug in multiprocessing where
errors are thrown for an EINTR interrupt.
Workaround taken from http://stackoverflow.com/a/5395277 - but
changed because can't subclass from multiprocessing.Queue (it's
a factory method)
""""""
import errno

def retry_on_eintr(function, *args, **kw):
    while True:
        try:
            return function(*args, **kw)
        except IOError as e:
            if e.errno == errno.EINTR:
                continue
            else:
                raise

def get_from_queue(queue, block=True, timeout=None):
    return retry_on_eintr(queue.get, block, timeout)
""""""
End of workaround
""""""

def fun(f, q_in, q_out):
    while True:
        (i, x) = get_from_queue(q_in)
        if i is None:
            break
        q_out.put((i, f(*x)))

def async_avail():
    from IPython import parallel
    try:
        client = parallel.Client(PARALLEL_PROFILE)
        return len(client) > 0
    except IOError:
        return False
    except Exception:
        return False

def get_client():
    from IPython import parallel
    try:
        client = parallel.Client(profile=PARALLEL_PROFILE)
        return client if len(client) > 0 else None
    except IOError:
        return None
    except Exception:
        return None

def tupleise(args):
    for a in args:
        if isinstance(a, (tuple, list)):
            yield a
        else:
            yield (a,)

def get_njobs(nargs, args):
    if nargs is not None:
        njobs = nargs
    elif isinstance(args, (tuple, list)):
        njobs = len(args)
    else:
        njobs = int(sys.maxsize / 1000000)  # sys.maxsize is too large for progressbar to display ETA (datetime issue)
    return njobs


def parallel_map(client, task, args, message, batchsize=1, background=False, nargs=None):
    """"""
    Helper to map a function over a sequence of inputs, in parallel, with progress meter.
    :param client: IPython.parallel.Client instance
    :param task: Function
    :param args: Must be a list of tuples of arguments that the task function will be mapped onto.
                 If the function takes a single argument, it still must be a 1-tuple.
    :param message: String for progress bar
    :param batchsize: Jobs are shipped in batches of this size. Higher numbers mean less network traffic,
                      but longer execution time per job.
    :return: IPython.parallel.AsyncMapResult
    """"""
    show_progress = bool(message)
    njobs = get_njobs(nargs, args)
    nproc = len(client)
    logger.debug('parallel_map: len(client) = {}'.format(len(client)))
    view = client.load_balanced_view()
    if show_progress:
        message += ' (IP:{}w:{}b)'.format(nproc, batchsize)
        pbar = setup_progressbar(message, njobs, simple_progress=True)
        if not background:
            pbar.start()
    map_result = view.map(task, *list(zip(*args)), chunksize=batchsize)
    if background:
        return map_result, client
    while not map_result.ready():
        map_result.wait(1)
        if show_progress:
            pbar.update(min(njobs, map_result.progress * batchsize))
    if show_progress:
        pbar.finish()
    return map_result

def sequential_map(task, args, message, nargs=None):
    """"""
    Helper to map a function over a sequence of inputs, sequentially, with progress meter.
    :param client: IPython.parallel.Client instance
    :param task: Function
    :param args: Must be a list of tuples of arguments that the task function will be mapped onto.
                 If the function takes a single argument, it still must be a 1-tuple.
    :param message: String for progress bar
    :param batchsize: Jobs are shipped in batches of this size. Higher numbers mean less network traffic,
                      but longer execution time per job.
    :return: IPython.parallel.AsyncMapResult
    """"""
    njobs = get_njobs(nargs, args)
    show_progress = bool(message)
    if show_progress:
        pbar = setup_progressbar(message, njobs, simple_progress=True)
        pbar.start()
    map_result = []
    for (i, arglist) in enumerate(tupleise(args), start=1):
        map_result.append(task(*arglist))
        if show_progress:
            pbar.update(i)
    if show_progress:
        pbar.finish()
    return map_result

def threadpool_map(task, args, message, concurrency, batchsize=1, nargs=None):
    """"""
    Helper to map a function over a range of inputs, using a threadpool, with a progress meter
    """"""
    import concurrent.futures


    njobs = get_njobs(nargs, args)
    show_progress = bool(message)
    batches = grouper(batchsize, tupleise(args))
    batched_task = lambda batch: [task(*job) for job in batch]
    if show_progress:
        message += ' (TP:{}w:{}b)'.format(concurrency, batchsize)
        pbar = setup_progressbar(message, njobs, simple_progress=True)
        pbar.start()
    with concurrent.futures.ThreadPoolExecutor(max_workers=concurrency) as executor:
        futures = []
        completed_count = 0
        for batch in batches:
            futures.append(executor.submit(batched_task, batch))

        if show_progress:
            for i, fut in enumerate(concurrent.futures.as_completed(futures), start=1):
                completed_count += len(fut.result())
                pbar.update(completed_count)

        else:
            concurrent.futures.wait(futures)

    if show_progress:
        pbar.finish()

    return flatten_list([fut.result() for fut in futures])

def processpool_map(task, args, message, concurrency, batchsize=1, nargs=None):
    """"""
    See http://stackoverflow.com/a/16071616
    """"""
    njobs = get_njobs(nargs, args)
    show_progress = bool(message)
    batches = grouper(batchsize, tupleise(args))
    def batched_task(*batch):
        return [task(*job) for job in batch]

    if show_progress:
        message += ' (PP:{}w:{}b)'.format(concurrency, batchsize)
        pbar = setup_progressbar(message, njobs, simple_progress=True)
        pbar.start()
    
    q_in   = multiprocessing.Queue()  # Should I limit either queue size? Limiting in-queue
    q_out  = multiprocessing.Queue()  # increases time taken to send jobs, makes pbar less useful

    proc = [multiprocessing.Process(target=fun, args=(batched_task, q_in, q_out)) for _ in range(concurrency)]
    for p in proc:
        p.daemon = True
        p.start()
    sent = [q_in.put((i, x)) for (i, x) in enumerate(batches)]
    [q_in.put((None, None)) for _ in range(concurrency)]
    res = []
    completed_count = 0
    for _ in range(len(sent)):
        result = get_from_queue(q_out)
        res.append(result)
        completed_count += len(result[1])
        if show_progress:
            pbar.update(completed_count)

    [p.join() for p in proc]
    if show_progress:
        pbar.finish()

    return flatten_list([x for (i, x) in sorted(res)])


class JobHandler(object):
    """"""
    Base class to provide uniform interface for all job handlers
    """"""
    metaclass = ABCMeta

    @abstractmethod
    def __call__(self, task, args, message, batchsize):
        """""" If you define a message, then progress will be written to stderr """"""
        pass


class SequentialJobHandler(JobHandler):
    """"""
    Jobs are handled using a simple map
    """"""
    def __call__(self, task, args, message, batchsize, nargs=None):
        if batchsize > 1:
            logger.warn(""Setting batchsize > 1 has no effect when using a SequentialJobHandler"")
        return sequential_map(task, args, message, nargs)


class ThreadpoolJobHandler(JobHandler):
    """"""
    Jobs are handled by a threadpool using concurrent.futures
    """"""
    def __init__(self, concurrency):
        self.concurrency = concurrency

    def __call__(self, task, args, message, batchsize, nargs=None):
        return threadpool_map(task, args, message, self.concurrency, batchsize, nargs)


class ProcesspoolJobHandler(JobHandler):
    """"""
    Jobs are handled by a threadpool using concurrent.futures
    """"""
    def __init__(self, concurrency):
        self.concurrency = concurrency

    def __call__(self, task, args, message, batchsize, nargs=None):
        return processpool_map(task, args, message, self.concurrency, batchsize, nargs)


class IPythonJobHandler(JobHandler):
    """"""
    Jobs are handled using an IPython.parallel.Client
    """"""
    def __init__(self, profile=None):
        """"""
        Initialise the IPythonJobHandler using the given ipython profile.

        Parameters
        ----------

        profile:  string
                  The ipython profile to connect to - this should already be running an ipcluster
                  If the connection fails it raises a RuntimeError
        """"""
        import IPython.parallel
        try:
            self.client=IPython.parallel.Client(profile=profile)
            logger.debug('__init__: len(client) = {}'.format(len(self.client)))
        except (IOError, IPython.parallel.TimeoutError):
            msg = 'Could not obtain an IPython parallel Client using profile ""{}""'.format(profile)
            logger.error(msg)
            raise RuntimeError(msg)

    def __call__(self, task, args, message, batchsize):
        logger.debug('__call__: len(client) = {}'.format(len(self.client)))
        return list(parallel_map(self.client, task, args, message, batchsize))
",FALSE,,5056
4985,InitialSO.csv4985.txt,InitialGit.csv4985.txt,15,"// ----------------------------------------------------------
// If you're not in IE (or IE version is less than 5) then:
// ie === undefined
// If you're in IE (>=5) then you can determine which version:
// ie === 7; // IE7
// Thus, to detect IE:
// if (ie) {}
// And to detect the version:
// ie === 6 // IE6
// ie > 7 // IE8, IE9, IE10 ...
// ie < 9 // Anything less than IE9
// ----------------------------------------------------------
var ie = (function(){
    var undef,rv = -1; // Return value assumes failure.
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');

    if (msie > 0) {
        // IE 10 or older => return version number
        rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    } else if (trident > 0) {
        // IE 11 (or newer) => return version number
        var rvNum = ua.indexOf('rv:');
        rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
    }

    return ((rv > -1) ? rv : undef);
}());
 ","// ----------------------------------------------------------
// If you're not in IE (or IE version is less than 5) then:
// ie === undefined
// If you're in IE (>=5) then you can determine which version:
// ie === 7; // IE7
// Thus, to detect IE:
// if (ie) {}
// And to detect the version:
// ie === 6 // IE6
// ie > 7 // IE8, IE9, IE10 ...
// ie < 9 // Anything less than IE9
// ----------------------------------------------------------
var ie = (function(){
    var undef,rv = -1; // Return value assumes failure.
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');

    if (msie > 0) {
        // IE 10 or older => return version number
        rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    } else if (trident > 0) {
        // IE 11 (or newer) => return version number
        var rvNum = ua.indexOf('rv:');
        rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
    }

    return ((rv > -1) ? rv : undef);
}());
 ",TRUE,"(function() {

    // detect if IE : from http://stackoverflow.com/a/16657946
    var ie = (function(){
        var undef,rv = -1; // Return value assumes failure.
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        var trident = ua.indexOf('Trident/');

        if (msie > 0) {
            // IE 10 or older => return version number
            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        } else if (trident > 0) {
            // IE 11 (or newer) => return version number
            var rvNum = ua.indexOf('rv:');
            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
        }

        return ((rv > -1) ? rv : undef);
    }());


    // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179
    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    var keys = [32, 37, 38, 39, 40], wheelIter = 0;

    function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    }

    function keydown(e) {
        for (var i = keys.length; i--;) {
            if (e.keyCode === keys[i]) {
                preventDefault(e);
                return;
            }
        }
    }

    function touchmove(e) {
        preventDefault(e);
    }

    function wheel(e) {
        // for IE
        //if( ie ) {
        //preventDefault(e);
        //}
    }

    function disable_scroll() {
        window.onmousewheel = document.onmousewheel = wheel;
        document.onkeydown = keydown;
        document.body.ontouchmove = touchmove;
    }

    function enable_scroll() {
        window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;
    }

    var docElem = window.document.documentElement,
        scrollVal,
        isRevealed,
        noscroll,
        isAnimating,
        container = document.getElementById( 'ct-js-wrapper' ),
        trigger = container.querySelector( 'button.trigger' );

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    function scrollPage() {
        scrollVal = scrollY();

        if( noscroll && !ie ) {
            if( scrollVal < 0 ) return false;
            // keep it that way
            window.scrollTo( 0, 0 );
        }

        if( classie.has( container, 'notrans' ) ) {
            classie.remove( container, 'notrans' );
            return false;
        }

        if( isAnimating ) {
            return false;
        }

        if( scrollVal <= 0 && isRevealed ) {
            toggle(0);
        }
        else if( scrollVal > 0 && !isRevealed ){
            toggle(1);
        }
    }

    function toggle( reveal ) {
        isAnimating = true;

        if( reveal ) {
            classie.add( container, 'modify' );
        }
        else {
            noscroll = true;
            disable_scroll();
            classie.remove( container, 'modify' );
        }

        // simulating the end of the transition:
        setTimeout( function() {
            isRevealed = !isRevealed;
            isAnimating = false;
            if( reveal ) {
                noscroll = false;
                enable_scroll();
            }
        }, 1200 );
    }

    // refreshing the page...
    var pageScroll = scrollY();
    noscroll = pageScroll === 0;

    disable_scroll();

    if( pageScroll ) {
        isRevealed = true;
        classie.add( container, 'notrans' );
        classie.add( container, 'modify' );
    }

    window.addEventListener( 'scroll', scrollPage );
    trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
})();","(function() {

    // detect if IE : from http://stackoverflow.com/a/16657946
    var ie = (function(){
        var undef,rv = -1; // Return value assumes failure.
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        var trident = ua.indexOf('Trident/');

        if (msie > 0) {
            // IE 10 or older => return version number
            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        } else if (trident > 0) {
            // IE 11 (or newer) => return version number
            var rvNum = ua.indexOf('rv:');
            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
        }

        return ((rv > -1) ? rv : undef);
    }());


    // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179
    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    var keys = [32, 37, 38, 39, 40], wheelIter = 0;

    function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    }

    function keydown(e) {
        for (var i = keys.length; i--;) {
            if (e.keyCode === keys[i]) {
                preventDefault(e);
                return;
            }
        }
    }

    function touchmove(e) {
        preventDefault(e);
    }

    function wheel(e) {
        // for IE
        //if( ie ) {
        //preventDefault(e);
        //}
    }

    function disable_scroll() {
        window.onmousewheel = document.onmousewheel = wheel;
        document.onkeydown = keydown;
        document.body.ontouchmove = touchmove;
    }

    function enable_scroll() {
        window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;
    }

    var docElem = window.document.documentElement,
        scrollVal,
        isRevealed,
        noscroll,
        isAnimating,
        container = document.getElementById( 'ct-js-wrapper' ),
        trigger = container.querySelector( 'button.trigger' );

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    function scrollPage() {
        scrollVal = scrollY();

        if( noscroll && !ie ) {
            if( scrollVal < 0 ) return false;
            // keep it that way
            window.scrollTo( 0, 0 );
        }

        if( classie.has( container, 'notrans' ) ) {
            classie.remove( container, 'notrans' );
            return false;
        }

        if( isAnimating ) {
            return false;
        }

        if( scrollVal <= 0 && isRevealed ) {
            toggle(0);
        }
        else if( scrollVal > 0 && !isRevealed ){
            toggle(1);
        }
    }

    function toggle( reveal ) {
        isAnimating = true;

        if( reveal ) {
            classie.add( container, 'modify' );
        }
        else {
            noscroll = true;
            disable_scroll();
            classie.remove( container, 'modify' );
        }

        // simulating the end of the transition:
        setTimeout( function() {
            isRevealed = !isRevealed;
            isAnimating = false;
            if( reveal ) {
                noscroll = false;
                enable_scroll();
            }
        }, 1200 );
    }

    // refreshing the page...
    var pageScroll = scrollY();
    noscroll = pageScroll === 0;

    disable_scroll();

    if( pageScroll ) {
        isRevealed = true;
        classie.add( container, 'notrans' );
        classie.add( container, 'modify' );
    }

    window.addEventListener( 'scroll', scrollPage );
    trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
})();",TRUE,,5058
4986,InitialSO.csv4986.txt,InitialGit.csv4986.txt,15,"// ----------------------------------------------------------
// If you're not in IE (or IE version is less than 5) then:
// ie === undefined
// If you're in IE (>=5) then you can determine which version:
// ie === 7; // IE7
// Thus, to detect IE:
// if (ie) {}
// And to detect the version:
// ie === 6 // IE6
// ie > 7 // IE8, IE9, IE10 ...
// ie < 9 // Anything less than IE9
// ----------------------------------------------------------
var ie = (function(){
    var undef,rv = -1; // Return value assumes failure.
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');

    if (msie > 0) {
        // IE 10 or older => return version number
        rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    } else if (trident > 0) {
        // IE 11 (or newer) => return version number
        var rvNum = ua.indexOf('rv:');
        rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
    }

    return ((rv > -1) ? rv : undef);
}());
 ","// ----------------------------------------------------------
// If you're not in IE (or IE version is less than 5) then:
// ie === undefined
// If you're in IE (>=5) then you can determine which version:
// ie === 7; // IE7
// Thus, to detect IE:
// if (ie) {}
// And to detect the version:
// ie === 6 // IE6
// ie > 7 // IE8, IE9, IE10 ...
// ie < 9 // Anything less than IE9
// ----------------------------------------------------------
var ie = (function(){
    var undef,rv = -1; // Return value assumes failure.
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var trident = ua.indexOf('Trident/');

    if (msie > 0) {
        // IE 10 or older => return version number
        rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    } else if (trident > 0) {
        // IE 11 (or newer) => return version number
        var rvNum = ua.indexOf('rv:');
        rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
    }

    return ((rv > -1) ? rv : undef);
}());
 ",TRUE,"(function() {

    // detect if IE : from http://stackoverflow.com/a/16657946
    var ie = (function(){
        var undef,rv = -1; // Return value assumes failure.
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        var trident = ua.indexOf('Trident/');

        if (msie > 0) {
            // IE 10 or older => return version number
            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        } else if (trident > 0) {
            // IE 11 (or newer) => return version number
            var rvNum = ua.indexOf('rv:');
            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
        }

        return ((rv > -1) ? rv : undef);
    }());


    // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179
    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    var keys = [32, 37, 38, 39, 40], wheelIter = 0;

    function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    }

    function keydown(e) {
        for (var i = keys.length; i--;) {
            if (e.keyCode === keys[i]) {
                preventDefault(e);
                return;
            }
        }
    }

    function touchmove(e) {
        preventDefault(e);
    }

    function wheel(e) {
        // for IE
        //if( ie ) {
        //preventDefault(e);
        //}
    }

    function disable_scroll() {
        window.onmousewheel = document.onmousewheel = wheel;
        document.onkeydown = keydown;
        document.body.ontouchmove = touchmove;
    }

    function enable_scroll() {
        window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;
    }

    var docElem = window.document.documentElement,
        scrollVal,
        isRevealed,
        noscroll,
        isAnimating,
        container = document.getElementById( 'wrapper' ),
        trigger = container.querySelector( 'button.trigger' );

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    function scrollPage() {
        scrollVal = scrollY();

        if( noscroll && !ie ) {
            if( scrollVal < 0 ) return false;
            // keep it that way
            window.scrollTo( 0, 0 );
        }

        if( classie.has( container, 'notrans' ) ) {
            classie.remove( container, 'notrans' );
            return false;
        }

        if( isAnimating ) {
            return false;
        }

        if( scrollVal <= 0 && isRevealed ) {
            toggle(0);
        }
        else if( scrollVal > 0 && !isRevealed ){
            toggle(1);
        }
    }

    function toggle( reveal ) {
        isAnimating = true;

        if( reveal ) {
            classie.add( container, 'modify' );
        }
        else {
            noscroll = true;
            disable_scroll();
            classie.remove( container, 'modify' );
        }

        // simulating the end of the transition:
        setTimeout( function() {
            isRevealed = !isRevealed;
            isAnimating = false;
            if( reveal ) {
                noscroll = false;
                enable_scroll();
            }
        }, 600 );
    }

    // refreshing the page...
    var pageScroll = scrollY();
    noscroll = pageScroll === 0;

    disable_scroll();

    if( pageScroll ) {
        isRevealed = true;
        classie.add( container, 'notrans' );
        classie.add( container, 'modify' );
    }

    window.addEventListener( 'scroll', scrollPage );
    trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
})();","(function() {

    // detect if IE : from http://stackoverflow.com/a/16657946
    var ie = (function(){
        var undef,rv = -1; // Return value assumes failure.
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        var trident = ua.indexOf('Trident/');

        if (msie > 0) {
            // IE 10 or older => return version number
            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        } else if (trident > 0) {
            // IE 11 (or newer) => return version number
            var rvNum = ua.indexOf('rv:');
            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);
        }

        return ((rv > -1) ? rv : undef);
    }());


    // disable/enable scroll (mousewheel and keys) from http://stackoverflow.com/a/4770179
    // left: 37, up: 38, right: 39, down: 40,
    // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
    var keys = [32, 37, 38, 39, 40], wheelIter = 0;

    function preventDefault(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    }

    function keydown(e) {
        for (var i = keys.length; i--;) {
            if (e.keyCode === keys[i]) {
                preventDefault(e);
                return;
            }
        }
    }

    function touchmove(e) {
        preventDefault(e);
    }

    function wheel(e) {
        // for IE
        //if( ie ) {
        //preventDefault(e);
        //}
    }

    function disable_scroll() {
        window.onmousewheel = document.onmousewheel = wheel;
        document.onkeydown = keydown;
        document.body.ontouchmove = touchmove;
    }

    function enable_scroll() {
        window.onmousewheel = document.onmousewheel = document.onkeydown = document.body.ontouchmove = null;
    }

    var docElem = window.document.documentElement,
        scrollVal,
        isRevealed,
        noscroll,
        isAnimating,
        container = document.getElementById( 'wrapper' ),
        trigger = container.querySelector( 'button.trigger' );

    function scrollY() {
        return window.pageYOffset || docElem.scrollTop;
    }

    function scrollPage() {
        scrollVal = scrollY();

        if( noscroll && !ie ) {
            if( scrollVal < 0 ) return false;
            // keep it that way
            window.scrollTo( 0, 0 );
        }

        if( classie.has( container, 'notrans' ) ) {
            classie.remove( container, 'notrans' );
            return false;
        }

        if( isAnimating ) {
            return false;
        }

        if( scrollVal <= 0 && isRevealed ) {
            toggle(0);
        }
        else if( scrollVal > 0 && !isRevealed ){
            toggle(1);
        }
    }

    function toggle( reveal ) {
        isAnimating = true;

        if( reveal ) {
            classie.add( container, 'modify' );
        }
        else {
            noscroll = true;
            disable_scroll();
            classie.remove( container, 'modify' );
        }

        // simulating the end of the transition:
        setTimeout( function() {
            isRevealed = !isRevealed;
            isAnimating = false;
            if( reveal ) {
                noscroll = false;
                enable_scroll();
            }
        }, 600 );
    }

    // refreshing the page...
    var pageScroll = scrollY();
    noscroll = pageScroll === 0;

    disable_scroll();

    if( pageScroll ) {
        isRevealed = true;
        classie.add( container, 'notrans' );
        classie.add( container, 'modify' );
    }

    window.addEventListener( 'scroll', scrollPage );
    trigger.addEventListener( 'click', function() { toggle( 'reveal' ); } );
})();",TRUE,,5064
4987,InitialSO.csv4987.txt,InitialGit.csv4987.txt,5,"@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
    super.onPreferenceTreeClick(preferenceScreen, preference);

    // If the user has clicked on a preference screen, set up the action bar
    if (preference instanceof PreferenceScreen) {
        initializeActionBar((PreferenceScreen) preference);
    }

    return false;
}
 /** Sets up the action bar for an {@link PreferenceScreen} */
public static void initializeActionBar(PreferenceScreen preferenceScreen) {
    final Dialog dialog = preferenceScreen.getDialog();

    if (dialog != null) {
        // Inialize the action bar
        dialog.getActionBar().setDisplayHomeAsUpEnabled(true);

        // Apply custom home button area click listener to close the PreferenceScreen because PreferenceScreens are dialogs which swallow
        // events instead of passing to the activity
        // Related Issue: https://code.google.com/p/android/issues/detail?id=4611
        View homeBtn = dialog.findViewById(android.R.id.home);

        if (homeBtn != null) {
            OnClickListener dismissDialogClickListener = new OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                }
            };

            // Prepare yourselves for some hacky programming
            ViewParent homeBtnContainer = homeBtn.getParent();

            // The home button is an ImageView inside a FrameLayout
            if (homeBtnContainer instanceof FrameLayout) {
                ViewGroup containerParent = (ViewGroup) homeBtnContainer.getParent();

                if (containerParent instanceof LinearLayout) {
                    // This view also contains the title text, set the whole view as clickable
                    ((LinearLayout) containerParent).setOnClickListener(dismissDialogClickListener);
                } else {
                    // Just set it on the home button
                    ((FrameLayout) homeBtnContainer).setOnClickListener(dismissDialogClickListener);
                }
            } else {
                // The 'If all else fails' default case
                homeBtn.setOnClickListener(dismissDialogClickListener);
            }
        }    
    }
}
 ","@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
    super.onPreferenceTreeClick(preferenceScreen, preference);

    // If the user has clicked on a preference screen, set up the action bar
    if (preference instanceof PreferenceScreen) {
        initializeActionBar((PreferenceScreen) preference);
    }

    return false;
}
 /** Sets up the action bar for an {@link PreferenceScreen} */
public static void initializeActionBar(PreferenceScreen preferenceScreen) {
    final Dialog dialog = preferenceScreen.getDialog();

    if (dialog != null) {
        // Inialize the action bar
        dialog.getActionBar().setDisplayHomeAsUpEnabled(true);

        // Apply custom home button area click listener to close the PreferenceScreen because PreferenceScreens are dialogs which swallow
        // events instead of passing to the activity
        // Related Issue: https://code.google.com/p/android/issues/detail?id=4611
        View homeBtn = dialog.findViewById(android.R.id.home);

        if (homeBtn != null) {
            OnClickListener dismissDialogClickListener = new OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                }
            };

            // Prepare yourselves for some hacky programming
            ViewParent homeBtnContainer = homeBtn.getParent();

            // The home button is an ImageView inside a FrameLayout
            if (homeBtnContainer instanceof FrameLayout) {
                ViewGroup containerParent = (ViewGroup) homeBtnContainer.getParent();

                if (containerParent instanceof LinearLayout) {
                    // This view also contains the title text, set the whole view as clickable
                    ((LinearLayout) containerParent).setOnClickListener(dismissDialogClickListener);
                } else {
                    // Just set it on the home button
                    ((FrameLayout) homeBtnContainer).setOnClickListener(dismissDialogClickListener);
                }
            } else {
                // The 'If all else fails' default case
                homeBtn.setOnClickListener(dismissDialogClickListener);
            }
        }    
    }
}
 ",TRUE,"package eu.siacs.conversations.ui;

import android.app.Dialog;
import android.os.Bundle;
import android.preference.Preference;
import android.preference.PreferenceFragment;
import android.preference.PreferenceScreen;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

import eu.siacs.conversations.R;

public class SettingsFragment extends PreferenceFragment {

	//http://stackoverflow.com/questions/16374820/action-bar-home-button-not-functional-with-nested-preferencescreen/16800527#16800527
	private void initializeActionBar(PreferenceScreen preferenceScreen) {
		final Dialog dialog = preferenceScreen.getDialog();

		if (dialog != null) {
			View homeBtn = dialog.findViewById(android.R.id.home);

			if (homeBtn != null) {
				View.OnClickListener dismissDialogClickListener = new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						dialog.dismiss();
					}
				};

				ViewParent homeBtnContainer = homeBtn.getParent();

				if (homeBtnContainer instanceof FrameLayout) {
					ViewGroup containerParent = (ViewGroup) homeBtnContainer.getParent();
					if (containerParent instanceof LinearLayout) {
						((LinearLayout) containerParent).setOnClickListener(dismissDialogClickListener);
					} else {
						((FrameLayout) homeBtnContainer).setOnClickListener(dismissDialogClickListener);
					}
				} else {
					homeBtn.setOnClickListener(dismissDialogClickListener);
				}
			}
		}
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Load the preferences from an XML resource
		addPreferencesFromResource(R.xml.preferences);
	}

	@Override
	public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
		super.onPreferenceTreeClick(preferenceScreen, preference);
		if (preference instanceof PreferenceScreen) {
			initializeActionBar((PreferenceScreen) preference);
		}
		return false;
	}
}
","package eu.siacs.conversations.ui;

import android.app.Dialog;
import android.os.Bundle;
import android.preference.Preference;
import android.preference.PreferenceFragment;
import android.preference.PreferenceScreen;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

import eu.siacs.conversations.R;

public class SettingsFragment extends PreferenceFragment {

	//http://stackoverflow.com/questions/16374820/action-bar-home-button-not-functional-with-nested-preferencescreen/16800527#16800527
	private void initializeActionBar(PreferenceScreen preferenceScreen) {
		final Dialog dialog = preferenceScreen.getDialog();

		if (dialog != null) {
			View homeBtn = dialog.findViewById(android.R.id.home);

			if (homeBtn != null) {
				View.OnClickListener dismissDialogClickListener = new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						dialog.dismiss();
					}
				};

				ViewParent homeBtnContainer = homeBtn.getParent();

				if (homeBtnContainer instanceof FrameLayout) {
					ViewGroup containerParent = (ViewGroup) homeBtnContainer.getParent();
					if (containerParent instanceof LinearLayout) {
						((LinearLayout) containerParent).setOnClickListener(dismissDialogClickListener);
					} else {
						((FrameLayout) homeBtnContainer).setOnClickListener(dismissDialogClickListener);
					}
				} else {
					homeBtn.setOnClickListener(dismissDialogClickListener);
				}
			}
		}
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Load the preferences from an XML resource
		addPreferencesFromResource(R.xml.preferences);
	}

	@Override
	public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
		super.onPreferenceTreeClick(preferenceScreen, preference);
		if (preference instanceof PreferenceScreen) {
			initializeActionBar((PreferenceScreen) preference);
		}
		return false;
	}
}
",TRUE,,5065
4988,InitialSO.csv4988.txt,InitialGit.csv4988.txt,5,"createFromFormat() class MyDateTime extends DateTime
{
    public static function createFromFormat($format, $time, $timezone = null)
    {
        if(!$timezone) $timezone = new DateTimeZone(date_default_timezone_get());
        $version = explode('.', phpversion());
        if(((int)$version[0] >= 5 && (int)$version[1] >= 2 && (int)$version[2] > 17)){
            return parent::createFromFormat($format, $time, $timezone);
        }
        return new DateTime(date($format, strtotime($time)), $timezone);
    }
}

$dateTime = MyDateTime::createFromFormat('Y-m-d', '2013-6-13');
var_dump($dateTime);
var_dump($dateTime->format('Y-m-d'));
 ","createFromFormat() class MyDateTime extends DateTime
{
    public static function createFromFormat($format, $time, $timezone = null)
    {
        if(!$timezone) $timezone = new DateTimeZone(date_default_timezone_get());
        $version = explode('.', phpversion());
        if(((int)$version[0] >= 5 && (int)$version[1] >= 2 && (int)$version[2] > 17)){
            return parent::createFromFormat($format, $time, $timezone);
        }
        return new DateTime(date($format, strtotime($time)), $timezone);
    }
}

$dateTime = MyDateTime::createFromFormat('Y-m-d', '2013-6-13');
var_dump($dateTime);
var_dump($dateTime->format('Y-m-d'));
 ",TRUE,"<?php
/**
 * DateTime compatibility class
 *
 * @package WordPress
 * @subpackage JSON API
 */
class WP_JSON_DateTime extends DateTime {
	/**
	 * Workaround for DateTime::createFromFormat on PHP > 5.2
	 *
	 * @link http://stackoverflow.com/a/17084893/717643
	 *
	 * @param  string       $format   The format that the passed in string should be in.
	 * @param  string       $string   String representing the time.
	 * @param  DateTimeZone $timezone A DateTimeZone object representing the desired time zone.
	 * @return Datetime
	 */
	public static function createFromFormat( $format, $time, $timezone = null ) {
		if ( is_null( $timezone ) ) {
			$timezone = new DateTimeZone( date_default_timezone_get() );
		}

		if ( method_exists( 'DateTime', 'createFromFormat' ) ) {
			return parent::createFromFormat( $format, $time, $timezone );
		}

		return new DateTime( date( $format, strtotime( $time ) ), $timezone );
	}
}
","<?php
/**
 * DateTime compatibility class
 *
 * @package WordPress
 * @subpackage JSON API
 */
class WP_JSON_DateTime extends DateTime {
	/**
	 * Workaround for DateTime::createFromFormat on PHP > 5.2
	 *
	 * @link http://stackoverflow.com/a/17084893/717643
	 *
	 * @param  string       $format   The format that the passed in string should be in.
	 * @param  string       $string   String representing the time.
	 * @param  DateTimeZone $timezone A DateTimeZone object representing the desired time zone.
	 * @return Datetime
	 */
	public static function createFromFormat( $format, $time, $timezone = null ) {
		if ( is_null( $timezone ) ) {
			$timezone = new DateTimeZone( date_default_timezone_get() );
		}

		if ( method_exists( 'DateTime', 'createFromFormat' ) ) {
			return parent::createFromFormat( $format, $time, $timezone );
		}

		return new DateTime( date( $format, strtotime( $time ) ), $timezone );
	}
}
",TRUE,,5066
5035,InitialSO.csv5035.txt,InitialGit.csv5035.txt,4,"edit fspecial ...
  case 'gaussian' % Gaussian filter

     siz   = (p2-1)/2;
     std   = p3;
     
     [x,y] = meshgrid(-siz(2):siz(2),-siz(1):siz(1));
     arg   = -(x.*x + y.*y)/(2*std*std);

     h     = exp(arg);
     h(h<eps*max(h(:))) = 0;

     sumh = sum(h(:));
     if sumh ~= 0,
       h  = h/sumh;
     end;
...
 import numpy as np

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """"""
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    """"""
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h < np.finfo(h.dtype).eps*h.max() ] = 0
    sumh = h.sum()
    if sumh != 0:
        h /= sumh
    return h
 fspecial  >> fspecial('gaussian',5,1)

 0.002969     0.013306     0.021938     0.013306     0.002969
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.021938      0.09832       0.1621      0.09832     0.021938
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.002969     0.013306     0.021938     0.013306     0.002969

 : matlab_style_gauss2D((5,5),1)

array([[ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.021938,  0.09832 ,  0.162103,  0.09832 ,  0.021938],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969]])
 ","edit fspecial ...
  case 'gaussian' % Gaussian filter

     siz   = (p2-1)/2;
     std   = p3;

     [x,y] = meshgrid(-siz(2):siz(2),-siz(1):siz(1));
     arg   = -(x.*x + y.*y)/(2*std*std);

     h     = exp(arg);
     h(h<eps*max(h(:))) = 0;

     sumh = sum(h(:));
     if sumh ~= 0,
       h  = h/sumh;
     end;
...
 import numpy as np

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """"""
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    """"""
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h < np.finfo(h.dtype).eps*h.max() ] = 0
    sumh = h.sum()
    if sumh != 0:
        h /= sumh
    return h
 fspecial  >> fspecial('gaussian',5,1)

 0.002969     0.013306     0.021938     0.013306     0.002969
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.021938      0.09832       0.1621      0.09832     0.021938
 0.013306     0.059634      0.09832     0.059634     0.013306
 0.002969     0.013306     0.021938     0.013306     0.002969

 : matlab_style_gauss2D((5,5),1)

array([[ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.021938,  0.09832 ,  0.162103,  0.09832 ,  0.021938],
       [ 0.013306,  0.059634,  0.09832 ,  0.059634,  0.013306],
       [ 0.002969,  0.013306,  0.021938,  0.013306,  0.002969]])
 ",FALSE,"import numpy as np
from scipy.signal import convolve2d
import scipy.io as sio
from skimage import measure
import glob
import cv2
import h5py
import os
import gc
import pdb
import glob
import pandas as pd
from keras.utils import np_utils

def ismember(A, B):
    return np.any([np.sum(A == b) for b in B])

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """"""
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    Credit to: http://stackoverflow.com/a/17201686/1586200
    """"""
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h < np.finfo(h.dtype).eps*h.max() ] = 0
    sum_h = h.sum()
    if sum_h != 0:
        h /= sum_h
    return h

def preprocess_channel(channel, h):
    mu = convolve2d(channel, h, mode='same')
    mu_sq = np.square(mu)
    sigma = np.sqrt(np.abs(convolve2d(np.square(channel),h,mode='same') - mu_sq))
    structChannel = np.divide((channel-mu),(sigma+(1./255.)))
    return structChannel

def preprocess_image(img, h):
    img = np.float32(img)
    img = img/255.
    # img = cv2.cvtColor(img,code=cv2.COLOR_BGR2Gray)
    structImg = np.empty_like(img)
    structImg[:,:,0] = preprocess_channel(img[:,:,0],h)
    structImg[:,:,1] = preprocess_channel(img[:,:,1],h)
    structImg[:,:,2] = preprocess_channel(img[:,:,2],h)
    # cv2.imshow(""imgOriginal"",img)
    # cv2.imshow(""imgProcessed"",structImg)
    # cv2.waitKey(0)
    return structImg


def rmse_patches(patch1,patch2,patchSize):
    rmse_value = (1./3.)*(np.sqrt(np.sum(np.sum(np.square(patch1[:,:,0] - patch2[:,:,0])))/(patchSize**2)) +
                          np.sqrt(np.sum(np.sum(np.square(patch1[:,:,1] - patch2[:,:,1])))/(patchSize**2)) +
                          np.sqrt(np.sum(np.sum(np.square(patch1[:,:,2] - patch2[:,:,2])))/(patchSize**2)))
    return rmse_value

trainImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_train/""
valImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_val/""
testImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_test/""
# imgWritePath = ""/media/vijetha/Seagate Expansion Drive/ImageQualityEvaluationDatabases/tid2013_original/allImgs_ref_distorted_preprocessed_val/""
# hdfSavePath = ""/media/ASUAD\pchandak/Seagate Expansion Drive1/imageQuality_HDF5Files_March21_2016/""
imgRows = 384
imgCols = 512
imgChannels = 3
patchSize = 32
randPatchCountDesired = 1000
overlap = 4  # 1/4th overlap
# skip_distortions = np.array([2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
skip_distortions = np.array([16, 17, 18])

mode = ""train""


h = matlab_style_gauss2D(shape=(7,7),sigma=7./6.)

if mode == ""train"":
    fileList = glob.glob(trainImgsPath+""*.bmp"")
elif mode == ""val"":
    fileList = glob.glob(valImgsPath+""*.bmp"")
else:
    fileList = glob.glob(testImgsPath + ""*.bmp"")

splitF = [f.split(""/"")[-1] for f in fileList]
refImgs = [f for f in splitF if ""_"" not in f]
nNoiseTypes = 24
noiseLevels = 5
rmse_th = 0.12
row = 0
col = 0

mos_scores = pd.read_csv('mos_with_names.txt', sep="" "", header = None)
mos_names = mos_scores.values[:,1]
for i in range(len(mos_names)):
    mos_names[i] = mos_names[i].lower()
mos_scores = mos_scores.values[:,0]

pdb.set_trace()
distImgs = [ [None]*((nNoiseTypes-len(skip_distortions))*noiseLevels) for i in range(len(refImgs))]
distLabels = np.empty(shape=(len(refImgs),(nNoiseTypes-len(skip_distortions))*noiseLevels, 2),dtype=int)

for imgName in refImgs:
    catCount = 1  # category 0 is reference images
    for i in range(1,nNoiseTypes+1):
        if ismember(i,skip_distortions):
            continue
        for j in range(1,noiseLevels+1):
            distImgs[row][col] = imgName[0:3] + ""_"" + ""{:0>2}"".format(i) + ""_"" + str(j) + "".bmp""
            distLabels[row][col][0] = j
            distLabels[row][col][1] = catCount
            catCount = catCount+1
            col += 1
    row += 1
    col = 0

finalDistPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
filteredPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
rmse_values = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
patchMos = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
filteredPatchMos = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)


for i in range(0,noiseLevels):
    for j in range(0,(nNoiseTypes-len(skip_distortions))*noiseLevels):
        # print ""j = "", j
        finalDistPatches[i][j] = []
        rmse_values[i][j] = []
        filteredPatches[i][j] = []
        patchMos[i][j] = []
        filteredPatchMos[i][j] = []

finalDistPatchCount = np.zeros(shape=(noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=int)
skipped = np.zeros(shape=(noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=int)

# for i in range(0, len(refImgs)):
#     print ""Reference Image "" + str(i) + "" under processing""
#     refImgName = refImgs[i]
#     if mode == ""train"":
#         refImg = cv2.imread(trainImgsPath + refImgName)
#     else:
#         refImg = cv2.imread(valImgsPath + refImgName)
#     refImg = preprocess_image(refImg,h)
#     for patch_col in range(3,imgCols-patchSize-3,patchSize):  # 3/4th overlap
#         for patch_row in range(3,imgRows-patchSize-3,patchSize):  # 3/4th overlap
#             refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
#             finalRefPatches.append(np.transpose(refPatch,(2,0,1)))
#             finalRefPatchCount = finalRefPatchCount + 1
# pdb.set_trace()
for i in range(0, len(refImgs)):
    print ""Distorted Image "" + str(i) + "" under processing""
    print ""Skipped patches - category-wise - : "" + str(skipped)
    print """"
    for k in range(len(finalDistPatches)):
        print ""k = "" + str(k) +"", "" + str(len(finalDistPatches[k]))
    # pdb.set_trace()
    refImgName = refImgs[i]
    if mode == ""train"":
        refImg = cv2.imread(trainImgsPath + refImgName)
    elif mode == ""val"":
        refImg = cv2.imread(valImgsPath + refImgName)
    else:
        refImg = cv2.imread(testImgsPath + refImgName)

    refImg = preprocess_image(refImg,h)

    distImgNames = distImgs[i]
    distImgLabels = distLabels[i]
    for imgName, imgLabel in zip(distImgNames, distImgLabels):
        patchMosScore = mos_scores[np.where(imgName.lower() == mos_names)[0][0]]
        if mode == ""train"":
            distImg = cv2.imread(trainImgsPath + imgName)
        elif mode == ""val"":
            distImg = cv2.imread(valImgsPath + imgName)
        else:
            distImg = cv2.imread(testImgsPath + imgName)

        distImg = preprocess_image(distImg,h)
        for patch_col in range(0,imgCols-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
            for patch_row in range(0,imgRows-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
                refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                distPatch = distImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                rmse_p = rmse_patches(refPatch,distPatch,patchSize)
                if rmse_p > rmse_th:
                    (finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]).append(np.transpose(distPatch,(2,0,1)))
                    (finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]).append(np.transpose(np.fliplr(distPatch),(2,0,1)))
                    finalDistPatchCount[imgLabel[0]-1][imgLabel[1]-1] += 1
                    finalDistPatchCount[imgLabel[0]-1][imgLabel[1]-1] += 1
                    rmse_values[imgLabel[0]-1][imgLabel[1]-1].append(rmse_p)
                    rmse_values[imgLabel[0]-1][imgLabel[1]-1].append(rmse_p)
                    patchMos[imgLabel[0]-1][imgLabel[1]-1].append(patchMosScore)
                    patchMos[imgLabel[0]-1][imgLabel[1]-1].append(patchMosScore)
                    # print len(finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]),
                else:
                    skipped[imgLabel[0]-1][imgLabel[1]-1] += 1
                    # print ""Skipped patches - category-wise - : "" + str(skipped)
                    # print ""Category "" + str(imgLabel[0]) + "", "" + str(np.ceil(imgLabel[1]/5.)) + "" -- RMSE = "" + str(rmse_p)

            # if imgLabel[1] == 75:
            #     pdb.set_trace()
            #     for k in range(0,len(finalDistPatches)):
            #         print """"
            #         for j in range(k,len(finalDistPatches[0]), 5):
            #             print len(finalDistPatches[k][j]),
            # if imgLabel[1] == 75:
            #     pdb.set_trace()
    for k in range(len(skipped)):
        print ""skipped "" + str(k)
        for j in range(k,len(skipped[0]),5):
            print ""j = "" + str(np.ceil(j/5.)) + "", "" + str(skipped[k][j])
    print """"
    print ""----------------------------------------""
    print ""finalDistPatches:""
    print ""----------------------------------------""
    print """"
    for k in range(0,len(finalDistPatches)):
        print """"
        for j in range(k,len(finalDistPatches[0]), 5):
            print len(finalDistPatches[k][j]),

    for n in range(len(finalDistPatches)):
        for k in range(len(finalDistPatches[0])):
            if len(finalDistPatches[n][k]) >= randPatchCountDesired:
                randIndices = np.random.permutation(len(finalDistPatches[n][k]))
                randIndices = randIndices[0:randPatchCountDesired]
                for m in range(len(randIndices)):
                    filteredPatches[n][k].append(finalDistPatches[n][k][randIndices[m]])
                    filteredPatchMos[n][k].append(patchMos[n][k][randIndices[m]])
                finalDistPatches[n][k] = []
                rmse_values[n][k] = []
                patchMos[n][k] = []
    # pdb.set_trace()
    print """"
    print ""----------------------------------------""
    print ""filteredPatches:""
    print ""----------------------------------------""
    print """"
    for k in range(0,len(filteredPatches)):
        print """"
        for j in range(k,len(filteredPatches[0]), 5):
            print len(filteredPatches[k][j]),
    # pdb.set_trace()
    print """"
    for j in range(k,len(filteredPatches[0]), 5):
        print len(filteredPatches[k][j]),

minOfAllCat = np.inf
for n in range(len(filteredPatches)):
    for k in range(len(filteredPatches[0])):
        print ""n = "" + str(n) + "", k = "" + str(k) +"", "" + str(len(filteredPatches[n][k]))
        if minOfAllCat > len(filteredPatches[n][k]) and len(filteredPatches[n][k]) != 0:
            minOfAllCat = len(filteredPatches[n][k])
print ""Minimum of all categories is: "" + str(minOfAllCat)
# pdb.set_trace()

allDistortPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))),dtype=object)
allDistortLabels = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))),dtype=object)

for i in range(0,noiseLevels):
    for j in range(0,(nNoiseTypes-len(skip_distortions))):
        # print ""j = "", j
        allDistortPatches[i][j] = []
        allDistortLabels[i][j] = []


# pdb.set_trace()
for n in range(len(filteredPatches)):
    count = 0
    # pdb.set_trace()
    for k in range(len(filteredPatches[0])):
        if len(filteredPatches[n][k]) != 0:
            print ""n = "" + str(n)
            print ""k = "" + str(k)
            print ""count = "" + str(count)
            randIndices = np.random.permutation(len(filteredPatches[n][k]))
            for m in range(minOfAllCat):
                allDistortPatches[n][count].append(filteredPatches[n][k][randIndices[m]])
                allDistortLabels[n][count].append(filteredPatchMos[n][k][randIndices[m]])
                # allDistortLabels[n][count].append(n)
            count += 1

# pdb.set_trace()
allRefPatches = np.empty((len(refImgs),),dtype=object)
for i in range(len(refImgs)):
    allRefPatches[i] = []

pdb.set_trace()
for i in range(len(refImgs)):
    refImgName = refImgs[i]
    if mode == ""train"":
        refImg = cv2.imread(trainImgsPath + refImgName)
    elif mode == ""val"":
        refImg = cv2.imread(valImgsPath + refImgName)
    else:
        refImg = cv2.imread(testImgsPath + refImgName)

    refImg = preprocess_image(refImg,h)

    for patch_col in range(0,imgCols-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
            for patch_row in range(0,imgRows-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
                refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                allRefPatches[i].append(refPatch)
                allRefPatches[i].append(np.fliplr(refPatch))

pdb.set_trace()
finalDistortPatches = np.empty(shape=(((nNoiseTypes-len(skip_distortions))*noiseLevels)*minOfAllCat + minOfAllCat, imgChannels, patchSize, patchSize),dtype=float)
finalDistortLabels = np.empty(shape=(((nNoiseTypes-len(skip_distortions))*noiseLevels)*minOfAllCat + minOfAllCat,),dtype=float)
count = 0

for n in range(len(filteredPatches)):
    for k in range(nNoiseTypes-len(skip_distortions)):
        finalDistortPatches[count*minOfAllCat:(count+1)*minOfAllCat, ...] = allDistortPatches[n][k]
        finalDistortLabels[count*minOfAllCat:(count+1)*minOfAllCat] = allDistortLabels[n][k]
        count += 1

refPatchCount = 0
for i in range(len(refImgs)):
    randRefIndices = np.random.permutation(len(allRefPatches[i]))
    randRefIndices = randRefIndices[:float(minOfAllCat)/len(refImgs)]
    for j in range(len(randRefIndices)):
        finalDistortPatches[count*minOfAllCat+refPatchCount] = np.transpose(allRefPatches[i][randRefIndices[j]],(2,0,1))
        finalDistortLabels[count*minOfAllCat+refPatchCount] = 9.
        refPatchCount += 1

# finalDistortLabels = np_utils.to_categorical(finalDistortLabels,nb_classes=noiseLevels)

pdb.set_trace()

if mode == ""train"":
    with h5py.File(""./hdf5Files_train/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
elif mode == ""val"":
    with h5py.File(""./hdf5Files_val/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
else:
    with h5py.File(""./hdf5Files_test/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
","import numpy as np
from scipy.signal import convolve2d
import scipy.io as sio
from skimage import measure
import glob
import cv2
import h5py
import os
import gc
import pdb
import glob
import pandas as pd
from keras.utils import np_utils

def ismember(A, B):
    return np.any([np.sum(A == b) for b in B])

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """"""
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    Credit to: http://stackoverflow.com/a/17201686/1586200
    """"""
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h < np.finfo(h.dtype).eps*h.max() ] = 0
    sum_h = h.sum()
    if sum_h != 0:
        h /= sum_h
    return h

def preprocess_channel(channel, h):
    mu = convolve2d(channel, h, mode='same')
    mu_sq = np.square(mu)
    sigma = np.sqrt(np.abs(convolve2d(np.square(channel),h,mode='same') - mu_sq))
    structChannel = np.divide((channel-mu),(sigma+(1./255.)))
    return structChannel

def preprocess_image(img, h):
    img = np.float32(img)
    img = img/255.
    # img = cv2.cvtColor(img,code=cv2.COLOR_BGR2Gray)
    structImg = np.empty_like(img)
    structImg[:,:,0] = preprocess_channel(img[:,:,0],h)
    structImg[:,:,1] = preprocess_channel(img[:,:,1],h)
    structImg[:,:,2] = preprocess_channel(img[:,:,2],h)
    # cv2.imshow(""imgOriginal"",img)
    # cv2.imshow(""imgProcessed"",structImg)
    # cv2.waitKey(0)
    return structImg


def rmse_patches(patch1,patch2,patchSize):
    rmse_value = (1./3.)*(np.sqrt(np.sum(np.sum(np.square(patch1[:,:,0] - patch2[:,:,0])))/(patchSize**2)) +
                          np.sqrt(np.sum(np.sum(np.square(patch1[:,:,1] - patch2[:,:,1])))/(patchSize**2)) +
                          np.sqrt(np.sum(np.sum(np.square(patch1[:,:,2] - patch2[:,:,2])))/(patchSize**2)))
    return rmse_value

trainImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_train/""
valImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_val/""
testImgsPath = ""/home/ASUAD/pchandak/Desktop/allImgs_ref_distorted_test/""
# imgWritePath = ""/media/vijetha/Seagate Expansion Drive/ImageQualityEvaluationDatabases/tid2013_original/allImgs_ref_distorted_preprocessed_val/""
# hdfSavePath = ""/media/ASUAD\pchandak/Seagate Expansion Drive1/imageQuality_HDF5Files_March21_2016/""
imgRows = 384
imgCols = 512
imgChannels = 3
patchSize = 32
randPatchCountDesired = 1000
overlap = 4  # 1/4th overlap
# skip_distortions = np.array([2, 3, 4, 5, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])
skip_distortions = np.array([16, 17, 18])

mode = ""train""


h = matlab_style_gauss2D(shape=(7,7),sigma=7./6.)

if mode == ""train"":
    fileList = glob.glob(trainImgsPath+""*.bmp"")
elif mode == ""val"":
    fileList = glob.glob(valImgsPath+""*.bmp"")
else:
    fileList = glob.glob(testImgsPath + ""*.bmp"")

splitF = [f.split(""/"")[-1] for f in fileList]
refImgs = [f for f in splitF if ""_"" not in f]
nNoiseTypes = 24
noiseLevels = 5
rmse_th = 0.12
row = 0
col = 0

mos_scores = pd.read_csv('mos_with_names.txt', sep="" "", header = None)
mos_names = mos_scores.values[:,1]
for i in range(len(mos_names)):
    mos_names[i] = mos_names[i].lower()
mos_scores = mos_scores.values[:,0]

pdb.set_trace()
distImgs = [ [None]*((nNoiseTypes-len(skip_distortions))*noiseLevels) for i in range(len(refImgs))]
distLabels = np.empty(shape=(len(refImgs),(nNoiseTypes-len(skip_distortions))*noiseLevels, 2),dtype=int)

for imgName in refImgs:
    catCount = 1  # category 0 is reference images
    for i in range(1,nNoiseTypes+1):
        if ismember(i,skip_distortions):
            continue
        for j in range(1,noiseLevels+1):
            distImgs[row][col] = imgName[0:3] + ""_"" + ""{:0>2}"".format(i) + ""_"" + str(j) + "".bmp""
            distLabels[row][col][0] = j
            distLabels[row][col][1] = catCount
            catCount = catCount+1
            col += 1
    row += 1
    col = 0

finalDistPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
filteredPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
rmse_values = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
patchMos = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)
filteredPatchMos = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=object)


for i in range(0,noiseLevels):
    for j in range(0,(nNoiseTypes-len(skip_distortions))*noiseLevels):
        # print ""j = "", j
        finalDistPatches[i][j] = []
        rmse_values[i][j] = []
        filteredPatches[i][j] = []
        patchMos[i][j] = []
        filteredPatchMos[i][j] = []

finalDistPatchCount = np.zeros(shape=(noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=int)
skipped = np.zeros(shape=(noiseLevels,(nNoiseTypes-len(skip_distortions))*noiseLevels),dtype=int)

# for i in range(0, len(refImgs)):
#     print ""Reference Image "" + str(i) + "" under processing""
#     refImgName = refImgs[i]
#     if mode == ""train"":
#         refImg = cv2.imread(trainImgsPath + refImgName)
#     else:
#         refImg = cv2.imread(valImgsPath + refImgName)
#     refImg = preprocess_image(refImg,h)
#     for patch_col in range(3,imgCols-patchSize-3,patchSize):  # 3/4th overlap
#         for patch_row in range(3,imgRows-patchSize-3,patchSize):  # 3/4th overlap
#             refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
#             finalRefPatches.append(np.transpose(refPatch,(2,0,1)))
#             finalRefPatchCount = finalRefPatchCount + 1
# pdb.set_trace()
for i in range(0, len(refImgs)):
    print ""Distorted Image "" + str(i) + "" under processing""
    print ""Skipped patches - category-wise - : "" + str(skipped)
    print """"
    for k in range(len(finalDistPatches)):
        print ""k = "" + str(k) +"", "" + str(len(finalDistPatches[k]))
    # pdb.set_trace()
    refImgName = refImgs[i]
    if mode == ""train"":
        refImg = cv2.imread(trainImgsPath + refImgName)
    elif mode == ""val"":
        refImg = cv2.imread(valImgsPath + refImgName)
    else:
        refImg = cv2.imread(testImgsPath + refImgName)

    refImg = preprocess_image(refImg,h)

    distImgNames = distImgs[i]
    distImgLabels = distLabels[i]
    for imgName, imgLabel in zip(distImgNames, distImgLabels):
        patchMosScore = mos_scores[np.where(imgName.lower() == mos_names)[0][0]]
        if mode == ""train"":
            distImg = cv2.imread(trainImgsPath + imgName)
        elif mode == ""val"":
            distImg = cv2.imread(valImgsPath + imgName)
        else:
            distImg = cv2.imread(testImgsPath + imgName)

        distImg = preprocess_image(distImg,h)
        for patch_col in range(0,imgCols-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
            for patch_row in range(0,imgRows-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
                refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                distPatch = distImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                rmse_p = rmse_patches(refPatch,distPatch,patchSize)
                if rmse_p > rmse_th:
                    (finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]).append(np.transpose(distPatch,(2,0,1)))
                    (finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]).append(np.transpose(np.fliplr(distPatch),(2,0,1)))
                    finalDistPatchCount[imgLabel[0]-1][imgLabel[1]-1] += 1
                    finalDistPatchCount[imgLabel[0]-1][imgLabel[1]-1] += 1
                    rmse_values[imgLabel[0]-1][imgLabel[1]-1].append(rmse_p)
                    rmse_values[imgLabel[0]-1][imgLabel[1]-1].append(rmse_p)
                    patchMos[imgLabel[0]-1][imgLabel[1]-1].append(patchMosScore)
                    patchMos[imgLabel[0]-1][imgLabel[1]-1].append(patchMosScore)
                    # print len(finalDistPatches[imgLabel[0]-1][imgLabel[1]-1]),
                else:
                    skipped[imgLabel[0]-1][imgLabel[1]-1] += 1
                    # print ""Skipped patches - category-wise - : "" + str(skipped)
                    # print ""Category "" + str(imgLabel[0]) + "", "" + str(np.ceil(imgLabel[1]/5.)) + "" -- RMSE = "" + str(rmse_p)

            # if imgLabel[1] == 75:
            #     pdb.set_trace()
            #     for k in range(0,len(finalDistPatches)):
            #         print """"
            #         for j in range(k,len(finalDistPatches[0]), 5):
            #             print len(finalDistPatches[k][j]),
            # if imgLabel[1] == 75:
            #     pdb.set_trace()
    for k in range(len(skipped)):
        print ""skipped "" + str(k)
        for j in range(k,len(skipped[0]),5):
            print ""j = "" + str(np.ceil(j/5.)) + "", "" + str(skipped[k][j])
    print """"
    print ""----------------------------------------""
    print ""finalDistPatches:""
    print ""----------------------------------------""
    print """"
    for k in range(0,len(finalDistPatches)):
        print """"
        for j in range(k,len(finalDistPatches[0]), 5):
            print len(finalDistPatches[k][j]),

    for n in range(len(finalDistPatches)):
        for k in range(len(finalDistPatches[0])):
            if len(finalDistPatches[n][k]) >= randPatchCountDesired:
                randIndices = np.random.permutation(len(finalDistPatches[n][k]))
                randIndices = randIndices[0:randPatchCountDesired]
                for m in range(len(randIndices)):
                    filteredPatches[n][k].append(finalDistPatches[n][k][randIndices[m]])
                    filteredPatchMos[n][k].append(patchMos[n][k][randIndices[m]])
                finalDistPatches[n][k] = []
                rmse_values[n][k] = []
                patchMos[n][k] = []
    # pdb.set_trace()
    print """"
    print ""----------------------------------------""
    print ""filteredPatches:""
    print ""----------------------------------------""
    print """"
    for k in range(0,len(filteredPatches)):
        print """"
        for j in range(k,len(filteredPatches[0]), 5):
            print len(filteredPatches[k][j]),
    # pdb.set_trace()
    print """"
    for j in range(k,len(filteredPatches[0]), 5):
        print len(filteredPatches[k][j]),

minOfAllCat = np.inf
for n in range(len(filteredPatches)):
    for k in range(len(filteredPatches[0])):
        print ""n = "" + str(n) + "", k = "" + str(k) +"", "" + str(len(filteredPatches[n][k]))
        if minOfAllCat > len(filteredPatches[n][k]) and len(filteredPatches[n][k]) != 0:
            minOfAllCat = len(filteredPatches[n][k])
print ""Minimum of all categories is: "" + str(minOfAllCat)
# pdb.set_trace()

allDistortPatches = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))),dtype=object)
allDistortLabels = np.empty((noiseLevels,(nNoiseTypes-len(skip_distortions))),dtype=object)

for i in range(0,noiseLevels):
    for j in range(0,(nNoiseTypes-len(skip_distortions))):
        # print ""j = "", j
        allDistortPatches[i][j] = []
        allDistortLabels[i][j] = []


# pdb.set_trace()
for n in range(len(filteredPatches)):
    count = 0
    # pdb.set_trace()
    for k in range(len(filteredPatches[0])):
        if len(filteredPatches[n][k]) != 0:
            print ""n = "" + str(n)
            print ""k = "" + str(k)
            print ""count = "" + str(count)
            randIndices = np.random.permutation(len(filteredPatches[n][k]))
            for m in range(minOfAllCat):
                allDistortPatches[n][count].append(filteredPatches[n][k][randIndices[m]])
                allDistortLabels[n][count].append(filteredPatchMos[n][k][randIndices[m]])
                # allDistortLabels[n][count].append(n)
            count += 1

# pdb.set_trace()
allRefPatches = np.empty((len(refImgs),),dtype=object)
for i in range(len(refImgs)):
    allRefPatches[i] = []

pdb.set_trace()
for i in range(len(refImgs)):
    refImgName = refImgs[i]
    if mode == ""train"":
        refImg = cv2.imread(trainImgsPath + refImgName)
    elif mode == ""val"":
        refImg = cv2.imread(valImgsPath + refImgName)
    else:
        refImg = cv2.imread(testImgsPath + refImgName)

    refImg = preprocess_image(refImg,h)

    for patch_col in range(0,imgCols-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
            for patch_row in range(0,imgRows-patchSize+1,int(patchSize/overlap)):  # 1/4 overlap
                refPatch = refImg[patch_row:patch_row+patchSize,patch_col:patch_col+patchSize,:]
                allRefPatches[i].append(refPatch)
                allRefPatches[i].append(np.fliplr(refPatch))

pdb.set_trace()
finalDistortPatches = np.empty(shape=(((nNoiseTypes-len(skip_distortions))*noiseLevels)*minOfAllCat + minOfAllCat, imgChannels, patchSize, patchSize),dtype=float)
finalDistortLabels = np.empty(shape=(((nNoiseTypes-len(skip_distortions))*noiseLevels)*minOfAllCat + minOfAllCat,),dtype=float)
count = 0

for n in range(len(filteredPatches)):
    for k in range(nNoiseTypes-len(skip_distortions)):
        finalDistortPatches[count*minOfAllCat:(count+1)*minOfAllCat, ...] = allDistortPatches[n][k]
        finalDistortLabels[count*minOfAllCat:(count+1)*minOfAllCat] = allDistortLabels[n][k]
        count += 1

refPatchCount = 0
for i in range(len(refImgs)):
    randRefIndices = np.random.permutation(len(allRefPatches[i]))
    randRefIndices = randRefIndices[:float(minOfAllCat)/len(refImgs)]
    for j in range(len(randRefIndices)):
        finalDistortPatches[count*minOfAllCat+refPatchCount] = np.transpose(allRefPatches[i][randRefIndices[j]],(2,0,1))
        finalDistortLabels[count*minOfAllCat+refPatchCount] = 9.
        refPatchCount += 1

# finalDistortLabels = np_utils.to_categorical(finalDistortLabels,nb_classes=noiseLevels)

pdb.set_trace()

if mode == ""train"":
    with h5py.File(""./hdf5Files_train/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
elif mode == ""val"":
    with h5py.File(""./hdf5Files_val/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
else:
    with h5py.File(""./hdf5Files_test/QualityRegressMOS_data_March31"" +'.h5', 'w') as hf:
        hf.create_dataset('data', data=finalDistortPatches)
        hf.create_dataset('labels', data=finalDistortLabels)
",TRUE,,5071
5036,InitialSO.csv5036.txt,InitialGit.csv5036.txt,245,"android:drawableLeft android:drawableRight android:drawableTop android:drawableBottom TextView <LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""16dp"" >

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""100dp""
        android:ellipsize=""none""
        android:maxLines=""2""
        android:text=""Auto Resized Text, max 2 lines""
        android:textSize=""100sp"" /> <!-- maximum size -->

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""100dp""
        android:ellipsize=""none""
        android:gravity=""center""
        android:maxLines=""1""
        android:text=""Auto Resized Text, max 1 line""
        android:textSize=""100sp"" /> <!-- maximum size -->

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""Auto Resized Text""
        android:textSize=""500sp"" /> <!-- maximum size -->

</LinearLayout>
 import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.RectF;
import android.os.Build;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.SparseIntArray;
import android.util.TypedValue;
import android.widget.TextView;

public class AutoResizeTextView extends TextView {
private interface SizeTester {
    /**
     * 
     * @param suggestedSize
     *            Size of text to be tested
     * @param availableSpace
     *            available space in which text must fit
     * @return an integer < 0 if after applying {@code suggestedSize} to
     *         text, it takes less space than {@code availableSpace}, > 0
     *         otherwise
     */
    public int onTestSize(int suggestedSize, RectF availableSpace);
}

private RectF mTextRect = new RectF();

private RectF mAvailableSpaceRect;

private SparseIntArray mTextCachedSizes;

private TextPaint mPaint;

private float mMaxTextSize;

private float mSpacingMult = 1.0f;

private float mSpacingAdd = 0.0f;

private float mMinTextSize = 20;

private int mWidthLimit;

private static final int NO_LINE_LIMIT = -1;
private int mMaxLines;

private boolean mEnableSizeCache = true;
private boolean mInitiallized;

public AutoResizeTextView(Context context) {
    super(context);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    initialize();
}

private void initialize() {
    mPaint = new TextPaint(getPaint());
    mMaxTextSize = getTextSize();
    mAvailableSpaceRect = new RectF();
    mTextCachedSizes = new SparseIntArray();
    if (mMaxLines == 0) {
        // no value was assigned during construction
        mMaxLines = NO_LINE_LIMIT;
    }
    mInitiallized = true;
}

@Override
public void setText(final CharSequence text, BufferType type) {
    super.setText(text, type);
    adjustTextSize(text.toString());
}

@Override
public void setTextSize(float size) {
    mMaxTextSize = size;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setMaxLines(int maxlines) {
    super.setMaxLines(maxlines);
    mMaxLines = maxlines;
    reAdjust();
}

public int getMaxLines() {
    return mMaxLines;
}

@Override
public void setSingleLine() {
    super.setSingleLine();
    mMaxLines = 1;
    reAdjust();
}

@Override
public void setSingleLine(boolean singleLine) {
    super.setSingleLine(singleLine);
    if (singleLine) {
        mMaxLines = 1;
    } else {
        mMaxLines = NO_LINE_LIMIT;
    }
    reAdjust();
}

@Override
public void setLines(int lines) {
    super.setLines(lines);
    mMaxLines = lines;
    reAdjust();
}

@Override
public void setTextSize(int unit, float size) {
    Context c = getContext();
    Resources r;

    if (c == null)
        r = Resources.getSystem();
    else
        r = c.getResources();
    mMaxTextSize = TypedValue.applyDimension(unit, size,
            r.getDisplayMetrics());
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setLineSpacing(float add, float mult) {
    super.setLineSpacing(add, mult);
    mSpacingMult = mult;
    mSpacingAdd = add;
}

/**
 * Set the lower text size limit and invalidate the view
 * 
 * @param minTextSize
 */
public void setMinTextSize(float minTextSize) {
    mMinTextSize = minTextSize;
    reAdjust();
}

private void reAdjust() {
    adjustTextSize(getText().toString());
}

private void adjustTextSize(String string) {
    if (!mInitiallized) {
        return;
    }
    int startSize = (int) mMinTextSize;
    int heightLimit = getMeasuredHeight() - getCompoundPaddingBottom()
        - getCompoundPaddingTop();
    mWidthLimit = getMeasuredWidth() - getCompoundPaddingLeft()
        - getCompoundPaddingRight();
    mAvailableSpaceRect.right = mWidthLimit;
    mAvailableSpaceRect.bottom = heightLimit;
    super.setTextSize(
            TypedValue.COMPLEX_UNIT_PX,
            efficientTextSizeSearch(startSize, (int) mMaxTextSize,
                    mSizeTester, mAvailableSpaceRect));
}

private final SizeTester mSizeTester = new SizeTester() {
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    @Override
    public int onTestSize(int suggestedSize, RectF availableSPace) {
        mPaint.setTextSize(suggestedSize);
        String text = getText().toString();
        boolean singleline = getMaxLines() == 1;
        if (singleline) {
            mTextRect.bottom = mPaint.getFontSpacing();
            mTextRect.right = mPaint.measureText(text);
        } else {
            StaticLayout layout = new StaticLayout(text, mPaint,
                    mWidthLimit, Alignment.ALIGN_NORMAL, mSpacingMult,
                    mSpacingAdd, true);
            // return early if we have more lines
            if (getMaxLines() != NO_LINE_LIMIT
                    && layout.getLineCount() > getMaxLines()) {
                return 1;
            }
            mTextRect.bottom = layout.getHeight();
            int maxWidth = -1;
            for (int i = 0; i < layout.getLineCount(); i++) {
                if (maxWidth < layout.getLineWidth(i)) {
                    maxWidth = (int) layout.getLineWidth(i);
                }
            }
            mTextRect.right = maxWidth;
        }

        mTextRect.offsetTo(0, 0);
        if (availableSPace.contains(mTextRect)) {
            // may be too small, don't worry we will find the best match
            return -1;
        } else {
            // too big
            return 1;
        }
    }
};

/**
 * Enables or disables size caching, enabling it will improve performance
 * where you are animating a value inside TextView. This stores the font
 * size against getText().length() Be careful though while enabling it as 0
 * takes more space than 1 on some fonts and so on.
 * 
 * @param enable
 *            enable font size caching
 */
public void enableSizeCache(boolean enable) {
    mEnableSizeCache = enable;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

private int efficientTextSizeSearch(int start, int end,
        SizeTester sizeTester, RectF availableSpace) {
    if (!mEnableSizeCache) {
        return binarySearch(start, end, sizeTester, availableSpace);
    }
    String text = getText().toString();
    int key = text == null ? 0 : text.length();
    int size = mTextCachedSizes.get(key);
    if (size != 0) {
        return size;
    }
    size = binarySearch(start, end, sizeTester, availableSpace);
    mTextCachedSizes.put(key, size);
    return size;
}

private static int binarySearch(int start, int end, SizeTester sizeTester,
        RectF availableSpace) {
    int lastBest = start;
    int lo = start;
    int hi = end - 1;
    int mid = 0;
    while (lo <= hi) {
        mid = (lo + hi) >>> 1;
        int midValCmp = sizeTester.onTestSize(mid, availableSpace);
        if (midValCmp < 0) {
            lastBest = lo;
            lo = mid + 1;
        } else if (midValCmp > 0) {
            hi = mid - 1;
            lastBest = hi;
        } else {
            return mid;
        }
    }
    // make sure to return last best
    // this is what should always be returned
    return lastBest;

}

@Override
protected void onTextChanged(final CharSequence text, final int start,
        final int before, final int after) {
    super.onTextChanged(text, start, before, after);
    reAdjust();
}

@Override
protected void onSizeChanged(int width, int height, int oldwidth,
        int oldheight) {
    mTextCachedSizes.clear();
    super.onSizeChanged(width, height, oldwidth, oldheight);
    if (width != oldwidth || height != oldheight) {
        reAdjust();
    }
}
}
 ","android:drawableLeft android:drawableRight android:drawableTop android:drawableBottom TextView <LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""wrap_content""
    android:layout_height=""wrap_content""
    android:orientation=""vertical""
    android:padding=""16dp"" >

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""100dp""
        android:ellipsize=""none""
        android:maxLines=""2""
        android:text=""Auto Resized Text, max 2 lines""
        android:textSize=""100sp"" /> <!-- maximum size -->

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""100dp""
        android:ellipsize=""none""
        android:gravity=""center""
        android:maxLines=""1""
        android:text=""Auto Resized Text, max 1 line""
        android:textSize=""100sp"" /> <!-- maximum size -->

    <com.vj.widgets.AutoResizeTextView
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:text=""Auto Resized Text""
        android:textSize=""500sp"" /> <!-- maximum size -->

</LinearLayout>
 import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.RectF;
import android.os.Build;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.SparseIntArray;
import android.util.TypedValue;
import android.widget.TextView;

public class AutoResizeTextView extends TextView {
private interface SizeTester {
    /**
     * 
     * @param suggestedSize
     *            Size of text to be tested
     * @param availableSpace
     *            available space in which text must fit
     * @return an integer < 0 if after applying {@code suggestedSize} to
     *         text, it takes less space than {@code availableSpace}, > 0
     *         otherwise
     */
    public int onTestSize(int suggestedSize, RectF availableSpace);
}

private RectF mTextRect = new RectF();

private RectF mAvailableSpaceRect;

private SparseIntArray mTextCachedSizes;

private TextPaint mPaint;

private float mMaxTextSize;

private float mSpacingMult = 1.0f;

private float mSpacingAdd = 0.0f;

private float mMinTextSize = 20;

private int mWidthLimit;

private static final int NO_LINE_LIMIT = -1;
private int mMaxLines;

private boolean mEnableSizeCache = true;
private boolean mInitiallized;

public AutoResizeTextView(Context context) {
    super(context);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    initialize();
}

private void initialize() {
    mPaint = new TextPaint(getPaint());
    mMaxTextSize = getTextSize();
    mAvailableSpaceRect = new RectF();
    mTextCachedSizes = new SparseIntArray();
    if (mMaxLines == 0) {
        // no value was assigned during construction
        mMaxLines = NO_LINE_LIMIT;
    }
    mInitiallized = true;
}

@Override
public void setText(final CharSequence text, BufferType type) {
    super.setText(text, type);
    adjustTextSize(text.toString());
}

@Override
public void setTextSize(float size) {
    mMaxTextSize = size;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setMaxLines(int maxlines) {
    super.setMaxLines(maxlines);
    mMaxLines = maxlines;
    reAdjust();
}

public int getMaxLines() {
    return mMaxLines;
}

@Override
public void setSingleLine() {
    super.setSingleLine();
    mMaxLines = 1;
    reAdjust();
}

@Override
public void setSingleLine(boolean singleLine) {
    super.setSingleLine(singleLine);
    if (singleLine) {
        mMaxLines = 1;
    } else {
        mMaxLines = NO_LINE_LIMIT;
    }
    reAdjust();
}

@Override
public void setLines(int lines) {
    super.setLines(lines);
    mMaxLines = lines;
    reAdjust();
}

@Override
public void setTextSize(int unit, float size) {
    Context c = getContext();
    Resources r;

    if (c == null)
        r = Resources.getSystem();
    else
        r = c.getResources();
    mMaxTextSize = TypedValue.applyDimension(unit, size,
            r.getDisplayMetrics());
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setLineSpacing(float add, float mult) {
    super.setLineSpacing(add, mult);
    mSpacingMult = mult;
    mSpacingAdd = add;
}

/**
 * Set the lower text size limit and invalidate the view
 * 
 * @param minTextSize
 */
public void setMinTextSize(float minTextSize) {
    mMinTextSize = minTextSize;
    reAdjust();
}

private void reAdjust() {
    adjustTextSize(getText().toString());
}

private void adjustTextSize(String string) {
    if (!mInitiallized) {
        return;
    }
    int startSize = (int) mMinTextSize;
    int heightLimit = getMeasuredHeight() - getCompoundPaddingBottom()
        - getCompoundPaddingTop();
    mWidthLimit = getMeasuredWidth() - getCompoundPaddingLeft()
        - getCompoundPaddingRight();
    mAvailableSpaceRect.right = mWidthLimit;
    mAvailableSpaceRect.bottom = heightLimit;
    super.setTextSize(
            TypedValue.COMPLEX_UNIT_PX,
            efficientTextSizeSearch(startSize, (int) mMaxTextSize,
                    mSizeTester, mAvailableSpaceRect));
}

private final SizeTester mSizeTester = new SizeTester() {
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    @Override
    public int onTestSize(int suggestedSize, RectF availableSPace) {
        mPaint.setTextSize(suggestedSize);
        String text = getText().toString();
        boolean singleline = getMaxLines() == 1;
        if (singleline) {
            mTextRect.bottom = mPaint.getFontSpacing();
            mTextRect.right = mPaint.measureText(text);
        } else {
            StaticLayout layout = new StaticLayout(text, mPaint,
                    mWidthLimit, Alignment.ALIGN_NORMAL, mSpacingMult,
                    mSpacingAdd, true);
            // return early if we have more lines
            if (getMaxLines() != NO_LINE_LIMIT
                    && layout.getLineCount() > getMaxLines()) {
                return 1;
            }
            mTextRect.bottom = layout.getHeight();
            int maxWidth = -1;
            for (int i = 0; i < layout.getLineCount(); i++) {
                if (maxWidth < layout.getLineWidth(i)) {
                    maxWidth = (int) layout.getLineWidth(i);
                }
            }
            mTextRect.right = maxWidth;
        }

        mTextRect.offsetTo(0, 0);
        if (availableSPace.contains(mTextRect)) {
            // may be too small, don't worry we will find the best match
            return -1;
        } else {
            // too big
            return 1;
        }
    }
};

/**
 * Enables or disables size caching, enabling it will improve performance
 * where you are animating a value inside TextView. This stores the font
 * size against getText().length() Be careful though while enabling it as 0
 * takes more space than 1 on some fonts and so on.
 * 
 * @param enable
 *            enable font size caching
 */
public void enableSizeCache(boolean enable) {
    mEnableSizeCache = enable;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

private int efficientTextSizeSearch(int start, int end,
        SizeTester sizeTester, RectF availableSpace) {
    if (!mEnableSizeCache) {
        return binarySearch(start, end, sizeTester, availableSpace);
    }
    String text = getText().toString();
    int key = text == null ? 0 : text.length();
    int size = mTextCachedSizes.get(key);
    if (size != 0) {
        return size;
    }
    size = binarySearch(start, end, sizeTester, availableSpace);
    mTextCachedSizes.put(key, size);
    return size;
}

private static int binarySearch(int start, int end, SizeTester sizeTester,
        RectF availableSpace) {
    int lastBest = start;
    int lo = start;
    int hi = end - 1;
    int mid = 0;
    while (lo <= hi) {
        mid = (lo + hi) >>> 1;
        int midValCmp = sizeTester.onTestSize(mid, availableSpace);
        if (midValCmp < 0) {
            lastBest = lo;
            lo = mid + 1;
        } else if (midValCmp > 0) {
            hi = mid - 1;
            lastBest = hi;
        } else {
            return mid;
        }
    }
    // make sure to return last best
    // this is what should always be returned
    return lastBest;

}

@Override
protected void onTextChanged(final CharSequence text, final int start,
        final int before, final int after) {
    super.onTextChanged(text, start, before, after);
    reAdjust();
}

@Override
protected void onSizeChanged(int width, int height, int oldwidth,
        int oldheight) {
    mTextCachedSizes.clear();
    super.onSizeChanged(width, height, oldwidth, oldheight);
    if (width != oldwidth || height != oldheight) {
        reAdjust();
    }
}
}
 ",TRUE,"package com.beardedhen.androidbootstrap.utils;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.RectF;
import android.os.Build;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.SparseIntArray;
import android.util.TypedValue;
import android.widget.TextView;

/**
 * 
 * Code from user M-WaJeEh on StackOverflow at
 * http://stackoverflow.com/questions/5033012/auto-scale-textview-text-to-fit-within-bounds/17782522#17782522
 *
 */

public class AutoResizeTextView extends TextView {
private interface SizeTester {
    /**
     * 
     * @param suggestedSize
     *            Size of text to be tested
     * @param availableSpace
     *            available space in which text must fit
     * @return an integer < 0 if after applying {@code suggestedSize} to
     *         text, it takes less space than {@code availableSpace}, > 0
     *         otherwise
     */
    public int onTestSize(int suggestedSize, RectF availableSpace);
}

private RectF mTextRect = new RectF();

private RectF mAvailableSpaceRect;

private SparseIntArray mTextCachedSizes;

private TextPaint mPaint;

private float mMaxTextSize;

private float mSpacingMult = 1.0f;

private float mSpacingAdd = 0.0f;

private float mMinTextSize = 20;

private int mWidthLimit;

private static final int NO_LINE_LIMIT = -1;
private int mMaxLines;

private boolean mEnableSizeCache = true;
private boolean mInitiallized;

public AutoResizeTextView(Context context) {
    super(context);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
    initialize();
}

public AutoResizeTextView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    initialize();
}

private void initialize() {
    mPaint = new TextPaint(getPaint());
    mMaxTextSize = getTextSize();
    mAvailableSpaceRect = new RectF();
    mTextCachedSizes = new SparseIntArray();
    if (mMaxLines == 0) {
        // no value was assigned during construction
        mMaxLines = NO_LINE_LIMIT;
    }
    mInitiallized = true;
}

@Override
public void setText(final CharSequence text, BufferType type) {
    super.setText(text, type);
    adjustTextSize(text.toString());
}

@Override
public void setTextSize(float size) {
    mMaxTextSize = size;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setMaxLines(int maxlines) {
    super.setMaxLines(maxlines);
    mMaxLines = maxlines;
    reAdjust();
}

public int getMaxLines() {
    return mMaxLines;
}

@Override
public void setSingleLine() {
    super.setSingleLine();
    mMaxLines = 1;
    reAdjust();
}

@Override
public void setSingleLine(boolean singleLine) {
    super.setSingleLine(singleLine);
    if (singleLine) {
        mMaxLines = 1;
    } else {
        mMaxLines = NO_LINE_LIMIT;
    }
    reAdjust();
}

@Override
public void setLines(int lines) {
    super.setLines(lines);
    mMaxLines = lines;
    reAdjust();
}

@Override
public void setTextSize(int unit, float size) {
    Context c = getContext();
    Resources r;

    if (c == null)
        r = Resources.getSystem();
    else
        r = c.getResources();
    mMaxTextSize = TypedValue.applyDimension(unit, size,
            r.getDisplayMetrics());
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

@Override
public void setLineSpacing(float add, float mult) {
    super.setLineSpacing(add, mult);
    mSpacingMult = mult;
    mSpacingAdd = add;
}

/**
 * Set the lower text size limit and invalidate the view
 * 
 * @param minTextSize
 */
public void setMinTextSize(float minTextSize) {
    mMinTextSize = minTextSize;
    reAdjust();
}

private void reAdjust() {
    adjustTextSize(getText().toString());
}

private void adjustTextSize(String string) {
    if (!mInitiallized) {
        return;
    }
    int startSize = (int) mMinTextSize;
    int heightLimit = getMeasuredHeight() - getCompoundPaddingBottom()
        - getCompoundPaddingTop();
    mWidthLimit = getMeasuredWidth() - getCompoundPaddingLeft()
        - getCompoundPaddingRight();
    mAvailableSpaceRect.right = mWidthLimit;
    mAvailableSpaceRect.bottom = heightLimit;
    super.setTextSize(
            TypedValue.COMPLEX_UNIT_PX,
            efficientTextSizeSearch(startSize, (int) mMaxTextSize,
                    mSizeTester, mAvailableSpaceRect));
}

private final SizeTester mSizeTester = new SizeTester() {
    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
    @Override
    public int onTestSize(int suggestedSize, RectF availableSPace) {
        mPaint.setTextSize(suggestedSize);
        String text = getText().toString();
        boolean singleline = getMaxLines() == 1;
        if (singleline) {
            mTextRect.bottom = mPaint.getFontSpacing();
            mTextRect.right = mPaint.measureText(text);
        } else {
            StaticLayout layout = new StaticLayout(text, mPaint,
                    mWidthLimit, Alignment.ALIGN_NORMAL, mSpacingMult,
                    mSpacingAdd, true);
            // return early if we have more lines
            if (getMaxLines() != NO_LINE_LIMIT
                    && layout.getLineCount() > getMaxLines()) {
                return 1;
            }
            mTextRect.bottom = layout.getHeight();
            int maxWidth = -1;
            for (int i = 0; i < layout.getLineCount(); i++) {
                if (maxWidth < layout.getLineWidth(i)) {
                    maxWidth = (int) layout.getLineWidth(i);
                }
            }
            mTextRect.right = maxWidth;
        }

        mTextRect.offsetTo(0, 0);
        if (availableSPace.contains(mTextRect)) {
            // may be too small, don't worry we will find the best match
            return -1;
        } else {
            // too big
            return 1;
        }
    }
};

/**
 * Enables or disables size caching, enabling it will improve performance
 * where you are animating a value inside TextView. This stores the font
 * size against getText().length() Be careful though while enabling it as 0
 * takes more space than 1 on some fonts and so on.
 * 
 * @param enable
 *            enable font size caching
 */
public void enableSizeCache(boolean enable) {
    mEnableSizeCache = enable;
    mTextCachedSizes.clear();
    adjustTextSize(getText().toString());
}

private int efficientTextSizeSearch(int start, int end,
        SizeTester sizeTester, RectF availableSpace) {
    if (!mEnableSizeCache) {
        return binarySearch(start, end, sizeTester, availableSpace);
    }
    String text = getText().toString();
    int key = text == null ? 0 : text.length();
    int size = mTextCachedSizes.get(key);
    if (size != 0) {
        return size;
    }
    size = binarySearch(start, end, sizeTester, availableSpace);
    mTextCachedSizes.put(key, size);
    return size;
}

private static int binarySearch(int start, int end, SizeTester sizeTester,
        RectF availableSpace) {
    int lastBest = start;
    int lo = start;
    int hi = end - 1;
    int mid = 0;
    while (lo <= hi) {
        mid = (lo + hi) >>> 1;
        int midValCmp = sizeTester.onTestSize(mid, availableSpace);
        if (midValCmp < 0) {
            lastBest = lo;
            lo = mid + 1;
        } else if (midValCmp > 0) {
            hi = mid - 1;
            lastBest = hi;
        } else {
            return mid;
        }
    }
    // make sure to return last best
    // this is what should always be returned
    return lastBest;

}

@Override
protected void onTextChanged(final CharSequence text, final int start,
        final int before, final int after) {
    super.onTextChanged(text, start, before, after);
    reAdjust();
}

@Override
protected void onSizeChanged(int width, int height, int oldwidth,
        int oldheight) {
    mTextCachedSizes.clear();
    super.onSizeChanged(width, height, oldwidth, oldheight);
    if (width != oldwidth || height != oldheight) {
        reAdjust();
    }
}
}
","package com.beardedhen.androidbootstrap.utils;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.RectF;
import android.os.Build;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.SparseIntArray;
import android.util.TypedValue;
import android.widget.TextView;

/**
 * Code from user M-WaJeEh on StackOverflow at
 * http://stackoverflow.com/questions/5033012/auto-scale-textview-text-to-fit-within-bounds/17782522#17782522
 */

public class AutoResizeTextView extends TextView {
    private interface SizeTester {
        /**
         * @param suggestedSize  Size of text to be tested
         * @param availableSpace available space in which text must fit
         * @return an integer < 0 if after applying {@code suggestedSize} to
         * text, it takes less space than {@code availableSpace}, > 0
         * otherwise
         */
        public int onTestSize(int suggestedSize, RectF availableSpace);
    }

    private RectF mTextRect = new RectF();

    private RectF mAvailableSpaceRect;

    private SparseIntArray mTextCachedSizes;

    private TextPaint mPaint;

    private float mMaxTextSize;

    private float mSpacingMult = 1.0f;

    private float mSpacingAdd = 0.0f;

    private float mMinTextSize = 20;

    private int mWidthLimit;

    private static final int NO_LINE_LIMIT = -1;
    private int mMaxLines;

    private boolean mEnableSizeCache = true;
    private boolean mInitialized;

    public AutoResizeTextView(Context context) {
        super(context);
        initialize();
    }

    public AutoResizeTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initialize();
    }

    public AutoResizeTextView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        initialize();
    }

    private void initialize() {
        mPaint = new TextPaint(getPaint());
        mMaxTextSize = getTextSize();
        mAvailableSpaceRect = new RectF();
        mTextCachedSizes = new SparseIntArray();
        if (mMaxLines == 0) {
            // no value was assigned during construction
            mMaxLines = NO_LINE_LIMIT;
        }
        mInitialized = true;
    }

    @Override
    public void setText(final CharSequence text, BufferType type) {
        super.setText(text, type);
        adjustTextSize(text.toString());
    }

    @Override
    public void setTextSize(float size) {
        mMaxTextSize = size;
        mTextCachedSizes.clear();
        adjustTextSize(getText().toString());
    }

    @Override
    public void setMaxLines(int maxlines) {
        super.setMaxLines(maxlines);
        mMaxLines = maxlines;
        reAdjust();
    }

    public int getMaxLines() {
        return mMaxLines;
    }

    @Override
    public void setSingleLine() {
        super.setSingleLine();
        mMaxLines = 1;
        reAdjust();
    }

    @Override
    public void setSingleLine(boolean singleLine) {
        super.setSingleLine(singleLine);
        if (singleLine) {
            mMaxLines = 1;
        } else {
            mMaxLines = NO_LINE_LIMIT;
        }
        reAdjust();
    }

    @Override
    public void setLines(int lines) {
        super.setLines(lines);
        mMaxLines = lines;
        reAdjust();
    }

    @Override
    public void setTextSize(int unit, float size) {
        Context c = getContext();
        Resources r;

        if (c == null)
            r = Resources.getSystem();
        else
            r = c.getResources();
        mMaxTextSize = TypedValue.applyDimension(unit, size,
                r.getDisplayMetrics());
        mTextCachedSizes.clear();
        adjustTextSize(getText().toString());
    }

    @Override
    public void setLineSpacing(float add, float mult) {
        super.setLineSpacing(add, mult);
        mSpacingMult = mult;
        mSpacingAdd = add;
    }

    /**
     * Set the lower text size limit and invalidate the view
     *
     * @param minTextSize minimum text size desired
     */
    public void setMinTextSize(float minTextSize) {
        mMinTextSize = minTextSize;
        reAdjust();
    }

    private void reAdjust() {
        adjustTextSize(getText().toString());
    }

    private void adjustTextSize(String string) {
        if (!mInitialized) {
            return;
        }
        int startSize = (int) mMinTextSize;
        int heightLimit = getMeasuredHeight() - getCompoundPaddingBottom()
                - getCompoundPaddingTop();
        mWidthLimit = getMeasuredWidth() - getCompoundPaddingLeft()
                - getCompoundPaddingRight();
        mAvailableSpaceRect.right = mWidthLimit;
        mAvailableSpaceRect.bottom = heightLimit;
        super.setTextSize(
                TypedValue.COMPLEX_UNIT_PX,
                efficientTextSizeSearch(startSize, (int) mMaxTextSize,
                        mSizeTester, mAvailableSpaceRect));
    }

    private final SizeTester mSizeTester = new SizeTester() {
        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
        @Override
        public int onTestSize(int suggestedSize, RectF availableSPace) {
            mPaint.setTextSize(suggestedSize);
            String text = getText().toString();
            boolean singleline = getMaxLines() == 1;
            if (singleline) {
                mTextRect.bottom = mPaint.getFontSpacing();
                mTextRect.right = mPaint.measureText(text);
            } else {
                StaticLayout layout = new StaticLayout(text, mPaint,
                        mWidthLimit, Alignment.ALIGN_NORMAL, mSpacingMult,
                        mSpacingAdd, true);
                // return early if we have more lines
                if (getMaxLines() != NO_LINE_LIMIT
                        && layout.getLineCount() > getMaxLines()) {
                    return 1;
                }
                mTextRect.bottom = layout.getHeight();
                int maxWidth = -1;
                for (int i = 0; i < layout.getLineCount(); i++) {
                    if (maxWidth < layout.getLineWidth(i)) {
                        maxWidth = (int) layout.getLineWidth(i);
                    }
                }
                mTextRect.right = maxWidth;
            }

            mTextRect.offsetTo(0, 0);
            if (availableSPace.contains(mTextRect)) {
                // may be too small, don't worry we will find the best match
                return -1;
            } else {
                // too big
                return 1;
            }
        }
    };

    /**
     * Enables or disables size caching, enabling it will improve performance
     * where you are animating a value inside TextView. This stores the font
     * size against getText().length() Be careful though while enabling it as 0
     * takes more space than 1 on some fonts and so on.
     *
     * @param enable enable font size caching
     */
    public void enableSizeCache(boolean enable) {
        mEnableSizeCache = enable;
        mTextCachedSizes.clear();
        adjustTextSize(getText().toString());
    }

    private int efficientTextSizeSearch(int start, int end,
                                        SizeTester sizeTester, RectF availableSpace) {
        if (!mEnableSizeCache) {
            return binarySearch(start, end, sizeTester, availableSpace);
        }
        String text = getText().toString();
        int key = text == null ? 0 : text.length();
        int size = mTextCachedSizes.get(key);
        if (size != 0) {
            return size;
        }
        size = binarySearch(start, end, sizeTester, availableSpace);
        mTextCachedSizes.put(key, size);
        return size;
    }

    private static int binarySearch(int start, int end, SizeTester sizeTester,
                                    RectF availableSpace) {
        int lastBest = start;
        int lo = start;
        int hi = end - 1;
        int mid = 0;
        while (lo <= hi) {
            mid = (lo + hi) >>> 1;
            int midValCmp = sizeTester.onTestSize(mid, availableSpace);
            if (midValCmp < 0) {
                lastBest = lo;
                lo = mid + 1;
            } else if (midValCmp > 0) {
                hi = mid - 1;
                lastBest = hi;
            } else {
                return mid;
            }
        }
        // make sure to return last best
        // this is what should always be returned
        return lastBest;

    }

    @Override
    protected void onTextChanged(final CharSequence text, final int start,
                                 final int before, final int after) {
        super.onTextChanged(text, start, before, after);
        reAdjust();
    }

    @Override
    protected void onSizeChanged(int width, int height, int oldwidth,
                                 int oldheight) {
        mTextCachedSizes.clear();
        super.onSizeChanged(width, height, oldwidth, oldheight);
        if (width != oldwidth || height != oldheight) {
            reAdjust();
        }
    }
}
",FALSE,,5073
5039,InitialSO.csv5039.txt,InitialGit.csv5039.txt,88,"/*
   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
    var defaultDiacriticsRemovalMap = [
        {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
        {'base':'AA','letters':'\uA732'},
        {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
        {'base':'AO','letters':'\uA734'},
        {'base':'AU','letters':'\uA736'},
        {'base':'AV','letters':'\uA738\uA73A'},
        {'base':'AY','letters':'\uA73C'},
        {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
        {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
        {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779'},
        {'base':'DZ','letters':'\u01F1\u01C4'},
        {'base':'Dz','letters':'\u01F2\u01C5'},
        {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
        {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
        {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
        {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
        {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
        {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
        {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
        {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
        {'base':'LJ','letters':'\u01C7'},
        {'base':'Lj','letters':'\u01C8'},
        {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
        {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
        {'base':'NJ','letters':'\u01CA'},
        {'base':'Nj','letters':'\u01CB'},
        {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
        {'base':'OI','letters':'\u01A2'},
        {'base':'OO','letters':'\uA74E'},
        {'base':'OU','letters':'\u0222'},
        {'base':'OE','letters':'\u008C\u0152'},
        {'base':'oe','letters':'\u009C\u0153'},
        {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
        {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
        {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
        {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
        {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
        {'base':'TZ','letters':'\uA728'},
        {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
        {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
        {'base':'VY','letters':'\uA760'},
        {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
        {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
        {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
        {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
        {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
        {'base':'aa','letters':'\uA733'},
        {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
        {'base':'ao','letters':'\uA735'},
        {'base':'au','letters':'\uA737'},
        {'base':'av','letters':'\uA739\uA73B'},
        {'base':'ay','letters':'\uA73D'},
        {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
        {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
        {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
        {'base':'dz','letters':'\u01F3\u01C6'},
        {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
        {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
        {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
        {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
        {'base':'hv','letters':'\u0195'},
        {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
        {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
        {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
        {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
        {'base':'lj','letters':'\u01C9'},
        {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
        {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
        {'base':'nj','letters':'\u01CC'},
        {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
        {'base':'oi','letters':'\u01A3'},
        {'base':'ou','letters':'\u0223'},
        {'base':'oo','letters':'\uA74F'},
        {'base':'p','letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
        {'base':'q','letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
        {'base':'r','letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
        {'base':'s','letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
        {'base':'t','letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
        {'base':'tz','letters':'\uA729'},
        {'base':'u','letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
        {'base':'v','letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
        {'base':'vy','letters':'\uA761'},
        {'base':'w','letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
        {'base':'x','letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
        {'base':'y','letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
        {'base':'z','letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
    ];

    var diacriticsMap = {};
    for (var i=0; i < defaultDiacriticsRemovalMap .length; i++){
        var letters = defaultDiacriticsRemovalMap [i].letters;
        for (var j=0; j < letters.length ; j++){
            diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap [i].base;
        }
    }

    // ""what?"" version ... http://jsperf.com/diacritics/12
    function removeDiacritics (str) {
        return str.replace(/[^\u0000-\u007E]/g, function(a){ 
           return diacriticsMap[a] || a; 
        });
    }    
    var paragraph = ""L'avantage d'utiliser le lorem ipsum est bien     évidemment de pouvoir créer des maquettes ou de remplir un site internet de contenus qui présentent un rendu s'approchant un maximum du rendu final. \n Par défaut lorem ipsum ne contient pas d'accent ni de caractères spéciaux contrairement à la langue française qui en contient beaucoup. C'est sur ce critère que nous proposons une solution avec cet outil qui générant du faux-texte lorem ipsum mais avec en plus, des caractères spéciaux tel que les accents ou certains symboles utiles pour la langue française. \n L'utilisation du lorem standard est facile d’utilisation mais lorsque le futur client utilisera votre logiciel il se peut que certains caractères spéciaux ou qu'un accent ne soient pas codés correctement. \n Cette page a pour but donc de pouvoir perdre le moins de temps possible et donc de tester directement si tous les encodages de base de donnée ou des sites sont les bons de plus il permet de récuperer un code css avec le texte formaté !"";
    alert(removeDiacritics(paragraph)); ","/*
   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
    var defaultDiacriticsRemovalMap = [
        {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
        {'base':'AA','letters':'\uA732'},
        {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
        {'base':'AO','letters':'\uA734'},
        {'base':'AU','letters':'\uA736'},
        {'base':'AV','letters':'\uA738\uA73A'},
        {'base':'AY','letters':'\uA73C'},
        {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
        {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
        {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779\u00D0'},
        {'base':'DZ','letters':'\u01F1\u01C4'},
        {'base':'Dz','letters':'\u01F2\u01C5'},
        {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
        {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
        {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
        {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
        {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
        {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
        {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
        {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
        {'base':'LJ','letters':'\u01C7'},
        {'base':'Lj','letters':'\u01C8'},
        {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
        {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
        {'base':'NJ','letters':'\u01CA'},
        {'base':'Nj','letters':'\u01CB'},
        {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
        {'base':'OI','letters':'\u01A2'},
        {'base':'OO','letters':'\uA74E'},
        {'base':'OU','letters':'\u0222'},
        {'base':'OE','letters':'\u008C\u0152'},
        {'base':'oe','letters':'\u009C\u0153'},
        {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
        {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
        {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
        {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
        {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
        {'base':'TZ','letters':'\uA728'},
        {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
        {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
        {'base':'VY','letters':'\uA760'},
        {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
        {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
        {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
        {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
        {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
        {'base':'aa','letters':'\uA733'},
        {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
        {'base':'ao','letters':'\uA735'},
        {'base':'au','letters':'\uA737'},
        {'base':'av','letters':'\uA739\uA73B'},
        {'base':'ay','letters':'\uA73D'},
        {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
        {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
        {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
        {'base':'dz','letters':'\u01F3\u01C6'},
        {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
        {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
        {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
        {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
        {'base':'hv','letters':'\u0195'},
        {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
        {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
        {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
        {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
        {'base':'lj','letters':'\u01C9'},
        {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
        {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
        {'base':'nj','letters':'\u01CC'},
        {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
        {'base':'oi','letters':'\u01A3'},
        {'base':'ou','letters':'\u0223'},
        {'base':'oo','letters':'\uA74F'},
        {'base':'p','letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
        {'base':'q','letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
        {'base':'r','letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
        {'base':'s','letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
        {'base':'t','letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
        {'base':'tz','letters':'\uA729'},
        {'base':'u','letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
        {'base':'v','letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
        {'base':'vy','letters':'\uA761'},
        {'base':'w','letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
        {'base':'x','letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
        {'base':'y','letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
        {'base':'z','letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
    ];

    var diacriticsMap = {};
    for (var i=0; i < defaultDiacriticsRemovalMap .length; i++){
        var letters = defaultDiacriticsRemovalMap [i].letters;
        for (var j=0; j < letters.length ; j++){
            diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap [i].base;
        }
    }

    // ""what?"" version ... http://jsperf.com/diacritics/12
    function removeDiacritics (str) {
        return str.replace(/[^\u0000-\u007E]/g, function(a){ 
           return diacriticsMap[a] || a; 
        });
    }    
    var paragraph = ""L'avantage d'utiliser le lorem ipsum est bien     évidemment de pouvoir créer des maquettes ou de remplir un site internet de contenus qui présentent un rendu s'approchant un maximum du rendu final. \n Par défaut lorem ipsum ne contient pas d'accent ni de caractères spéciaux contrairement à la langue française qui en contient beaucoup. C'est sur ce critère que nous proposons une solution avec cet outil qui générant du faux-texte lorem ipsum mais avec en plus, des caractères spéciaux tel que les accents ou certains symboles utiles pour la langue française. \n L'utilisation du lorem standard est facile d’utilisation mais lorsque le futur client utilisera votre logiciel il se peut que certains caractères spéciaux ou qu'un accent ne soient pas codés correctement. \n Cette page a pour but donc de pouvoir perdre le moins de temps possible et donc de tester directement si tous les encodages de base de donnée ou des sites sont les bons de plus il permet de récuperer un code css avec le texte formaté !"";
    alert(removeDiacritics(paragraph)); ",FALSE,"'use strict';

var defaultDiacriticsRemovalap = [
  {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
  {'base':'AA','letters':'\uA732'},
  {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
  {'base':'AO','letters':'\uA734'},
  {'base':'AU','letters':'\uA736'},
  {'base':'AV','letters':'\uA738\uA73A'},
  {'base':'AY','letters':'\uA73C'},
  {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
  {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
  {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779'},
  {'base':'DZ','letters':'\u01F1\u01C4'},
  {'base':'Dz','letters':'\u01F2\u01C5'},
  {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
  {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
  {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
  {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
  {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
  {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
  {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
  {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
  {'base':'LJ','letters':'\u01C7'},
  {'base':'Lj','letters':'\u01C8'},
  {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
  {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
  {'base':'NJ','letters':'\u01CA'},
  {'base':'Nj','letters':'\u01CB'},
  {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
  {'base':'OI','letters':'\u01A2'},
  {'base':'OO','letters':'\uA74E'},
  {'base':'OU','letters':'\u0222'},
  {'base':'OE','letters':'\u008C\u0152'},
  {'base':'oe','letters':'\u009C\u0153'},
  {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
  {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
  {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
  {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
  {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
  {'base':'TZ','letters':'\uA728'},
  {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
  {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
  {'base':'VY','letters':'\uA760'},
  {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
  {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
  {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
  {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
  {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
  {'base':'aa','letters':'\uA733'},
  {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
  {'base':'ao','letters':'\uA735'},
  {'base':'au','letters':'\uA737'},
  {'base':'av','letters':'\uA739\uA73B'},
  {'base':'ay','letters':'\uA73D'},
  {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
  {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
  {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
  {'base':'dz','letters':'\u01F3\u01C6'},
  {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
  {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
  {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
  {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
  {'base':'hv','letters':'\u0195'},
  {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
  {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
  {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
  {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
  {'base':'lj','letters':'\u01C9'},
  {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
  {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
  {'base':'nj','letters':'\u01CC'},
  {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
  {'base':'oi','letters':'\u01A3'},
  {'base':'ou','letters':'\u0223'},
  {'base':'oo','letters':'\uA74F'},
  {'base':'p', 'letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
  {'base':'q', 'letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
  {'base':'r', 'letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
  {'base':'s', 'letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
  {'base':'t', 'letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
  {'base':'tz','letters':'\uA729'},
  {'base':'u', 'letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
  {'base':'v', 'letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
  {'base':'vy','letters':'\uA761'},
  {'base':'w', 'letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
  {'base':'x', 'letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
  {'base':'y', 'letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
  {'base':'z', 'letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
];

var diacriticsMap = {};

for (var i = 0; i < defaultDiacriticsRemovalap.length; i++) {
  var letters = defaultDiacriticsRemovalap[i].letters.split('');

  for (var j = 0; j < letters.length; j++) {
    diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
  }
}

function escapeDiacritic(str) {
  if (typeof str !== 'string') throw new TypeError('str must be a string!');

  // http://stackoverflow.com/a/18391901
  return str.replace(/[^\u0000-\u007E]/g, function(a) {
    return diacriticsMap[a] || a;
  });
}

module.exports = escapeDiacritic;
","'use strict';

var defaultDiacriticsRemovalap = [
  {'base':'A', 'letters':'\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'},
  {'base':'AA','letters':'\uA732'},
  {'base':'AE','letters':'\u00C6\u01FC\u01E2'},
  {'base':'AO','letters':'\uA734'},
  {'base':'AU','letters':'\uA736'},
  {'base':'AV','letters':'\uA738\uA73A'},
  {'base':'AY','letters':'\uA73C'},
  {'base':'B', 'letters':'\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'},
  {'base':'C', 'letters':'\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'},
  {'base':'D', 'letters':'\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779'},
  {'base':'DZ','letters':'\u01F1\u01C4'},
  {'base':'Dz','letters':'\u01F2\u01C5'},
  {'base':'E', 'letters':'\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'},
  {'base':'F', 'letters':'\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'},
  {'base':'G', 'letters':'\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'},
  {'base':'H', 'letters':'\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'},
  {'base':'I', 'letters':'\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'},
  {'base':'J', 'letters':'\u004A\u24BF\uFF2A\u0134\u0248'},
  {'base':'K', 'letters':'\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'},
  {'base':'L', 'letters':'\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'},
  {'base':'LJ','letters':'\u01C7'},
  {'base':'Lj','letters':'\u01C8'},
  {'base':'M', 'letters':'\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'},
  {'base':'N', 'letters':'\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'},
  {'base':'NJ','letters':'\u01CA'},
  {'base':'Nj','letters':'\u01CB'},
  {'base':'O', 'letters':'\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'},
  {'base':'OI','letters':'\u01A2'},
  {'base':'OO','letters':'\uA74E'},
  {'base':'OU','letters':'\u0222'},
  {'base':'OE','letters':'\u008C\u0152'},
  {'base':'oe','letters':'\u009C\u0153'},
  {'base':'P', 'letters':'\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'},
  {'base':'Q', 'letters':'\u0051\u24C6\uFF31\uA756\uA758\u024A'},
  {'base':'R', 'letters':'\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'},
  {'base':'S', 'letters':'\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'},
  {'base':'T', 'letters':'\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'},
  {'base':'TZ','letters':'\uA728'},
  {'base':'U', 'letters':'\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'},
  {'base':'V', 'letters':'\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'},
  {'base':'VY','letters':'\uA760'},
  {'base':'W', 'letters':'\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'},
  {'base':'X', 'letters':'\u0058\u24CD\uFF38\u1E8A\u1E8C'},
  {'base':'Y', 'letters':'\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'},
  {'base':'Z', 'letters':'\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'},
  {'base':'a', 'letters':'\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'},
  {'base':'aa','letters':'\uA733'},
  {'base':'ae','letters':'\u00E6\u01FD\u01E3'},
  {'base':'ao','letters':'\uA735'},
  {'base':'au','letters':'\uA737'},
  {'base':'av','letters':'\uA739\uA73B'},
  {'base':'ay','letters':'\uA73D'},
  {'base':'b', 'letters':'\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'},
  {'base':'c', 'letters':'\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'},
  {'base':'d', 'letters':'\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'},
  {'base':'dz','letters':'\u01F3\u01C6'},
  {'base':'e', 'letters':'\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'},
  {'base':'f', 'letters':'\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'},
  {'base':'g', 'letters':'\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'},
  {'base':'h', 'letters':'\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'},
  {'base':'hv','letters':'\u0195'},
  {'base':'i', 'letters':'\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'},
  {'base':'j', 'letters':'\u006A\u24D9\uFF4A\u0135\u01F0\u0249'},
  {'base':'k', 'letters':'\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'},
  {'base':'l', 'letters':'\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'},
  {'base':'lj','letters':'\u01C9'},
  {'base':'m', 'letters':'\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'},
  {'base':'n', 'letters':'\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'},
  {'base':'nj','letters':'\u01CC'},
  {'base':'o', 'letters':'\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'},
  {'base':'oi','letters':'\u01A3'},
  {'base':'ou','letters':'\u0223'},
  {'base':'oo','letters':'\uA74F'},
  {'base':'p', 'letters':'\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'},
  {'base':'q', 'letters':'\u0071\u24E0\uFF51\u024B\uA757\uA759'},
  {'base':'r', 'letters':'\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'},
  {'base':'s', 'letters':'\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'},
  {'base':'t', 'letters':'\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'},
  {'base':'tz','letters':'\uA729'},
  {'base':'u', 'letters': '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'},
  {'base':'v', 'letters':'\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'},
  {'base':'vy','letters':'\uA761'},
  {'base':'w', 'letters':'\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'},
  {'base':'x', 'letters':'\u0078\u24E7\uFF58\u1E8B\u1E8D'},
  {'base':'y', 'letters':'\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'},
  {'base':'z', 'letters':'\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'}
];

var diacriticsMap = {};

for (var i = 0; i < defaultDiacriticsRemovalap.length; i++) {
  var letters = defaultDiacriticsRemovalap[i].letters.split('');

  for (var j = 0; j < letters.length; j++) {
    diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;
  }
}

function escapeDiacritic(str) {
  if (typeof str !== 'string') throw new TypeError('str must be a string!');

  // http://stackoverflow.com/a/18391901
  return str.replace(/[^\u0000-\u007E]/g, function(a) {
    return diacriticsMap[a] || a;
  });
}

module.exports = escapeDiacritic;
",TRUE,,5078
5040,InitialSO.csv5040.txt,InitialGit.csv5040.txt,33,"module.factory('RecursionHelper', ['$compile', function($compile){
    return {
        /**
         * Manually compiles the element, fixing the recursion loop.
         * @param element
         * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.
         * @returns An object containing the linking functions.
         */
        compile: function(element, link){
            // Normalize the link parameter
            if(angular.isFunction(link)){
                link = { post: link };
            }

            // Break the recursion loop by removing the contents
            var contents = element.contents().remove();
            var compiledContents;
            return {
                pre: (link && link.pre) ? link.pre : null,
                /**
                 * Compiles and re-adds the contents
                 */
                post: function(scope, element){
                    // Compile the contents
                    if(!compiledContents){
                        compiledContents = $compile(contents);
                    }
                    // Re-add the compiled contents to the element
                    compiledContents(scope, function(clone){
                        element.append(clone);
                    });

                    // Call the post-linking function, if any
                    if(link && link.post){
                        link.post.apply(null, arguments);
                    }
                }
            };
        }
    };
}]);
 module.directive(""tree"", function(RecursionHelper) {
    return {
        restrict: ""E"",
        scope: {family: '='},
        template: 
            '<p>{{ family.name }}</p>'+
            '<ul>' + 
                '<li ng-repeat=""child in family.children"">' + 
                    '<tree family=""child""></tree>' +
                '</li>' +
            '</ul>',
        compile: function(element) {
            // Use the compile function from the RecursionHelper,
            // And return the linking function(s) which it returns
            return RecursionHelper.compile(element);
        }
    };
});
 ","module.factory('RecursionHelper', ['$compile', function($compile){
    return {
        /**
         * Manually compiles the element, fixing the recursion loop.
         * @param element
         * @param [link] A post-link function, or an object with function(s) registered via pre and post properties.
         * @returns An object containing the linking functions.
         */
        compile: function(element, link){
            // Normalize the link parameter
            if(angular.isFunction(link)){
                link = { post: link };
            }

            // Break the recursion loop by removing the contents
            var contents = element.contents().remove();
            var compiledContents;
            return {
                pre: (link && link.pre) ? link.pre : null,
                /**
                 * Compiles and re-adds the contents
                 */
                post: function(scope, element){
                    // Compile the contents
                    if(!compiledContents){
                        compiledContents = $compile(contents);
                    }
                    // Re-add the compiled contents to the element
                    compiledContents(scope, function(clone){
                        element.append(clone);
                    });

                    // Call the post-linking function, if any
                    if(link && link.post){
                        link.post.apply(null, arguments);
                    }
                }
            };
        }
    };
}]);
 module.directive(""tree"", [""RecursionHelper"", function(RecursionHelper) {
    return {
        restrict: ""E"",
        scope: {family: '='},
        template: 
            '<p>{{ family.name }}</p>'+
            '<ul>' + 
                '<li ng-repeat=""child in family.children"">' + 
                    '<tree family=""child""></tree>' +
                '</li>' +
            '</ul>',
        compile: function(element) {
            // Use the compile function from the RecursionHelper,
            // And return the linking function(s) which it returns
            return RecursionHelper.compile(element);
        }
    };
}]);
 ",FALSE,"/*!
 * jsonformatter
 * 
 * Version: 0.2.7 - 2014-12-21T20:19:06.891Z
 * License: MIT
 */


'use strict';

angular.module('jsonFormatter', ['RecursionHelper'])
.directive('jsonFormatter', ['RecursionHelper', function (RecursionHelper) {
  function escapeString(str) {
    return str.replace('""', '\""');
  }

  // From http://stackoverflow.com/a/332429
  function getObjectName(object) {
    if (object === undefined) {
      return '';
    }
    if (object === null) {
      return 'Object';
    }
    if (typeof object === 'object' && !object.constructor) {
        return 'Object';
    }
    var funcNameRegex = /function (.{1,})\(/;
    var results = (funcNameRegex).exec((object).constructor.toString());
    if (results && results.length > 1) {
      return results[1];
    } else {
      return '';
    }
  }

  function getType(object) {
    if (object === null) { return 'null'; }
    return typeof object;
  }

  function link(scope, element, attributes) {
    scope.isArray = function () {
      return Array.isArray(scope.json);
    };

    scope.isObject = function() {
      return scope.json && typeof scope.json === 'object';
    };

    scope.getKeys = function (){
      if (scope.isObject()) {
        return Object.keys(scope.json).map(function(key) {
            if (key === '') { return '""""'; }
            return key;
        });
      }
    };
    scope.type = getType(scope.json);
    scope.hasKey = typeof scope.key !== 'undefined';
    scope.getConstructorName = function(){
      return getObjectName(scope.json);
    };

    if (scope.type === 'string'){

      // Add custom type for date
      if((new Date(scope.json)).toString() !== 'Invalid Date') {
        scope.isDate = true;
      }

      // Add custom type for URLs
      if (scope.json.indexOf('http') === 0) {
        scope.isUrl = true;
      }
    }

    scope.isEmptyObject = function () {
      return scope.getKeys() && !scope.getKeys().length &&
        scope.isOpen && !scope.isArray();
    };


    // If 'open' attribute is present
    scope.isOpen = !!scope.open;
    scope.toggleOpen = function () {
      scope.isOpen = !scope.isOpen;
    };
    scope.childrenOpen = function () {
      if (scope.open > 1){
        return scope.open - 1;
      }
      return 0;
    };

    scope.openLink = function (isUrl) {
      if(isUrl) {
        window.location.href = scope.json;
      }
    };

    scope.parseValue = function (value){
      scope.type = getType(scope.json);
      if (scope.type === 'null') {
        return 'null';
      }
      if (scope.type === 'undefined') {
        return 'undefined';
      }
      if (scope.type === 'string') {
        value = '""' + escapeString(value) + '""';
      }
      if (scope.type === 'function'){

        // Remove content of the function
        return scope.json.toString()
          .replace(/\n/g, '')
          .replace(/\{.+?\}/, '') + '{ ... }';

      }
      return value;
    };
  }

  return {
    templateUrl: 'json-formatter.html',
    restrict: 'E',
    replace: true,
    scope: {
      json: '=',
      key: '=',
      open: '='
    },
    compile: function(element) {

      // Use the compile function from the RecursionHelper,
      // And return the linking function(s) which it returns
      return RecursionHelper.compile(element, link);
    }
  };
}]);

'use strict';

// from http://stackoverflow.com/a/18609594
angular.module('RecursionHelper', []).factory('RecursionHelper', ['$compile', function($compile){
  return {
    /**
     * Manually compiles the element, fixing the recursion loop.
     * @param element
     * @param [link] A post-link function, or an object with function(s)
     * registered via pre and post properties.
     * @returns An object containing the linking functions.
     */
    compile: function(element, link){
      // Normalize the link parameter
      if(angular.isFunction(link)){
        link = { post: link };
      }

      // Break the recursion loop by removing the contents
      var contents = element.contents().remove();
      var compiledContents;
      return {
        pre: (link && link.pre) ? link.pre : null,
        /**
         * Compiles and re-adds the contents
         */
        post: function(scope, element){
          // Compile the contents
          if(!compiledContents){
            compiledContents = $compile(contents);
          }
          // Re-add the compiled contents to the element
          compiledContents(scope, function(clone){
            element.append(clone);
          });

          // Call the post-linking function, if any
          if(link && link.post){
            link.post.apply(null, arguments);
          }
        }
      };
    }
  };
}]);

angular.module(""jsonFormatter"").run([""$templateCache"", function($templateCache) {$templateCache.put(""json-formatter.html"",""<div ng-init=\""isOpen = open && open > 0\"" class=\""json-formatter-row\""><a ng-click=\""toggleOpen()\""><span class=\""toggler {{isOpen ? \'open\' : \'\'}}\"" ng-if=\""isObject()\""></span> <span class=\""key\"" ng-if=\""hasKey\"">{{key}}:</span> <span class=\""value\""><span ng-if=\""isObject()\""><span class=\""constructor-name\"">{{getConstructorName(json)}}</span> <span ng-if=\""isArray()\""><span class=\""bracket\"">[</span><span class=\""number\"">{{json.length}}</span><span class=\""bracket\"">]</span></span></span> <span ng-if=\""!isObject()\"" ng-click=\""openLink(isUrl)\"" class=\""{{type}}\"" ng-class=\""{date: isDate, url: isUrl}\"">{{parseValue(json)}}</span></span></a><div class=\""children\"" ng-if=\""getKeys().length && isOpen\""><json-formatter ng-repeat=\""key in getKeys()\"" json=\""json[key]\"" key=\""key\"" open=\""childrenOpen()\""></json-formatter></div><div class=\""children empty object\"" ng-if=\""isEmptyObject()\""></div><div class=\""children empty array\"" ng-if=\""getKeys() && !getKeys().length && isOpen && isArray()\""></div></div>"");}]);","/*!
 * jsonformatter
 * 
 * Version: 0.2.7 - 2014-12-21T20:19:06.891Z
 * License: MIT
 */


'use strict';

angular.module('jsonFormatter', ['RecursionHelper'])
.directive('jsonFormatter', ['RecursionHelper', function (RecursionHelper) {
  function escapeString(str) {
    return str.replace('""', '\""');
  }

  // From http://stackoverflow.com/a/332429
  function getObjectName(object) {
    if (object === undefined) {
      return '';
    }
    if (object === null) {
      return 'Object';
    }
    if (typeof object === 'object' && !object.constructor) {
        return 'Object';
    }
    var funcNameRegex = /function (.{1,})\(/;
    var results = (funcNameRegex).exec((object).constructor.toString());
    if (results && results.length > 1) {
      return results[1];
    } else {
      return '';
    }
  }

  function getType(object) {
    if (object === null) { return 'null'; }
    return typeof object;
  }

  function link(scope, element, attributes) {
    scope.isArray = function () {
      return Array.isArray(scope.json);
    };

    scope.isObject = function() {
      return scope.json && typeof scope.json === 'object';
    };

    scope.getKeys = function (){
      if (scope.isObject()) {
        return Object.keys(scope.json).map(function(key) {
            if (key === '') { return '""""'; }
            return key;
        });
      }
    };
    scope.type = getType(scope.json);
    scope.hasKey = typeof scope.key !== 'undefined';
    scope.getConstructorName = function(){
      return getObjectName(scope.json);
    };

    if (scope.type === 'string'){

      // Add custom type for date
      if((new Date(scope.json)).toString() !== 'Invalid Date') {
        scope.isDate = true;
      }

      // Add custom type for URLs
      if (scope.json.indexOf('http') === 0) {
        scope.isUrl = true;
      }
    }

    scope.isEmptyObject = function () {
      return scope.getKeys() && !scope.getKeys().length &&
        scope.isOpen && !scope.isArray();
    };


    // If 'open' attribute is present
    scope.isOpen = !!scope.open;
    scope.toggleOpen = function () {
      scope.isOpen = !scope.isOpen;
    };
    scope.childrenOpen = function () {
      if (scope.open > 1){
        return scope.open - 1;
      }
      return 0;
    };

    scope.openLink = function (isUrl) {
      if(isUrl) {
        window.location.href = scope.json;
      }
    };

    scope.parseValue = function (value){
      scope.type = getType(scope.json);
      if (scope.type === 'null') {
        return 'null';
      }
      if (scope.type === 'undefined') {
        return 'undefined';
      }
      if (scope.type === 'string') {
        value = '""' + escapeString(value) + '""';
      }
      if (scope.type === 'function'){

        // Remove content of the function
        return scope.json.toString()
          .replace(/\n/g, '')
          .replace(/\{.+?\}/, '') + '{ ... }';

      }
      return value;
    };
  }

  return {
    templateUrl: 'json-formatter.html',
    restrict: 'E',
    replace: true,
    scope: {
      json: '=',
      key: '=',
      open: '='
    },
    compile: function(element) {

      // Use the compile function from the RecursionHelper,
      // And return the linking function(s) which it returns
      return RecursionHelper.compile(element, link);
    }
  };
}]);

'use strict';

// from http://stackoverflow.com/a/18609594
angular.module('RecursionHelper', []).factory('RecursionHelper', ['$compile', function($compile){
  return {
    /**
     * Manually compiles the element, fixing the recursion loop.
     * @param element
     * @param [link] A post-link function, or an object with function(s)
     * registered via pre and post properties.
     * @returns An object containing the linking functions.
     */
    compile: function(element, link){
      // Normalize the link parameter
      if(angular.isFunction(link)){
        link = { post: link };
      }

      // Break the recursion loop by removing the contents
      var contents = element.contents().remove();
      var compiledContents;
      return {
        pre: (link && link.pre) ? link.pre : null,
        /**
         * Compiles and re-adds the contents
         */
        post: function(scope, element){
          // Compile the contents
          if(!compiledContents){
            compiledContents = $compile(contents);
          }
          // Re-add the compiled contents to the element
          compiledContents(scope, function(clone){
            element.append(clone);
          });

          // Call the post-linking function, if any
          if(link && link.post){
            link.post.apply(null, arguments);
          }
        }
      };
    }
  };
}]);

angular.module(""jsonFormatter"").run([""$templateCache"", function($templateCache) {$templateCache.put(""json-formatter.html"",""<div ng-init=\""isOpen = open && open > 0\"" class=\""json-formatter-row\""><a ng-click=\""toggleOpen()\""><span class=\""toggler {{isOpen ? \'open\' : \'\'}}\"" ng-if=\""isObject()\""></span> <span class=\""key\"" ng-if=\""hasKey\"">{{key}}:</span> <span class=\""value\""><span ng-if=\""isObject()\""><span class=\""constructor-name\"">{{getConstructorName(json)}}</span> <span ng-if=\""isArray()\""><span class=\""bracket\"">[</span><span class=\""number\"">{{json.length}}</span><span class=\""bracket\"">]</span></span></span> <span ng-if=\""!isObject()\"" ng-click=\""openLink(isUrl)\"" class=\""{{type}}\"" ng-class=\""{date: isDate, url: isUrl}\"">{{parseValue(json)}}</span></span></a><div class=\""children\"" ng-if=\""getKeys().length && isOpen\""><json-formatter ng-repeat=\""key in getKeys()\"" json=\""json[key]\"" key=\""key\"" open=\""childrenOpen()\""></json-formatter></div><div class=\""children empty object\"" ng-if=\""isEmptyObject()\""></div><div class=\""children empty array\"" ng-if=\""getKeys() && !getKeys().length && isOpen && isArray()\""></div></div>"");}]);",TRUE,,5079
5041,InitialSO.csv5041.txt,InitialGit.csv5041.txt,8,"function bytesToSize(bytes) {
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
};
 function formatBytes(bytes,decimals) {
   if(bytes == 0) return '0 Byte';
   var k = 1000;
   var dm = decimals + 1 || 3;
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
   var i = Math.floor(Math.log(bytes) / Math.log(k));
   return (bytes / Math.pow(k, i)).toPrecision(dm) + ' ' + sizes[i];
}
 ","function bytesToSize(bytes) {
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
}
 function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}
 function formatBytes(a,b=2,k=1024){with(Math){let d=floor(log(a)/log(k));return 0==a?""0 Bytes"":parseFloat((a/pow(k,d)).toFixed(max(0,b)))+"" ""+[""Bytes"",""KB"",""MB"",""GB"",""TB"",""PB"",""EB"",""ZB"",""YB""][d]}}
 // formatBytes(bytes,decimals)

formatBytes(1024);       // 1 KB
formatBytes('1024');     // 1 KB
formatBytes(1234);       // 1.21 KB
formatBytes(1234, 3);    // 1.205 KB
 function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// ** Demo code **
var p = document.querySelector('p'),
    input = document.querySelector('input');
    
function setText(v){
    p.innerHTML = formatBytes(v);
}
// bind 'input' event
input.addEventListener('input', function(){ 
    setText( this.value )
})
// set initial text
setText(input.value); <input type=""text"" value=""1000"">
<p></p> k = 1000 sizes = [""...""] ",FALSE,"
// from http://stackoverflow.com/a/18650828/708221
function formatBytes(bytes,decimals) {
   if(bytes == 0) return '0 Byte';
   var k = 1000;
   var dm = decimals + 1 || 3;
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
   var i = Math.floor(Math.log(bytes) / Math.log(k));
   return (bytes / Math.pow(k, i)).toPrecision(dm) + ' ' + sizes[i];
}

//this could be a general function for filesize, datetime, etc
$('.filesize').each(function() {
    //should add class that notes that this element has been converted .addClass()
    $( this ).text(function (i, txt) {
        return formatBytes(parseInt(txt),2);
    });
});
$('.datetime').each(function() {
    //should add class that notes that this element has been converted .addClass()
    $( this ).text(function (i, txt) {
        return moment(txt).format('MMMM Do YYYY, h:mm a');
    });
});

","
// from http://stackoverflow.com/a/18650828/708221
function formatBytes(bytes,decimals) {
   if(bytes == 0) return '0 Byte';
   var k = 1000;
   var dm = decimals + 1 || 3;
   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
   var i = Math.floor(Math.log(bytes) / Math.log(k));
   return (bytes / Math.pow(k, i)).toPrecision(dm) + ' ' + sizes[i];
}

function makeFieldsHumanReadable() {
    //this could be a general function for filesize, datetime, etc
    $('.filesize').each(function() {
        //should add class that notes that this element has been converted .addClass()
        $( this ).text(function (i, txt) {
            return formatBytes(parseInt(txt),2);
        });
    });
    $('.datetime').each(function() {
        //should add class that notes that this element has been converted .addClass()
        $( this ).text(function (i, txt) {
            return moment(txt).format('MMMM Do YYYY, h:mm a');
        });
    });
}

makeFieldsHumanReadable();

",FALSE,,5080
5044,InitialSO.csv5044.txt,InitialGit.csv5044.txt,3,"priority element.removeAttr(""common-things""); element.removeAttr(""data-common-things""); data-common-things angular.module('app')
  .directive('commonThings', function ($compile) {
    return {
      restrict: 'A',
      replace: false, 
      terminal: true, //this setting is important, see explanation below
      priority: 1000, //this setting is important, see explanation below
      compile: function compile(element, attrs) {
        element.attr('tooltip', '{{dt()}}');
        element.attr('tooltip-placement', 'bottom');
        element.removeAttr(""common-things""); //remove the attribute to avoid indefinite loop
        element.removeAttr(""data-common-things""); //also remove the same attribute with data- prefix in case users specify data-common-things in the html

        return {
          pre: function preLink(scope, iElement, iAttrs, controller) {  },
          post: function postLink(scope, iElement, iAttrs, controller) {  
            $compile(iElement)(scope);
          }
        };
      }
    };
  });
 angular.module('app')
  .directive('commonThings', function ($compile) {
    return {
      restrict: 'A',
      replace: false,
      terminal: true,
      priority: 1000,
      link: function link(scope,element, attrs) {
        element.attr('tooltip', '{{dt()}}');
        element.attr('tooltip-placement', 'bottom');
        element.removeAttr(""common-things""); //remove the attribute to avoid indefinite loop
        element.removeAttr(""data-common-things""); //also remove the same attribute with data- prefix in case users specify data-common-things in the html
        
        $compile(element)(scope);
      }
    };
  });
 terminal: true priority: 1000 priority terminal: true terminal:true priority: 1000 ng-repeat ng-repeat ng-repeat ngRepeat ","priority element.removeAttr(""common-things""); element.removeAttr(""data-common-things""); data-common-things angular.module('app')
  .directive('commonThings', function ($compile) {
    return {
      restrict: 'A',
      replace: false, 
      terminal: true, //this setting is important, see explanation below
      priority: 1000, //this setting is important, see explanation below
      compile: function compile(element, attrs) {
        element.attr('tooltip', '{{dt()}}');
        element.attr('tooltip-placement', 'bottom');
        element.removeAttr(""common-things""); //remove the attribute to avoid indefinite loop
        element.removeAttr(""data-common-things""); //also remove the same attribute with data- prefix in case users specify data-common-things in the html

        return {
          pre: function preLink(scope, iElement, iAttrs, controller) {  },
          post: function postLink(scope, iElement, iAttrs, controller) {  
            $compile(iElement)(scope);
          }
        };
      }
    };
  });
 angular.module('app')
  .directive('commonThings', function ($compile) {
    return {
      restrict: 'A',
      replace: false,
      terminal: true,
      priority: 1000,
      link: function link(scope,element, attrs) {
        element.attr('tooltip', '{{dt()}}');
        element.attr('tooltip-placement', 'bottom');
        element.removeAttr(""common-things""); //remove the attribute to avoid indefinite loop
        element.removeAttr(""data-common-things""); //also remove the same attribute with data- prefix in case users specify data-common-things in the html

        $compile(element)(scope);
      }
    };
  });
 terminal: true priority: 1000 priority terminal: true terminal:true priority: 1000 ng-repeat ng-repeat ng-repeat ngRepeat ",FALSE,"/**
 * Checklist-model
 * AngularJS directive for list of checkboxes
 */

angular.module('checklist-model', [])
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
  // contains
  function contains(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          return true;
        }
      }
    }
    return false;
  }

  // add
  function add(arr, item) {
    arr = angular.isArray(arr) ? arr : [];
    for (var i = 0; i < arr.length; i++) {
      if (angular.equals(arr[i], item)) {
        return arr;
      }
    }    
    arr.push(item);
    return arr;
  }  

  // remove
  function remove(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          arr.splice(i, 1);
          break;
        }
      }
    }
    return arr;
  }

  // http://stackoverflow.com/a/19228302/1458162
  function postLinkFn(scope, elem, attrs) {
    // compile with `ng-model` pointing to `checked`
    $compile(elem)(scope);

    // getter / setter for original model
    var getter = $parse(attrs.checklistModel);
    var setter = getter.assign;

    // value added to list
    var value = $parse(attrs.checklistValue)(scope.$parent);

    // watch UI checked change
    scope.$watch('checked', function(newValue, oldValue) {
      if (newValue === oldValue) { 
        return;
      } 
      var current = getter(scope.$parent);
      if (newValue === true) {
        setter(scope.$parent, add(current, value));
      } else {
        setter(scope.$parent, remove(current, value));
      }
    });

    // watch original model change
    scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
      scope.checked = contains(newArr, value);
    }, true);
  }

  return {
    restrict: 'A',
    priority: 1000,
    terminal: true,
    scope: true,
    compile: function(tElement, tAttrs) {
      if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
        throw 'checklist-model should be applied to `input[type=""checkbox""]`.';
      }

      if (!tAttrs.checklistValue) {
        throw 'You should provide `checklist-value`.';
      }

      // exclude recursion
      tElement.removeAttr('checklist-model');
      
      // local scope var storing individual checkbox model
      tElement.attr('ng-model', 'checked');

      return postLinkFn;
    }
  };
}]);","/**
 * Checklist-model
 * AngularJS directive for list of checkboxes
 */

angular.module('checklist-model', [])
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
  // contains
  function contains(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          return true;
        }
      }
    }
    return false;
  }

  // add
  function add(arr, item) {
    arr = angular.isArray(arr) ? arr : [];
    for (var i = 0; i < arr.length; i++) {
      if (angular.equals(arr[i], item)) {
        return arr;
      }
    }    
    arr.push(item);
    return arr;
  }  

  // remove
  function remove(arr, item) {
    if (angular.isArray(arr)) {
      for (var i = 0; i < arr.length; i++) {
        if (angular.equals(arr[i], item)) {
          arr.splice(i, 1);
          break;
        }
      }
    }
    return arr;
  }

  // http://stackoverflow.com/a/19228302/1458162
  function postLinkFn(scope, elem, attrs) {
    // compile with `ng-model` pointing to `checked`
    $compile(elem)(scope);

    // getter / setter for original model
    var getter = $parse(attrs.checklistModel);
    var setter = getter.assign;

    // value added to list
    var value = $parse(attrs.checklistValue)(scope.$parent);

    // watch UI checked change
    scope.$watch('checked', function(newValue, oldValue) {
      if (newValue === oldValue) { 
        return;
      } 
      var current = getter(scope.$parent);
      if (newValue === true) {
        setter(scope.$parent, add(current, value));
      } else {
        setter(scope.$parent, remove(current, value));
      }
    });

    // watch original model change
    scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
      scope.checked = contains(newArr, value);
    }, true);
  }

  return {
    restrict: 'A',
    priority: 1000,
    terminal: true,
    scope: true,
    compile: function(tElement, tAttrs) {
      if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
        throw 'checklist-model should be applied to `input[type=""checkbox""]`.';
      }

      if (!tAttrs.checklistValue) {
        throw 'You should provide `checklist-value`.';
      }

      // exclude recursion
      tElement.removeAttr('checklist-model');
      
      // local scope var storing individual checkbox model
      tElement.attr('ng-model', 'checked');

      return postLinkFn;
    }
  };
}]);",TRUE,,5081
5053,InitialSO.csv5053.txt,InitialGit.csv5053.txt,9,"this.options initialize constructor // Compatibility override - Backbone 1.1 got rid of the 'options' binding
// automatically to views in the constructor - we need to keep that.
Backbone.View = (function(View) {
   return View.extend({
        constructor: function(options) {
            this.options = options || {};
            View.apply(this, arguments);
        }
    });
})(Backbone.View);
 ","this.options initialize constructor // Compatibility override - Backbone 1.1 got rid of the 'options' binding
// automatically to views in the constructor - we need to keep that.
Backbone.View = (function(View) {
   return View.extend({
        constructor: function(options) {
            this.options = options || {};
            View.apply(this, arguments);
        }
    });
})(Backbone.View);
 ",TRUE,"// Backbone.js 1.1.2

(function(t,e){if(typeof define===""function""&&define.amd){define([""underscore"",""jquery"",""exports""],function(i,r,s){t.Backbone=e(t,s,i,r)})}else if(typeof exports!==""undefined""){var i=require(""underscore"");e(t,exports,i)}else{t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}})(this,function(t,e,i,r){var s=t.Backbone;var n=[];var a=n.push;var o=n.slice;var h=n.splice;e.VERSION=""1.1.2"";e.$=r;e.noConflict=function(){t.Backbone=s;return this};e.emulateHTTP=false;e.emulateJSON=false;var u=e.Events={on:function(t,e,i){if(!c(this,""on"",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,r){if(!c(this,""once"",t,[e,r])||!e)return this;var s=this;var n=i.once(function(){s.off(t,n);e.apply(this,arguments)});n._callback=e;return this.on(t,n,r)},off:function(t,e,r){var s,n,a,o,h,u,l,f;if(!this._events||!c(this,""off"",t,[e,r]))return this;if(!t&&!e&&!r){this._events=void 0;return this}o=t?[t]:i.keys(this._events);for(h=0,u=o.length;h<u;h++){t=o[h];if(a=this._events[t]){this._events[t]=s=[];if(e||r){for(l=0,f=a.length;l<f;l++){n=a[l];if(e&&e!==n.callback&&e!==n.callback._callback||r&&r!==n.context){s.push(n)}}}if(!s.length)delete this._events[t]}}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!c(this,""trigger"",t,e))return this;var i=this._events[t];var r=this._events.all;if(i)f(i,e);if(r)f(r,arguments);return this},stopListening:function(t,e,r){var s=this._listeningTo;if(!s)return this;var n=!e&&!r;if(!r&&typeof e===""object"")r=this;if(t)(s={})[t._listenId]=t;for(var a in s){t=s[a];t.off(e,r,this);if(n||i.isEmpty(t._events))delete this._listeningTo[a]}return this}};var l=/\s+/;var c=function(t,e,i,r){if(!i)return true;if(typeof i===""object""){for(var s in i){t[e].apply(t,[s,i[s]].concat(r))}return false}if(l.test(i)){var n=i.split(l);for(var a=0,o=n.length;a<o;a++){t[e].apply(t,[n[a]].concat(r))}return false}return true};var f=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],o=e[2];switch(e.length){case 0:while(++r<s)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<s)(i=t[r]).callback.call(i.ctx,n);return;case 2:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a,o);return;default:while(++r<s)(i=t[r]).callback.apply(i.ctx,e);return}};var d={listenTo:""on"",listenToOnce:""once""};i.each(d,function(t,e){u[e]=function(e,r,s){var n=this._listeningTo||(this._listeningTo={});var a=e._listenId||(e._listenId=i.uniqueId(""l""));n[a]=e;if(!s&&typeof r===""object"")s=this;e[t](r,s,this);return this}});u.bind=u.on;u.unbind=u.off;i.extend(e,u);var p=e.Model=function(t,e){var r=t||{};e||(e={});this.cid=i.uniqueId(""c"");this.attributes={};if(e.collection)this.collection=e.collection;if(e.parse)r=this.parse(r,e)||{};r=i.defaults({},r,i.result(this,""defaults""));this.set(r,e);this.changed={};this.initialize.apply(this,arguments)};i.extend(p.prototype,u,{changed:null,validationError:null,idAttribute:""id"",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return this.get(t)!=null},set:function(t,e,r){var s,n,a,o,h,u,l,c;if(t==null)return this;if(typeof t===""object""){n=t;r=e}else{(n={})[t]=e}r||(r={});if(!this._validate(n,r))return false;a=r.unset;h=r.silent;o=[];u=this._changing;this._changing=true;if(!u){this._previousAttributes=i.clone(this.attributes);this.changed={}}c=this.attributes,l=this._previousAttributes;if(this.idAttribute in n)this.id=n[this.idAttribute];for(s in n){e=n[s];if(!i.isEqual(c[s],e))o.push(s);if(!i.isEqual(l[s],e)){this.changed[s]=e}else{delete this.changed[s]}a?delete c[s]:c[s]=e}if(!h){if(o.length)this._pending=r;for(var f=0,d=o.length;f<d;f++){this.trigger(""change:""+o[f],this,c[o[f]],r)}}if(u)return this;if(!h){while(this._pending){r=this._pending;this._pending=false;this.trigger(""change"",this,r)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:true}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,i.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!i.isEmpty(this.changed);return i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):false;var e,r=false;var s=this._changing?this._previousAttributes:this.attributes;for(var n in t){if(i.isEqual(s[n],e=t[n]))continue;(r||(r={}))[n]=e}return r},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=this;var r=t.success;t.success=function(i){if(!e.set(e.parse(i,t),t))return false;if(r)r(e,i,t);e.trigger(""sync"",e,i,t)};q(this,t);return this.sync(""read"",this,t)},save:function(t,e,r){var s,n,a,o=this.attributes;if(t==null||typeof t===""object""){s=t;r=e}else{(s={})[t]=e}r=i.extend({validate:true},r);if(s&&!r.wait){if(!this.set(s,r))return false}else{if(!this._validate(s,r))return false}if(s&&r.wait){this.attributes=i.extend({},o,s)}if(r.parse===void 0)r.parse=true;var h=this;var u=r.success;r.success=function(t){h.attributes=o;var e=h.parse(t,r);if(r.wait)e=i.extend(s||{},e);if(i.isObject(e)&&!h.set(e,r)){return false}if(u)u(h,t,r);h.trigger(""sync"",h,t,r)};q(this,r);n=this.isNew()?""create"":r.patch?""patch"":""update"";if(n===""patch"")r.attrs=s;a=this.sync(n,this,r);if(s&&r.wait)this.attributes=o;return a},destroy:function(t){t=t?i.clone(t):{};var e=this;var r=t.success;var s=function(){e.trigger(""destroy"",e,e.collection,t)};t.success=function(i){if(t.wait||e.isNew())s();if(r)r(e,i,t);if(!e.isNew())e.trigger(""sync"",e,i,t)};if(this.isNew()){t.success();return false}q(this,t);var n=this.sync(""delete"",this,t);if(!t.wait)s();return n},url:function(){var t=i.result(this,""urlRoot"")||i.result(this.collection,""url"")||M();if(this.isNew())return t;return t.replace(/([^\/])$/,""$1/"")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=i.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;if(!r)return true;this.trigger(""invalid"",this,r,i.extend(e,{validationError:r}));return false}});var v=[""keys"",""values"",""pairs"",""invert"",""pick"",""omit""];i.each(v,function(t){p.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.attributes);return i[t].apply(i,e)}});var g=e.Collection=function(t,e){e||(e={});if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,i.extend({silent:true},e))};var m={add:true,remove:true,merge:true};var y={add:true,remove:false};i.extend(g.prototype,u,{model:p,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:false},e,y))},remove:function(t,e){var r=!i.isArray(t);t=r?[t]:i.clone(t);e||(e={});var s,n,a,o;for(s=0,n=t.length;s<n;s++){o=t[s]=this.get(t[s]);if(!o)continue;delete this._byId[o.id];delete this._byId[o.cid];a=this.indexOf(o);this.models.splice(a,1);this.length--;if(!e.silent){e.index=a;o.trigger(""remove"",o,this,e)}this._removeReference(o,e)}return r?t[0]:t},set:function(t,e){e=i.defaults({},e,m);if(e.parse)t=this.parse(t,e);var r=!i.isArray(t);t=r?t?[t]:[]:i.clone(t);var s,n,a,o,h,u,l;var c=e.at;var f=this.model;var d=this.comparator&&c==null&&e.sort!==false;var v=i.isString(this.comparator)?this.comparator:null;var g=[],y=[],_={};var b=e.add,w=e.merge,x=e.remove;var E=!d&&b&&x?[]:false;for(s=0,n=t.length;s<n;s++){h=t[s]||{};if(h instanceof p){a=o=h}else{a=h[f.prototype.idAttribute||""id""]}if(u=this.get(a)){if(x)_[u.cid]=true;if(w){h=h===o?o.attributes:h;if(e.parse)h=u.parse(h,e);u.set(h,e);if(d&&!l&&u.hasChanged(v))l=true}t[s]=u}else if(b){o=t[s]=this._prepareModel(h,e);if(!o)continue;g.push(o);this._addReference(o,e)}o=u||o;if(E&&(o.isNew()||!_[o.id]))E.push(o);_[o.id]=true}if(x){for(s=0,n=this.length;s<n;++s){if(!_[(o=this.models[s]).cid])y.push(o)}if(y.length)this.remove(y,e)}if(g.length||E&&E.length){if(d)l=true;this.length+=g.length;if(c!=null){for(s=0,n=g.length;s<n;s++){this.models.splice(c+s,0,g[s])}}else{if(E)this.models.length=0;var k=E||g;for(s=0,n=k.length;s<n;s++){this.models.push(k[s])}}}if(l)this.sort({silent:true});if(!e.silent){for(s=0,n=g.length;s<n;s++){(o=g[s]).trigger(""add"",o,this,e)}if(l||E&&E.length)this.trigger(""sort"",this,e)}return r?t[0]:t},reset:function(t,e){e||(e={});for(var r=0,s=this.models.length;r<s;r++){this._removeReference(this.models[r],e)}e.previousModels=this.models;this._reset();t=this.add(t,i.extend({silent:true},e));if(!e.silent)this.trigger(""reset"",this,e);return t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);this.remove(e,t);return e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);this.remove(e,t);return e},slice:function(){return o.apply(this.models,arguments)},get:function(t){if(t==null)return void 0;return this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){if(i.isEmpty(t))return e?void 0:[];return this[e?""find"":""filter""](function(e){for(var i in t){if(t[i]!==e.get(i))return false}return true})},findWhere:function(t){return this.where(t,true)},sort:function(t){if(!this.comparator)throw new Error(""Cannot sort a set without a comparator"");t||(t={});if(i.isString(this.comparator)||this.comparator.length===1){this.models=this.sortBy(this.comparator,this)}else{this.models.sort(i.bind(this.comparator,this))}if(!t.silent)this.trigger(""sort"",this,t);return this},pluck:function(t){return i.invoke(this.models,""get"",t)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=t.success;var r=this;t.success=function(i){var s=t.reset?""reset"":""set"";r[s](i,t);if(e)e(r,i,t);r.trigger(""sync"",r,i,t)};q(this,t);return this.sync(""read"",this,t)},create:function(t,e){e=e?i.clone(e):{};if(!(t=this._prepareModel(t,e)))return false;if(!e.wait)this.add(t,e);var r=this;var s=e.success;e.success=function(t,i){if(e.wait)r.add(t,e);if(s)s(t,i,e)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(t instanceof p)return t;e=e?i.clone(e):{};e.collection=this;var r=new this.model(t,e);if(!r.validationError)return r;this.trigger(""invalid"",this,r.validationError,e);return false},_addReference:function(t,e){this._byId[t.cid]=t;if(t.id!=null)this._byId[t.id]=t;if(!t.collection)t.collection=this;t.on(""all"",this._onModelEvent,this)},_removeReference:function(t,e){if(this===t.collection)delete t.collection;t.off(""all"",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if((t===""add""||t===""remove"")&&i!==this)return;if(t===""destroy"")this.remove(e,r);if(e&&t===""change:""+e.idAttribute){delete this._byId[e.previous(e.idAttribute)];if(e.id!=null)this._byId[e.id]=e}this.trigger.apply(this,arguments)}});var _=[""forEach"",""each"",""map"",""collect"",""reduce"",""foldl"",""inject"",""reduceRight"",""foldr"",""find"",""detect"",""filter"",""select"",""reject"",""every"",""all"",""some"",""any"",""include"",""contains"",""invoke"",""max"",""min"",""toArray"",""size"",""first"",""head"",""take"",""initial"",""rest"",""tail"",""drop"",""last"",""without"",""difference"",""indexOf"",""shuffle"",""lastIndexOf"",""isEmpty"",""chain"",""sample""];i.each(_,function(t){g.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.models);return i[t].apply(i,e)}});var b=[""groupBy"",""countBy"",""sortBy"",""indexBy""];i.each(b,function(t){g.prototype[t]=function(e,r){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,r)}});var w=e.View=function(t){this.cid=i.uniqueId(""view"");t||(t={});i.extend(this,i.pick(t,E));this._ensureElement();this.initialize.apply(this,arguments);this.delegateEvents()};var x=/^(\S+)\s*(.*)$/;var E=[""model"",""collection"",""el"",""id"",""attributes"",""className"",""tagName"",""events""];i.extend(w.prototype,u,{tagName:""div"",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this.$el.remove();this.stopListening();return this},setElement:function(t,i){if(this.$el)this.undelegateEvents();this.$el=t instanceof e.$?t:e.$(t);this.el=this.$el[0];if(i!==false)this.delegateEvents();return this},delegateEvents:function(t){if(!(t||(t=i.result(this,""events""))))return this;this.undelegateEvents();for(var e in t){var r=t[e];if(!i.isFunction(r))r=this[t[e]];if(!r)continue;var s=e.match(x);var n=s[1],a=s[2];r=i.bind(r,this);n+="".delegateEvents""+this.cid;if(a===""""){this.$el.on(n,r)}else{this.$el.on(n,a,r)}}return this},undelegateEvents:function(){this.$el.off("".delegateEvents""+this.cid);return this},_ensureElement:function(){if(!this.el){var t=i.extend({},i.result(this,""attributes""));if(this.id)t.id=i.result(this,""id"");if(this.className)t[""class""]=i.result(this,""className"");var r=e.$(""<""+i.result(this,""tagName"")+"">"").attr(t);this.setElement(r,false)}else{this.setElement(i.result(this,""el""),false)}}});e.sync=function(t,r,s){var n=T[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:n,dataType:""json""};if(!s.url){a.url=i.result(r,""url"")||M()}if(s.data==null&&r&&(t===""create""||t===""update""||t===""patch"")){a.contentType=""application/json"";a.data=JSON.stringify(s.attrs||r.toJSON(s))}if(s.emulateJSON){a.contentType=""application/x-www-form-urlencoded"";a.data=a.data?{model:a.data}:{}}if(s.emulateHTTP&&(n===""PUT""||n===""DELETE""||n===""PATCH"")){a.type=""POST"";if(s.emulateJSON)a.data._method=n;var o=s.beforeSend;s.beforeSend=function(t){t.setRequestHeader(""X-HTTP-Method-Override"",n);if(o)return o.apply(this,arguments)}}if(a.type!==""GET""&&!s.emulateJSON){a.processData=false}if(a.type===""PATCH""&&k){a.xhr=function(){return new ActiveXObject(""Microsoft.XMLHTTP"")}}var h=s.xhr=e.ajax(i.extend(a,s));r.trigger(""request"",r,h,s);return h};var k=typeof window!==""undefined""&&!!window.ActiveXObject&&!(window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent);var T={create:""POST"",update:""PUT"",patch:""PATCH"",""delete"":""DELETE"",read:""GET""};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var $=e.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var S=/\((.*?)\)/g;var H=/(\(\?)?:\w+/g;var A=/\*\w+/g;var I=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend($.prototype,u,{initialize:function(){},route:function(t,r,s){if(!i.isRegExp(t))t=this._routeToRegExp(t);if(i.isFunction(r)){s=r;r=""""}if(!s)s=this[r];var n=this;e.history.route(t,function(i){var a=n._extractParameters(t,i);n.execute(s,a);n.trigger.apply(n,[""route:""+r].concat(a));n.trigger(""route"",r,a);e.history.trigger(""route"",n,r,a)});return this},execute:function(t,e){if(t)t.apply(this,e)},navigate:function(t,i){e.history.navigate(t,i);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=i.result(this,""routes"");var t,e=i.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(I,""\\$&"").replace(S,""(?:$1)?"").replace(H,function(t,e){return e?t:""([^/?]+)""}).replace(A,""([^?]*?)"");return new RegExp(""^""+t+""(?:\\?([\\s\\S]*))?$"")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return i.map(r,function(t,e){if(e===r.length-1)return t||null;return t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[];i.bindAll(this,""checkUrl"");if(typeof window!==""undefined""){this.location=window.location;this.history=window.history}};var R=/^[#\/]|\s+$/g;var O=/^\/+|\/+$/g;var P=/msie [\w.]+/;var C=/\/$/;var j=/#.*$/;N.started=false;i.extend(N.prototype,u,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,""$&/"")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""""},getFragment:function(t,e){if(t==null){if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(C,"""");if(!t.indexOf(i))t=t.slice(i.length)}else{t=this.getHash()}}return t.replace(R,"""")},start:function(t){if(N.started)throw new Error(""Backbone.history has already been started"");N.started=true;this.options=i.extend({root:""/""},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var r=this.getFragment();var s=document.documentMode;var n=P.exec(navigator.userAgent.toLowerCase())&&(!s||s<=7);this.root=(""/""+this.root+""/"").replace(O,""/"");if(n&&this._wantsHashChange){var a=e.$('<iframe src=""javascript:0"" tabindex=""-1"">');this.iframe=a.hide().appendTo(""body"")[0].contentWindow;this.navigate(r)}if(this._hasPushState){e.$(window).on(""popstate"",this.checkUrl)}else if(this._wantsHashChange&&""onhashchange""in window&&!n){e.$(window).on(""hashchange"",this.checkUrl)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}this.fragment=r;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){this.fragment=this.getFragment(null,true);this.location.replace(this.root+""#""+this.fragment);return true}else if(this._hasPushState&&this.atRoot()&&o.hash){this.fragment=this.getHash().replace(R,"""");this.history.replaceState({},document.title,this.root+this.fragment)}}if(!this.options.silent)return this.loadUrl()},stop:function(){e.$(window).off(""popstate"",this.checkUrl).off(""hashchange"",this.checkUrl);if(this._checkUrlInterval)clearInterval(this._checkUrlInterval);N.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getFragment(this.getHash(this.iframe))}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()},loadUrl:function(t){t=this.fragment=this.getFragment(t);return i.any(this.handlers,function(e){if(e.route.test(t)){e.callback(t);return true}})},navigate:function(t,e){if(!N.started)return false;if(!e||e===true)e={trigger:!!e};var i=this.root+(t=this.getFragment(t||""""));t=t.replace(j,"""");if(this.fragment===t)return;this.fragment=t;if(t===""""&&i!==""/"")i=i.slice(0,-1);if(this._hasPushState){this.history[e.replace?""replaceState"":""pushState""]({},document.title,i)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getFragment(this.getHash(this.iframe))){if(!e.replace)this.iframe.document.open().close();this._updateHash(this.iframe.location,t,e.replace)}}else{return this.location.assign(i)}if(e.trigger)return this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"""");t.replace(r+""#""+e)}else{t.hash=""#""+e}}});e.history=new N;var U=function(t,e){var r=this;var s;if(t&&i.has(t,""constructor"")){s=t.constructor}else{s=function(){return r.apply(this,arguments)}}i.extend(s,r,e);var n=function(){this.constructor=s};n.prototype=r.prototype;s.prototype=new n;if(t)i.extend(s.prototype,t);s.__super__=r.prototype;return s};p.extend=g.extend=$.extend=w.extend=N.extend=U;var M=function(){throw new Error('A ""url"" property or function must be specified')};var q=function(t,e){var i=e.error;e.error=function(r){if(i)i(t,r,e);t.trigger(""error"",t,r,e)}};return e});

// From http://stackoverflow.com/a/19431552
// Compatibility override - Backbone 1.1 got rid of the 'options' binding
// automatically to views in the constructor - we need to keep that.
Backbone.View = (function(View) {
   return View.extend({
        constructor: function(options) {
            this.options = options || {};
            View.apply(this, arguments);
        }
    });
})(Backbone.View);","// Backbone.js 1.1.2

(function(t,e){if(typeof define===""function""&&define.amd){define([""underscore"",""jquery"",""exports""],function(i,r,s){t.Backbone=e(t,s,i,r)})}else if(typeof exports!==""undefined""){var i=require(""underscore"");e(t,exports,i)}else{t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}})(this,function(t,e,i,r){var s=t.Backbone;var n=[];var a=n.push;var o=n.slice;var h=n.splice;e.VERSION=""1.1.2"";e.$=r;e.noConflict=function(){t.Backbone=s;return this};e.emulateHTTP=false;e.emulateJSON=false;var u=e.Events={on:function(t,e,i){if(!c(this,""on"",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,r){if(!c(this,""once"",t,[e,r])||!e)return this;var s=this;var n=i.once(function(){s.off(t,n);e.apply(this,arguments)});n._callback=e;return this.on(t,n,r)},off:function(t,e,r){var s,n,a,o,h,u,l,f;if(!this._events||!c(this,""off"",t,[e,r]))return this;if(!t&&!e&&!r){this._events=void 0;return this}o=t?[t]:i.keys(this._events);for(h=0,u=o.length;h<u;h++){t=o[h];if(a=this._events[t]){this._events[t]=s=[];if(e||r){for(l=0,f=a.length;l<f;l++){n=a[l];if(e&&e!==n.callback&&e!==n.callback._callback||r&&r!==n.context){s.push(n)}}}if(!s.length)delete this._events[t]}}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!c(this,""trigger"",t,e))return this;var i=this._events[t];var r=this._events.all;if(i)f(i,e);if(r)f(r,arguments);return this},stopListening:function(t,e,r){var s=this._listeningTo;if(!s)return this;var n=!e&&!r;if(!r&&typeof e===""object"")r=this;if(t)(s={})[t._listenId]=t;for(var a in s){t=s[a];t.off(e,r,this);if(n||i.isEmpty(t._events))delete this._listeningTo[a]}return this}};var l=/\s+/;var c=function(t,e,i,r){if(!i)return true;if(typeof i===""object""){for(var s in i){t[e].apply(t,[s,i[s]].concat(r))}return false}if(l.test(i)){var n=i.split(l);for(var a=0,o=n.length;a<o;a++){t[e].apply(t,[n[a]].concat(r))}return false}return true};var f=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],o=e[2];switch(e.length){case 0:while(++r<s)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<s)(i=t[r]).callback.call(i.ctx,n);return;case 2:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a,o);return;default:while(++r<s)(i=t[r]).callback.apply(i.ctx,e);return}};var d={listenTo:""on"",listenToOnce:""once""};i.each(d,function(t,e){u[e]=function(e,r,s){var n=this._listeningTo||(this._listeningTo={});var a=e._listenId||(e._listenId=i.uniqueId(""l""));n[a]=e;if(!s&&typeof r===""object"")s=this;e[t](r,s,this);return this}});u.bind=u.on;u.unbind=u.off;i.extend(e,u);var p=e.Model=function(t,e){var r=t||{};e||(e={});this.cid=i.uniqueId(""c"");this.attributes={};if(e.collection)this.collection=e.collection;if(e.parse)r=this.parse(r,e)||{};r=i.defaults({},r,i.result(this,""defaults""));this.set(r,e);this.changed={};this.initialize.apply(this,arguments)};i.extend(p.prototype,u,{changed:null,validationError:null,idAttribute:""id"",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return this.get(t)!=null},set:function(t,e,r){var s,n,a,o,h,u,l,c;if(t==null)return this;if(typeof t===""object""){n=t;r=e}else{(n={})[t]=e}r||(r={});if(!this._validate(n,r))return false;a=r.unset;h=r.silent;o=[];u=this._changing;this._changing=true;if(!u){this._previousAttributes=i.clone(this.attributes);this.changed={}}c=this.attributes,l=this._previousAttributes;if(this.idAttribute in n)this.id=n[this.idAttribute];for(s in n){e=n[s];if(!i.isEqual(c[s],e))o.push(s);if(!i.isEqual(l[s],e)){this.changed[s]=e}else{delete this.changed[s]}a?delete c[s]:c[s]=e}if(!h){if(o.length)this._pending=r;for(var f=0,d=o.length;f<d;f++){this.trigger(""change:""+o[f],this,c[o[f]],r)}}if(u)return this;if(!h){while(this._pending){r=this._pending;this._pending=false;this.trigger(""change"",this,r)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:true}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,i.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!i.isEmpty(this.changed);return i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):false;var e,r=false;var s=this._changing?this._previousAttributes:this.attributes;for(var n in t){if(i.isEqual(s[n],e=t[n]))continue;(r||(r={}))[n]=e}return r},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=this;var r=t.success;t.success=function(i){if(!e.set(e.parse(i,t),t))return false;if(r)r(e,i,t);e.trigger(""sync"",e,i,t)};q(this,t);return this.sync(""read"",this,t)},save:function(t,e,r){var s,n,a,o=this.attributes;if(t==null||typeof t===""object""){s=t;r=e}else{(s={})[t]=e}r=i.extend({validate:true},r);if(s&&!r.wait){if(!this.set(s,r))return false}else{if(!this._validate(s,r))return false}if(s&&r.wait){this.attributes=i.extend({},o,s)}if(r.parse===void 0)r.parse=true;var h=this;var u=r.success;r.success=function(t){h.attributes=o;var e=h.parse(t,r);if(r.wait)e=i.extend(s||{},e);if(i.isObject(e)&&!h.set(e,r)){return false}if(u)u(h,t,r);h.trigger(""sync"",h,t,r)};q(this,r);n=this.isNew()?""create"":r.patch?""patch"":""update"";if(n===""patch"")r.attrs=s;a=this.sync(n,this,r);if(s&&r.wait)this.attributes=o;return a},destroy:function(t){t=t?i.clone(t):{};var e=this;var r=t.success;var s=function(){e.trigger(""destroy"",e,e.collection,t)};t.success=function(i){if(t.wait||e.isNew())s();if(r)r(e,i,t);if(!e.isNew())e.trigger(""sync"",e,i,t)};if(this.isNew()){t.success();return false}q(this,t);var n=this.sync(""delete"",this,t);if(!t.wait)s();return n},url:function(){var t=i.result(this,""urlRoot"")||i.result(this.collection,""url"")||M();if(this.isNew())return t;return t.replace(/([^\/])$/,""$1/"")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=i.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;if(!r)return true;this.trigger(""invalid"",this,r,i.extend(e,{validationError:r}));return false}});var v=[""keys"",""values"",""pairs"",""invert"",""pick"",""omit""];i.each(v,function(t){p.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.attributes);return i[t].apply(i,e)}});var g=e.Collection=function(t,e){e||(e={});if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,i.extend({silent:true},e))};var m={add:true,remove:true,merge:true};var y={add:true,remove:false};i.extend(g.prototype,u,{model:p,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:false},e,y))},remove:function(t,e){var r=!i.isArray(t);t=r?[t]:i.clone(t);e||(e={});var s,n,a,o;for(s=0,n=t.length;s<n;s++){o=t[s]=this.get(t[s]);if(!o)continue;delete this._byId[o.id];delete this._byId[o.cid];a=this.indexOf(o);this.models.splice(a,1);this.length--;if(!e.silent){e.index=a;o.trigger(""remove"",o,this,e)}this._removeReference(o,e)}return r?t[0]:t},set:function(t,e){e=i.defaults({},e,m);if(e.parse)t=this.parse(t,e);var r=!i.isArray(t);t=r?t?[t]:[]:i.clone(t);var s,n,a,o,h,u,l;var c=e.at;var f=this.model;var d=this.comparator&&c==null&&e.sort!==false;var v=i.isString(this.comparator)?this.comparator:null;var g=[],y=[],_={};var b=e.add,w=e.merge,x=e.remove;var E=!d&&b&&x?[]:false;for(s=0,n=t.length;s<n;s++){h=t[s]||{};if(h instanceof p){a=o=h}else{a=h[f.prototype.idAttribute||""id""]}if(u=this.get(a)){if(x)_[u.cid]=true;if(w){h=h===o?o.attributes:h;if(e.parse)h=u.parse(h,e);u.set(h,e);if(d&&!l&&u.hasChanged(v))l=true}t[s]=u}else if(b){o=t[s]=this._prepareModel(h,e);if(!o)continue;g.push(o);this._addReference(o,e)}o=u||o;if(E&&(o.isNew()||!_[o.id]))E.push(o);_[o.id]=true}if(x){for(s=0,n=this.length;s<n;++s){if(!_[(o=this.models[s]).cid])y.push(o)}if(y.length)this.remove(y,e)}if(g.length||E&&E.length){if(d)l=true;this.length+=g.length;if(c!=null){for(s=0,n=g.length;s<n;s++){this.models.splice(c+s,0,g[s])}}else{if(E)this.models.length=0;var k=E||g;for(s=0,n=k.length;s<n;s++){this.models.push(k[s])}}}if(l)this.sort({silent:true});if(!e.silent){for(s=0,n=g.length;s<n;s++){(o=g[s]).trigger(""add"",o,this,e)}if(l||E&&E.length)this.trigger(""sort"",this,e)}return r?t[0]:t},reset:function(t,e){e||(e={});for(var r=0,s=this.models.length;r<s;r++){this._removeReference(this.models[r],e)}e.previousModels=this.models;this._reset();t=this.add(t,i.extend({silent:true},e));if(!e.silent)this.trigger(""reset"",this,e);return t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);this.remove(e,t);return e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);this.remove(e,t);return e},slice:function(){return o.apply(this.models,arguments)},get:function(t){if(t==null)return void 0;return this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){if(i.isEmpty(t))return e?void 0:[];return this[e?""find"":""filter""](function(e){for(var i in t){if(t[i]!==e.get(i))return false}return true})},findWhere:function(t){return this.where(t,true)},sort:function(t){if(!this.comparator)throw new Error(""Cannot sort a set without a comparator"");t||(t={});if(i.isString(this.comparator)||this.comparator.length===1){this.models=this.sortBy(this.comparator,this)}else{this.models.sort(i.bind(this.comparator,this))}if(!t.silent)this.trigger(""sort"",this,t);return this},pluck:function(t){return i.invoke(this.models,""get"",t)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=t.success;var r=this;t.success=function(i){var s=t.reset?""reset"":""set"";r[s](i,t);if(e)e(r,i,t);r.trigger(""sync"",r,i,t)};q(this,t);return this.sync(""read"",this,t)},create:function(t,e){e=e?i.clone(e):{};if(!(t=this._prepareModel(t,e)))return false;if(!e.wait)this.add(t,e);var r=this;var s=e.success;e.success=function(t,i){if(e.wait)r.add(t,e);if(s)s(t,i,e)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(t instanceof p)return t;e=e?i.clone(e):{};e.collection=this;var r=new this.model(t,e);if(!r.validationError)return r;this.trigger(""invalid"",this,r.validationError,e);return false},_addReference:function(t,e){this._byId[t.cid]=t;if(t.id!=null)this._byId[t.id]=t;if(!t.collection)t.collection=this;t.on(""all"",this._onModelEvent,this)},_removeReference:function(t,e){if(this===t.collection)delete t.collection;t.off(""all"",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if((t===""add""||t===""remove"")&&i!==this)return;if(t===""destroy"")this.remove(e,r);if(e&&t===""change:""+e.idAttribute){delete this._byId[e.previous(e.idAttribute)];if(e.id!=null)this._byId[e.id]=e}this.trigger.apply(this,arguments)}});var _=[""forEach"",""each"",""map"",""collect"",""reduce"",""foldl"",""inject"",""reduceRight"",""foldr"",""find"",""detect"",""filter"",""select"",""reject"",""every"",""all"",""some"",""any"",""include"",""contains"",""invoke"",""max"",""min"",""toArray"",""size"",""first"",""head"",""take"",""initial"",""rest"",""tail"",""drop"",""last"",""without"",""difference"",""indexOf"",""shuffle"",""lastIndexOf"",""isEmpty"",""chain"",""sample""];i.each(_,function(t){g.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.models);return i[t].apply(i,e)}});var b=[""groupBy"",""countBy"",""sortBy"",""indexBy""];i.each(b,function(t){g.prototype[t]=function(e,r){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,r)}});var w=e.View=function(t){this.cid=i.uniqueId(""view"");t||(t={});i.extend(this,i.pick(t,E));this._ensureElement();this.initialize.apply(this,arguments);this.delegateEvents()};var x=/^(\S+)\s*(.*)$/;var E=[""model"",""collection"",""el"",""id"",""attributes"",""className"",""tagName"",""events""];i.extend(w.prototype,u,{tagName:""div"",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this.$el.remove();this.stopListening();return this},setElement:function(t,i){if(this.$el)this.undelegateEvents();this.$el=t instanceof e.$?t:e.$(t);this.el=this.$el[0];if(i!==false)this.delegateEvents();return this},delegateEvents:function(t){if(!(t||(t=i.result(this,""events""))))return this;this.undelegateEvents();for(var e in t){var r=t[e];if(!i.isFunction(r))r=this[t[e]];if(!r)continue;var s=e.match(x);var n=s[1],a=s[2];r=i.bind(r,this);n+="".delegateEvents""+this.cid;if(a===""""){this.$el.on(n,r)}else{this.$el.on(n,a,r)}}return this},undelegateEvents:function(){this.$el.off("".delegateEvents""+this.cid);return this},_ensureElement:function(){if(!this.el){var t=i.extend({},i.result(this,""attributes""));if(this.id)t.id=i.result(this,""id"");if(this.className)t[""class""]=i.result(this,""className"");var r=e.$(""<""+i.result(this,""tagName"")+"">"").attr(t);this.setElement(r,false)}else{this.setElement(i.result(this,""el""),false)}}});e.sync=function(t,r,s){var n=T[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:n,dataType:""json""};if(!s.url){a.url=i.result(r,""url"")||M()}if(s.data==null&&r&&(t===""create""||t===""update""||t===""patch"")){a.contentType=""application/json"";a.data=JSON.stringify(s.attrs||r.toJSON(s))}if(s.emulateJSON){a.contentType=""application/x-www-form-urlencoded"";a.data=a.data?{model:a.data}:{}}if(s.emulateHTTP&&(n===""PUT""||n===""DELETE""||n===""PATCH"")){a.type=""POST"";if(s.emulateJSON)a.data._method=n;var o=s.beforeSend;s.beforeSend=function(t){t.setRequestHeader(""X-HTTP-Method-Override"",n);if(o)return o.apply(this,arguments)}}if(a.type!==""GET""&&!s.emulateJSON){a.processData=false}if(a.type===""PATCH""&&k){a.xhr=function(){return new ActiveXObject(""Microsoft.XMLHTTP"")}}var h=s.xhr=e.ajax(i.extend(a,s));r.trigger(""request"",r,h,s);return h};var k=typeof window!==""undefined""&&!!window.ActiveXObject&&!(window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent);var T={create:""POST"",update:""PUT"",patch:""PATCH"",""delete"":""DELETE"",read:""GET""};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var $=e.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var S=/\((.*?)\)/g;var H=/(\(\?)?:\w+/g;var A=/\*\w+/g;var I=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend($.prototype,u,{initialize:function(){},route:function(t,r,s){if(!i.isRegExp(t))t=this._routeToRegExp(t);if(i.isFunction(r)){s=r;r=""""}if(!s)s=this[r];var n=this;e.history.route(t,function(i){var a=n._extractParameters(t,i);n.execute(s,a);n.trigger.apply(n,[""route:""+r].concat(a));n.trigger(""route"",r,a);e.history.trigger(""route"",n,r,a)});return this},execute:function(t,e){if(t)t.apply(this,e)},navigate:function(t,i){e.history.navigate(t,i);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=i.result(this,""routes"");var t,e=i.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(I,""\\$&"").replace(S,""(?:$1)?"").replace(H,function(t,e){return e?t:""([^/?]+)""}).replace(A,""([^?]*?)"");return new RegExp(""^""+t+""(?:\\?([\\s\\S]*))?$"")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return i.map(r,function(t,e){if(e===r.length-1)return t||null;return t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[];i.bindAll(this,""checkUrl"");if(typeof window!==""undefined""){this.location=window.location;this.history=window.history}};var R=/^[#\/]|\s+$/g;var O=/^\/+|\/+$/g;var P=/msie [\w.]+/;var C=/\/$/;var j=/#.*$/;N.started=false;i.extend(N.prototype,u,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,""$&/"")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""""},getFragment:function(t,e){if(t==null){if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(C,"""");if(!t.indexOf(i))t=t.slice(i.length)}else{t=this.getHash()}}return t.replace(R,"""")},start:function(t){if(N.started)throw new Error(""Backbone.history has already been started"");N.started=true;this.options=i.extend({root:""/""},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var r=this.getFragment();var s=document.documentMode;var n=P.exec(navigator.userAgent.toLowerCase())&&(!s||s<=7);this.root=(""/""+this.root+""/"").replace(O,""/"");if(n&&this._wantsHashChange){var a=e.$('<iframe src=""javascript:0"" tabindex=""-1"">');this.iframe=a.hide().appendTo(""body"")[0].contentWindow;this.navigate(r)}if(this._hasPushState){e.$(window).on(""popstate"",this.checkUrl)}else if(this._wantsHashChange&&""onhashchange""in window&&!n){e.$(window).on(""hashchange"",this.checkUrl)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}this.fragment=r;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){this.fragment=this.getFragment(null,true);this.location.replace(this.root+""#""+this.fragment);return true}else if(this._hasPushState&&this.atRoot()&&o.hash){this.fragment=this.getHash().replace(R,"""");this.history.replaceState({},document.title,this.root+this.fragment)}}if(!this.options.silent)return this.loadUrl()},stop:function(){e.$(window).off(""popstate"",this.checkUrl).off(""hashchange"",this.checkUrl);if(this._checkUrlInterval)clearInterval(this._checkUrlInterval);N.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getFragment(this.getHash(this.iframe))}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()},loadUrl:function(t){t=this.fragment=this.getFragment(t);return i.any(this.handlers,function(e){if(e.route.test(t)){e.callback(t);return true}})},navigate:function(t,e){if(!N.started)return false;if(!e||e===true)e={trigger:!!e};var i=this.root+(t=this.getFragment(t||""""));t=t.replace(j,"""");if(this.fragment===t)return;this.fragment=t;if(t===""""&&i!==""/"")i=i.slice(0,-1);if(this._hasPushState){this.history[e.replace?""replaceState"":""pushState""]({},document.title,i)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getFragment(this.getHash(this.iframe))){if(!e.replace)this.iframe.document.open().close();this._updateHash(this.iframe.location,t,e.replace)}}else{return this.location.assign(i)}if(e.trigger)return this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"""");t.replace(r+""#""+e)}else{t.hash=""#""+e}}});e.history=new N;var U=function(t,e){var r=this;var s;if(t&&i.has(t,""constructor"")){s=t.constructor}else{s=function(){return r.apply(this,arguments)}}i.extend(s,r,e);var n=function(){this.constructor=s};n.prototype=r.prototype;s.prototype=new n;if(t)i.extend(s.prototype,t);s.__super__=r.prototype;return s};p.extend=g.extend=$.extend=w.extend=N.extend=U;var M=function(){throw new Error('A ""url"" property or function must be specified')};var q=function(t,e){var i=e.error;e.error=function(r){if(i)i(t,r,e);t.trigger(""error"",t,r,e)}};return e});

// From http://stackoverflow.com/a/19431552
// Compatibility override - Backbone 1.1 got rid of the 'options' binding
// automatically to views in the constructor - we need to keep that.
Backbone.View = (function(View) {
   return View.extend({
        constructor: function(options) {
            this.options = options || {};
            View.apply(this, arguments);
        }
    });
})(Backbone.View);",TRUE,,5082
5054,InitialSO.csv5054.txt,InitialGit.csv5054.txt,13,"var vis = (function(){
    var stateKey, eventKey, keys = {
        hidden: ""visibilitychange"",
        webkitHidden: ""webkitvisibilitychange"",
        mozHidden: ""mozvisibilitychange"",
        msHidden: ""msvisibilitychange""
    };
    for (stateKey in keys) {
        if (stateKey in document) {
            eventKey = keys[stateKey];
            break;
        }
    }
    return function(c) {
        if (c) document.addEventListener(eventKey, c);
        return !document[stateKey];
    }
})();
 var visible = vis(); // gives current state

vis(aFunction);      // registers a handler for visibility changes
 vis(function(){
  document.title = vis() ? 'Visible' : 'Not visible';
});
 ","var vis = (function(){
    var stateKey, eventKey, keys = {
        hidden: ""visibilitychange"",
        webkitHidden: ""webkitvisibilitychange"",
        mozHidden: ""mozvisibilitychange"",
        msHidden: ""msvisibilitychange""
    };
    for (stateKey in keys) {
        if (stateKey in document) {
            eventKey = keys[stateKey];
            break;
        }
    }
    return function(c) {
        if (c) document.addEventListener(eventKey, c);
        return !document[stateKey];
    }
})();
 var visible = vis(); // gives current state

vis(aFunction);      // registers a handler for visibility changes
 vis(function(){
  document.title = vis() ? 'Visible' : 'Not visible';
});
 ",TRUE,"/**
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */

/**
 * Task that periodically checks if a blocking event in the backend occured and
 * displays a proper dialog to the user.
 */
define('TYPO3/CMS/Backend/LoginRefresh', ['jquery'], function($) {
	var LoginRefresh = {
		identifier: {
			loginrefresh: 't3-modal-loginrefresh',
			lockedModal: 't3-modal-backendlocked',
			loginFormModal: 't3-modal-backendloginform'
		},
		options: {
			modalConfig: {
				backdrop: 'static'
			}
		},
		webNotification: null,
		intervalId: null,
		backendIsLocked: false,
		isTimingOut: false,
		$timeoutModal: '',
		$backendLockedModal: '',
		$loginForm: ''
	};

	/**
	 * Starts the session check task (if not running already)
	 */
	LoginRefresh.startTask = function() {
		if (LoginRefresh.intervalId !== null) {
			return;
		}

		// set interval to 60 seconds
		var interval = 1000 * 60;
		LoginRefresh.intervalId = setInterval(LoginRefresh.checkActiveSession, interval);
	};

	/**
	 * Stops the session check task
	 */
	LoginRefresh.stopTask = function() {
		clearInterval(LoginRefresh.intervalId);
		LoginRefresh.intervalId = null;
	};

	/**
	 * Generates a modal dialog as template.
	 */
	LoginRefresh.generateModal = function(identifier) {
		return TYPO3.jQuery('<div />', {id: identifier, class: 't3-modal t3-blr-modal ' + identifier + ' modal fade'}).append(
			$('<div />', {class: 'modal-dialog'}).append(
				$('<div />', {class: 'modal-content'}).append(
					$('<div />', {class: 'modal-header'}).append(
						$('<h4 />', {class: 'modal-title'})
					),
					$('<div />', {class: 'modal-body'}),
					$('<div />', {class: 'modal-footer'})
				)
			)
		);
	};

	/**
	 * Generates the modal displayed on near session time outs
	 */
	LoginRefresh.initializeTimeoutModal = function() {
		LoginRefresh.$timeoutModal = LoginRefresh.generateModal(LoginRefresh.identifier.loginrefresh);
		LoginRefresh.$timeoutModal.find('.modal-header h4').text(TYPO3.LLL.core.login_about_to_expire_title);
		LoginRefresh.$timeoutModal.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.login_about_to_expire),
			$('<div />', {class: 'progress'}).append(
				$('<div />', {
					class: 'progress-bar progress-bar-warning progress-bar-striped active',
					role: 'progressbar',
					'aria-valuemin': '0',
					'aria-valuemax': '100'
				}).append(
					$('<span />', {class: 'sr-only'})
				)
			)
		);
		LoginRefresh.$timeoutModal.find('.modal-footer').append(
			$('<button />', {class: 't3-button', 'data-action': 'refreshSession'}).text(TYPO3.LLL.core.refresh_login_refresh_button).on('click', function() {
				$.ajax({
					url: TYPO3.settings.ajaxUrls['BackendLogin::isTimedOut'],
					method: 'GET',
					success: function() {
						LoginRefresh.hideTimeoutModal();
					}
				});
			}),
			$('<button />', {class: 't3-button', 'data-action': 'logout'}).text(TYPO3.LLL.core.refresh_direct_logout_button).on('click', function() {
				top.location.href = TYPO3.configuration.siteUrl + TYPO3.configuration.TYPO3_mainDir + 'logout.php';
			})
		);

		LoginRefresh.registerDefaultModalEvents(LoginRefresh.$timeoutModal);

		$('body').append(LoginRefresh.$timeoutModal);
	};

	/**
	 * Shows the timeout dialog. If the backend is not focused, a Web Notification
	 * is displayed, too.
	 */
	LoginRefresh.showTimeoutModal = function() {
		LoginRefresh.isTimingOut = true;
		LoginRefresh.$timeoutModal.modal(LoginRefresh.options.modalConfig);
		LoginRefresh.fillProgressbar(LoginRefresh.$timeoutModal);

		if (typeof Notification !== 'undefined' && Notification.permission === 'granted' && !LoginRefresh.isPageActive()) {
			LoginRefresh.webNotification = new Notification(TYPO3.LLL.core.login_about_to_expire_title, {
				body: TYPO3.LLL.core.login_about_to_expire,
				icon: '/typo3/sysext/backend/Resources/Public/Images/Logo.png'
			});
		}
	};

	/**
	 * Hides the timeout dialog. If a Web Notification is displayed, close it too.
	 */
	LoginRefresh.hideTimeoutModal = function() {
		LoginRefresh.isTimingOut = false;
		LoginRefresh.$timeoutModal.modal('hide');

		if (typeof Notification !== 'undefined' && LoginRefresh.webNotification !== null) {
			LoginRefresh.webNotification.close();
		}
	};

	/**
	 * Generates the modal displayed if the backend is locked.
	 */
	LoginRefresh.initializeBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal = LoginRefresh.generateModal(LoginRefresh.identifier.lockedModal);
		LoginRefresh.$backendLockedModal.find('.modal-header h4').text(TYPO3.LLL.core.please_wait);
		LoginRefresh.$backendLockedModal.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.be_locked)
		);
		LoginRefresh.$backendLockedModal.find('.modal-footer').remove();

		$('body').append(LoginRefresh.$backendLockedModal);
	};

	/**
	 * Shows the ""backend locked"" dialog.
	 */
	LoginRefresh.showBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal.modal(LoginRefresh.options.modalConfig);
	};

	/**
	 * Hides the ""backend locked"" dialog.
	 */
	LoginRefresh.hideBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal.modal('hide');
	};

	/**
	 * Generates the login form displayed if the session has timed out.
	 */
	LoginRefresh.initializeLoginForm = function() {
		if (TYPO3.configuration.showRefreshLoginPopup) {
			// dialog is not required if ""showRefreshLoginPopup"" is enabled
			return;
		}

		LoginRefresh.$loginForm = LoginRefresh.generateModal(LoginRefresh.identifier.loginFormModal);
		LoginRefresh.$loginForm.find('.modal-header h4').text(TYPO3.LLL.core.refresh_login_title);
		LoginRefresh.$loginForm.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.login_expired),
			$('<form />', {id: 'beLoginRefresh', method: 'POST', action: TYPO3.settings.ajaxUrls['BackendLogin::login']}).append(
				$('<div />', {class: 'form-group'}).append(
					$('<input />', {type: 'password', name: 'p_field', autofocus: 'autofocus', class: 'form-control', placeholder: TYPO3.LLL.core.refresh_login_password})
				),
				$('<input />', {type: 'hidden', name: 'username', value: TYPO3.configuration.username}),
				$('<input />', {type: 'hidden', name: 'userident'}),
				$('<input />', {type: 'hidden', name: 'challenge'})
			)
		);
		LoginRefresh.$loginForm.find('.modal-footer').append(
			$('<button />', {type: 'submit', form: 'beLoginRefresh', class: 't3-button', 'data-action': 'refreshSession'}).text(TYPO3.LLL.core.refresh_login_button),
			$('<button />', {class: 't3-button', 'data-action': 'logout'}).text(TYPO3.LLL.core.refresh_direct_logout_button).on('click', function() {
				top.location.href = TYPO3.configuration.siteUrl + TYPO3.configuration.TYPO3_mainDir + 'logout.php';
			})
		);

		LoginRefresh.registerDefaultModalEvents(LoginRefresh.$loginForm).on('submit', LoginRefresh.triggerSubmitForm);

		$('body').append(LoginRefresh.$loginForm);
	};

	/**
	 * Shows the login form.
	 */
	LoginRefresh.showLoginForm = function() {
		// log off for sure
		$.ajax({
			url: TYPO3.settings.ajaxUrls['BackendLogin::logout'],
			method: 'GET',
			success: function() {
				if (TYPO3.configuration.showRefreshLoginPopup) {
					LoginRefresh.showLoginPopup();
				} else {
					LoginRefresh.$loginForm.modal(LoginRefresh.options.modalConfig);
				}
			},
			failure: function() {
				alert('something went wrong');
			}
		});
	};

	/**
	 * Opens the login form in a new window.
	 */
	LoginRefresh.showLoginPopup = function() {
		var vHWin = window.open('login_frameset.php', 'relogin_' + TYPO3.configuration.uniqueID, 'height=450,width=700,status=0,menubar=0,location=1');
		vHWin.focus();
	};

	/**
	 * Hides the login form.
	 */
	LoginRefresh.hideLoginForm = function() {
		LoginRefresh.$loginForm.modal('hide');
	};

	/**
	 * Fills the progressbar attached to the given modal.
	 */
	LoginRefresh.fillProgressbar = function($activeModal) {
		if (!LoginRefresh.isTimingOut) {
			return;
		}

		var max = 100,
			current = 0,
			$progressBar = $activeModal.find('.progress-bar'),
			$srText = $progressBar.children('.sr-only');

		var progress = setInterval(function() {
			var isOverdue = (current >= max);

			if (!LoginRefresh.isTimingOut || isOverdue) {
				clearInterval(progress);

				if (isOverdue) {
					// show login form
					LoginRefresh.hideTimeoutModal();
					LoginRefresh.showLoginForm();
				}

				// reset current
				current = 0;
			} else {
				current += 1;
			}

			var percentText = (current) + '%';
			$progressBar.css('width', percentText);
			$srText.text(percentText);
		}, 300);
	};

	/**
	 * Triggers the form submit based on the security level.
	 */
	LoginRefresh.triggerSubmitForm = function(e) {
		e.preventDefault();

		switch (TYPO3.configuration.securityLevel) {
			case 'superchallenged':
			case 'challenged':
				$.ajax({
					url: TYPO3.settings.ajaxUrls['BackendLogin::getChallenge'],
					method: 'GET',
					data: {
						skipSessionUpdate: 1
					},
					success: function(response) {
						if (response.challenge) {
							LoginRefresh.$loginForm.find('input[name=challenge]').val(response.challenge);
							LoginRefresh.submitForm();
						}
					}
				});
				break;
			case 'rsa':
				$.ajax({
					url: TYPO3.settings.ajaxUrls['BackendLogin::getRsaPublicKey'],
					method: 'GET',
					data: {
						skipSessionUpdate: 1
					},
					success: function(response) {
						if (response.publicKeyModulus && response.exponent) {
							LoginRefresh.submitForm(response);
						}
					}
				});
				break;
			default:
				LoginRefresh.submitForm();
		}
	};

	/**
	 * Creates additional data based on the security level and ""submits"" the form
	 * via an AJAX request.
	 */
	LoginRefresh.submitForm = function(parameters) {
		var $form = LoginRefresh.$loginForm.find('form'),
			$usernameField = $form.find('input[name=username]'),
			$passwordField = $form.find('input[name=p_field]'),
			$challengeField = $form.find('input[name=challenge]'),
			$useridentField = $form.find('input[name=userident]'),
			passwordFieldValue = $passwordField.val();

		if (passwordFieldValue === '') {
			top.TYPO3.Flashmessage.display(TYPO3.Severity.error, TYPO3.LLL.core.refresh_login_failed, TYPO3.LLL.core.refresh_login_emptyPassword);
			$passwordField.focus();
			return;
		}

		if (TYPO3.configuration.securityLevel === 'superchallenged') {
			$passwordField.val(MD5(passwordFieldValue));
		}

		if (TYPO3.configuration.securityLevel === 'superchallenged' || TYPO3.configuration.securityLevel === 'challenged') {
			$challengeField.val(parameters.challenge);
			$useridentField.val(MD5($usernameField.val() + ':' + passwordFieldValue + ':' + parameters.challenge));
		} else if (TYPO3.configuration.securityLevel === 'rsa') {
			var rsa = new RSAKey();
			rsa.setPublic(parameters.publicKeyModulus, parameters.exponent);
			var encryptedPassword = rsa.encrypt(passwordFieldValue);
			$useridentField.val('rsa:' + hex2b64(encryptedPassword));
		} else {
			$useridentField.val(passwordFieldValue);
		}
		$passwordField.val('');

		var postData = {
			login_status: 'login'
		};
		$.each($form.serializeArray(), function(i, field) {
			postData[field.name] = field.value;
		});
		$.ajax({
			url: $form.attr('action'),
			method: 'POST',
			data: postData,
			success: function(response) {
				var result = response.login;
				if (result.success) {
					// User is logged in
					LoginRefresh.hideLoginForm();
				} else {
					// TODO: add failure to notification system instead of alert
					top.TYPO3.Flashmessage.display(TYPO3.Severity.error, TYPO3.LLL.core.refresh_login_failed, TYPO3.LLL.core.refresh_login_failed_message);
					$passwordField.focus();
				}
			}
		});
	};

	/**
	 * Registers the (shown|hidden).bs.modal events.
	 * If a modal is shown, the interval check is stopped. If the modal hides,
	 * the interval check starts again.
	 * This method is not invoked for the backend locked modal, because we still
	 * need to check if the backend gets unlocked again.
	 */
	LoginRefresh.registerDefaultModalEvents = function($modal) {
		$modal.on('hidden.bs.modal', function() {
			LoginRefresh.startTask();
		}).on('shown.bs.modal', function() {
			LoginRefresh.stopTask();
		});

		return $modal;
	};

	/**
	 * Checks if the user is in focus of the backend.
	 * Thanks to http://stackoverflow.com/a/19519701
	 */
	LoginRefresh.isPageActive = function() {
		var stateKey, eventKey, keys = {
			hidden: 'visibilitychange',
			webkitHidden: 'webkitvisibilitychange',
			mozHidden: 'mozvisibilitychange',
			msHidden: 'msvisibilitychange'
		};

		for (stateKey in keys) {
			if (stateKey in document) {
				eventKey = keys[stateKey];
				break;
			}
		}
		return function(c) {
			if (c) {
				document.addEventListener(eventKey, c);
			}
			return !document[stateKey];
		}();
	};

	/**
	 * Periodically called task that checks if
	 *
	 * - the user's backend session is about to expire
	 * - the user's backend session has expired
	 * - the backend got locked
	 *
	 * and opens a dialog.
	 */
	LoginRefresh.checkActiveSession = function() {
		$.ajax({
			url: TYPO3.settings.ajaxUrls['BackendLogin::isTimedOut'],
			data: {
				skipSessionUpdate: 1
			},
			success: function(response) {
				if (response.login.locked) {
					if (!LoginRefresh.backendIsLocked) {
						LoginRefresh.backendIsLocked = true;
						LoginRefresh.showBackendLockedModal();
					}
				} else {
					if (LoginRefresh.backendIsLocked) {
						LoginRefresh.backendIsLocked = false;
						LoginRefresh.hideBackendLockedModal();
					}
				}

				if (!LoginRefresh.backendIsLocked) {
					if (response.login.timed_out || response.login.will_time_out) {
						if (response.login.timed_out) {
							LoginRefresh.showLoginForm();
						} else {
							LoginRefresh.showTimeoutModal();
						}
					}
				}
			}
		});
	};

	// initialize and return the LoginRefresh object
	return function() {
		$(document).ready(function() {
			LoginRefresh.initializeTimeoutModal();
			LoginRefresh.initializeBackendLockedModal();
			LoginRefresh.initializeLoginForm();

			LoginRefresh.startTask();

			if (typeof Notification !== 'undefined' && Notification.permission !== 'granted') {
				Notification.requestPermission();
			}
		});

		TYPO3.LoginRefresh = LoginRefresh;
		return LoginRefresh;
	}();
});
","/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */

/**
 * Task that periodically checks if a blocking event in the backend occurred and
 * displays a proper dialog to the user.
 */
define('TYPO3/CMS/Backend/LoginRefresh', ['jquery', 'bootstrap'], function($) {
	var LoginRefresh = {
		identifier: {
			loginrefresh: 't3-modal-loginrefresh',
			lockedModal: 't3-modal-backendlocked',
			loginFormModal: 't3-modal-backendloginform'
		},
		options: {
			modalConfig: {
				backdrop: 'static'
			}
		},
		webNotification: null,
		intervalId: null,
		backendIsLocked: false,
		isTimingOut: false,
		$timeoutModal: '',
		$backendLockedModal: '',
		$loginForm: '',
		loginFramesetUrl: '',
		logoutUrl: ''
	};

	/**
	 * Starts the session check task (if not running already)
	 */
	LoginRefresh.startTask = function() {
		if (LoginRefresh.intervalId !== null) {
			return;
		}

		// set interval to 60 seconds
		var interval = 1000 * 60;
		LoginRefresh.intervalId = setInterval(LoginRefresh.checkActiveSession, interval);
	};

	/**
	 * Stops the session check task
	 */
	LoginRefresh.stopTask = function() {
		clearInterval(LoginRefresh.intervalId);
		LoginRefresh.intervalId = null;
	};

	/**
	 * Generates a modal dialog as template.
	 */
	LoginRefresh.generateModal = function(identifier) {
		return TYPO3.jQuery('<div />', {id: identifier, class: 't3-modal t3-blr-modal ' + identifier + ' modal fade'}).append(
			$('<div />', {class: 'modal-dialog'}).append(
				$('<div />', {class: 'modal-content'}).append(
					$('<div />', {class: 'modal-header'}).append(
						$('<h4 />', {class: 'modal-title'})
					),
					$('<div />', {class: 'modal-body'}),
					$('<div />', {class: 'modal-footer'})
				)
			)
		);
	};

	/**
	 * Set logout url
	 */
	LoginRefresh.setLogoutUrl = function(logoutUrl) {
		LoginRefresh.logoutUrl = logoutUrl;
	};

	/**
	 * Generates the modal displayed on near session time outs
	 */
	LoginRefresh.initializeTimeoutModal = function() {
		LoginRefresh.$timeoutModal = LoginRefresh.generateModal(LoginRefresh.identifier.loginrefresh);
		LoginRefresh.$timeoutModal.addClass('t3-modal-notice');
		LoginRefresh.$timeoutModal.find('.modal-header h4').text(TYPO3.LLL.core.login_about_to_expire_title);
		LoginRefresh.$timeoutModal.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.login_about_to_expire),
			$('<div />', {class: 'progress'}).append(
				$('<div />', {
					class: 'progress-bar progress-bar-warning progress-bar-striped active',
					role: 'progressbar',
					'aria-valuemin': '0',
					'aria-valuemax': '100'
				}).append(
					$('<span />', {class: 'sr-only'})
				)
			)
		);
		LoginRefresh.$timeoutModal.find('.modal-footer').append(
			$('<button />', {class: 'btn btn-default', 'data-action': 'refreshSession'}).text(TYPO3.LLL.core.refresh_login_abort_button).on('click', function() {
				$.ajax({
					url: TYPO3.settings.ajaxUrls['BackendLogin::isTimedOut'],
					method: 'GET',
					success: function() {
						LoginRefresh.hideTimeoutModal();
					}
				});
			}),
			$('<button />', {class: 'btn btn-primary t3js-active', 'data-action': 'logout'}).text(TYPO3.LLL.core.refresh_login_confirm_button).on('click', function() {
				top.location.href = TYPO3.configuration.siteUrl + LoginRefresh.logoutUrl;
			})
		);
		LoginRefresh.registerDefaultModalEvents(LoginRefresh.$timeoutModal);

		$('body').append(LoginRefresh.$timeoutModal);
	};

	/**
	 * Shows the timeout dialog. If the backend is not focused, a Web Notification
	 * is displayed, too.
	 */
	LoginRefresh.showTimeoutModal = function() {
		LoginRefresh.isTimingOut = true;
		LoginRefresh.$timeoutModal.modal(LoginRefresh.options.modalConfig);
		LoginRefresh.fillProgressbar(LoginRefresh.$timeoutModal);

		if (typeof Notification !== 'undefined' && Notification.permission === 'granted' && !LoginRefresh.isPageActive()) {
			LoginRefresh.webNotification = new Notification(TYPO3.LLL.core.login_about_to_expire_title, {
				body: TYPO3.LLL.core.login_about_to_expire,
				icon: '/typo3/sysext/backend/Resources/Public/Images/Logo.png'
			});
			LoginRefresh.webNotification.onclick = function() {
				window.focus();
			};
		}
	};

	/**
	 * Hides the timeout dialog. If a Web Notification is displayed, close it too.
	 */
	LoginRefresh.hideTimeoutModal = function() {
		LoginRefresh.isTimingOut = false;
		LoginRefresh.$timeoutModal.modal('hide');

		if (typeof Notification !== 'undefined' && LoginRefresh.webNotification !== null) {
			LoginRefresh.webNotification.close();
		}
	};

	/**
	 * Generates the modal displayed if the backend is locked.
	 */
	LoginRefresh.initializeBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal = LoginRefresh.generateModal(LoginRefresh.identifier.lockedModal);
		LoginRefresh.$backendLockedModal.find('.modal-header h4').text(TYPO3.LLL.core.please_wait);
		LoginRefresh.$backendLockedModal.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.be_locked)
		);
		LoginRefresh.$backendLockedModal.find('.modal-footer').remove();

		$('body').append(LoginRefresh.$backendLockedModal);
	};

	/**
	 * Shows the ""backend locked"" dialog.
	 */
	LoginRefresh.showBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal.modal(LoginRefresh.options.modalConfig);
	};

	/**
	 * Hides the ""backend locked"" dialog.
	 */
	LoginRefresh.hideBackendLockedModal = function() {
		LoginRefresh.$backendLockedModal.modal('hide');
	};

	/**
	 * Generates the login form displayed if the session has timed out.
	 */
	LoginRefresh.initializeLoginForm = function() {
		if (TYPO3.configuration.showRefreshLoginPopup) {
			// dialog is not required if ""showRefreshLoginPopup"" is enabled
			return;
		}

		LoginRefresh.$loginForm = LoginRefresh.generateModal(LoginRefresh.identifier.loginFormModal);
		LoginRefresh.$loginForm.addClass('t3-modal-notice');
		LoginRefresh.$loginForm.find('.modal-header h4').text(TYPO3.LLL.core.refresh_login_title);
		LoginRefresh.$loginForm.find('.modal-body').append(
			$('<p />').text(TYPO3.LLL.core.login_expired),
			$('<form />', {id: 'beLoginRefresh', method: 'POST', action: TYPO3.settings.ajaxUrls['BackendLogin::login']}).append(
				$('<div />', {class: 'form-group'}).append(
					$('<input />', {type: 'password', name: 'p_field', autofocus: 'autofocus', class: 'form-control', placeholder: TYPO3.LLL.core.refresh_login_password, 'data-rsa-encryption': 't3-loginrefres-userident'})
				),
				$('<input />', {type: 'hidden', name: 'username', value: TYPO3.configuration.username}),
				$('<input />', {type: 'hidden', name: 'userident', id: 't3-loginrefres-userident'})
			)
		);
		LoginRefresh.$loginForm.find('.modal-footer').append(
			$('<button />', {type: 'submit', form: 'beLoginRefresh', class: 'btn btn-primary', 'data-action': 'refreshSession'}).text(TYPO3.LLL.core.refresh_login_button)
		);

		LoginRefresh.registerDefaultModalEvents(LoginRefresh.$loginForm).on('submit', LoginRefresh.submitForm);

		$('body').append(LoginRefresh.$loginForm);
	};

	/**
	 * Shows the login form.
	 */
	LoginRefresh.showLoginForm = function() {
		// log off for sure
		$.ajax({
			url: TYPO3.settings.ajaxUrls['BackendLogin::logout'],
			method: 'GET',
			success: function() {
				if (TYPO3.configuration.showRefreshLoginPopup) {
					LoginRefresh.showLoginPopup();
				} else {
					LoginRefresh.$loginForm.modal(LoginRefresh.options.modalConfig);
				}
			},
			failure: function() {
				alert('something went wrong');
			}
		});
	};

	/**
	 * Set login frameset url
	 */
	LoginRefresh.setLoginFramesetUrl = function(loginFramesetUrl) {
		LoginRefresh.loginFramesetUrl = loginFramesetUrl;
	};

	/**
	 * Opens the login form in a new window.
	 */
	LoginRefresh.showLoginPopup = function() {
		var vHWin = window.open(LoginRefresh.loginFramesetUrl, 'relogin_' + TYPO3.configuration.uniqueID, 'height=450,width=700,status=0,menubar=0,location=1');
		vHWin.focus();
	};

	/**
	 * Hides the login form.
	 */
	LoginRefresh.hideLoginForm = function() {
		LoginRefresh.$loginForm.modal('hide');
	};

	/**
	 * Fills the progressbar attached to the given modal.
	 */
	LoginRefresh.fillProgressbar = function($activeModal) {
		if (!LoginRefresh.isTimingOut) {
			return;
		}

		var max = 100,
			current = 0,
			$progressBar = $activeModal.find('.progress-bar'),
			$srText = $progressBar.children('.sr-only');

		var progress = setInterval(function() {
			var isOverdue = (current >= max);

			if (!LoginRefresh.isTimingOut || isOverdue) {
				clearInterval(progress);

				if (isOverdue) {
					// show login form
					LoginRefresh.hideTimeoutModal();
					LoginRefresh.showLoginForm();
				}

				// reset current
				current = 0;
			} else {
				current += 1;
			}

			var percentText = (current) + '%';
			$progressBar.css('width', percentText);
			$srText.text(percentText);
		}, 300);
	};

	/**
	 * Creates additional data based on the security level and ""submits"" the form
	 * via an AJAX request.
	 */
	LoginRefresh.submitForm = function(event) {
		event.preventDefault();

		var $form = LoginRefresh.$loginForm.find('form'),
			$passwordField = $form.find('input[name=p_field]'),
			$useridentField = $form.find('input[name=userident]'),
			passwordFieldValue = $passwordField.val();

		if (passwordFieldValue === '' && $useridentField.val() === '') {
			top.TYPO3.Notification.error(TYPO3.LLL.core.refresh_login_failed, TYPO3.LLL.core.refresh_login_emptyPassword);
			$passwordField.focus();
			return;
		}

		if (passwordFieldValue) {
			$useridentField.val(passwordFieldValue);
			$passwordField.val('');
		}

		var postData = {
			login_status: 'login'
		};
		$.each($form.serializeArray(), function(i, field) {
			postData[field.name] = field.value;
		});
		$.ajax({
			url: $form.attr('action'),
			method: 'POST',
			data: postData,
			success: function(response) {
				var result = response.login;
				if (result.success) {
					// User is logged in
					LoginRefresh.hideLoginForm();
				} else {
					top.TYPO3.Notification.error(TYPO3.LLL.core.refresh_login_failed, TYPO3.LLL.core.refresh_login_failed_message);
					$passwordField.focus();
				}
			}
		});
	};

	/**
	 * Registers the (shown|hidden).bs.modal events.
	 * If a modal is shown, the interval check is stopped. If the modal hides,
	 * the interval check starts again.
	 * This method is not invoked for the backend locked modal, because we still
	 * need to check if the backend gets unlocked again.
	 */
	LoginRefresh.registerDefaultModalEvents = function($modal) {
		$modal.on('hidden.bs.modal', function() {
			LoginRefresh.startTask();
		}).on('shown.bs.modal', function() {
			LoginRefresh.stopTask();
			// focus the button which was configured as active button
			LoginRefresh.$timeoutModal.find('.modal-footer .t3js-active').first().focus();
		});

		return $modal;
	};

	/**
	 * Checks if the user is in focus of the backend.
	 * Thanks to http://stackoverflow.com/a/19519701
	 */
	LoginRefresh.isPageActive = function() {
		var stateKey, eventKey, keys = {
			hidden: 'visibilitychange',
			webkitHidden: 'webkitvisibilitychange',
			mozHidden: 'mozvisibilitychange',
			msHidden: 'msvisibilitychange'
		};

		for (stateKey in keys) {
			if (stateKey in document) {
				eventKey = keys[stateKey];
				break;
			}
		}
		return function(c) {
			if (c) {
				document.addEventListener(eventKey, c);
			}
			return !document[stateKey];
		}();
	};

	/**
	 * Periodically called task that checks if
	 *
	 * - the user's backend session is about to expire
	 * - the user's backend session has expired
	 * - the backend got locked
	 *
	 * and opens a dialog.
	 */
	LoginRefresh.checkActiveSession = function() {
		$.ajax({
			url: TYPO3.settings.ajaxUrls['BackendLogin::isTimedOut'],
			data: {
				skipSessionUpdate: 1
			},
			success: function(response) {
				if (response.login.locked) {
					if (!LoginRefresh.backendIsLocked) {
						LoginRefresh.backendIsLocked = true;
						LoginRefresh.showBackendLockedModal();
					}
				} else {
					if (LoginRefresh.backendIsLocked) {
						LoginRefresh.backendIsLocked = false;
						LoginRefresh.hideBackendLockedModal();
					}
				}

				if (!LoginRefresh.backendIsLocked) {
					if (response.login.timed_out || response.login.will_time_out) {
						if (response.login.timed_out) {
							LoginRefresh.showLoginForm();
						} else {
							LoginRefresh.showTimeoutModal();
						}
					}
				}
			}
		});
	};

	// initialize and return the LoginRefresh object
	return function() {
		$(document).ready(function() {
			LoginRefresh.initializeTimeoutModal();
			LoginRefresh.initializeBackendLockedModal();
			LoginRefresh.initializeLoginForm();

			LoginRefresh.startTask();

			if (typeof Notification !== 'undefined' && Notification.permission !== 'granted') {
				Notification.requestPermission();
			}
		});

		TYPO3.LoginRefresh = LoginRefresh;
		return LoginRefresh;
	}();
});
",FALSE,,5086
5056,InitialSO.csv5056.txt,InitialGit.csv5056.txt,3,"$sth = $dbh->prepare ($stmt);
$sth->execute ();
if ($sth->columnCount () == 0)
{
    # there is no result set, so the statement modifies rows
     printf (""Number of rows affected: %d\n"", $sth->rowCount ());
}
else
{
    # there is a result set
    printf (""Number of columns in result set: %d\n"", $sth->columnCount ());
    $count = 0;
    while ($row = $sth->fetch (PDO::FETCH_NUM))
    {
    # display column values separated by commas
       print (join ("", "", $row) . ""\n"");
       $count++;
    }
}
 ","$sth = $dbh->prepare ($stmt);
$sth->execute ();
if ($sth->columnCount () == 0)
{
    # there is no result set, so the statement modifies rows
     printf (""Number of rows affected: %d\n"", $sth->rowCount ());
}
else
{
    # there is a result set
    printf (""Number of columns in result set: %d\n"", $sth->columnCount ());
    $count = 0;
    while ($row = $sth->fetch (PDO::FETCH_NUM))
    {
    # display column values separated by commas
       print (join ("", "", $row) . ""\n"");
       $count++;
    }
}
 ",TRUE,"<?php

    /**
     * CS50 Library 5
     * https://manual.cs50.net/library/
     *
     * @author David J. Malan <malan@harvard.edu>
     * @link https://manual.cs50.net/library/
     * @package CS50
     * @version 5
     * 
     * Copyright (c) 2015
     * David J. Malan <malan@harvard.edu>
     * All Rights Reserved
     *
     * BSD 3-Clause License
     * http://www.opensource.org/licenses/BSD-3-Clause
     * 
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * * Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     * * Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     * * Neither the name of CS50 nor the names of its contributors may be used
     *   to endorse or promote products derived from this software without
     *   specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
     * IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
     * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    // require extensions for Janrain's libary
    if (!extension_loaded(""bcmath"") && !extension_loaded(""gmp""))
    {
        trigger_error(""CS50 Library requires bcmath or gmp extension module"", E_USER_ERROR);
    }
    if (!extension_loaded(""dom"") && !extension_loaded(""domxml""))
    {
        trigger_error(""CS50 Library requires dom or domxml extension module"", E_USER_ERROR);
    }
    if (!extension_loaded(""openssl""))
    {
        trigger_error(""CS50 Library requires openssl extension module"", E_USER_ERROR);
    }

    // ensure Janrain's library doesn't fail on Windows
    if (strtoupper(substr(PHP_OS, 0, 3)) === ""WIN"")
    {
        // because /dev/urandom doesn't exist
        define(""Auth_OpenID_RAND_SOURCE"", null);
 
        // because php_curl.dll doesn't come with ca-bundle.crt
        define(""Auth_Yadis_CURL_OVERRIDE"", null);
    }

    // CS50
    class CS50
    {
        /**
         * Library's configuration.
         */
        private static $config;

        /**
         * Initializes library with JSON file at $path.
         */
        public static function init($path)
        {
            // ensure library is not already initialized
            if (isset(self::$config))
            {
                trigger_error(""CS50 Library is already initialized"", E_USER_ERROR);
            }

            // ensure configuration file exists
            if (!is_file($path))
            {
                trigger_error(""Could not find {$path}"", E_USER_ERROR);
            }

            // read contents of configuration file
            $contents = file_get_contents($path);
            if ($contents === false)
            {
                trigger_error(""Could not read {$path}"", E_USER_ERROR);
            }

            // decode contents of configuration file
            $config = json_decode($contents, true);
            if (is_null($config))
            {
                trigger_error(""Could not decode {$path}"", E_USER_ERROR);
            }

            // store configuration
            self::$config = $config;
        }

        /**
         * Returns URL to which user can be directed for 
         * authentication via CS50 ID.
         *
         * @param trust_root  URL that CS50 ID should prompt user to trust
         * @param return_to   URL to which CS50 ID should return user
         * @param fields      Simple Registration fields to request from CS50 ID
         * @param attributes  Attribute Exchange attributes to request from CS50 ID
         *
         * @return URL for CS50 ID
         */
        public static function getLoginUrl($trust_root, $return_to, $fields = [""email"", ""fullname""], $attributes = [])
        {
            // ignore Janrain's use of deprecated functions
            $error_reporting = error_reporting();
            error_reporting($error_reporting & ~E_DEPRECATED);

            // load Janrain's libary
            set_include_path(get_include_path() . PATH_SEPARATOR . dirname(__FILE__) . DIRECTORY_SEPARATOR . ""share"" . DIRECTORY_SEPARATOR . ""php-openid-2.3.0"");
            require_once(""Auth/OpenID/AX.php"");
            require_once(""Auth/OpenID/Consumer.php"");
            require_once(""Auth/OpenID/FileStore.php"");
            require_once(""Auth/OpenID/SReg.php"");

            // ensure $_SESSION exists for Yadis
            @session_start();

            // prepare filesystem-based store
            $path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . md5($return_to);
            @mkdir($path, 0700);
            if (!is_dir($path))
            {
                trigger_error(""Could not create {$path}"", E_USER_ERROR);
            }
            if (!is_readable($path))
            {
                trigger_error(""Could not read from {$path}"", E_USER_ERROR);
            }
            if (!is_writable($path))
            {
                trigger_error(""Could not write to {$path}"", E_USER_ERROR);
            }
            $store = new Auth_OpenID_FileStore($path);

            // prepare request
            $consumer = new Auth_OpenID_Consumer($store);
            $auth_request = $consumer->begin(""https://id.cs50.net/"");

            // request Simple Registration fields
            if (is_array($fields) && count($fields) > 0)
            {
                $sreg_request = Auth_OpenID_SRegRequest::build(null, $fields);
                $auth_request->addExtension($sreg_request);
            }

            // request Attribute Exchange attributes
            if (is_array($attributes) && count($attributes) > 0)
            {
                $ax_request = new Auth_OpenID_AX_FetchRequest();
                foreach ($attributes as $attribute)
                {
                    $ax_request->add(Auth_OpenID_AX_AttrInfo::make($attribute, 1, false));
                }
                $auth_request->addExtension($ax_request);
            }

            // generate URL for redirection
            $redirect_url = $auth_request->redirectURL($trust_root, $return_to);

            // restore error_reporting
            error_reporting($error_reporting);

            // return URL unless error
            if (Auth_OpenID::isFailure($redirect_url))
            {
                trigger_error($redirect_url->message);
                return false;
            }
            else
            {
                return $redirect_url;
            }
        }
 
        /**
         * Iff user was authenticated (at URL returned by getLoginUrl),
         * returns associative array that WILL contain user's Harvard email
         * address (mail) and that MAY contain user's name (displayName).
         *
         * @param return_to  URL to which CS50 ID returned user
         *
         * @return user as associative array
         */
        public static function getUser($return_to)
        {
            // ignore Janrain's use of deprecated functions
            $error_reporting = error_reporting();
            error_reporting($error_reporting & ~E_DEPRECATED);

            // load Janrain's libary
            set_include_path(get_include_path() . PATH_SEPARATOR . dirname(__FILE__) . DIRECTORY_SEPARATOR . ""share"" . DIRECTORY_SEPARATOR . ""php-openid-2.3.0"");
            require_once(""Auth/OpenID/AX.php"");
            require_once(""Auth/OpenID/Consumer.php"");
            require_once(""Auth/OpenID/FileStore.php"");
            require_once(""Auth/OpenID/SReg.php"");

            // ensure $_SESSION exists for Yadis
            @session_start();

            // prepare filesystem-based store
            $path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . md5($return_to);
            @mkdir($path, 0700);
            if (!is_dir($path))
            {
                trigger_error(""Could not create $path"", E_USER_ERROR);
            }
            if (!is_readable($path))
            {
                trigger_error(""Could not read from $path"", E_USER_ERROR);
            }
            if (!is_writable($path))
            {
                trigger_error(""Could not write to $path"", E_USER_ERROR);
            }
            $store = new Auth_OpenID_FileStore($path);

            // get response
            $consumer = new Auth_OpenID_Consumer($store);
            $response = $consumer->complete($return_to);
            if ($response->status == Auth_OpenID_SUCCESS)
            {
                // get user's identity
                $user = [""identity"" => $response->identity_url];

                // get Simple Registration fields, if any
                if ($sreg_resp = Auth_OpenID_SRegResponse::fromSuccessResponse($response))
                {
                    $user = array_merge($user, $sreg_resp->contents());
                }

                // get Attribute Exchange attributes, if any
                if ($ax_resp = Auth_OpenID_AX_FetchResponse::fromSuccessResponse($response))
                {
                    $user = array_merge($user, $ax_resp->data);
                }
            }

            // restore error_reporting
            error_reporting($error_reporting);

            // return user unless error
            return (isset($user)) ? $user : false;
        }

        /**
         * Executes SQL statement, possibly with parameters, returning
         * an array of all rows in result set or false on (non-fatal) error.
         */
        public static function query(/* $sql [, ... ] */)
        {
            // ensure library is initialized
            if (!isset(self::$config))
            {
                trigger_error(""CS50 Library is not initialized"", E_USER_ERROR);
            }

            // ensure database is configured
            if (!isset(self::$config[""database""]))
            {
                trigger_error(""Missing value for database"", E_USER_ERROR);
            }
            foreach ([""host"", ""name"", ""password"", ""username""] as $key)
            {
                if (!isset(self::$config[""database""][$key]))
                {
                    trigger_error(""Missing value for database.{$key}"", E_USER_ERROR);
                }
            }

            // SQL statement
            $sql = func_get_arg(0);

            // parameters, if any
            $parameters = array_slice(func_get_args(), 1);

            // try to connect to database
            static $handle;
            if (!isset($handle))
            {
                try
                {
                    // connect to database
                    $handle = new PDO(
                        ""mysql:dbname="" . self::$config[""database""][""name""] . "";host="" . self::$config[""database""][""host""],
                        self::$config[""database""][""username""],
                        self::$config[""database""][""password""]
                    );
                }
                catch (Exception $e)
                {
                    // trigger (big, orange) error
                    trigger_error($e->getMessage(), E_USER_ERROR);
                }
            }

            // ensure number of placeholders matches number of values
            // http://stackoverflow.com/a/22273749
            // https://eval.in/116177
            $pattern = ""
                /(?:
                '[^'\\\\]*(?:(?:\\\\.|'')[^'\\\\]*)*'
                | \""[^\""\\\\]*(?:(?:\\\\.|\""\"")[^\""\\\\]*)*\""
                | `[^`\\\\]*(?:(?:\\\\.|``)[^`\\\\]*)*`
                )(*SKIP)(*F)| \?
                /x
            "";
            preg_match_all($pattern, $sql, $matches);
            if (count($matches[0]) < count($parameters))
            {
                trigger_error(""Too few placeholders in query"", E_USER_ERROR);
            }
            else if (count($matches[0]) > count($parameters))
            {
                trigger_error(""Too many placeholders in query"", E_USER_ERROR);
            }

            // replace placeholders with quoted, escaped strings
            $patterns = [];
            $replacements = [];
            for ($i = 0, $n = count($parameters); $i < $n; $i++)
            {
                array_push($patterns, $pattern);
                array_push($replacements, preg_quote($handle->quote($parameters[$i])));
            }
            $query = preg_replace($patterns, $replacements, $sql, 1);

            // execute query
            $statement = $handle->query($query);
            if ($statement === false)
            {
                trigger_error($handle->errorInfo()[2], E_USER_ERROR);
            }
   
            // if query was SELECT
            // http://stackoverflow.com/a/19794473/5156190
            if ($statement->columnCount() > 0)
            {
                // return result set's rows
                return $statement->fetchAll(PDO::FETCH_ASSOC);
            }

            // if query was DELETE, INSERT, or UPDATE
            else
            {
                // return number of rows affected
                return $statement->rowCount();
            }
        }
    }

?>
","<?php

    /**
     * CS50 Library 5
     * https://manual.cs50.net/library/
     *
     * @author David J. Malan <malan@harvard.edu>
     * @link https://manual.cs50.net/library/
     * @package CS50
     * @version 5
     * 
     * Copyright (c) 2015
     * David J. Malan <malan@harvard.edu>
     * All Rights Reserved
     *
     * BSD 3-Clause License
     * http://www.opensource.org/licenses/BSD-3-Clause
     * 
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * * Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     * * Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     * * Neither the name of CS50 nor the names of its contributors may be used
     *   to endorse or promote products derived from this software without
     *   specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS
     * IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
     * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    // require extensions for Janrain's libary
    if (!extension_loaded(""bcmath"") && !extension_loaded(""gmp""))
    {
        trigger_error(""CS50 Library requires bcmath or gmp extension module"", E_USER_ERROR);
    }
    if (!extension_loaded(""dom"") && !extension_loaded(""domxml""))
    {
        trigger_error(""CS50 Library requires dom or domxml extension module"", E_USER_ERROR);
    }
    if (!extension_loaded(""openssl""))
    {
        trigger_error(""CS50 Library requires openssl extension module"", E_USER_ERROR);
    }

    // ensure Janrain's library doesn't fail on Windows
    if (strtoupper(substr(PHP_OS, 0, 3)) === ""WIN"")
    {
        // because /dev/urandom doesn't exist
        define(""Auth_OpenID_RAND_SOURCE"", null);
 
        // because php_curl.dll doesn't come with ca-bundle.crt
        define(""Auth_Yadis_CURL_OVERRIDE"", null);
    }

    // CS50
    class CS50
    {
        /**
         * Library's configuration.
         */
        private static $config;

        /**
         * Initializes library with JSON file at $path.
         */
        public static function init($path)
        {
            // ensure library is not already initialized
            if (isset(self::$config))
            {
                trigger_error(""CS50 Library is already initialized"", E_USER_ERROR);
            }

            // ensure configuration file exists
            if (!is_file($path))
            {
                trigger_error(""Could not find {$path}"", E_USER_ERROR);
            }

            // read contents of configuration file
            $contents = file_get_contents($path);
            if ($contents === false)
            {
                trigger_error(""Could not read {$path}"", E_USER_ERROR);
            }

            // decode contents of configuration file
            $config = json_decode($contents, true);
            if (is_null($config))
            {
                trigger_error(""Could not decode {$path}"", E_USER_ERROR);
            }

            // store configuration
            self::$config = $config;
        }

        /**
         * Returns URL to which user can be directed for 
         * authentication via CS50 ID.
         *
         * @param trust_root  URL that CS50 ID should prompt user to trust
         * @param return_to   URL to which CS50 ID should return user
         * @param fields      Simple Registration fields to request from CS50 ID
         * @param attributes  Attribute Exchange attributes to request from CS50 ID
         *
         * @return URL for CS50 ID
         */
        public static function getLoginUrl($trust_root, $return_to, $fields = [""email"", ""fullname""], $attributes = [])
        {
            // ignore Janrain's use of deprecated functions
            $error_reporting = error_reporting();
            error_reporting($error_reporting & ~E_DEPRECATED);

            // load Janrain's libary
            set_include_path(get_include_path() . PATH_SEPARATOR . dirname(__FILE__) . DIRECTORY_SEPARATOR . ""share"" . DIRECTORY_SEPARATOR . ""php-openid-2.3.0"");
            require_once(""Auth/OpenID/AX.php"");
            require_once(""Auth/OpenID/Consumer.php"");
            require_once(""Auth/OpenID/FileStore.php"");
            require_once(""Auth/OpenID/SReg.php"");

            // ensure $_SESSION exists for Yadis
            @session_start();

            // prepare filesystem-based store
            $path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . md5($return_to);
            @mkdir($path, 0700);
            if (!is_dir($path))
            {
                trigger_error(""Could not create {$path}"", E_USER_ERROR);
            }
            if (!is_readable($path))
            {
                trigger_error(""Could not read from {$path}"", E_USER_ERROR);
            }
            if (!is_writable($path))
            {
                trigger_error(""Could not write to {$path}"", E_USER_ERROR);
            }
            $store = new Auth_OpenID_FileStore($path);

            // prepare request
            $consumer = new Auth_OpenID_Consumer($store);
            $auth_request = $consumer->begin(""https://id.cs50.net/"");

            // request Simple Registration fields
            if (is_array($fields) && count($fields) > 0)
            {
                $sreg_request = Auth_OpenID_SRegRequest::build(null, $fields);
                $auth_request->addExtension($sreg_request);
            }

            // request Attribute Exchange attributes
            if (is_array($attributes) && count($attributes) > 0)
            {
                $ax_request = new Auth_OpenID_AX_FetchRequest();
                foreach ($attributes as $attribute)
                {
                    $ax_request->add(Auth_OpenID_AX_AttrInfo::make($attribute, 1, false));
                }
                $auth_request->addExtension($ax_request);
            }

            // generate URL for redirection
            $redirect_url = $auth_request->redirectURL($trust_root, $return_to);

            // restore error_reporting
            error_reporting($error_reporting);

            // return URL unless error
            if (Auth_OpenID::isFailure($redirect_url))
            {
                trigger_error($redirect_url->message);
                return false;
            }
            else
            {
                return $redirect_url;
            }
        }
 
        /**
         * Iff user was authenticated (at URL returned by getLoginUrl),
         * returns associative array that WILL contain user's Harvard email
         * address (mail) and that MAY contain user's name (displayName).
         *
         * @param return_to  URL to which CS50 ID returned user
         *
         * @return user as associative array
         */
        public static function getUser($return_to)
        {
            // ignore Janrain's use of deprecated functions
            $error_reporting = error_reporting();
            error_reporting($error_reporting & ~E_DEPRECATED);

            // load Janrain's libary
            set_include_path(get_include_path() . PATH_SEPARATOR . dirname(__FILE__) . DIRECTORY_SEPARATOR . ""share"" . DIRECTORY_SEPARATOR . ""php-openid-2.3.0"");
            require_once(""Auth/OpenID/AX.php"");
            require_once(""Auth/OpenID/Consumer.php"");
            require_once(""Auth/OpenID/FileStore.php"");
            require_once(""Auth/OpenID/SReg.php"");

            // ensure $_SESSION exists for Yadis
            @session_start();

            // prepare filesystem-based store
            $path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . md5($return_to);
            @mkdir($path, 0700);
            if (!is_dir($path))
            {
                trigger_error(""Could not create $path"", E_USER_ERROR);
            }
            if (!is_readable($path))
            {
                trigger_error(""Could not read from $path"", E_USER_ERROR);
            }
            if (!is_writable($path))
            {
                trigger_error(""Could not write to $path"", E_USER_ERROR);
            }
            $store = new Auth_OpenID_FileStore($path);

            // get response
            $consumer = new Auth_OpenID_Consumer($store);
            $response = $consumer->complete($return_to);
            if ($response->status == Auth_OpenID_SUCCESS)
            {
                // get user's identity
                $user = [""identity"" => $response->identity_url];

                // get Simple Registration fields, if any
                if ($sreg_resp = Auth_OpenID_SRegResponse::fromSuccessResponse($response))
                {
                    $user = array_merge($user, $sreg_resp->contents());
                }

                // get Attribute Exchange attributes, if any
                if ($ax_resp = Auth_OpenID_AX_FetchResponse::fromSuccessResponse($response))
                {
                    $user = array_merge($user, $ax_resp->data);
                }
            }

            // restore error_reporting
            error_reporting($error_reporting);

            // return user unless error
            return (isset($user)) ? $user : false;
        }

        /**
         * Executes SQL statement, possibly with parameters, returning
         * an array of all rows in result set or false on (non-fatal) error.
         */
        public static function query(/* $sql [, ... ] */)
        {
            // ensure library is initialized
            if (!isset(self::$config))
            {
                trigger_error(""CS50 Library is not initialized"", E_USER_ERROR);
            }

            // ensure database is configured
            if (!isset(self::$config[""database""]))
            {
                trigger_error(""Missing value for database"", E_USER_ERROR);
            }
            foreach ([""host"", ""name"", ""password"", ""username""] as $key)
            {
                if (!isset(self::$config[""database""][$key]))
                {
                    trigger_error(""Missing value for database.{$key}"", E_USER_ERROR);
                }
            }

            // SQL statement
            $sql = func_get_arg(0);

            // parameters, if any
            $parameters = array_slice(func_get_args(), 1);

            // try to connect to database
            static $handle;
            if (!isset($handle))
            {
                try
                {
                    // connect to database
                    $handle = new PDO(
                        ""mysql:dbname="" . self::$config[""database""][""name""] . "";host="" . self::$config[""database""][""host""],
                        self::$config[""database""][""username""],
                        self::$config[""database""][""password""]
                    );
                }
                catch (Exception $e)
                {
                    // trigger (big, orange) error
                    trigger_error($e->getMessage(), E_USER_ERROR);
                }
            }

            // ensure number of placeholders matches number of values
            // http://stackoverflow.com/a/22273749
            // https://eval.in/116177
            $pattern = ""
                /(?:
                '[^'\\\\]*(?:(?:\\\\.|'')[^'\\\\]*)*'
                | \""[^\""\\\\]*(?:(?:\\\\.|\""\"")[^\""\\\\]*)*\""
                | `[^`\\\\]*(?:(?:\\\\.|``)[^`\\\\]*)*`
                )(*SKIP)(*F)| \?
                /x
            "";
            preg_match_all($pattern, $sql, $matches);
            if (count($matches[0]) < count($parameters))
            {
                trigger_error(""Too few placeholders in query"", E_USER_ERROR);
            }
            else if (count($matches[0]) > count($parameters))
            {
                trigger_error(""Too many placeholders in query"", E_USER_ERROR);
            }

            // replace placeholders with quoted, escaped strings
            $patterns = [];
            $replacements = [];
            for ($i = 0, $n = count($parameters); $i < $n; $i++)
            {
                array_push($patterns, $pattern);
                array_push($replacements, preg_quote($handle->quote($parameters[$i])));
            }
            $query = preg_replace($patterns, $replacements, $sql, 1);

            // execute query
            $statement = $handle->query($query);
            if ($statement === false)
            {
                trigger_error($handle->errorInfo()[2], E_USER_ERROR);
            }
   
            // if query was SELECT
            // http://stackoverflow.com/a/19794473/5156190
            if ($statement->columnCount() > 0)
            {
                // return result set's rows
                return $statement->fetchAll(PDO::FETCH_ASSOC);
            }

            // if query was DELETE, INSERT, or UPDATE
            else
            {
                // return number of rows affected
                return $statement->rowCount();
            }
        }
    }

?>
",TRUE,,5088
5058,InitialSO.csv5058.txt,InitialGit.csv5058.txt,7,"from setuptools import setup
from setuptools.command.build_ext import build_ext as _build_ext

class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        # Prevent numpy from thinking it is still in its setup process:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        self.include_dirs.append(numpy.get_include())

setup(
    ...
    cmdclass={'build_ext':build_ext},
    setup_requires=['numpy'],
    ...
)
 setup_requires python setup.py --help ","from setuptools import setup
from setuptools.command.build_ext import build_ext as _build_ext

class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        # Prevent numpy from thinking it is still in its setup process:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        self.include_dirs.append(numpy.get_include())

setup(
    ...
    cmdclass={'build_ext':build_ext},
    setup_requires=['numpy'],
    ...
)
 setup_requires python setup.py --help ",TRUE,"#!/usr/bin/env python

# ----------------------------------------------------------------------------
# Copyright (c) 2013--, scikit-bio development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
# ----------------------------------------------------------------------------

import os
import platform
from setuptools import find_packages, setup
from setuptools.extension import Extension
from setuptools.command.build_ext import build_ext as _build_ext


# Bootstrap setup.py with numpy
# Huge thanks to coldfix's solution
# http://stackoverflow.com/a/21621689/579416
class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        # Prevent numpy from thinking it is still in its setup process:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        self.include_dirs.append(numpy.get_include())

__version__ = ""0.2.3-dev""

classes = """"""
    Development Status :: 1 - Planning
    License :: OSI Approved :: BSD License
    Topic :: Software Development :: Libraries
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Bio-Informatics
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.3
    Programming Language :: Python :: 3.4
    Operating System :: Unix
    Operating System :: POSIX
    Operating System :: MacOS :: MacOS X
""""""
classifiers = [s.strip() for s in classes.split('\n') if s]

description = ('Data structures, algorithms and educational '
               'resources for bioinformatics.')

with open('README.rst') as f:
    long_description = f.read()

# Dealing with Cython
USE_CYTHON = os.environ.get('USE_CYTHON', False)
ext = '.pyx' if USE_CYTHON else '.c'

# There's a bug in some versions of Python 3.4 that propagates
# -Werror=declaration-after-statement to extensions, instead of just affecting
# the compilation of the interpreter. See http://bugs.python.org/issue21121 for
# details. This acts as a workaround until the next Python 3 release -- thanks
# Wolfgang Maier (wolma) for the workaround!
ssw_extra_compile_args = ['-Wno-error=declaration-after-statement']

# Users with i686 architectures have reported that adding this flag allows
# SSW to be compiled. See https://github.com/biocore/scikit-bio/issues/409 and
# http://stackoverflow.com/q/26211814/3776794 for details.
if platform.machine() == 'i686':
    ssw_extra_compile_args.append('-msse2')

extensions = [
    Extension(""skbio.stats.__subsample"",
              [""skbio/stats/__subsample"" + ext]),
    Extension(""skbio.alignment._ssw_wrapper"",
              [""skbio/alignment/_ssw_wrapper"" + ext,
               ""skbio/alignment/_lib/ssw.c""],
              extra_compile_args=ssw_extra_compile_args)
]

if USE_CYTHON:
    from Cython.Build import cythonize
    extensions = cythonize(extensions)

setup(name='scikit-bio',
      version=__version__,
      license='BSD',
      description=description,
      long_description=long_description,
      author=""scikit-bio development team"",
      author_email=""gregcaporaso@gmail.com"",
      maintainer=""scikit-bio development team"",
      maintainer_email=""gregcaporaso@gmail.com"",
      url='http://scikit-bio.org',
      test_suite='nose.collector',
      packages=find_packages(),
      ext_modules=extensions,
      cmdclass={'build_ext': build_ext},
      setup_requires=['numpy >= 1.7'],
      install_requires=['numpy >= 1.7', 'matplotlib >= 1.1.0',
                        'scipy >= 0.13.0', 'pandas', 'future', 'six',
                        'natsort', 'IPython'],
      extras_require={'test': [""nose >= 0.10.1"", ""pep8"", ""flake8"",
                               ""python-dateutil""],
                      'doc': [""Sphinx == 1.2.2"", ""sphinx-bootstrap-theme""]},
      classifiers=classifiers,
      package_data={
          'skbio.io.tests': ['data/*'],
          'skbio.stats.tests': ['data/*'],
          'skbio.stats.distance.tests': ['data/*'],
          'skbio.stats.ordination.tests': ['data/*']
          }
      )
","#!/usr/bin/env python

# ----------------------------------------------------------------------------
# Copyright (c) 2013--, scikit-bio development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
# ----------------------------------------------------------------------------

import os
import platform
import re
import ast
from setuptools import find_packages, setup
from setuptools.extension import Extension
from setuptools.command.build_ext import build_ext as _build_ext


# Bootstrap setup.py with numpy
# Huge thanks to coldfix's solution
# http://stackoverflow.com/a/21621689/579416
class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        # Prevent numpy from thinking it is still in its setup process:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        self.include_dirs.append(numpy.get_include())

# version parsing from __init__ pulled from Flask's setup.py
# https://github.com/mitsuhiko/flask/blob/master/setup.py
_version_re = re.compile(r'__version__\s+=\s+(.*)')

with open('skbio/__init__.py', 'rb') as f:
    hit = _version_re.search(f.read().decode('utf-8')).group(1)
    version = str(ast.literal_eval(hit))

classes = """"""
    Development Status :: 4 - Beta
    License :: OSI Approved :: BSD License
    Topic :: Software Development :: Libraries
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Bio-Informatics
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.3
    Programming Language :: Python :: 3.4
    Operating System :: Unix
    Operating System :: POSIX
    Operating System :: MacOS :: MacOS X
""""""
classifiers = [s.strip() for s in classes.split('\n') if s]

description = ('Data structures, algorithms and educational '
               'resources for bioinformatics.')

with open('README.rst') as f:
    long_description = f.read()

# Dealing with Cython
USE_CYTHON = os.environ.get('USE_CYTHON', False)
ext = '.pyx' if USE_CYTHON else '.c'

# There's a bug in some versions of Python 3.4 that propagates
# -Werror=declaration-after-statement to extensions, instead of just affecting
# the compilation of the interpreter. See http://bugs.python.org/issue21121 for
# details. This acts as a workaround until the next Python 3 release -- thanks
# Wolfgang Maier (wolma) for the workaround!
ssw_extra_compile_args = ['-Wno-error=declaration-after-statement']

# Users with i686 architectures have reported that adding this flag allows
# SSW to be compiled. See https://github.com/biocore/scikit-bio/issues/409 and
# http://stackoverflow.com/q/26211814/3776794 for details.
if platform.machine() == 'i686':
    ssw_extra_compile_args.append('-msse2')

extensions = [
    Extension(""skbio.stats.__subsample"",
              [""skbio/stats/__subsample"" + ext]),
    Extension(""skbio.alignment._ssw_wrapper"",
              [""skbio/alignment/_ssw_wrapper"" + ext,
               ""skbio/alignment/_lib/ssw.c""],
              extra_compile_args=ssw_extra_compile_args)
]

if USE_CYTHON:
    from Cython.Build import cythonize
    extensions = cythonize(extensions)

setup(name='scikit-bio',
      version=version,
      license='BSD',
      description=description,
      long_description=long_description,
      author=""scikit-bio development team"",
      author_email=""gregcaporaso@gmail.com"",
      maintainer=""scikit-bio development team"",
      maintainer_email=""gregcaporaso@gmail.com"",
      url='http://scikit-bio.org',
      test_suite='nose.collector',
      packages=find_packages(),
      ext_modules=extensions,
      cmdclass={'build_ext': build_ext},
      setup_requires=['numpy >= 1.9.2'],
      install_requires=[
          'bz2file >= 0.98',
          'CacheControl[FileCache] >= 0.11.5',
          'contextlib2 >= 0.4.0',
          'decorator >= 3.4.2',
          'future >= 0.14.3',
          'IPython >= 3.2.0',
          'matplotlib >= 1.4.3',
          'natsort >= 4.0.3',
          'numpy >= 1.9.2',
          'pandas >= 0.16.2',
          'scipy >= 0.15.1',
          'six >= 1.9.0'
      ],
      extras_require={'test': [""HTTPretty"", ""nose"", ""pep8"", ""flake8"",
                               ""python-dateutil""],
                      'doc': [""Sphinx == 1.2.2"", ""sphinx-bootstrap-theme""]},
      classifiers=classifiers,
      package_data={
          'skbio.io.tests': ['data/*'],
          'skbio.io.format.tests': ['data/*'],
          'skbio.stats.tests': ['data/*'],
          'skbio.stats.distance.tests': ['data/*'],
          'skbio.stats.ordination.tests': ['data/*']
          }
      )
",FALSE,,5093
5064,InitialSO.csv5064.txt,InitialGit.csv5064.txt,20,"class MultiSerializerViewSetMixin(object):
    def get_serializer_class(self):
        """"""
        Look for serializer class in self.serializer_action_classes, which
        should be a dict mapping action name (key) to serializer class (value),
        i.e.:

        class MyViewSet(MultiSerializerViewSetMixin, ViewSet):
            serializer_class = MyDefaultSerializer
            serializer_action_classes = {
               'list': MyListSerializer,
               'my_action': MyActionSerializer,
            }

            @action
            def my_action:
                ...

        If there's no entry for that action then just fallback to the regular
        get_serializer_class lookup: self.serializer_class, DefaultSerializer.

        Thanks gonz: http://stackoverflow.com/a/22922156/11440

        """"""
        try:
            return self.serializer_action_classes[self.action]
        except (KeyError, AttributeError):
            return super(MultiSerializerViewSetMixin, self).get_serializer_class()
 ","class MultiSerializerViewSetMixin(object):
    def get_serializer_class(self):
        """"""
        Look for serializer class in self.serializer_action_classes, which
        should be a dict mapping action name (key) to serializer class (value),
        i.e.:

        class MyViewSet(MultiSerializerViewSetMixin, ViewSet):
            serializer_class = MyDefaultSerializer
            serializer_action_classes = {
               'list': MyListSerializer,
               'my_action': MyActionSerializer,
            }

            @action
            def my_action:
                ...

        If there's no entry for that action then just fallback to the regular
        get_serializer_class lookup: self.serializer_class, DefaultSerializer.

        """"""
        try:
            return self.serializer_action_classes[self.action]
        except (KeyError, AttributeError):
            return super(MultiSerializerViewSetMixin, self).get_serializer_class()
 ",FALSE,"class MultiSerializerViewSetMixin(object):
    def get_serializer_class(self):
        """"""
        Look for serializer class in self.serializer_action_classes, which
        should be a dict mapping action name (key) to serializer class (value),
        i.e.:

        class MyViewSet(MultiSerializerViewSetMixin, ViewSet):
            serializer_class = MyDefaultSerializer
            serializer_action_classes = {
               'list': MyListSerializer,
               'my_action': MyActionSerializer,
            }

            @action
            def my_action:
                ...

        If there's no entry for that action then just fallback to the regular
        get_serializer_class lookup: self.serializer_class, DefaultSerializer.

        Thanks gonz: http://stackoverflow.com/a/22922156/11440

        """"""
        try:
            return self.serializer_action_classes[self.action]
        except (KeyError, AttributeError):
            return super(MultiSerializerViewSetMixin, self).get_serializer_class()
","class MultiSerializerViewSetMixin:
    def get_serializer_class(self):
        """"""
        Look for serializer class in self.serializer_action_classes, which
        should be a dict mapping action name (key) to serializer class (value),
        i.e.:

        class MyViewSet(MultiSerializerViewSetMixin, ViewSet):
            serializer_class = MyDefaultSerializer
            serializer_action_classes = {
               'list': MyListSerializer,
               'my_action': MyActionSerializer,
            }

            @action
            def my_action:
                ...

        If there's no entry for that action then just fallback to the regular
        get_serializer_class lookup: self.serializer_class, DefaultSerializer.

        Thanks gonz: http://stackoverflow.com/a/22922156/11440

        """"""
        try:
            return self.serializer_action_classes[self.action]
        except (KeyError, AttributeError):
            return super(MultiSerializerViewSetMixin, self).get_serializer_class()
",FALSE,,5098
5065,InitialSO.csv5065.txt,InitialGit.csv5065.txt,3,"function byteLength(str) {
  // returns the byte length of an utf8 string
  var s = str.length;
  for (var i=str.length-1; i>=0; i--) {
    var code = str.charCodeAt(i);
    if (code > 0x7f && code <= 0x7ff) s++;
    else if (code > 0x7ff && code <= 0xffff) s+=2;
    if (code >= 0xDC00 && code <= 0xDFFF) i--; //trail surrogate
  }
  return s;
}
 ","function byteLength(str) {
  // returns the byte length of an utf8 string
  var s = str.length;
  for (var i=str.length-1; i>=0; i--) {
    var code = str.charCodeAt(i);
    if (code > 0x7f && code <= 0x7ff) s++;
    else if (code > 0x7ff && code <= 0xffff) s+=2;
    if (code >= 0xDC00 && code <= 0xDFFF) i--; //trail surrogate
  }
  return s;
}
 ",TRUE,"/**
 * stringLength validator
 *
 * @link        http://formvalidation.io/validators/stringLength/
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            stringLength: {
                'default': 'Please enter a value with valid length',
                less: 'Please enter less than %s characters',
                more: 'Please enter more than %s characters',
                between: 'Please enter value between %s and %s characters long'
            }
        }
    });

    FormValidation.Validator.stringLength = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max',
            trim: 'trim',
            utf8bytes: 'utf8Bytes'
        },

        enableByHtml5: function($field) {
            var options   = {},
                maxLength = $field.attr('maxlength'),
                minLength = $field.attr('minlength');
            if (maxLength) {
                options.max = parseInt(maxLength, 10);
            }
            if (minLength) {
                options.min = parseInt(minLength, 10);
            }

            return $.isEmptyObject(options) ? false : options;
        },

        /**
         * Check if the length of element value is less or more than given number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of following keys:
         * - min
         * - max
         * At least one of two keys is required
         * The min, max keys define the number which the field value compares to. min, max can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - message: The invalid message
         * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default
         * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'stringLength');
            if (options.trim === true || options.trim === 'true') {
                value = $.trim(value);
            }

            if (value === '') {
                return true;
            }

            var locale     = validator.getLocale(),
                min        = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),
                max        = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),
                // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code
                utf8Length = function(str) {
                                 var s = str.length;
                                 for (var i = str.length - 1; i >= 0; i--) {
                                     var code = str.charCodeAt(i);
                                     if (code > 0x7f && code <= 0x7ff) {
                                         s++;
                                     } else if (code > 0x7ff && code <= 0xffff) {
                                         s += 2;
                                     }
                                     if (code >= 0xDC00 && code <= 0xDFFF) {
                                         i--;
                                     }
                                 }
                                 return s;
                             },
                length     = options.utf8Bytes ? utf8Length(value) : value.length,
                isValid    = true,
                message    = options.message || FormValidation.I18n[locale].stringLength['default'];

            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {
                isValid = false;
            }

            switch (true) {
                case (!!min && !!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);
                    break;

                case (!!min):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.more, parseInt(min, 10));
                    break;

                case (!!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.less, parseInt(max, 10));
                    break;

                default:
                    break;
            }

            return {
                valid: isValid,
                message: message
            };
        }
    };
}(jQuery));
","/**
 * stringLength validator
 *
 * @link        http://formvalidation.io/validators/stringLength/
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2015 Nguyen Huu Phuoc
 * @license     http://formvalidation.io/license/
 */
(function($) {
    FormValidation.I18n = $.extend(true, FormValidation.I18n || {}, {
        'en_US': {
            stringLength: {
                'default': 'Please enter a value with valid length',
                less: 'Please enter less than %s characters',
                more: 'Please enter more than %s characters',
                between: 'Please enter value between %s and %s characters long'
            }
        }
    });

    FormValidation.Validator.stringLength = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max',
            trim: 'trim',
            utf8bytes: 'utf8Bytes'
        },

        enableByHtml5: function($field) {
            var options   = {},
                maxLength = $field.attr('maxlength'),
                minLength = $field.attr('minlength');
            if (maxLength) {
                options.max = parseInt(maxLength, 10);
            }
            if (minLength) {
                options.min = parseInt(minLength, 10);
            }

            return $.isEmptyObject(options) ? false : options;
        },

        /**
         * Check if the length of element value is less or more than given number
         *
         * @param {FormValidation.Base} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of following keys:
         * - min
         * - max
         * At least one of two keys is required
         * The min, max keys define the number which the field value compares to. min, max can be
         *      - A number
         *      - Name of field which its value defines the number
         *      - Name of callback function that returns the number
         *      - A callback function that returns the number
         *
         * - message: The invalid message
         * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default
         * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false
         * @returns {Object}
         */
        validate: function(validator, $field, options) {
            var value = validator.getFieldValue($field, 'stringLength');
            if (options.trim === true || options.trim === 'true') {
                value = $.trim(value);
            }

            if (value === '') {
                return true;
            }

            var locale     = validator.getLocale(),
                min        = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),
                max        = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),
                // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code
                utf8Length = function(str) {
                                 var s = str.length;
                                 for (var i = str.length - 1; i >= 0; i--) {
                                     var code = str.charCodeAt(i);
                                     if (code > 0x7f && code <= 0x7ff) {
                                         s++;
                                     } else if (code > 0x7ff && code <= 0xffff) {
                                         s += 2;
                                     }
                                     if (code >= 0xDC00 && code <= 0xDFFF) {
                                         i--;
                                     }
                                 }
                                 return s;
                             },
                length     = options.utf8Bytes ? utf8Length(value) : value.length,
                isValid    = true,
                message    = options.message || FormValidation.I18n[locale].stringLength['default'];

            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {
                isValid = false;
            }

            switch (true) {
                case (!!min && !!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);
                    break;

                case (!!min):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.more, parseInt(min, 10));
                    break;

                case (!!max):
                    message = FormValidation.Helper.format(options.message || FormValidation.I18n[locale].stringLength.less, parseInt(max, 10));
                    break;

                default:
                    break;
            }

            return {
                valid: isValid,
                message: message
            };
        }
    };
}(jQuery));
",TRUE,,5099
5066,InitialSO.csv5066.txt,InitialGit.csv5066.txt,3,"    Display display = context.getWindowManager().getDefaultDisplay();
    int realWidth;
    int realHeight;
    
    if (Build.VERSION.SDK_INT >= 17){
        //new pleasant way to get real metrics
        DisplayMetrics realMetrics = new DisplayMetrics();
        display.getRealMetrics(realMetrics);
        realWidth = realMetrics.widthPixels;
        realHeight = realMetrics.heightPixels;

    } else if (Build.VERSION.SDK_INT >= 14) {
        //reflection for this weird in-between time
        try {
            Method mGetRawH = Display.class.getMethod(""getRawHeight"");
            Method mGetRawW = Display.class.getMethod(""getRawWidth"");
            realWidth = (Integer) mGetRawW.invoke(display);
            realHeight = (Integer) mGetRawH.invoke(display);
        } catch (Exception e) {
            //this may not be 100% accurate, but it's all we've got
            realWidth = display.getWidth();
            realHeight = display.getHeight();
            Log.e(""Display Info"", ""Couldn't use reflection to get the real display metrics."");
        }

    } else {
        //This should be close, as lower API devices should not have window navigation bars
        realWidth = display.getWidth();
        realHeight = display.getHeight();
    }
 ","    Display display = context.getWindowManager().getDefaultDisplay();
    int realWidth;
    int realHeight;

    if (Build.VERSION.SDK_INT >= 17){
        //new pleasant way to get real metrics
        DisplayMetrics realMetrics = new DisplayMetrics();
        display.getRealMetrics(realMetrics);
        realWidth = realMetrics.widthPixels;
        realHeight = realMetrics.heightPixels;

    } else if (Build.VERSION.SDK_INT >= 14) {
        //reflection for this weird in-between time
        try {
            Method mGetRawH = Display.class.getMethod(""getRawHeight"");
            Method mGetRawW = Display.class.getMethod(""getRawWidth"");
            realWidth = (Integer) mGetRawW.invoke(display);
            realHeight = (Integer) mGetRawH.invoke(display);
        } catch (Exception e) {
            //this may not be 100% accurate, but it's all we've got
            realWidth = display.getWidth();
            realHeight = display.getHeight();
            Log.e(""Display Info"", ""Couldn't use reflection to get the real display metrics."");
        }

    } else {
        //This should be close, as lower API devices should not have window navigation bars
        realWidth = display.getWidth();
        realHeight = display.getHeight();
    }
 ",FALSE,"/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

package com.facebook.react.uimanager;

import android.content.Context;
import android.os.Build;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.annotation.Nullable;

import com.facebook.infer.annotation.Assertions;

/**
 * Holds an instance of the current DisplayMetrics so we don't have to thread it through all the
 * classes that need it.
 * Note: windowDisplayMetrics are deprecated in favor of ScreenDisplayMetrics: window metrics
 * are supposed to return the drawable area but there's no guarantee that they correspond to the
 * actual size of the {@link ReactRootView}. Moreover, they are not consistent with what iOS
 * returns. Screen metrics returns the metrics of the entire screen, is consistent with iOS and
 * should be used instead.
 */
public class DisplayMetricsHolder {

  private static @Nullable DisplayMetrics sWindowDisplayMetrics;
  private static @Nullable DisplayMetrics sScreenDisplayMetrics;

  /**
   * @deprecated Use {@link #setScreenDisplayMetrics(DisplayMetrics)} instead. See comment above as
   *    to why this is not correct to use.
   */
  public static void setWindowDisplayMetrics(DisplayMetrics displayMetrics) {
    sWindowDisplayMetrics = displayMetrics;
  }
  
  public static void initDisplayMetricsIfNotInitialized(Context context) {
    if (DisplayMetricsHolder.getScreenDisplayMetrics() != null) {
      return;
    }
    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
    DisplayMetricsHolder.setWindowDisplayMetrics(displayMetrics);

    DisplayMetrics screenDisplayMetrics = new DisplayMetrics();
    screenDisplayMetrics.setTo(displayMetrics);
    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
    Assertions.assertNotNull(
        wm,
        ""WindowManager is null!"");
    Display display = wm.getDefaultDisplay();

    // Get the real display metrics if we are using API level 17 or higher.
    // The real metrics include system decor elements (e.g. soft menu bar).
    //
    // See: http://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics)
    if (Build.VERSION.SDK_INT >= 17) {
      display.getRealMetrics(screenDisplayMetrics);
    } else {
      // For 14 <= API level <= 16, we need to invoke getRawHeight and getRawWidth to get the real dimensions.
      // Since react-native only supports API level 16+ we don't have to worry about other cases.
      //
      // Reflection exceptions are rethrown at runtime.
      //
      // See: http://stackoverflow.com/questions/14341041/how-to-get-real-screen-height-and-width/23861333#23861333
      try {
        Method mGetRawH = Display.class.getMethod(""getRawHeight"");
        Method mGetRawW = Display.class.getMethod(""getRawWidth"");
        screenDisplayMetrics.widthPixels = (Integer) mGetRawW.invoke(display);
        screenDisplayMetrics.heightPixels = (Integer) mGetRawH.invoke(display);
      } catch (InvocationTargetException | IllegalAccessException | NoSuchMethodException e) {
        throw new RuntimeException(""Error getting real dimensions for API level < 17"", e);
      }
    }
    DisplayMetricsHolder.setScreenDisplayMetrics(screenDisplayMetrics);
  }

  /**
   * @deprecated Use {@link #getScreenDisplayMetrics()} instead. See comment above as to why this
   *    is not correct to use.
   */
  @Deprecated
  public static DisplayMetrics getWindowDisplayMetrics() {
    return sWindowDisplayMetrics;
  }

  public static void setScreenDisplayMetrics(DisplayMetrics screenDisplayMetrics) {
    sScreenDisplayMetrics = screenDisplayMetrics;
  }

  public static DisplayMetrics getScreenDisplayMetrics() {
    return sScreenDisplayMetrics;
  }
}
","/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

package com.facebook.react.uimanager;

import javax.annotation.Nullable;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import android.content.Context;
import android.os.Build;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.WindowManager;

import com.facebook.infer.annotation.Assertions;

/**
 * Holds an instance of the current DisplayMetrics so we don't have to thread it through all the
 * classes that need it.
 * Note: windowDisplayMetrics are deprecated in favor of ScreenDisplayMetrics: window metrics
 * are supposed to return the drawable area but there's no guarantee that they correspond to the
 * actual size of the {@link ReactRootView}. Moreover, they are not consistent with what iOS
 * returns. Screen metrics returns the metrics of the entire screen, is consistent with iOS and
 * should be used instead.
 */
public class DisplayMetricsHolder {

  private static @Nullable DisplayMetrics sWindowDisplayMetrics;
  private static @Nullable DisplayMetrics sScreenDisplayMetrics;

  /**
   * @deprecated Use {@link #setScreenDisplayMetrics(DisplayMetrics)} instead. See comment above as
   *    to why this is not correct to use.
   */
  public static void setWindowDisplayMetrics(DisplayMetrics displayMetrics) {
    sWindowDisplayMetrics = displayMetrics;
  }

  public static void initDisplayMetricsIfNotInitialized(Context context) {
    if (DisplayMetricsHolder.getScreenDisplayMetrics() != null) {
      return;
    }
    initDisplayMetrics(context);
  }

  public static void initDisplayMetrics(Context context) {
    DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
    DisplayMetricsHolder.setWindowDisplayMetrics(displayMetrics);

    DisplayMetrics screenDisplayMetrics = new DisplayMetrics();
    screenDisplayMetrics.setTo(displayMetrics);
    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
    Assertions.assertNotNull(
        wm,
        ""WindowManager is null!"");
    Display display = wm.getDefaultDisplay();

    // Get the real display metrics if we are using API level 17 or higher.
    // The real metrics include system decor elements (e.g. soft menu bar).
    //
    // See: http://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics)
    if (Build.VERSION.SDK_INT >= 17) {
      display.getRealMetrics(screenDisplayMetrics);
    } else {
      // For 14 <= API level <= 16, we need to invoke getRawHeight and getRawWidth to get the real dimensions.
      // Since react-native only supports API level 16+ we don't have to worry about other cases.
      //
      // Reflection exceptions are rethrown at runtime.
      //
      // See: http://stackoverflow.com/questions/14341041/how-to-get-real-screen-height-and-width/23861333#23861333
      try {
        Method mGetRawH = Display.class.getMethod(""getRawHeight"");
        Method mGetRawW = Display.class.getMethod(""getRawWidth"");
        screenDisplayMetrics.widthPixels = (Integer) mGetRawW.invoke(display);
        screenDisplayMetrics.heightPixels = (Integer) mGetRawH.invoke(display);
      } catch (InvocationTargetException | IllegalAccessException | NoSuchMethodException e) {
        throw new RuntimeException(""Error getting real dimensions for API level < 17"", e);
      }
    }
    DisplayMetricsHolder.setScreenDisplayMetrics(screenDisplayMetrics);
  }

  /**
   * @deprecated Use {@link #getScreenDisplayMetrics()} instead. See comment above as to why this
   *    is not correct to use.
   */
  @Deprecated
  public static DisplayMetrics getWindowDisplayMetrics() {
    return sWindowDisplayMetrics;
  }

  public static void setScreenDisplayMetrics(DisplayMetrics screenDisplayMetrics) {
    sScreenDisplayMetrics = screenDisplayMetrics;
  }

  public static DisplayMetrics getScreenDisplayMetrics() {
    return sScreenDisplayMetrics;
  }
}
",FALSE,,5100
5069,InitialSO.csv5069.txt,InitialGit.csv5069.txt,4,"var fs = require('fs'),
    path = require('path');

function getDirectories(srcpath) {
  return fs.readdirSync(srcpath).filter(function(file) {
    return fs.statSync(path.join(srcpath, file)).isDirectory();
  });
}
 ","const { promises: { readdir } } = require('fs')

const getDirectories = async source =>
  (await readdir(source, { withFileTypes: true }))
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name)
 const { readdir } = require('fs')

const getDirectories = (source, callback) =>
  readdir(source, { withFileTypes: true }, (err, files) => {
    if (err) {
      callback(err)
    } else {
      callback(
        files
          .filter(dirent => dirent.isDirectory())
          .map(dirent => dirent.name)
      )
    }
  })
 const { readdirSync } = require('fs')

const getDirectories = source =>
  readdirSync(source, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name)
 ",FALSE,"'use strict';

var fs = require('fs');
var path = require('path');

var express = require('express');
var router = express.Router();
var utils = require('./utils');
var config = require('./config');

var app_router = require('./app-router');

module.exports = router;

// http://stackoverflow.com/a/24594123/587407
function getDirectories(srcpath) {
	srcpath = path.resolve(srcpath);
	return fs.readdirSync(srcpath).filter(function(file) {
		return fs.statSync(path.join(srcpath, file)).isDirectory();
	});
}
var APPS_DIR = path.join(__dirname, '../../client/apps');
var APPS = getDirectories(APPS_DIR);


APPS.forEach(function(app_radix) {
	var app_router_options = {};

	try {
		var stats = fs.lstatSync(path.join(APPS_DIR, app_radix, 'view.dust'));
		// Is it a directory?
		if (stats.isFile()) {
			app_router_options.custom_template =
				'../../apps/' + app_radix + '/view'; // REM : path relative to template root
		}
	}
	catch (e) {}

	if(app_radix === 'index') {
		app_router_options.custom_route = '/';
		app_router_options.template_data = {
			apps: APPS
		};
	}
	else if(app_radix === 'helloworld') {
		app_router_options.template_data = {
			title: 'Express',
			num      : 42000,
			completed: 0.9,
			price    : 100.95,
			date: new Date()
		};
	}

	//console.log('Installing app ""' + app_radix +'""', app_router_options);
	router.use('/', app_router(app_radix, app_router_options));
});


/////// special ///////
/*
 router.get('/incubator/node_and_common/webworker_helper.js', function (req, res) {
 res.sendfile(path.join(__dirname, '../../../incubator/node_and_common/webworker_helper/webworker_helper.js'));
 });*/

// help require-css
/*router.get('/css.js', function (req, res) {
 res.sendFile(path.join(__dirname, '../../bower_components/require-css/css.min.js'));
 });*/

// appcache-nanny
// https://github.com/gr2m/appcache-nanny
/*router.get('/appcache-loader.html', function (req, res) {
 res.sendFile(path.join(__dirname, '../../bower_components/appcache-nanny/appcache-loader.html'));
 });*/

router.get('/locale_test', function(req, res) {
	res.header('Content-Type', 'text/plain');
	res.send(
		'You asked for: ' + req.headers['accept-language'] + '\n' +
		'We support: ' + config.supported_locales + '\n' +
		'Our default is: ' + config.supported_locales[0] + '\n' +
		'The best match is: ' + req.locale + '\n' +
		'Choice reason: ' + req.locale_choice + '\n'
	);
});

router.get('/config', function(req, res) {
	res.header('Content-Type', 'application/json');
	res.send(config);
});


/*
 router.get('/page1', function (req, res) {
 res.render('page1', {
 tpl: 'page1',
 title: 'Express',
 lang: req.locale,
 intl: {'locales': req.locale}
 });
 });
 */








// 'catch all' = default / 404 for a webapp
// https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions#how-to-configure-your-server-to-work-with-html5mode
// http://briantford.com/blog/angular-express
// Several cases :
// - a 404
//   - manual, visible (user mistyped a page url, old address...)
//   - internal (API, auto fetch of rsrc, non page-rsrc...)
// - a correct page, but unknown from the server since will be resolved client-side by ui-router
router.get('*', function (req, res) {
	console.error('fallback ""catch all"" route triggered for url ""' + req.url + '""');

	// so what ?
	if(utils.is_internal_request(req)) {
		// Will not be seen by the user.
		// Respond the best we can.
		res.status(404); // anyway
		if (req.accepts('json'))
			return res.send({ error: 'Not found (as json)' });
		else
			return res.type('txt').send('Not found (as text)');
	}

	// ok, most likely a user browsing.
	// is it a full page or just an asset ?
	// (we don't want to costly render a template just for a missing favicon)
	if(req.url.slice(-4).indexOf('.') !== -1) {
		// there is a . (dot) in the last 4 chars,
		// most likely an file extension
		// so it must be an asset since our clean page urls don't have extensions.
		res.status(404); // anyway
		return res.send('404'); // short answer
	}

	// OK, must be a client-side state/page
	var client_side_routing = false;
	if(client_side_routing) {

		// answer with index, client-side will handle the rest (including true 404)
		console.log('defaulting to webapp root for url ""' + req.url + '""');
		res.render('app', { tpl: 'app', title: 'Express', lang: req.locale });
		//res.sendFile('index.html', {root: './public'});
	}
	else {
		console.error('404 page for :', req.url);
		return res.render('404', { tpl: '404', url: req.url, lang: req.locale });
		// if rendering fail, will go to error handler.
	}
});
","'use strict';

var fs = require('fs');
var path = require('path');

var express = require('express');
var router = new express.Router();
var utils = require('./utils');
var config = require('./config');

var app_router = require('./app-router');

module.exports = router;



/////// attach all apps ///////

// http://stackoverflow.com/a/24594123/587407
function getDirectories(srcpath) {
	srcpath = path.resolve(srcpath);
	return fs.readdirSync(srcpath).filter(function(file) {
		return fs.statSync(path.join(srcpath, file)).isDirectory();
	});
}
var APPS_DIR = path.join(__dirname, '../../client/apps');
var APPS = getDirectories(APPS_DIR);

APPS.forEach(function(app_radix) {
	var app_router_options = {};

	try {
		var stats = fs.lstatSync(path.join(APPS_DIR, app_radix, 'view.dust'));
		// Is it a directory?
		if (stats.isFile()) {
			app_router_options.custom_template =
				'../../apps/' + app_radix + '/view'; // REM : path relative to template root
		}
	}
	catch (e) {}

	if(app_radix === 'index') {
		app_router_options.custom_route = '/';
		app_router_options.template_data = {
			apps: APPS
		};
	}
	else if(app_radix === 'helloworld') {
		app_router_options.template_data = {
			title: 'Express',
			num      : 42000,
			completed: 0.9,
			price    : 100.95,
			date: new Date()
		};
	}

	//console.log('Installing app ""' + app_radix +'""', app_router_options);
	router.use('/', app_router(app_radix, app_router_options));
});


/////// special ///////

/*
 router.get('/incubator/node_and_common/webworker_helper.js', function (req, res) {
 res.sendfile(path.join(__dirname, '../../../incubator/node_and_common/webworker_helper/webworker_helper.js'));
 });
*/


router.get('/locale_test', function(req, res) {
	res.header('Content-Type', 'text/plain');
	res.send(
		'You asked for: ' + req.headers['accept-language'] + '\n' +
		'We support: ' + config.supported_locales + '\n' +
		'Our default is: ' + config.supported_locales[0] + '\n' +
		'The best match is: ' + req.locale + '\n' +
		'Choice reason: ' + req.locale_choice + '\n'
	);
});

// XXX TOREMOVE SECU
router.get('/config', function(req, res) {
	res.header('Content-Type', 'application/json');
	res.send(config);
});


/////// ERROR ///////

// 'catch all' = default / 404 for a webapp
// https://github.com/angular-ui/ui-router/wiki/Frequently-Asked-Questions#how-to-configure-your-server-to-work-with-html5mode
// http://briantford.com/blog/angular-express
// Several cases :
// - a 404
//   - manual, visible (user mistyped a page url, old address...)
//   - internal (API, auto fetch of rsrc, non page-rsrc...)
// - a correct page, but unknown from the server since will be resolved client-side by ui-router
router.get('*', function (req, res) {
	console.error('fallback ""catch all"" route triggered for url ""' + req.url + '""');

	// so what ?
	if (utils.is_internal_request(req)) {
		// Will not be seen by the user.
		// Respond the best we can.
		res.status(404); // anyway
		if (req.accepts('json'))
			return res.send({ error: 'Not found (as json)' });
		else
			return res.type('txt').send('Not found (as text)');
	}

	// ok, most likely a user browsing.
	// is it a full page or just an asset ?
	// (we don't want to costly render a template just for a missing favicon)
	if (req.url.slice(-4).indexOf('.') !== -1) {
		// there is a . (dot) in the last 4 chars,
		// most likely an file extension
		// so it must be an asset since our clean page urls don't have extensions.
		res.status(404); // anyway
		return res.send('404'); // short answer
	}

	// OK, must be a client-side state/page
	var client_side_routing = false; // TODO some day maybe maybe not
	if (client_side_routing) {
		// answer with index, client-side will handle the rest (including true 404)
		console.log('defaulting to webapp root for url ""' + req.url + '""');
		res.render('app', { tpl: 'app', title: 'Express', lang: req.locale });
		//res.sendFile('index.html', {root: './public'});
	}
	else {
		console.error('404 page for :', req.url);
		return res.render('404', { tpl: '404', url: req.url, lang: req.locale });
		// if rendering fail, will go to error handler.
	}
});
",FALSE,,5101
5071,InitialSO.csv5071.txt,InitialGit.csv5071.txt,4,"function objOff(obj)
{
    var currleft = currtop = 0;
    if( obj.offsetParent )
    { do { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
      while( obj = obj.offsetParent ); }
    else { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
    return [currleft,currtop];
}
function FontMetric(fontName,fontSize) 
{
    var text = document.createElement(""span"");
    text.style.fontFamily = fontName;
    text.style.fontSize = fontSize + ""px"";
    text.innerHTML = ""ABCjgq|""; 
    // if you will use some weird fonts, like handwriting or symbols, then you need to edit this test string for chars that will have most extreme accend/descend values
    
    var block = document.createElement(""div"");
    block.style.display = ""inline-block"";
    block.style.width = ""1px"";
    block.style.height = ""0px"";
    
    var div = document.createElement(""div"");
    div.appendChild(text);
    div.appendChild(block);
    
    // this test div must be visible otherwise offsetLeft/offsetTop will return 0
    // but still let's try to avoid any potential glitches in various browsers
    // by making it's height 0px, and overflow hidden
    div.style.height = ""0px"";
    div.style.overflow = ""hidden"";

    // I tried without adding it to body - won't work. So we gotta do this one.
    document.body.appendChild(div);

    block.style.verticalAlign = ""baseline"";
    var bp = objOff(block);
    var tp = objOff(text);
    var taccent = bp[1] - tp[1];
    block.style.verticalAlign = ""bottom"";
    bp = objOff(block);
    tp = objOff(text);
    var theight = bp[1] - tp[1];
    var tdescent = theight - taccent;

    // now take it off :-)
    document.body.removeChild(div);

    // return text accent, descent and total height
    return [taccent,theight,tdescent];
}
 ","function objOff(obj)
{
    var currleft = currtop = 0;
    if( obj.offsetParent )
    { do { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
      while( obj = obj.offsetParent ); }
    else { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
    return [currleft,currtop];
}
function FontMetric(fontName,fontSize) 
{
    var text = document.createElement(""span"");
    text.style.fontFamily = fontName;
    text.style.fontSize = fontSize + ""px"";
    text.innerHTML = ""ABCjgq|""; 
    // if you will use some weird fonts, like handwriting or symbols, then you need to edit this test string for chars that will have most extreme accend/descend values

    var block = document.createElement(""div"");
    block.style.display = ""inline-block"";
    block.style.width = ""1px"";
    block.style.height = ""0px"";

    var div = document.createElement(""div"");
    div.appendChild(text);
    div.appendChild(block);

    // this test div must be visible otherwise offsetLeft/offsetTop will return 0
    // but still let's try to avoid any potential glitches in various browsers
    // by making it's height 0px, and overflow hidden
    div.style.height = ""0px"";
    div.style.overflow = ""hidden"";

    // I tried without adding it to body - won't work. So we gotta do this one.
    document.body.appendChild(div);

    block.style.verticalAlign = ""baseline"";
    var bp = objOff(block);
    var tp = objOff(text);
    var taccent = bp[1] - tp[1];
    block.style.verticalAlign = ""bottom"";
    bp = objOff(block);
    tp = objOff(text);
    var theight = bp[1] - tp[1];
    var tdescent = theight - taccent;

    // now take it off :-)
    document.body.removeChild(div);

    // return text accent, descent and total height
    return [taccent,theight,tdescent];
}
 ",FALSE,"/**
 * @module Rendering
 * @submodule Rendering
 * @for p5
 */

var p5 = require('./core');
var constants = require('../core/constants');

/**
 * Main graphics and rendering context, as well as the base API
 * implementation for p5.js ""core"". To be used as the superclass for
 * Renderer2D and Renderer3D classes, respecitvely.
 *
 * @class p5.Renderer
 * @constructor
 * @extends p5.Element
 * @param {String} elt DOM node that is wrapped
 * @param {Object} [pInst] pointer to p5 instance
 * @param {Boolean} whether we're using it as main canvas
 */
p5.Renderer = function(elt, pInst, isMainCanvas) {
  p5.Element.call(this, elt, pInst);
  this.canvas = elt;
  this._pInst = pInst;
  if (isMainCanvas) {
    this._isMainCanvas = true;
    // for pixel method sharing with pimage
    this._pInst._setProperty('_curElement', this);
    this._pInst._setProperty('canvas', this.canvas);
    this._pInst._setProperty('width', this.width);
    this._pInst._setProperty('height', this.height);
  } else { // hide if offscreen buffer by default
    this.canvas.style.display = 'none';
    this._styles = []; // non-main elt styles stored in p5.Renderer
  }


  this._textSize = 12;
  this._textLeading = 15;
  this._textFont = 'sans-serif';
  this._textStyle = constants.NORMAL;
  this._textAscent = null;
  this._textDescent = null;

};

p5.Renderer.prototype = Object.create(p5.Element.prototype);

/**
 * Resize our canvas element.
 */
p5.Renderer.prototype.resize = function(w, h) {
  this.width = w;
  this.height = h;
  this.elt.width = w * this._pInst.pixelDensity;
  this.elt.height = h * this._pInst.pixelDensity;
  this.elt.style.width = w +'px';
  this.elt.style.height = h + 'px';
  if (this._isMainCanvas) {
    this._pInst._setProperty('width', this.width);
    this._pInst._setProperty('height', this.height);
  }
};


/**
 * Sets/gets the spacing between lines of text in units of pixels. This
 * setting will be used in all subsequent calls to the text() function.
 *
 * @method textLeading
 * @param {Number} l the size in pixels for spacing between lines
 * @return {Object|Number}
 * @example
 * <div>
 * <code>
 * // Text to display. The ""\n"" is a ""new line"" character
 * lines = ""L1\nL2\nL3"";
 * textSize(12);
 * fill(0);  // Set fill to black
 *
 * textLeading(10);  // Set leading to 10
 * text(lines, 10, 25);
 *
 * textLeading(20);  // Set leading to 20
 * text(lines, 40, 25);
 *
 * textLeading(30);  // Set leading to 30
 * text(lines, 70, 25);
 * </code>
 * </div>
 */
p5.Renderer.prototype.textLeading = function(l) {

  if (arguments.length) {

    this._setProperty('_textLeading', l);
    return this;
  }

  return this._textLeading;
};

/**
 * Sets/gets the current font size. This size will be used in all subsequent
 * calls to the text() function. Font size is measured in units of pixels.
 *
 * @method textSize
 * @param {Number} s the size of the letters in units of pixels
 * @return {Object|Number}
 * @example
 * <div>
 * <code>
 * textSize(12);
 * text(""Font Size 12"", 10, 30);
 * textSize(14);
 * text(""Font Size 14"", 10, 60);
 * textSize(16);
 * text(""Font Size 16"", 10, 90);
 * </code>
 * </div>
 */
p5.Renderer.prototype.textSize = function(s) {

  if (arguments.length) {

    this._setProperty('_textSize', s);
    this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);
    return this._applyTextProperties();
  }

  return this._textSize;
};

/**
 * Sets/gets the style of the text to NORMAL, ITALIC, or BOLD. Note this is
 * overridden by CSS styling.
 * (Style only apply to system font, for custom fonts, please load styled
 * fonts instead.)
 *
 * @method textStyle
 * @param {Number/Constant} s styling for text, either NORMAL,
 *                            ITALIC, or BOLD
 * @return {Object|String}
 * @example
 * <div>
 * <code>
 * fill(0);
 * strokeWeight(0);
 * textSize(12);
 * textStyle(NORMAL);
 * text(""Font Style Normal"", 10, 30);
 * textStyle(ITALIC);
 * text(""Font Style Italic"", 10, 60);
 * textStyle(BOLD);
 * text(""Font Style Bold"", 10, 90);
 * </code>
 * </div>
 */
p5.Renderer.prototype.textStyle = function(s) {

  if (arguments.length) {

    if (s === constants.NORMAL ||
      s === constants.ITALIC ||
      s === constants.BOLD) {
      this._setProperty('_textStyle', s);
    }

    return this._applyTextProperties();
  }

  return this._textStyle;
};


/**
 * Returns ascent of the current font at its current size.
 * @return {Number}
 * @example
 * <div>
 * <code>
 * var base = height * 0.75;
 * var scalar = 0.8; // Different for each font
 *
 * textSize(32);  // Set initial text size
 * var a = textAscent() * scalar;  // Calc ascent
 * line(0, base-a, width, base-a);
 * text(""dp"", 0, base);  // Draw text on baseline
 *
 * textSize(64);  // Increase text size
 * a = textAscent() * scalar;  // Recalc ascent
 * line(40, base-a, width, base-a);
 * text(""dp"", 40, base);  // Draw text on baseline
 * </code>
 * </div>
 */
p5.Renderer.prototype.textAscent = function() {
  if (this._textAscent === null) {
    this._updateTextMetrics();
  }
  return this._textAscent;
};

/*p5.prototype.fontMetrics = function(font, text, x, y, fontSize) {

  var xMins = [], yMins = [], xMaxs= [], yMaxs = [], p5 = this;
  //font = font || this._textFont;
  fontSize = fontSize || p5._textSize;

  font.forEachGlyph(text, x, y, fontSize,
    {}, function(glyph, gX, gY, gFontSize) {

      var gm = glyph.getMetrics();

      gX = gX !== undefined ? gX : 0;
      gY = gY !== undefined ? gY : 0;
      fontSize = fontSize !== undefined ? fontSize : 24;

      var scale = 1 / font.unitsPerEm * fontSize;

      p5.noFill();
      p5.rectMode(p5.CORNERS);
      p5.rect(gX + (gm.xMin * scale), gY + (-gm.yMin * scale),
              gX + (gm.xMax * scale), gY + (-gm.yMax * scale));

      p5.rectMode(p5.CORNER);
  });

  return { // metrics
      xMin: Math.min.apply(null, xMins),
      yMin: Math.min.apply(null, yMins),
      xMax: Math.max.apply(null, xMaxs),
      yMax: Math.max.apply(null, yMaxs)
  };
};*/

/**
 * Returns descent of the current font at its current size.
 * @return {Number}
 * @example
 * <div>
 * <code>
 * var base = height * 0.75;
 * var scalar = 0.8; // Different for each font
 *
 * textSize(32);  // Set initial text size
 * var a = textDescent() * scalar;  // Calc ascent
 * line(0, base+a, width, base+a);
 * text(""dp"", 0, base);  // Draw text on baseline
 *
 * textSize(64);  // Increase text size
 * a = textDescent() * scalar;  // Recalc ascent
 * line(40, base+a, width, base+a);
 * text(""dp"", 40, base);  // Draw text on baseline
 * </code>
 * </div>
 */
p5.Renderer.prototype.textDescent = function() {

  if (this._textDescent === null) {
    this._updateTextMetrics();
  }
  return this._textDescent;
};

/**
 * Helper fxn to check font type (system or otf)
 */
p5.Renderer.prototype._isOpenType = function(f) {

  f = f || this._textFont;
  return (typeof f === 'object' && f.font && f.font.supported);
};

/**
 * Helper fxn to measure ascent and descent.
 */
p5.Renderer.prototype._updateTextMetrics = function() {

  if (this._isOpenType()) {

    this._setProperty('_textAscent', this._textFont._textAscent());
    this._setProperty('_textDescent', this._textFont._textDescent());
    return this;
  }

  // Adapted from http://stackoverflow.com/a/25355178
  var text = document.createElement('span');
  text.style.fontFamily = this._textFont;
  text.style.fontSize = this._textSize + 'px';
  text.innerHTML = 'ABCjgq|';

  var block = document.createElement('div');
  block.style.display = 'inline-block';
  block.style.width = '1px';
  block.style.height = '0px';

  var container = document.createElement('div');
  container.appendChild(text);
  container.appendChild(block);

  container.style.height = '0px';
  container.style.overflow = 'hidden';
  document.body.appendChild(container);

  block.style.verticalAlign = 'baseline';
  var blockOffset = calculateOffset(block);
  var textOffset = calculateOffset(text);
  var ascent = blockOffset[1] - textOffset[1];

  block.style.verticalAlign = 'bottom';
  blockOffset = calculateOffset(block);
  textOffset = calculateOffset(text);
  var height = blockOffset[1] - textOffset[1];
  var descent = height - ascent;

  document.body.removeChild(container);

  this._setProperty('_textAscent', ascent);
  this._setProperty('_textDescent', descent);

  return this;
};

/**
 * Helper fxn to measure ascent and descent.
 * Adapted from http://stackoverflow.com/a/25355178
 */
function calculateOffset(object) {
  var currentLeft = 0,
    currentTop = 0;
  if (object.offsetParent) {
    do {
      currentLeft += object.offsetLeft;
      currentTop += object.offsetTop;
    } while (object = object.offsetParent);
  } else {
    currentLeft += object.offsetLeft;
    currentTop += object.offsetTop;
  }
  return [currentLeft, currentTop];
}

module.exports = p5.Renderer;
","/**
 * @module Rendering
 * @submodule Rendering
 * @for p5
 */

var p5 = require('./core');
var constants = require('../core/constants');

/**
 * Main graphics and rendering context, as well as the base API
 * implementation for p5.js ""core"". To be used as the superclass for
 * Renderer2D and Renderer3D classes, respecitvely.
 *
 * @class p5.Renderer
 * @constructor
 * @extends p5.Element
 * @param {String} elt DOM node that is wrapped
 * @param {Object} [pInst] pointer to p5 instance
 * @param {Boolean} whether we're using it as main canvas
 */
p5.Renderer = function(elt, pInst, isMainCanvas) {
  p5.Element.call(this, elt, pInst);
  this.canvas = elt;
  this._pInst = pInst;
  if (isMainCanvas) {
    this._isMainCanvas = true;
    // for pixel method sharing with pimage
    this._pInst._setProperty('_curElement', this);
    this._pInst._setProperty('canvas', this.canvas);
    this._pInst._setProperty('width', this.width);
    this._pInst._setProperty('height', this.height);
  } else { // hide if offscreen buffer by default
    this.canvas.style.display = 'none';
    this._styles = []; // non-main elt styles stored in p5.Renderer
  }


  this._textSize = 12;
  this._textLeading = 15;
  this._textFont = 'sans-serif';
  this._textStyle = constants.NORMAL;
  this._textAscent = null;
  this._textDescent = null;


  this._rectMode = constants.CORNER;
  this._ellipseMode = constants.CENTER;
  this._curveTightness = 0;
  this._imageMode = constants.CORNER;

  this._tint = null;
  this._doStroke = true;
  this._doFill = true;
  this._strokeSet = false;
  this._fillSet = false;
  this._colorMode = constants.RGB;
  this._colorMaxes = {
    rgb: [255, 255, 255, 255],
    hsb: [360, 100, 100, 1],
    hsl: [360, 100, 100, 1]
  };

};

p5.Renderer.prototype = Object.create(p5.Element.prototype);




/**
 * Resize our canvas element.
 */
p5.Renderer.prototype.resize = function(w, h) {
  this.width = w;
  this.height = h;
  this.elt.width = w * this._pInst.pixelDensity;
  this.elt.height = h * this._pInst.pixelDensity;
  this.elt.style.width = w +'px';
  this.elt.style.height = h + 'px';
  if (this._isMainCanvas) {
    this._pInst._setProperty('width', this.width);
    this._pInst._setProperty('height', this.height);
  }
};

p5.Renderer.prototype.textLeading = function(l) {

  if (arguments.length && arguments[0]) {

    this._setProperty('_textLeading', l);
    return this;
  }

  return this._textLeading;
};

p5.Renderer.prototype.textSize = function(s) {

  if (arguments.length && arguments[0]) {

    this._setProperty('_textSize', s);
    this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);
    return this._applyTextProperties();
  }

  return this._textSize;
};

p5.Renderer.prototype.textStyle = function(s) {

  if (arguments.length && arguments[0]) {

    if (s === constants.NORMAL ||
      s === constants.ITALIC ||
      s === constants.BOLD) {
      this._setProperty('_textStyle', s);
    }

    return this._applyTextProperties();
  }

  return this._textStyle;
};

p5.Renderer.prototype.textAscent = function() {
  if (this._textAscent === null) {
    this._updateTextMetrics();
  }
  return this._textAscent;
};

p5.Renderer.prototype.textDescent = function() {

  if (this._textDescent === null) {
    this._updateTextMetrics();
  }
  return this._textDescent;
};

/**
 * Helper fxn to check font type (system or otf)
 */
p5.Renderer.prototype._isOpenType = function(f) {

  f = f || this._textFont;
  return (typeof f === 'object' && f.font && f.font.supported);
};

p5.Renderer.prototype._updateTextMetrics = function() {

  if (this._isOpenType()) {

    this._setProperty('_textAscent', this._textFont._textAscent());
    this._setProperty('_textDescent', this._textFont._textDescent());
    return this;
  }

  // Adapted from http://stackoverflow.com/a/25355178
  var text = document.createElement('span');
  text.style.fontFamily = this._textFont;
  text.style.fontSize = this._textSize + 'px';
  text.innerHTML = 'ABCjgq|';

  var block = document.createElement('div');
  block.style.display = 'inline-block';
  block.style.width = '1px';
  block.style.height = '0px';

  var container = document.createElement('div');
  container.appendChild(text);
  container.appendChild(block);

  container.style.height = '0px';
  container.style.overflow = 'hidden';
  document.body.appendChild(container);

  block.style.verticalAlign = 'baseline';
  var blockOffset = calculateOffset(block);
  var textOffset = calculateOffset(text);
  var ascent = blockOffset[1] - textOffset[1];

  block.style.verticalAlign = 'bottom';
  blockOffset = calculateOffset(block);
  textOffset = calculateOffset(text);
  var height = blockOffset[1] - textOffset[1];
  var descent = height - ascent;

  document.body.removeChild(container);

  this._setProperty('_textAscent', ascent);
  this._setProperty('_textDescent', descent);

  return this;
};

/**
 * Helper fxn to measure ascent and descent.
 * Adapted from http://stackoverflow.com/a/25355178
 */
function calculateOffset(object) {
  var currentLeft = 0,
    currentTop = 0;
  if (object.offsetParent) {
    do {
      currentLeft += object.offsetLeft;
      currentTop += object.offsetTop;
    } while (object = object.offsetParent);
  } else {
    currentLeft += object.offsetLeft;
    currentTop += object.offsetTop;
  }
  return [currentLeft, currentTop];
}

module.exports = p5.Renderer;
",FALSE,,5104
5073,InitialSO.csv5073.txt,InitialGit.csv5073.txt,4,"function objOff(obj)
{
    var currleft = currtop = 0;
    if( obj.offsetParent )
    { do { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
      while( obj = obj.offsetParent ); }
    else { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
    return [currleft,currtop];
}
function FontMetric(fontName,fontSize) 
{
    var text = document.createElement(""span"");
    text.style.fontFamily = fontName;
    text.style.fontSize = fontSize + ""px"";
    text.innerHTML = ""ABCjgq|""; 
    // if you will use some weird fonts, like handwriting or symbols, then you need to edit this test string for chars that will have most extreme accend/descend values
    
    var block = document.createElement(""div"");
    block.style.display = ""inline-block"";
    block.style.width = ""1px"";
    block.style.height = ""0px"";
    
    var div = document.createElement(""div"");
    div.appendChild(text);
    div.appendChild(block);
    
    // this test div must be visible otherwise offsetLeft/offsetTop will return 0
    // but still let's try to avoid any potential glitches in various browsers
    // by making it's height 0px, and overflow hidden
    div.style.height = ""0px"";
    div.style.overflow = ""hidden"";

    // I tried without adding it to body - won't work. So we gotta do this one.
    document.body.appendChild(div);

    block.style.verticalAlign = ""baseline"";
    var bp = objOff(block);
    var tp = objOff(text);
    var taccent = bp[1] - tp[1];
    block.style.verticalAlign = ""bottom"";
    bp = objOff(block);
    tp = objOff(text);
    var theight = bp[1] - tp[1];
    var tdescent = theight - taccent;

    // now take it off :-)
    document.body.removeChild(div);

    // return text accent, descent and total height
    return [taccent,theight,tdescent];
}
 ","function objOff(obj)
{
    var currleft = currtop = 0;
    if( obj.offsetParent )
    { do { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
      while( obj = obj.offsetParent ); }
    else { currleft += obj.offsetLeft; currtop += obj.offsetTop; }
    return [currleft,currtop];
}
function FontMetric(fontName,fontSize) 
{
    var text = document.createElement(""span"");
    text.style.fontFamily = fontName;
    text.style.fontSize = fontSize + ""px"";
    text.innerHTML = ""ABCjgq|""; 
    // if you will use some weird fonts, like handwriting or symbols, then you need to edit this test string for chars that will have most extreme accend/descend values

    var block = document.createElement(""div"");
    block.style.display = ""inline-block"";
    block.style.width = ""1px"";
    block.style.height = ""0px"";

    var div = document.createElement(""div"");
    div.appendChild(text);
    div.appendChild(block);

    // this test div must be visible otherwise offsetLeft/offsetTop will return 0
    // but still let's try to avoid any potential glitches in various browsers
    // by making it's height 0px, and overflow hidden
    div.style.height = ""0px"";
    div.style.overflow = ""hidden"";

    // I tried without adding it to body - won't work. So we gotta do this one.
    document.body.appendChild(div);

    block.style.verticalAlign = ""baseline"";
    var bp = objOff(block);
    var tp = objOff(text);
    var taccent = bp[1] - tp[1];
    block.style.verticalAlign = ""bottom"";
    bp = objOff(block);
    tp = objOff(text);
    var theight = bp[1] - tp[1];
    var tdescent = theight - taccent;

    // now take it off :-)
    document.body.removeChild(div);

    // return text accent, descent and total height
    return [taccent,theight,tdescent];
}
 ",FALSE,"/**
 * @module Typography
 * @submodule Attributes
 * @for p5
 * @requires core
 * @requires constants
 */
define(function (require) {

  'use strict';

  var p5 = require('core');
  var constants = require('constants');

  p5.prototype._textLeading = 15;
  p5.prototype._textFont = 'sans-serif';
  p5.prototype._textSize = 12;
  p5.prototype._textStyle = constants.NORMAL;
  p5.prototype._textAscent = null;
  p5.prototype._textDescent = null;

  /**
   * Sets the current alignment for drawing text. The parameters LEFT, CENTER,
   * and RIGHT set the display characteristics of the letters in relation to
   * the values for the x and y parameters of the text() function. 
   * 
   * @method textAlign
   * @param {Number/Constant} a horizontal alignment, either LEFT,
   *                            CENTER, or RIGHT
   * @example
   * <div>
   * <code>
   * textSize(16);
   * textAlign(RIGHT);
   * text(""ABCD"", 50, 30);
   * textAlign(CENTER);
   * text(""EFGH"", 50, 50);
   * textAlign(LEFT);
   * text(""IJKL"", 50, 70);
   * </code>
   * </div>
   */
  p5.prototype.textAlign = function(a) {
    if (a === constants.LEFT ||
      a === constants.RIGHT ||
      a === constants.CENTER) {
      this.drawingContext.textAlign = a;
    }
  };

  /**
   * Sets the spacing between lines of text in units of pixels. This
   * setting will be used in all subsequent calls to the text() function.
   *
   * @method textLeading
   * @param {Number} l the size in pixels for spacing between lines
   * @example
   * <div>
   * <code>
   * // Text to display. The ""\n"" is a ""new line"" character
   * lines = ""L1\nL2\nL3"";
   * textSize(12);
   * fill(0);  // Set fill to black
   * 
   * textLeading(10);  // Set leading to 10
   * text(lines, 10, 25);
   * 
   * textLeading(20);  // Set leading to 20
   * text(lines, 40, 25);
   * 
   * textLeading(30);  // Set leading to 30
   * text(lines, 70, 25);
   * </code>
   * </div>
   */
  p5.prototype.textLeading = function(l) {
    this._setProperty('_textLeading', l);
  };

  /**
   * Sets the current font size. This size will be used in all subsequent
   * calls to the text() function. Font size is measured in units of pixels.
   *
   * @method textSize
   * @param {Number} s the size of the letters in units of pixels
   * @example
   * <div>
   * <code>
   * background(0);
   * fill(255);
   * textSize(26); 
   * text(""WORD"", 10, 50); 
   * textSize(14);
   * text(""WORD"", 10, 70);
   * </code>
   * </div>
   */
  p5.prototype.textSize = function(s) {
    this._setProperty('_textSize', s);
    this._applyTextProperties();
  };

  /**
   * Sets the style of the text to NORMAL, ITALIC, or BOLD. Note this is
   * overridden by CSS styling.
   *
   * @method textStyle
   * @param {Number/Constant} s styling for text, either NORMAL,
   *                            ITALIC, or BOLD
   * @example
   * <div>
   * <code>
   * background(0);
   * fill(255);
   * textStyle(NORMAL);
   * textSize(14);
   * text(""WORD"", 10, 23);
   * textStyle(ITALIC);
   * textSize(14);
   * text(""WORD"", 10, 45);
   * textStyle(BOLD);
   * textSize(14);
   * text(""WORD"", 10, 67);
   * </code>
   * </div>
   */
  p5.prototype.textStyle = function(s) {
    if (s === constants.NORMAL ||
      s === constants.ITALIC ||
      s === constants.BOLD) {
      this._setProperty('_textStyle', s);
      this._applyTextProperties();
    }
  };

  /**
   * Calculates and returns the width of any character or text string.
   *
   * @method textWidth
   * @param {String} s the String of characters to measure
   * @example
   * <div>
   * <code>
   * background(0);
   * fill(255);
   * textSize(14);
   * s = ""String."";
   * text(s, 10, 23);
   * console.log(textWidth(s));
   * </code>
   * </div>
   */
  p5.prototype.textWidth = function(s) {
    return this.drawingContext.measureText(s).width;
  };

  /**
   * Returns ascent of the current font at its current size.
   * @example
   * <div>
   * <code>
   * var base = height * 0.75;
   * var scalar = 0.8; // Different for each font
   * 
   * textSize(32);  // Set initial text size
   * var a = textAscent() * scalar;  // Calc ascent
   * line(0, base-a, width, base-a);
   * text(""dp"", 0, base);  // Draw text on baseline
   * 
   * textSize(64);  // Increase text size
   * a = textAscent() * scalar;  // Recalc ascent
   * line(40, base-a, width, base-a);
   * text(""dp"", 40, base);  // Draw text on baseline
   * </code>
   * </div>
   */
  p5.prototype.textAscent = function() {
    if (this._textAscent == null) { this._updateTextMetrics(); }
    return this._textAscent;
  };

  /**
   * Returns descent of the current font at its current size.
   * @example
   * <div>
   * <code>
   * var base = height * 0.75;
   * var scalar = 0.8; // Different for each font
   * 
   * textSize(32);  // Set initial text size
   * var a = textDescent() * scalar;  // Calc ascent
   * line(0, base+a, width, base+a);
   * text(""dp"", 0, base);  // Draw text on baseline
   * 
   * textSize(64);  // Increase text size
   * a = textDescent() * scalar;  // Recalc ascent
   * line(40, base+a, width, base+a);
   * text(""dp"", 40, base);  // Draw text on baseline
   * </code>
   * </div> 
   */
  p5.prototype.textDescent = function() {
    if (this._textDescent == null) { this._updateTextMetrics(); }
    return this._textDescent;
  };

  /**
   * Helper fxn to apply text properties. 
   */
  p5.prototype._applyTextProperties = function () {
    this._setProperty('_textAscent', null);
    this._setProperty('_textDescent', null);

    var str = this._textStyle + ' ' + this._textSize + 'px ' + this._textFont;
    this.drawingContext.font = str;
  };

  /**
   * Helper fxn to measure ascent and descent. 
   * Adapted from http://stackoverflow.com/a/25355178
   */
  p5.prototype._updateTextMetrics = function () {

    var text = document.createElement('span');
    text.style.fontFamily = this._textFont;
    text.style.fontSize = this._textSize + 'px';
    text.innerHTML = 'ABCjgq|';

    var block = document.createElement('div');
    block.style.display = 'inline-block';
    block.style.width = '1px';
    block.style.height = '0px';

    var container = document.createElement('div');
    container.appendChild(text);
    container.appendChild(block);

    container.style.height = '0px';
    container.style.overflow = 'hidden';
    document.body.appendChild(container);

    block.style.verticalAlign = 'baseline';
    var blockOffset = this._calculateOffset(block);
    var textOffset = this._calculateOffset(text);
    var ascent = blockOffset[1] - textOffset[1];

    block.style.verticalAlign = 'bottom';
    blockOffset = this._calculateOffset(block);
    textOffset = this._calculateOffset(text);
    var height = blockOffset[1] - textOffset[1];
    var descent = height - ascent;

    document.body.removeChild(container);

    this._setProperty('_textAscent', ascent);
    this._setProperty('_textDescent', descent);
  };

  /**
   * Helper fxn to measure ascent and descent. 
   * Adapted from http://stackoverflow.com/a/25355178
   */
  p5.prototype._calculateOffset = function (object) {
    var currentLeft = 0, currentTop = 0;
    if( object.offsetParent ) {
      do {
        currentLeft += object.offsetLeft;
        currentTop += object.offsetTop;
      } while( object = object.offsetParent );
    } else {
      currentLeft += object.offsetLeft;
      currentTop += object.offsetTop;
    }
    return [currentLeft,currentTop];
  };

  return p5;

});
","/**
 * @module Typography
 * @submodule Attributes
 * @for p5
 * @requires core
 * @requires constants
 */
define(function(require) {

  'use strict';

  var p5 = require('core/core');
  var constants = require('core/constants');

  p5.prototype._textSize = 12;
  p5.prototype._textLeading = 15;
  p5.prototype._textFont = 'sans-serif';
  p5.prototype._textStyle = constants.NORMAL;
  p5.prototype._textAscent = null;
  p5.prototype._textDescent = null;

  /**
   * Sets the current alignment for drawing text. The parameters LEFT, CENTER,
   * and RIGHT set the display characteristics of the letters in relation to
   * the values for the x and y parameters of the text() function.
   *
   * @method textAlign
   * @param {Number/Constant} h horizontal alignment, either LEFT,
   *                            CENTER, or RIGHT
   * @param {Number/Constant} v vertical alignment, either TOP,
   *                            BOTTOM, CENTER, or BASELINE
   * @return {Number}
   * @example
   * <div>
   * <code>
   * textSize(16);
   * textAlign(RIGHT);
   * text(""ABCD"", 50, 30);
   * textAlign(CENTER);
   * text(""EFGH"", 50, 50);
   * textAlign(LEFT);
   * text(""IJKL"", 50, 70);
   * </code>
   * </div>
   */
  p5.prototype.textAlign = function(h, v) {

    return this._graphics.textAlign(h,v);
  };

  /**
   * Sets/gets the spacing between lines of text in units of pixels. This
   * setting will be used in all subsequent calls to the text() function.
   *
   * @method textLeading
   * @param {Number} l the size in pixels for spacing between lines
   * @return {Object|Number}
   * @example
   * <div>
   * <code>
   * // Text to display. The ""\n"" is a ""new line"" character
   * lines = ""L1\nL2\nL3"";
   * textSize(12);
   * fill(0);  // Set fill to black
   *
   * textLeading(10);  // Set leading to 10
   * text(lines, 10, 25);
   *
   * textLeading(20);  // Set leading to 20
   * text(lines, 40, 25);
   *
   * textLeading(30);  // Set leading to 30
   * text(lines, 70, 25);
   * </code>
   * </div>
   */
  p5.prototype.textLeading = function(l) {

    if (arguments.length) {

      this._setProperty('_textLeading', l);
      return this;
    }

    return this._textLeading;
  };

  /**
   * Sets/gets the current font size. This size will be used in all subsequent
   * calls to the text() function. Font size is measured in units of pixels.
   *
   * @method textSize
   * @param {Number} s the size of the letters in units of pixels
   * @return {Object|Number}
   * @example
   * <div>
   * <code>
   * textSize(12);
   * text(""Font Size 12"", 10, 30);
   * textSize(14);
   * text(""Font Size 14"", 10, 60);
   * textSize(16);
   * text(""Font Size 16"", 10, 90);
   * </code>
   * </div>
   */
  p5.prototype.textSize = function(s) {

    if (arguments.length) {

      this._setProperty('_textSize', s);
      this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);
      return this._graphics._applyTextProperties();
    }

    return this._textSize;
  };

  /**
   * Sets/gets the style of the text to NORMAL, ITALIC, or BOLD. Note this is
   * overridden by CSS styling.
   * (Style only apply to system font, for custom fonts, please load styled
   * fonts instead.)
   *
   * @method textStyle
   * @param {Number/Constant} s styling for text, either NORMAL,
   *                            ITALIC, or BOLD
   * @return {Object|String}
   * @example
   * <div>
   * <code>
   * fill(0);
   * strokeWeight(0);
   * textSize(12);
   * textStyle(NORMAL);
   * text(""Font Style Normal"", 10, 30);
   * textStyle(ITALIC);
   * text(""Font Style Italic"", 10, 60);
   * textStyle(BOLD);
   * text(""Font Style Bold"", 10, 90);
   * </code>
   * </div>
   */
  p5.prototype.textStyle = function(s) {

    if (arguments.length) {

      if (s === constants.NORMAL ||
        s === constants.ITALIC ||
        s === constants.BOLD) {
        this._setProperty('_textStyle', s);
      }

      return this._graphics._applyTextProperties();
    }

    return this._textStyle;
  };

  /**
   * Calculates and returns the width of any character or text string.
   *
   * @method textWidth
   * @param {String} s the String of characters to measure
   * @return {Number}
   * @example
   * <div>
   * <code>
   * textSize(28);
   *
   * var c = 'P';
   * var cw = textWidth(c);
   * text(c, 0, 40);
   * line(cw, 0, cw, 50);
   *
   * var s = ""p5.js"";
   * var sw = textWidth(s);
   * text(s, 0, 85);
   * line(sw, 50, sw, 100);
   * </code>
   * </div>
   */
  p5.prototype.textWidth = function(s) {

    return this._graphics.textWidth(s);
  };

  /**
   * Returns ascent of the current font at its current size.
   * @return {Number}
   * @example
   * <div>
   * <code>
   * var base = height * 0.75;
   * var scalar = 0.8; // Different for each font
   *
   * textSize(32);  // Set initial text size
   * var a = textAscent() * scalar;  // Calc ascent
   * line(0, base-a, width, base-a);
   * text(""dp"", 0, base);  // Draw text on baseline
   *
   * textSize(64);  // Increase text size
   * a = textAscent() * scalar;  // Recalc ascent
   * line(40, base-a, width, base-a);
   * text(""dp"", 40, base);  // Draw text on baseline
   * </code>
   * </div>
   */
  p5.prototype.textAscent = function() {
    if (this._textAscent === null) {
      this._updateTextMetrics();
    }
    return this._textAscent;
  };

  /*p5.prototype.fontMetrics = function(font, text, x, y, fontSize) {

    var xMins = [], yMins = [], xMaxs= [], yMaxs = [], p5 = this;
    //font = font || this._textFont;
    fontSize = fontSize || p5._textSize;

    font.forEachGlyph(text, x, y, fontSize,
      {}, function(glyph, gX, gY, gFontSize) {

        var gm = glyph.getMetrics();

        gX = gX !== undefined ? gX : 0;
        gY = gY !== undefined ? gY : 0;
        fontSize = fontSize !== undefined ? fontSize : 24;

        var scale = 1 / font.unitsPerEm * fontSize;

        p5.noFill();
        p5.rectMode(p5.CORNERS);
        p5.rect(gX + (gm.xMin * scale), gY + (-gm.yMin * scale),
                gX + (gm.xMax * scale), gY + (-gm.yMax * scale));

        p5.rectMode(p5.CORNER);
    });

    return { // metrics
        xMin: Math.min.apply(null, xMins),
        yMin: Math.min.apply(null, yMins),
        xMax: Math.max.apply(null, xMaxs),
        yMax: Math.max.apply(null, yMaxs)
    };
  };*/

  /**
   * Returns descent of the current font at its current size.
   * @return {Number}
   * @example
   * <div>
   * <code>
   * var base = height * 0.75;
   * var scalar = 0.8; // Different for each font
   *
   * textSize(32);  // Set initial text size
   * var a = textDescent() * scalar;  // Calc ascent
   * line(0, base+a, width, base+a);
   * text(""dp"", 0, base);  // Draw text on baseline
   *
   * textSize(64);  // Increase text size
   * a = textDescent() * scalar;  // Recalc ascent
   * line(40, base+a, width, base+a);
   * text(""dp"", 40, base);  // Draw text on baseline
   * </code>
   * </div>
   */
  p5.prototype.textDescent = function() {

    if (this._textDescent === null) {
      this._updateTextMetrics();
    }
    return this._textDescent;
  };

  /**
   * Helper fxn to check font type (system or otf)
   */
  p5.prototype._isOpenType = function(f) {

    f = f || this._textFont;
    return (typeof f === 'object' && f.font && f.font.supported);
  };

  /**
   * Helper fxn to measure ascent and descent.
   */
  p5.prototype._updateTextMetrics = function() {

    if (this._isOpenType()) {

      this._setProperty('_textAscent', this._textFont._textAscent());
      this._setProperty('_textDescent', this._textFont._textDescent());
      return this;
    }

    // Adapted from http://stackoverflow.com/a/25355178
    var text = document.createElement('span');
    text.style.fontFamily = this._textFont;
    text.style.fontSize = this._textSize + 'px';
    text.innerHTML = 'ABCjgq|';

    var block = document.createElement('div');
    block.style.display = 'inline-block';
    block.style.width = '1px';
    block.style.height = '0px';

    var container = document.createElement('div');
    container.appendChild(text);
    container.appendChild(block);

    container.style.height = '0px';
    container.style.overflow = 'hidden';
    document.body.appendChild(container);

    block.style.verticalAlign = 'baseline';
    var blockOffset = this._calculateOffset(block);
    var textOffset = this._calculateOffset(text);
    var ascent = blockOffset[1] - textOffset[1];

    block.style.verticalAlign = 'bottom';
    blockOffset = this._calculateOffset(block);
    textOffset = this._calculateOffset(text);
    var height = blockOffset[1] - textOffset[1];
    var descent = height - ascent;

    document.body.removeChild(container);

    this._setProperty('_textAscent', ascent);
    this._setProperty('_textDescent', descent);

    return this;
  };

  /**
   * Helper fxn to measure ascent and descent.
   * Adapted from http://stackoverflow.com/a/25355178
   */
  p5.prototype._calculateOffset = function(object) {
    var currentLeft = 0,
      currentTop = 0;
    if (object.offsetParent) {
      do {
        currentLeft += object.offsetLeft;
        currentTop += object.offsetTop;
      } while (object = object.offsetParent);
    } else {
      currentLeft += object.offsetLeft;
      currentTop += object.offsetTop;
    }
    return [currentLeft, currentTop];
  };

  return p5;

});
",FALSE,,5105
5078,InitialSO.csv5078.txt,InitialGit.csv5078.txt,19,"Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
};
 ","Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
};
 ",TRUE,"(function (H) {
  
  // cross http://stackoverflow.com/a/25379352/829971
  Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
    };

  // plus http://stackoverflow.com/a/36270224/829971
  Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
  };
  
  
}(Highcharts));
","(function (H) {
  
  // cross http://stackoverflow.com/a/25379352/829971
  Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
    };

  // plus http://stackoverflow.com/a/36270224/829971
  Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
  };
  
  
}(Highcharts));
",TRUE,,5121
5079,InitialSO.csv5079.txt,InitialGit.csv5079.txt,7,"function permutator (arr) {
  var permutations = [];
  if (arr.length === 1) {
    return [ arr ];
  }
  
  for (var i = 0; i <  arr.length; i++) { 
    var subPerms = permutator(arr.slice(0, i).concat(arr.slice(i + 1)));
    for (var j = 0; j < subPerms.length; j++) {
      subPerms[j].unshift(arr[i]);
      permutations.push(subPerms[j]);
    }
  }
  return permutations;
}
 ","function permutator (arr) {
  var permutations = [];
  if (arr.length === 1) {
    return [ arr ];
  }

  for (var i = 0; i <  arr.length; i++) { 
    var subPerms = permutator(arr.slice(0, i).concat(arr.slice(i + 1)));
    for (var j = 0; j < subPerms.length; j++) {
      subPerms[j].unshift(arr[i]);
      permutations.push(subPerms[j]);
    }
  }
  return permutations;
}
 ",FALSE,"jest.dontMock('../resolve-styles.js');

var MouseUpListener = require('../mouse-up-listener.js');
var merge = require('lodash/object/merge');
var resolveStyles = require('../resolve-styles.js');

function genComponent() {
  return {
    setState: jest.genMockFunction().mockImplementation(function(newState) {
      this.state = merge(this.state, newState);
    }),
    state: {}
  };
}

describe('resolveStyles', function() {

  beforeEach(function() {
    MouseUpListener.subscribe = jest.genMockFunction();
  });

  describe('no-op behavior', function() {

    it('handles null rendered element', function() {
      var component = genComponent();

      var result = resolveStyles(component, null);
    });

    it('doesn\'t explode', function() {
      var component = genComponent();
      var renderedElement = {props: {}};

      var result = resolveStyles(component, renderedElement);

      expect(result).toBe(renderedElement);
      expect(result.props).toBe(renderedElement.props);
    });

    it('passes through normal style objects', function() {
      var component = genComponent();
      var renderedElement = {props: {style: {color: 'blue'}}};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).toBe(renderedElement.props.style);
    });

    it('passes through normal style objects of children', function() {
      var component = genComponent();
      var renderedElement = {props: {
        children: [{
          _isReactElement: true,
          props: {style: {color: 'blue'}},
        }]
      }};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.children[0].props.style)
        .toBe(renderedElement.props.children[0].props.style);
    });

    it('ignores invalid children', function() {
      var component = genComponent();
      var renderedElement = {props: {
        children: [{
          props: {style: {color: 'blue'}},
        }]
      }};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.children[0].props.style)
        .toBe(renderedElement.props.children[0].props.style);
    });

  });

  describe('style array', function() {

    it('merges an array of style objects', function() {
      var component = genComponent();
      var renderedElement = {props: {style: [
        {background: 'white'},
        {color: 'blue'},
      ]}};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).toEqual({
        background: 'white',
        color: 'blue'
      });
    });

    it('skips falsy and non-object entries', function() {
      var component = genComponent();
      var renderedElement = {props: {style: [
        {background: 'white'},
        false,
        null,
        undefined,
        '',
        [1,2,3],
        {color: 'blue'},
      ]}};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).toEqual({
        background: 'white',
        color: 'blue'
      });
    });

    it('overwrites earlier styles with later ones', function() {
      var component = genComponent();
      var renderedElement = {props: {style: [
        {background: 'white'},
        {background: 'blue'},
      ]}};

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).toEqual({
        background: 'blue'
      });
    });

    it('merges nested special styles', function() {
      var component = genComponent();
      var getRenderedElement = function() {
        return {props: {style: [
          {':hover': { background: 'white'}},
          {':hover': {color: 'blue'}},
        ]}};
      };

      var result = resolveStyles(component, getRenderedElement());
      result.props.onMouseEnter();
      result = resolveStyles(component, getRenderedElement());

      expect(result.props.style).toEqual({
        background: 'white',
        color: 'blue'
      });
    });

  });

  describe(':hover', function() {
    createPseduoStyleTests('hover', 'onMouseEnter', 'onMouseLeave');
  });

  describe(':focus', function() {
    createPseduoStyleTests('focus', 'onFocus', 'onBlur');
  });

  describe(':active', function() {
    createPseduoStyleTests('active', 'onMouseDown');

    it('subscribes to mouse up listener', function() {
      var component = genComponent();
      var renderedElement = {props: {style: {
        ':active': {background: 'red'}
      }}};

      var result = resolveStyles(component, renderedElement);

      expect(MouseUpListener.subscribe).toBeCalled();
    });

    it('adds active styles on mouse down', function() {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };

      var result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('blue');

      result.props.onMouseDown();

      // Must create a new renderedElement each time, same as React, since
      // resolveStyles mutates
      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('red');
    });

    it('removes active styles on mouse up', function() {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };

      var result = resolveStyles(component, {props: {style: style}});

      result.props.onMouseDown();

      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('red');

      // tigger global mouseup handler
      MouseUpListener.subscribe.mock.calls[0][0]();

      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('blue');
    });

    it('ignores mouse up if no active styles', function() {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };

      var result = resolveStyles(component, {props: {style: style}});

      result.props.onMouseDown();

      // tigger global mouseup handler
      MouseUpListener.subscribe.mock.calls[0][0]();
      MouseUpListener.subscribe.mock.calls[0][0]();

      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('blue');
    });

    it('calls existing onMouseDown handler', function() {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };

      var originalOnMouseDown = jest.genMockFunction();

      var result = resolveStyles(
        component,
        {
          props: {
            onMouseDown: originalOnMouseDown,
            style: style
          }
        }
      );

      result.props.onMouseDown();

      expect(originalOnMouseDown).toBeCalled();

      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('red');
    });
  });

  function createPseduoStyleTests(pseudo, onHandlerName, offHandlerName) {

    it('strips special styles if not applied', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var result = resolveStyles(component, {props: {style: style}});

      expect(result.props.style).toEqual({background: 'blue'});
    });

    it('adds appropriate handlers for ' + pseudo + ' styles', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var result = resolveStyles(component, {props: {style: style}});

      expect(typeof result.props[onHandlerName]).toBe('function');
      if (offHandlerName) {
        expect(typeof result.props[offHandlerName]).toBe('function');
      }
    });

    it('adds ' + pseudo + ' styles ' + onHandlerName, function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('blue');

      result.props[onHandlerName]();

      expect(component.setState).toBeCalled();

      // Must create a new renderedElement each time, same as React, since
      // resolveStyles mutates
      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('red');
    });

    it('throws if multiple elements have the same key', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var getRenderedElement = function() {
        return {props: {children: [
          {_isReactElement: true, key: 'foo', props: {style: style}},
          {_isReactElement: true, key: 'foo', props: {style: style}},
        ]}};
      };

      expect(function() {
        resolveStyles(component, getRenderedElement());
      }).toThrow();
    });

    it('throws if multiple elements have no key', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var getRenderedElement = function() {
        return {props: {children: [
          {_isReactElement: true, props: {style: style}},
          {_isReactElement: true, props: {style: style}},
        ]}};
      };

      expect(function() {
        resolveStyles(component, getRenderedElement());
      }).toThrow();
    });

    it('adds ' + pseudo + ' styles to correct element by key', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var getRenderedElement = function() {
        return {props: {children: [
          {_isReactElement: true, key: 'foo', props: {}},
          {_isReactElement: true, key: 'bar', props: {style: style}},
        ]}};
      };

      var result = resolveStyles(component, getRenderedElement());
      expect(result.props.children[0].props.style).toEqual(null);
      expect(result.props.children[1].props.style.background).toEqual('blue');

      result.props.children[1].props[onHandlerName]();

      result = resolveStyles(component, getRenderedElement());
      expect(result.props.children[0].props.style).toEqual(null);
      expect(result.props.children[1].props.style.background).toEqual('red');
    });

    it('adds ' + pseudo + ' styles to correct element by ref', function() {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var getRenderedElement = function() {
        return {props: {children: [
          {_isReactElement: true, ref: 'foo', props: {}},
          {_isReactElement: true, ref: 'bar', props: {style: style}},
        ]}};
      };

      var result = resolveStyles(component, getRenderedElement());
      expect(result.props.children[0].props.style).toEqual(null);
      expect(result.props.children[1].props.style.background).toEqual('blue');

      result.props.children[1].props[onHandlerName]();

      result = resolveStyles(component, getRenderedElement());
      expect(result.props.children[0].props.style).toEqual(null);
      expect(result.props.children[1].props.style.background).toEqual('red');
    });

    if (offHandlerName) {
      it('removes ' + pseudo + ' styles ' + offHandlerName, function() {
        var component = genComponent();
        var style = {background: 'blue'};
        style[':' + pseudo] = {background: 'red'};

        var result = resolveStyles(component, {props: {style: style}});

        result.props[onHandlerName]();

        result = resolveStyles(component, {props: {style: style}});
        expect(result.props.style.background).toEqual('red');

        result.props[offHandlerName]();

        expect(component.setState).toBeCalled();

        result = resolveStyles(component, {props: {style: style}});
        expect(result.props.style.background).toEqual('blue');
      });
    }

    it('calls existing ' + onHandlerName + ' handler', function() {
      var component = genComponent();
      var originalOnHandler = jest.genMockFunction();

      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var renderedElement = {props: {style: style}};
      renderedElement.props[onHandlerName] = originalOnHandler;

      var result = resolveStyles(component, renderedElement);

      result.props[onHandlerName]();

      expect(originalOnHandler).toBeCalled();

      result = resolveStyles(component, {props: {style: style}});
      expect(result.props.style.background).toEqual('red');
    });

    if (offHandlerName) {
      it('calls existing ' + offHandlerName + ' handler', function() {
        var component = genComponent();
        var originalOffHandler = jest.genMockFunction();

        var style = {background: 'blue'};
        style[':' + pseudo] = {background: 'red'};
        style[offHandlerName] = originalOffHandler;

        var renderedElement = {props: {style: style}};
        renderedElement.props[offHandlerName] = originalOffHandler;

        var result = resolveStyles(component, renderedElement);

        result.props[onHandlerName]();
        result.props[offHandlerName]();

        expect(originalOffHandler).toBeCalled();

        result = resolveStyles(component, {props: {style: style}});
        expect(result.props.style.background).toEqual('blue');
      });
    }

  }

  describe('media queries', function() {
    beforeEach(function() {
      resolveStyles.__clearStateForTests();
    });

    it('listens for media queries', function() {
      var component = genComponent();
      var addListener = jest.genMockFunction();
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return {addListener: addListener};
      });

      var getRenderedElement = function() {
        return {props: {style: {
          '(max-width: 400px)': {background: 'red'}
        }}};
      };

      var result = resolveStyles(component, getRenderedElement());
      expect(window.matchMedia).lastCalledWith('(max-width: 400px)');
      expect(addListener).lastCalledWith(jasmine.any('function'));
    });

    it('only listens once for a single element', function() {
      var component = genComponent();
      var addListener = jest.genMockFunction();
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return {addListener: addListener};
      });

      var getRenderedElement = function() {
        return {props: {style: {
          '(max-width: 400px)': {background: 'red'}
        }}};
      };

      resolveStyles(component, getRenderedElement());
      resolveStyles(component, getRenderedElement());

      expect(window.matchMedia.mock.calls.length).toBe(1);
      expect(addListener.mock.calls.length).toBe(1);
    });

    it('listens once per component', function() {
      var component1 = genComponent();
      var component2 = genComponent();
      var addListener = jest.genMockFunction();
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return {addListener: addListener};
      });

      var getRenderedElement = function() {
        return {props: {children: [
          {
            _isReactElement: true,
            key: 'first',
            props: {style: {'(max-width: 400px)': {background: 'red'}}}
          },
          {
            _isReactElement: true,
            key: 'second',
            props: {style: {'(max-width: 400px)': {background: 'red'}}}
          },
        ]}};
      };

      resolveStyles(component1, getRenderedElement());
      resolveStyles(component2, getRenderedElement());

      expect(window.matchMedia.mock.calls.length).toBe(1);
      expect(addListener.mock.calls.length).toBe(2);
    });

    it('applies styles when media query matches', function() {
      var component = genComponent();
      var addListener = jest.genMockFunction();
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return {
          addListener: addListener,
          matches: true,
        };
      });

      var getRenderedElement = function() {
        return {props: {style: {
          background: 'blue',
          '(max-width: 400px)': {background: 'red'}
        }}};
      };

      var result = resolveStyles(component, getRenderedElement());
      expect(result.props.style.background).toEqual('red');
    });

    it('calls component setState when media query changes', function() {
      var component1 = genComponent();
      var component2 = genComponent();
      var listeners = [];
      var addListener = jest.genMockFunction().mockImplementation(
        function(listener) {
          listeners.push(listener);
        }
      );
      var mql = {addListener: addListener};
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return mql;
      });

      var getRenderedElement = function() {
        return {props: {style: {
          background: 'blue',
          '(max-width: 400px)': {background: 'red'}
        }}};
      };

      resolveStyles(component1, getRenderedElement());
      resolveStyles(component2, getRenderedElement());

      listeners.forEach(function(listener) { listener(mql); });

      expect(component1.setState).toBeCalled();
      expect(component2.setState).toBeCalled();
    });

    it('saves listeners on component for later removal', function() {
      var component = genComponent();
      var mql = {
        addListener: jest.genMockFunction(),
        removeListener: jest.genMockFunction(),
      };
      window.matchMedia = jest.genMockFunction().mockImplementation(function() {
        return mql;
      });

      var getRenderedElement = function() {
        return {props: {style: {
          background: 'blue',
          '(max-width: 400px)': {background: 'red'}
        }}};
      };

      resolveStyles(component, getRenderedElement());

      Object.keys(component._radiumMediaQueryListenersByQuery).forEach(
        function(key) {
          component._radiumMediaQueryListenersByQuery[key].remove();
        }
      );

      expect(mql.removeListener).toBeCalled();
    });
  });

  describe.only('multiple states triggered at once', function() {

    describe('applies pseudo styles in the defined order', function() {
      var component = genComponent();
      var stylePermutations = permutate([
        {name: ':active', style: {background: 'red'}},
        {name: ':focus', style: {background: 'yellow'}},
        {name: ':hover', style: {background: 'blue'}},
      ]);
      var onHandlerPermutations = permutate([
        'onFocus',
        'onMouseDown',
        'onMouseEnter',
      ]);

      stylePermutations.forEach(function(pseudoStyles) {
        onHandlerPermutations.forEach(function(onHandlers) {
          createMultiPseudoTest(pseudoStyles, onHandlers);
        });
      });

      function createMultiPseudoTest(pseudoStyles, onHandlers) {
        var name = 'applies pseudo styles in the defined order: ' +
          pseudoStyles.map(function(pseudo) { return pseudo.name; }).join(', ') +
          ' when handlers called in order: ' + onHandlers.join(', ');
        it(name, function() {
          var getRenderedElement = function() {
            var renderedElement = {props: {style: {}}};
            pseudoStyles.forEach(function(pseudo) {
              renderedElement.props.style[pseudo.name] = pseudo.style;
            });
            return renderedElement;
          };

          var result = resolveStyles(component, getRenderedElement());

          onHandlers.forEach(function(onHandler) {
            result.props[onHandler]();
          });

          result = resolveStyles(component, getRenderedElement());

          expect(result.props.style.background).toBe(
            pseudoStyles[pseudoStyles.length - 1].style.background
          );
        });
      }
    });
  });

});

// http://stackoverflow.com/a/25395068/13932
function permutate(arr) {
  var permutations = [];
  if (arr.length === 1) {
    return [arr];
  }

  for (var i = 0; i < arr.length; i++) {
    var subPerms = permutate(arr.slice(0, i).concat(arr.slice(i + 1)));
    for (var j = 0; j < subPerms.length; j++) {
      subPerms[j].unshift(arr[i]);
      permutations.push(subPerms[j]);
    }
  }

  return permutations;
}
","var React = require('react/addons');
var MouseUpListener = require('mouse-up-listener.js');
var objectAssign = require('object-assign');
var resolveStyles = require('inject?-./get-state&-./config!resolve-styles.js')({
  'exenv': require('__mocks__/exenv.js'),
  './prefixer': require('__mocks__/prefixer.js')
});
var Config = require('config.js');

var genComponent = function () {
  return {
    setState: sinon.spy(function (newState) {
      objectAssign(this.state, newState);
    }),
    state: {}
  };
};

// http://stackoverflow.com/a/25395068/13932
var permutate = function (arr) {
  var permutations = [];
  if (arr.length === 1) {
    return [arr];
  }

  for (var i = 0; i < arr.length; i++) {
    var subPerms = permutate(arr.slice(0, i).concat(arr.slice(i + 1)));
    for (var j = 0; j < subPerms.length; j++) {
      subPerms[j].unshift(arr[i]);
      permutations.push(subPerms[j]);
    }
  }

  return permutations;
};

var getChildrenArray = function (children) {
  var childrenArray = [];
  React.Children.forEach(children, function (child) {
    childrenArray.push(child);
  });
  return childrenArray;
};

describe('resolveStyles', function () {

  beforeEach(function () {
    MouseUpListener.subscribe = sinon.spy();
  });

  describe('no-op behavior', function () {

    it('handles null rendered element', function () {
      var component = genComponent();

      resolveStyles(component, null);
    });

    it('doesn\'t explode', function () {
      var component = genComponent();
      var renderedElement = <div />;

      var result = resolveStyles(component, renderedElement);

      expect(result).to.equal(renderedElement);
      expect(result.props).to.equal(renderedElement.props);
    });

    it('passes through normal style objects', function () {
      var component = genComponent();
      var renderedElement = <div style={{color: 'blue'}} />;

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal(renderedElement.props.style);
    });

    it('passes through normal style objects of children', function () {
      var component = genComponent();
      var style = {color: 'blue'};
      var renderedElement = (
        <div>
          <div style={style} />
        </div>
      );

      var result = resolveStyles(component, renderedElement);
      var children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.deep.equal(style);
    });

    it('doesn\'t wrap string children in spans', function () {
      var component = genComponent();
      var renderedElement = <div>Hello</div>;

      var result = resolveStyles(component, renderedElement);
      expect(result.props.children).to.equal('Hello');
    });

    it('doesn\'t wrap number children in spans', function () {
      var component = genComponent();
      var renderedElement = <div>{88347}</div>;

      var result = resolveStyles(component, renderedElement);
      expect(result.props.children).to.equal(88347);
    });

    it('ignores invalid children', function () {
      var component = genComponent();

      // JSX won't let this through, so do it with a plain object instead
      var renderedElement = {props: {
        children: [null]
      }};

      var result = resolveStyles(component, renderedElement);
      var children = getChildrenArray(result.props.children);

      expect(children[0]).to.be.null;
    });

    it('only processes an element once', function () {
      sinon.spy(React, 'cloneElement');

      var component = genComponent();
      var renderedElement = (
        <div style={[
          {background: 'white'},
          {color: 'blue'}
        ]} />
      );

      var result = resolveStyles(component, renderedElement);
      result = resolveStyles(component, result);

      expect(result.props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });

      expect(React.cloneElement).to.have.been.calledOnce;

      React.cloneElement.restore();
    });

  });

  describe('style array', function () {

    it('merges an array of style objects', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={[
          {background: 'white'},
          {color: 'blue'}
        ]} />
      );

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });
    });

    it('skips falsy and non-object entries', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={[
          {background: 'white'},
          false,
          null,
          ''.someUndefinedVar,
          '',
          [1, 2, 3],
          {color: 'blue'}
        ]} />
      );

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });
    });

    it('overwrites earlier styles with later ones', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={[
          {background: 'white'},
          {background: 'blue'}
        ]} />
      );

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal({
        background: 'blue'
      });
    });

    it('merges nested special styles', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={[
          {':hover': { background: 'white'}},
          {':hover': {color: 'blue'}}
        ]} />
      );

      var result = resolveStyles(component, renderedElement);
      result.props.onMouseEnter();
      result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });
    });

  });

  var createPseduoStyleTests = function (pseudo, onHandlerName, offHandlerName) {

    it('strips special styles if not applied', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);

      expect(result.props.style).to.deep.equal({background: 'blue'});
    });

    it('adds appropriate handlers for ' + pseudo + ' styles', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);

      expect(typeof result.props[onHandlerName]).to.equal('function');
      if (offHandlerName) {
        expect(typeof result.props[offHandlerName]).to.equal('function');
      }
    });

    it('adds ' + pseudo + ' styles ' + onHandlerName, function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('blue');

      result.props[onHandlerName]();

      expect(component.setState).to.have.been.called;

      // Must create a new renderedElement each time, same as React, since
      // resolveStyles mutates
      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');
    });

    it('throws if multiple elements have the same key', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      // Use ref instead of key here because React.Children.map will discard
      // the duplicate keyed element.
      var renderedElement = (
        <div>
          <div ref=""foo"" style={style} />
          <div ref=""foo"" style={style} />
        </div>
      );

      expect(function () {
        resolveStyles(component, renderedElement);
      }).to.throw();
    });

    it('throws if multiple elements have no key', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var renderedElement = (
        <div>
          <div style={style} />
          <div style={style} />
        </div>
      );

      expect(function () {
        resolveStyles(component, renderedElement);
      }).to.throw();
    });

    it('adds ' + pseudo + ' styles to correct element by key', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var renderedElement = (
        <div>
          <div key=""foo"" />
          <div key=""bar"" style={style} />
        </div>
      );

      var result = resolveStyles(component, renderedElement);
      var children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.be.undefined;
      expect(children[1].props.style.background).to.equal('blue');

      children[1].props[onHandlerName]();

      result = resolveStyles(component, renderedElement);
      children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.be.undefined;
      expect(children[1].props.style.background).to.equal('red');
    });

    it('adds ' + pseudo + ' styles to correct element by ref', function () {
      var component = genComponent();
      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var renderedElement = (
        <div>
          <div ref=""foo"" />
          <div ref=""bar"" style={style} />
        </div>
      );

      var result = resolveStyles(component, renderedElement);
      var children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.be.undefined;
      expect(children[1].props.style.background).to.equal('blue');

      children[1].props[onHandlerName]();

      result = resolveStyles(component, renderedElement);
      children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.be.undefined;
      expect(children[1].props.style.background).to.equal('red');
    });

    if (offHandlerName) {
      it('removes ' + pseudo + ' styles ' + offHandlerName, function () {
        var component = genComponent();
        var style = {background: 'blue'};
        style[':' + pseudo] = {background: 'red'};
        var renderedElement = <div style={style} />;

        var result = resolveStyles(component, renderedElement);

        result.props[onHandlerName]();

        result = resolveStyles(component, renderedElement);
        expect(result.props.style.background).to.equal('red');

        result.props[offHandlerName]();

        expect(component.setState).to.have.been.called;

        result = resolveStyles(component, renderedElement);
        expect(result.props.style.background).to.equal('blue');
      });

      it('doesn\'t mutate state', function () {
        var component = genComponent();
        var style = {background: 'blue'};
        style[':' + pseudo] = {background: 'red'};
        var renderedElement = <div style={style} />;

        var result = resolveStyles(component, renderedElement);

        // Capturing a reference to the existing state is enough, since Radium
        // MUST return a new copy for shouldComponentUpdate.
        var previousState = component.state._radiumStyleState;
        result.props[onHandlerName]();
        // If they are still equal here, that means we mutated the existing
        // state, which will break shouldComponentUpdate.
        expect(component.state._radiumStyleState).not.to.equal(previousState);

        result = resolveStyles(component, renderedElement);

        previousState = component.state._radiumStyleState;
        result.props[offHandlerName]();
        expect(component.state._radiumStyleState).not.to.equal(previousState);
      });
    }

    it('calls existing ' + onHandlerName + ' handler', function () {
      var component = genComponent();
      var originalOnHandler = sinon.spy();

      var style = {background: 'blue'};
      style[':' + pseudo] = {background: 'red'};

      var renderedElement = <div style={style} />;
      renderedElement.props[onHandlerName] = originalOnHandler;

      var result = resolveStyles(component, renderedElement);

      result.props[onHandlerName]();

      expect(originalOnHandler).to.have.been.called;

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');
    });

    if (offHandlerName) {
      it('calls existing ' + offHandlerName + ' handler', function () {
        var component = genComponent();
        var originalOffHandler = sinon.spy();

        var style = {background: 'blue'};
        style[':' + pseudo] = {background: 'red'};
        style[offHandlerName] = originalOffHandler;

        var renderedElement = <div style={style} />;
        renderedElement.props[offHandlerName] = originalOffHandler;

        var result = resolveStyles(component, renderedElement);

        result.props[onHandlerName]();
        result.props[offHandlerName]();

        expect(originalOffHandler).to.have.been.called;

        result = resolveStyles(component, renderedElement);
        expect(result.props.style.background).to.equal('blue');
      });
    }

  };

  describe(':hover', function () {
    createPseduoStyleTests('hover', 'onMouseEnter', 'onMouseLeave');
  });

  describe(':focus', function () {
    createPseduoStyleTests('focus', 'onFocus', 'onBlur');
  });

  describe(':active', function () {
    createPseduoStyleTests('active', 'onMouseDown');

    it('subscribes to mouse up listener', function () {
      var component = genComponent();
      var renderedElement = <div style={{':active': {background: 'red'}}} />;

      resolveStyles(component, renderedElement);

      expect(MouseUpListener.subscribe).to.have.been.called;
    });

    it('adds active styles on mouse down', function () {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('blue');

      result.props.onMouseDown();


      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');
    });

    it('removes active styles on mouse up', function () {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);

      result.props.onMouseDown();

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');

      // tigger global mouseup handler
      MouseUpListener.subscribe.firstCall.args[0]();

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('blue');
    });

    it('ignores mouse up if no active styles', function () {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };
      var renderedElement = <div style={style} />;

      var result = resolveStyles(component, renderedElement);

      result.props.onMouseDown();

      // tigger global mouseup handler
      MouseUpListener.subscribe.firstCall.args[0]();
      MouseUpListener.subscribe.firstCall.args[0]();

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('blue');
    });

    it('calls existing onMouseDown handler', function () {
      var component = genComponent();
      var style = {
        background: 'blue',
        ':active': {background: 'red'}
      };
      var originalOnMouseDown = sinon.spy();
      var renderedElement = (
        <div
          onMouseDown={originalOnMouseDown}
          style={style}
        />
      );

      var result = resolveStyles(component, renderedElement);

      result.props.onMouseDown();

      expect(originalOnMouseDown).to.have.been.called;

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');
    });
  });

  describe('media queries', function () {
    beforeEach(function () {
      resolveStyles.__clearStateForTests();
    });

    it('listens for media queries', function () {
      var component = genComponent();
      var addListener = sinon.spy();
      var matchMedia = sinon.spy(function () {
        return {addListener: addListener};
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={{
          '@media (max-width: 400px)': {background: 'red'}
        }} />
      );

      resolveStyles(component, renderedElement);
      expect(matchMedia.lastCall.args[0]).to.equal('(max-width: 400px)');
      expect(addListener.lastCall.args[0]).to.be.a('function');
    });

    it('only listens once for a single element', function () {
      var component = genComponent();
      var addListener = sinon.spy();
      var matchMedia = sinon.spy(function () {
        return {addListener: addListener};
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={{
          '@media (max-width: 400px)': {background: 'red'}
        }} />
      );

      resolveStyles(component, renderedElement);
      resolveStyles(component, renderedElement);

      expect(matchMedia).to.have.been.calledOnce;
      expect(addListener).to.have.been.calledOnce;
    });

    it('listens once per component', function () {
      var component1 = genComponent();
      var component2 = genComponent();
      var addListener = sinon.spy();
      var matchMedia = sinon.spy(function () {
        return {addListener: addListener};
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div>
          <div
            key=""first""
            style={{'@media (max-width: 400px)': {background: 'red'}}}
          />
          <div
            key=""second""
            style={{'@media (max-width: 400px)': {background: 'red'}}}
          />
        </div>
      );

      resolveStyles(component1, renderedElement);
      resolveStyles(component2, renderedElement);

      expect(matchMedia).to.have.been.calledOnce;
      expect(addListener).to.have.been.calledTwice;
    });

    it('applies styles when media query matches', function () {
      var component = genComponent();
      var matchMedia = sinon.spy(function () {
        return {
          addListener: sinon.spy(),
          matches: true
        };
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={{
          background: 'blue',
          '@media (max-width: 400px)': {background: 'red'}
        }} />
      );

      var result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');
    });

    it('merges nested pseudo styles', function () {
      var component = genComponent();
      var matchMedia = sinon.spy(function () {
        return {
          addListener: sinon.spy(),
          matches: true
        };
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={[
          {
            background: 'blue',
            ':hover': {
              background: 'green',
              color: 'green'
            },
            '@media (max-width: 400px)': {
              background: 'red',
              ':hover': {
                background: 'yellow'
              }
            }
          },
          {
            '@media (max-width: 400px)': {
              ':hover': {
                color: 'white'
              }
            }
          }
        ]} />
      );

      var result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('red');

      result.props.onMouseEnter();

      result = resolveStyles(component, renderedElement);
      expect(result.props.style.background).to.equal('yellow');
      expect(result.props.style.color).to.equal('white');
    });

    it('calls component setState when media query changes', function () {
      var component1 = genComponent();
      var component2 = genComponent();
      var listeners = [];
      var addListener = sinon.spy(
        function (listener) {
          listeners.push(listener);
        }
      );
      var mql = {addListener: addListener};
      var matchMedia = sinon.spy(function () {
        return mql;
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={{
          background: 'blue',
          '@media (max-width: 400px)': {background: 'red'}
        }} />
      );

      resolveStyles(component1, renderedElement);
      resolveStyles(component2, renderedElement);

      listeners.forEach(function (listener) { listener(mql); });

      expect(component1.setState).to.have.been.called;
      expect(component2.setState).to.have.been.called;
    });

    it('saves listeners on component for later removal', function () {
      var component = genComponent();
      var mql = {
        addListener: sinon.spy(),
        removeListener: sinon.spy()
      };
      var matchMedia = sinon.spy(function () {
        return mql;
      });
      Config.setMatchMedia(matchMedia);

      var renderedElement = (
        <div style={{
          background: 'blue',
          '@media (max-width: 400px)': {background: 'red'}
        }} />
      );

      resolveStyles(component, renderedElement);

      Object.keys(component._radiumMediaQueryListenersByQuery).forEach(
        function (key) {
          component._radiumMediaQueryListenersByQuery[key].remove();
        }
      );

      expect(mql.removeListener).to.have.been.called;
    });
  });

  describe('multiple states triggered at once', function () {

    describe('applies pseudo styles in the defined order', function () {
      var component = genComponent();
      var stylePermutations = permutate([
        {name: ':active', style: {background: 'red'}},
        {name: ':focus', style: {background: 'yellow'}},
        {name: ':hover', style: {background: 'blue'}}
      ]);
      var onHandlerPermutations = permutate([
        'onFocus',
        'onMouseDown',
        'onMouseEnter'
      ]);

      var createMultiPseudoTest = function (pseudoStyles, onHandlers) {
        var name = 'applies pseudo styles in the defined order: ' +
          pseudoStyles.map(function (pseudo) { return pseudo.name; }).join(', ') +
          ' when handlers called in order: ' + onHandlers.join(', ');
        it(name, function () {
          var style = {};
          pseudoStyles.forEach(function (pseudo) {
            style[pseudo.name] = pseudo.style;
          });
          var renderedElement = <div style={style} />;

          var result = resolveStyles(component, renderedElement);

          onHandlers.forEach(function (onHandler) {
            result.props[onHandler]();
          });

          result = resolveStyles(component, renderedElement);

          expect(result.props.style.background).to.equal(
            pseudoStyles[pseudoStyles.length - 1].style.background
          );
        });
      };

      stylePermutations.forEach(function (pseudoStyles) {
        onHandlerPermutations.forEach(function (onHandlers) {
          createMultiPseudoTest(pseudoStyles, onHandlers);
        });
      });
    });
  });

  describe('React.Children.only', function () {
    it('doesn\'t break React.Children.only', function () {
      var component = genComponent();
      var renderedElement = <div><span /></div>;

      var result = resolveStyles(component, renderedElement);

      expect(React.Children.only(result.props.children)).to.be.ok;
    });

    it('doesn\'t break when only child isn\'t ReactElement', function () {
      var component = genComponent();
      var renderedElement = <div>Foo</div>;

      resolveStyles(component, renderedElement);
    });
  });

  describe('ReactComponentElement children', function () {
    it('doesn\'t resolve ReactComponentElement children', function () {
      var component = genComponent();
      class CustomComponent extends React.Component {}
      var style = {':hover': {}};
      var renderedElement = (
        <div>
          <CustomComponent style={style}/>
        </div>
      );

      var result = resolveStyles(component, renderedElement);
      var children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.deep.equal(style);
    });

    it('resolves ReactDOMElement children of ReactComponentElements', function () {
      var component = genComponent();
      class CustomComponent extends React.Component {}
      var style = [
        {background: 'white'},
        {color: 'blue'}
      ];
      var renderedElement = (
        <div style={style}>
          <CustomComponent style={style}>
            <div style={style} />
          </CustomComponent>
        </div>
      );

      var result = resolveStyles(component, renderedElement);
      expect(result.props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });

      var children = getChildrenArray(result.props.children);
      expect(children[0].props.style).to.deep.equal(style);

      var componentChildren = getChildrenArray(children[0].props.children);
      expect(componentChildren[0].props.style).to.deep.equal({
        background: 'white',
        color: 'blue'
      });
    });
  });

  /* eslint-disable no-console */
  describe('warnings', function () {
    beforeEach(function () {
      sinon.stub(console, 'warn');
    });

    afterEach(function () {
      console.warn.restore();
      process.env.NODE_ENV = null;
    });

    it('warns when mixing longhand and shorthand properties', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={{
          border: '1px solid black',
          borderWidth: '0 1px 1px 1px'
        }} />
      );

      resolveStyles(component, renderedElement);

      expect(console.warn).to.have.been.called;
      expect(console.warn.firstCall.args[0].indexOf('border'))
        .to.be.greaterThan(0);
    });

    it('warns when mixing longhand and shorthand properties in nested styles', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={{
          ':hover': {
            border: '1px solid black',
            borderWidth: '0 1px 1px 1px'
          }
        }} />
      );

      resolveStyles(component, renderedElement);

      expect(console.warn).to.have.been.called;
      expect(console.warn.firstCall.args[0].indexOf('border'))
        .to.be.greaterThan(0);
    });

    it('does not warn when mixing border and borderRadius', function () {
      var component = genComponent();
      var renderedElement = (
        <div style={{
          border: '1px solid black',
          borderRadius: '5px'
        }} />
      );

      resolveStyles(component, renderedElement);

      expect(console.warn).to.not.have.been.called;
    });

    it('does not throw when passed a falsy entry value', function () {
      var component = genComponent();
      var renderedElement = <div style={{height: null }} />;

      expect(function () {
        resolveStyles(component, renderedElement);
      }).to.not.throw();
    });
  });
  /* eslint-enable no-console */
});
",FALSE,,5122
5080,InitialSO.csv5080.txt,InitialGit.csv5080.txt,3,"synchronized(){} synchronized synchronized synchronized private  public class SharedFile
 {
      private final File path;
      private final Object lock = new Object();

      public SharedFile(File path) {
         this.path = path;
      }

      public void process(.....) throws IOException {
         synchronized(lock) {
            try(InputStream = new FileInputStream(path)) {
               ....
            }
         }
      }
 }
 ","synchronized(){} synchronized synchronized synchronized private  public class SharedFile
 {
      private final File path;
      private final Object lock = new Object();

      public SharedFile(File path) {
         this.path = path;
      }

      public void process(.....) throws IOException {
         synchronized(lock) {
            try(InputStream = new FileInputStream(path)) {
               ....
            }
         }
      }
 }
 ",TRUE,"package com.marginallyclever.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;

import org.jetbrains.annotations.NotNull;

import com.marginallyclever.makelangelo.Log;

/**
 * Created on 6/7/15.
 *
 * @author Peter Colapietro
 * @see <a href=""http://www.davidc.net/programming/java/java-preferences-using-file-backing-store"">Java Preferences using a file as the backing store</a>
 * @see <a href=""http://stackoverflow.com/a/25548386"">SO answer to: How to synchronize file access in a Java servlet?</a>
 * @since v7.1.4
 */
public class MarginallyCleverPreferences extends AbstractPreferences implements Ancestryable {

  /**
   *
   */
  private final Map<String, String> root;

  /**
   *
   */
  private final Map<String, Preferences> children;

  /**
   *
   */
  private boolean thisIsRemoved;

  /**
   *
   */
  private final Object mutex = new Object();

  /**
   * Creates a preference node with the specified parent and the specified
   * name relative to its parent.
   *
   * @param parent the parent of this preference node, or null if this
   *               is the root.
   * @param name   the name of this preference node, relative to its parent,
   *               or <tt>""""</tt> if this is the root.
   * @throws IllegalArgumentException if <tt>name</tt> contains a slash
   *                                  (<tt>'/'</tt>),  or <tt>parent</tt> is <tt>null</tt> and
   *                                  name isn't <tt>""""</tt>.
   */
  public MarginallyCleverPreferences(AbstractPreferences parent, String name) {
    super(parent, name);
    Log.message(""Instantiating node ""+ name);
    root = new TreeMap<>();
    children = new TreeMap<>();
    try {
      sync();
    } catch (BackingStoreException e) {
      Log.error(""Unable to sync on creation of node ""+name+"". ""+e);
    }
  }

  @Override
  protected void putSpi(@NotNull String key, String value) {
    root.put(key, value);
    try {
      flush();
    } catch (BackingStoreException e) {
    	Log.error(""Unable to flush after putting ""+key+"". ""+e);
    }
  }

  @Override
  protected String getSpi(@NotNull String key) {
    return root.get(key);
  }

  @Override
  protected void removeSpi(@NotNull String key) {
    root.remove(key);
    try {
      flush();
    } catch (BackingStoreException e) {
    	Log.error(""Unable to flush after removing ""+key+"". ""+e);
    }
  }

  @Override
  protected void removeNodeSpi() throws BackingStoreException {
    flush();
    thisIsRemoved = true;
  }

  @NotNull
  @Override
  protected String[] keysSpi() throws BackingStoreException {
    final Set<String> keySet = root.keySet();
    return keySet.toArray(new String[keySet.size()]);
  }

  @NotNull
  @Override
  protected String[] childrenNamesSpi() throws BackingStoreException {
    final Set<String> childrenNames = children.keySet();
    return childrenNames.toArray(new String[childrenNames.size()]);
  }

  /**
   * http://stackoverflow.com/a/24249709
   *
   * @param name
   * @return
   */
  @NotNull
  @Override
  protected AbstractPreferences childSpi(@NotNull String name) {
	AbstractPreferences childPreferenceNode = (AbstractPreferences) children.get(name);
    boolean isChildRemoved = false;
    if (childPreferenceNode != null) {
      try {
        isChildRemoved = getIsRemoved(childPreferenceNode);
      } catch (ReflectiveOperationException e) {
        Log.error( e.getMessage() );
      }
    }
    if (childPreferenceNode == null || isChildRemoved) {
      final AbstractPreferences castedPreferences = new MarginallyCleverPreferences(this, name);
      childPreferenceNode = castedPreferences;
      children.put(name, childPreferenceNode);
    }
    return childPreferenceNode;
  }

  /**
   * FIXME - Pure hack to get around erasure.
   *
   * @param abstractPreference
   * @return
   * @throws ReflectiveOperationException
   */
  private boolean getIsRemoved(AbstractPreferences abstractPreference) throws ReflectiveOperationException {
    Log.message( abstractPreference.toString() );
    final Method declaredMethod = AbstractPreferences.class.getDeclaredMethod(""isRemoved"");
    declaredMethod.setAccessible(true);
    Object isRemoved = declaredMethod.invoke(abstractPreference, new Object[]{null});
    return (boolean) isRemoved;
  }

  @Override
  protected void syncSpi() throws BackingStoreException {
    if (isRemoved()) {
      return;
    }
    final File propertiesPreferencesFile = MarginallyCleverPreferencesFileFactory.getPropertiesPreferencesFile();
    if (!propertiesPreferencesFile.exists()) {
      return;
    }
    synchronized (mutex) {
      final Properties p = new Properties();
      try {
        try (final InputStream inStream = new FileInputStream(propertiesPreferencesFile)) {
          p.load(inStream);
        }

        final StringBuilder sb = new StringBuilder();
        getPath(sb);
        final String path = sb.toString();

        final Enumeration<?> propertyNames = p.propertyNames();
        while (propertyNames.hasMoreElements()) {
          final String propKey = (String) propertyNames.nextElement();
          if (propKey.startsWith(path)) {
            final String subKey = propKey.substring(path.length());
            // Only load immediate descendants
            if (subKey.indexOf('.') == -1) {
              root.put(subKey, p.getProperty(propKey));
            }
          }
        }
      } catch (IOException e) {
        throw new BackingStoreException(e);
      }
    }
  }

  @Override
  protected void flushSpi() throws BackingStoreException {
    final File xmlPreferencesFile = MarginallyCleverPreferencesFileFactory.getXmlPreferencesFile();
    final File file = MarginallyCleverPreferencesFileFactory.getPropertiesPreferencesFile();
    synchronized (mutex) {
      try {
        final Properties p = new Properties();
        final StringBuilder sb = new StringBuilder();
        getPath(sb);
        final String path = sb.toString();
        if (file.exists()) {
          try (final InputStream fileInputStream = new FileInputStream(file)) {
            p.load(fileInputStream);
          }

          final List<String> toRemove = new ArrayList<>();

          // Make a list of all direct children of this node to be removed
          final Enumeration<?> pnen = p.propertyNames();
          while (pnen.hasMoreElements()) {
            final String propKey = (String) pnen.nextElement();
            if (propKey.startsWith(path)) {
              final String subKey = propKey.substring(path.length());
              // Only do immediate descendants
              if (subKey.indexOf('.') == -1) {
                toRemove.add(propKey);
              }
            }
          }

          // Remove them now that the enumeration is done with
          for (String propKey : toRemove) {
            p.remove(propKey);
          }
        }
        // If this node hasn't been removed, add back in any values
        if (!thisIsRemoved) {
          for (String s : root.keySet()) {
            p.setProperty(path + s, root.get(s));
          }
          storePreferencesInFile(file, p);
          storeNodeInFile(xmlPreferencesFile);
        }
      } catch (IOException e) {
        throw new BackingStoreException(e);
      }
    }
  }

  private void storeNodeInFile(File file) throws IOException, BackingStoreException {
    final Preferences parent = recursiveGetParent(this.parent() != null ? this.parent() : this);
    try (final OutputStream fileOutputStream = new FileOutputStream(file)) {
      parent.exportNode(fileOutputStream);
    }
  }

  private Preferences recursiveGetParent(Preferences node) {
    Preferences parent = node.parent();
    if (parent == null) {
      node = parent;
    } else {
      recursiveGetParent(parent);
    }
    return node;
  }

  /**
   * @param file
   * @param p
   * @throws IOException
   */
  private void storePreferencesInFile(File file, Properties p) throws IOException, BackingStoreException {
    final String marginallyCleverPreferencesFileComments = ""MarginallyCleverPreferences"";
    try (final OutputStream fileOutputStream = new FileOutputStream(file)) {
      p.store(fileOutputStream, marginallyCleverPreferencesFileComments);
    }
  }

  /**
   * @param sb String builder
   */
  private void getPath(StringBuilder sb) {
    MarginallyCleverPreferences parent = null;
    try {
      parent = (MarginallyCleverPreferences) parent();
    } catch (ClassCastException e) {
      //logger.info(""NOOP"");
    }
    if (parent == null) {
      return;
    }
    parent.getPath(sb);
    sb.append(name()).append('.');
  }

  /**
   * @return
   */
  @Override
  public Map<String, Preferences> getChildren() {
    return new TreeMap<>(children);
  }

  /**
   * @return
   */
  @Override
  public Map<String, String> getRoot() {
    return new TreeMap<>(root);
  }

}
","package com.marginallyclever.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;

import org.jetbrains.annotations.NotNull;

import com.marginallyclever.robotOverlord.Log;

/**
 * Created on 6/7/15.
 *
 * @author Peter Colapietro
 * See <a href=""http://www.davidc.net/programming/java/java-preferences-using-file-backing-store"">Java Preferences using a file as the backing store</a>
 * See <a href=""http://stackoverflow.com/a/25548386"">SO answer to: How to synchronize file access in a Java servlet?</a>
 * @since v7.1.4
 */
public class MarginallyCleverPreferences extends AbstractPreferences implements Ancestryable {

  /**
   *
   */
  private final Map<String, String> root;

  /**
   *
   */
  private final Map<String, Preferences> children;

  /**
   *
   */
  private boolean thisIsRemoved;

  /**
   *
   */
  private final Object mutex = new Object();

  /**
   * Creates a preference node with the specified parent and the specified
   * name relative to its parent.
   *
   * @param parent the parent of this preference node, or null if this
   *               is the root.
   * @param name   the name of this preference node, relative to its parent,
   *               or <tt>""""</tt> if this is the root.
   * @throws IllegalArgumentException if <tt>name</tt> contains a slash
   *                                  (<tt>'/'</tt>),  or <tt>parent</tt> is <tt>null</tt> and
   *                                  name isn't <tt>""""</tt>.
   */
  public MarginallyCleverPreferences(AbstractPreferences parent, String name) {
    super(parent, name);
    Log.message(""Instantiating node ""+ name);
    root = new TreeMap<>();
    children = new TreeMap<>();
    try {
      sync();
    } catch (BackingStoreException e) {
      Log.error(""Unable to sync on creation of node ""+name+"". ""+e);
    }
  }

  @Override
  protected void putSpi(@NotNull String key, String value) {
    root.put(key, value);
    try {
      flush();
    } catch (BackingStoreException e) {
    	Log.error(""Unable to flush after putting ""+key+"". ""+e);
    }
  }

  @Override
  protected String getSpi(@NotNull String key) {
    return root.get(key);
  }

  @Override
  protected void removeSpi(@NotNull String key) {
    root.remove(key);
    try {
      flush();
    } catch (BackingStoreException e) {
    	Log.error(""Unable to flush after removing ""+key+"". ""+e);
    }
  }

  @Override
  protected void removeNodeSpi() throws BackingStoreException {
    flush();
    thisIsRemoved = true;
  }

  @NotNull
  @Override
  protected String[] keysSpi() throws BackingStoreException {
    final Set<String> keySet = root.keySet();
    return keySet.toArray(new String[keySet.size()]);
  }

  @NotNull
  @Override
  protected String[] childrenNamesSpi() throws BackingStoreException {
    final Set<String> childrenNames = children.keySet();
    return childrenNames.toArray(new String[childrenNames.size()]);
  }

  /**
   * http://stackoverflow.com/a/24249709
   *
   * @param name
   * @return
   */
  @NotNull
  @Override
  protected AbstractPreferences childSpi(@NotNull String name) {
	AbstractPreferences childPreferenceNode = (AbstractPreferences) children.get(name);
    boolean isChildRemoved = false;
    if (childPreferenceNode != null) {
      try {
        isChildRemoved = getIsRemoved(childPreferenceNode);
      } catch (ReflectiveOperationException e) {
        Log.error( e.getMessage() );
      }
    }
    if (childPreferenceNode == null || isChildRemoved) {
      final AbstractPreferences castedPreferences = new MarginallyCleverPreferences(this, name);
      childPreferenceNode = castedPreferences;
      children.put(name, childPreferenceNode);
    }
    return childPreferenceNode;
  }

  /**
   * FIXME - Pure hack to get around erasure.
   *
   * @param abstractPreference
   * @return
   * @throws ReflectiveOperationException
   */
  private boolean getIsRemoved(AbstractPreferences abstractPreference) throws ReflectiveOperationException {
    Log.message( abstractPreference.toString() );
    final Method declaredMethod = AbstractPreferences.class.getDeclaredMethod(""isRemoved"");
    declaredMethod.setAccessible(true);
    Object isRemoved = declaredMethod.invoke(abstractPreference, new Object[]{null});
    return (boolean) isRemoved;
  }

  @Override
  protected void syncSpi() throws BackingStoreException {
    if (isRemoved()) {
      return;
    }
    final File propertiesPreferencesFile = MarginallyCleverPreferencesFileFactory.getPropertiesPreferencesFile();
    if (!propertiesPreferencesFile.exists()) {
      return;
    }
    synchronized (mutex) {
      final Properties p = new Properties();
      try {
        try (final InputStream inStream = new FileInputStream(propertiesPreferencesFile)) {
          p.load(inStream);
        }

        final StringBuilder sb = new StringBuilder();
        getPath(sb);
        final String path = sb.toString();

        final Enumeration<?> propertyNames = p.propertyNames();
        while (propertyNames.hasMoreElements()) {
          final String propKey = (String) propertyNames.nextElement();
          if (propKey.startsWith(path)) {
            final String subKey = propKey.substring(path.length());
            // Only load immediate descendants
            if (subKey.indexOf('.') == -1) {
              root.put(subKey, p.getProperty(propKey));
            }
          }
        }
      } catch (IOException e) {
        throw new BackingStoreException(e);
      }
    }
  }

  @Override
  protected void flushSpi() throws BackingStoreException {
    final File xmlPreferencesFile = MarginallyCleverPreferencesFileFactory.getXmlPreferencesFile();
    final File file = MarginallyCleverPreferencesFileFactory.getPropertiesPreferencesFile();
    synchronized (mutex) {
      try {
        final Properties p = new Properties();
        final StringBuilder sb = new StringBuilder();
        getPath(sb);
        final String path = sb.toString();
        if (file.exists()) {
          try (final InputStream fileInputStream = new FileInputStream(file)) {
            p.load(fileInputStream);
          }

          final List<String> toRemove = new ArrayList<>();

          // Make a list of all direct children of this node to be removed
          final Enumeration<?> pnen = p.propertyNames();
          while (pnen.hasMoreElements()) {
            final String propKey = (String) pnen.nextElement();
            if (propKey.startsWith(path)) {
              final String subKey = propKey.substring(path.length());
              // Only do immediate descendants
              if (subKey.indexOf('.') == -1) {
                toRemove.add(propKey);
              }
            }
          }

          // Remove them now that the enumeration is done with
          for (String propKey : toRemove) {
            p.remove(propKey);
          }
        }
        // If this node hasn't been removed, add back in any values
        if (!thisIsRemoved) {
          for (String s : root.keySet()) {
            p.setProperty(path + s, root.get(s));
          }
          storePreferencesInFile(file, p);
          storeNodeInFile(xmlPreferencesFile);
        }
      } catch (IOException e) {
        throw new BackingStoreException(e);
      }
    }
  }

  private void storeNodeInFile(File file) throws IOException, BackingStoreException {
    final Preferences parent = recursiveGetParent(this.parent() != null ? this.parent() : this);
    try (final OutputStream fileOutputStream = new FileOutputStream(file)) {
      parent.exportNode(fileOutputStream);
    }
  }

  private Preferences recursiveGetParent(Preferences node) {
    Preferences parent = node.parent();
    if (parent == null) {
      node = parent;
    } else {
      recursiveGetParent(parent);
    }
    return node;
  }

  /**
   * @param file
   * @param p
   * @throws IOException
   */
  private void storePreferencesInFile(File file, Properties p) throws IOException, BackingStoreException {
    final String marginallyCleverPreferencesFileComments = ""MarginallyCleverPreferences"";
    try (final OutputStream fileOutputStream = new FileOutputStream(file)) {
      p.store(fileOutputStream, marginallyCleverPreferencesFileComments);
    }
  }

  /**
   * @param sb String builder
   */
  private void getPath(StringBuilder sb) {
    MarginallyCleverPreferences parent = null;
    try {
      parent = (MarginallyCleverPreferences) parent();
    } catch (ClassCastException e) {
      //logger.info(""NOOP"");
    }
    if (parent == null) {
      return;
    }
    parent.getPath(sb);
    sb.append(name()).append('.');
  }

  /**
   * @return
   */
  @Override
  public Map<String, Preferences> getChildren() {
    return new TreeMap<>(children);
  }

  /**
   * @return
   */
  @Override
  public Map<String, String> getRoot() {
    return new TreeMap<>(root);
  }

}
",FALSE,,5124
5081,InitialSO.csv5081.txt,InitialGit.csv5081.txt,16,"// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function (event) {
  var that = $(this);

  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}

var onMapClickHandler = function (event) {
  var that = $(this);

  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);

  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");

  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}

// Enable map zooming with mouse scroll when the user clicks the map
$('.maps.embed-container').on('click', onMapClickHandler);
 ","// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function (event) {
  var that = $(this);

  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}

var onMapClickHandler = function (event) {
  var that = $(this);

  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);

  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");

  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}

// Enable map zooming with mouse scroll when the user clicks the map
$('.maps.embed-container').on('click', onMapClickHandler);
 ",TRUE,"(function($) {
  ""use strict""; // Start of use strict

  // Closes the sidebar menu
  $(""#menu-close"").click(function(e) {
    e.preventDefault();
    $(""#sidebar-wrapper"").toggleClass(""active"");
  });

  // Opens the sidebar menu
  $(""#menu-toggle"").click(function(e) {
    e.preventDefault();
    $(""#sidebar-wrapper"").toggleClass(""active"");
  });

  // Smooth scrolling using jQuery easing
  $('a.js-scroll-trigger[href*=""#""]:not([href=""#""])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top
        }, 1000, ""easeInOutExpo"");
        return false;
      }
    }
  });

  // Closes responsive menu when a scroll trigger link is clicked
  $('.js-scroll-trigger').click(function() {
    $(""#sidebar-wrapper"").removeClass(""active"");
  });

  //#to-top button appears after scrolling
  var fixed = false;
  $(document).scroll(function() {
    if ($(this).scrollTop() > 250) {
      if (!fixed) {
        fixed = true;
        $('#to-top').show(""slow"", function() {
          $('#to-top').css({
            position: 'fixed',
            display: 'block'
          });
        });
      }
    } else {
      if (fixed) {
        fixed = false;
        $('#to-top').hide(""slow"", function() {
          $('#to-top').css({
            display: 'none'
          });
        });
      }
    }
  });

})(jQuery); // End of use strict

// Disable Google Maps scrolling
// See http://stackoverflow.com/a/25904582/1607849
// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function(event) {
  var that = $(this);
  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}
var onMapClickHandler = function(event) {
  var that = $(this);
  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);
  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");
  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}
// Enable map zooming with mouse scroll when the user clicks the map
$('.map').on('click', onMapClickHandler);
","(function($) {
  ""use strict""; // Start of use strict

  // Closes the sidebar menu
  $(""#menu-close"").click(function(e) {
    e.preventDefault();
    $(""#sidebar-wrapper"").toggleClass(""active"");
  });

  // Opens the sidebar menu
  $(""#menu-toggle"").click(function(e) {
    e.preventDefault();
    $(""#sidebar-wrapper"").toggleClass(""active"");
  });

  // Smooth scrolling using jQuery easing
  $('a.js-scroll-trigger[href*=""#""]:not([href=""#""])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html, body').animate({
          scrollTop: target.offset().top
        }, 1000, ""easeInOutExpo"");
        return false;
      }
    }
  });

  // Closes responsive menu when a scroll trigger link is clicked
  $('.js-scroll-trigger').click(function() {
    $(""#sidebar-wrapper"").removeClass(""active"");
  });

  //#to-top button appears after scrolling
  var fixed = false;
  $(document).scroll(function() {
    if ($(this).scrollTop() > 250) {
      if (!fixed) {
        fixed = true;
        $('#to-top').show(""slow"", function() {
          $('#to-top').css({
            position: 'fixed',
            display: 'block'
          });
        });
      }
    } else {
      if (fixed) {
        fixed = false;
        $('#to-top').hide(""slow"", function() {
          $('#to-top').css({
            display: 'none'
          });
        });
      }
    }
  });

})(jQuery); // End of use strict

// Disable Google Maps scrolling
// See http://stackoverflow.com/a/25904582/1607849
// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function(event) {
  var that = $(this);
  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}
var onMapClickHandler = function(event) {
  var that = $(this);
  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);
  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");
  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}
// Enable map zooming with mouse scroll when the user clicks the map
$('.map').on('click', onMapClickHandler);
",TRUE,,
5082,InitialSO.csv5082.txt,InitialGit.csv5082.txt,16,"// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function (event) {
  var that = $(this);

  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}

var onMapClickHandler = function (event) {
  var that = $(this);

  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);

  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");

  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}

// Enable map zooming with mouse scroll when the user clicks the map
$('.maps.embed-container').on('click', onMapClickHandler);
 ","// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function (event) {
  var that = $(this);

  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}

var onMapClickHandler = function (event) {
  var that = $(this);

  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);

  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");

  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}

// Enable map zooming with mouse scroll when the user clicks the map
$('.maps.embed-container').on('click', onMapClickHandler);
 ",TRUE,"// Closes the sidebar menu
$(""#menu-close"").click(function(e) {
  e.preventDefault();
  $(""#sidebar-wrapper"").toggleClass(""active"");
});
// Opens the sidebar menu
$(""#menu-toggle"").click(function(e) {
  e.preventDefault();
  $(""#sidebar-wrapper"").toggleClass(""active"");
});
// Scrolls to the selected menu item on the page
$(function() {
  $('a[href*=#]:not([href=#],[data-toggle],[data-target],[data-slide])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') || location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html,body').animate({
          scrollTop: target.offset().top
        }, 1000);
        return false;
      }
    }
  });
});
//#to-top button appears after scrolling
var fixed = false;
$(document).scroll(function() {
  if ($(this).scrollTop() > 250) {
    if (!fixed) {
      fixed = true;
      // $('#to-top').css({position:'fixed', display:'block'});
      $('#to-top').show(""slow"", function() {
        $('#to-top').css({
          position: 'fixed',
          display: 'block'
        });
      });
    }
  } else {
    if (fixed) {
      fixed = false;
      $('#to-top').hide(""slow"", function() {
        $('#to-top').css({
          display: 'none'
        });
      });
    }
  }
});
// Disable Google Maps scrolling
// See http://stackoverflow.com/a/25904582/1607849
// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function(event) {
  var that = $(this);
  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}
var onMapClickHandler = function(event) {
  var that = $(this);
  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);
  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");
  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}
// Enable map zooming with mouse scroll when the user clicks the map
$('.map').on('click', onMapClickHandler);
","// Closes the sidebar menu
$(""#menu-close"").click(function(e) {
  $(""#menu-toggle"").show();
  e.preventDefault();
  $(""#sidebar-wrapper"").toggleClass(""active"");
});
// Opens the sidebar menu
$(""#menu-toggle"").click(function(e) {
  $(this).hide();
  e.preventDefault();
  $(""#sidebar-wrapper"").toggleClass(""active"");
});
// Scrolls to the selected menu item on the page
$(function() {
  $('a[href*=#]:not([href=#],[data-toggle],[data-target],[data-slide])').click(function() {
    if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') || location.hostname == this.hostname) {
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      if (target.length) {
        $('html,body').animate({
          scrollTop: target.offset().top
        }, 1000);
        return false;
      }
    }
  });
});
//#to-top button appears after scrolling
var fixed = false;
$(document).scroll(function() {
  if ($(this).scrollTop() > 250) {
    if (!fixed) {
      fixed = true;
      // $('#to-top').css({position:'fixed', display:'block'});
      $('#to-top').show(""slow"", function() {
        $('#to-top').css({
          position: 'fixed',
          display: 'block'
        });
      });
    }
  } else {
    if (fixed) {
      fixed = false;
      $('#to-top').hide(""slow"", function() {
        $('#to-top').css({
          display: 'none'
        });
      });
    }
  }
});
// Disable Google Maps scrolling
// See http://stackoverflow.com/a/25904582/1607849
// Disable scroll zooming and bind back the click event
var onMapMouseleaveHandler = function(event) {
  var that = $(this);
  that.on('click', onMapClickHandler);
  that.off('mouseleave', onMapMouseleaveHandler);
  that.find('iframe').css(""pointer-events"", ""none"");
}
var onMapClickHandler = function(event) {
  var that = $(this);
  // Disable the click handler until the user leaves the map area
  that.off('click', onMapClickHandler);
  // Enable scrolling zoom
  that.find('iframe').css(""pointer-events"", ""auto"");
  // Handle the mouse leave event
  that.on('mouseleave', onMapMouseleaveHandler);
}
// Enable map zooming with mouse scroll when the user clicks the map
$('.map').on('click', onMapClickHandler);
",FALSE,,
5086,InitialSO.csv5086.txt,InitialGit.csv5086.txt,8,"hh:mm:ss ss mm:ss maxDigits 10:30:40 010030040 maxDigits 3 $(function () {

    // change maxDigits to 4, if values go > 999
    // or to 5 for values > 9999, etc.
    var maxDigits = 3;

    $.tablesorter.addParser({
        id: ""times"",
        is: function (s) {
            return false;
        },
        format: function (s) {
            // prefix contains leading zeros that are tacked
            var prefix = new Array(maxDigits + 1).join('0'),
                // split time into blocks
                blocks = s.split(/\s*:\s*/),
                len = blocks.length,
                result = [];
            // add values in reverse, so if there is only one block
            // (e.g. ""10""), then it would be the time in seconds
            while (len) {
                result.push((prefix + (blocks[--len] || 0)).slice(-maxDigits));
            }
            // reverse the results and join them
            return result.length ? result.reverse().join('') : s;
        },
        type: ""text""
    });

    $('table').tablesorter({
        theme: 'blue',
        headers: {
            3: {
                sorter: 'times'
            }
        }
    });
});
 10y 30d 6h 10m ","hh:mm:ss ss mm:ss maxDigits 10:30:40 010030040 maxDigits 3 $(function () {

    // change maxDigits to 4, if values go > 999
    // or to 5 for values > 9999, etc.
    var maxDigits = 3;

    $.tablesorter.addParser({
        id: ""times"",
        is: function (s) {
            return false;
        },
        format: function (s) {
            // prefix contains leading zeros that are tacked
            var prefix = new Array(maxDigits + 1).join('0'),
                // split time into blocks
                blocks = s.split(/\s*:\s*/),
                len = blocks.length,
                result = [];
            // add values in reverse, so if there is only one block
            // (e.g. ""10""), then it would be the time in seconds
            while (len) {
                result.push((prefix + (blocks[--len] || 0)).slice(-maxDigits));
            }
            // reverse the results and join them
            return result.length ? result.reverse().join('') : s;
        },
        type: ""text""
    });

    $('table').tablesorter({
        theme: 'blue',
        headers: {
            3: {
                sorter: 'times'
            }
        }
    });
});
 10y 30d 6h 10m ",TRUE,"/*! Parser: duration & countdown - updated 2/7/2015 (v2.19.0) */
/*jshint jquery:true, unused:false */
;(function($){
	'use strict';

	// If any number > 9999, then set table.config.durationLength = 5
	// The below regex matches this duration example: 1y 23d 12h 44m 9s
	$.tablesorter.addParser({
		id: 'duration',
		is: function() {
			return false;
		},
		format: function(s, table) {
			var i, time,
				c = table.config,
				t = '',
				duration = '',
				len = c.durationLength || 4,
				str = new Array(len + 1).join('0'),
				labels = (c.durationLabels || '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)').split(/\s*,\s*/),
				llen = labels.length;
			// build regex
			if (!c.durationRegex) {
				for (i = 0; i < llen; i++) {
					t += '(?:(\\d+)\\s*' + labels[i] + '\\s*)?';
				}
				c.durationRegex = new RegExp(t, 'i');
			}
			// remove commas from value
			time = ( c.usNumberFormat ? s.replace(/,/g, '') : s.replace( /(\d)(?:\.|\s*)(\d)/g, '$1$2') ).match(c.durationRegex);
			for (i = 1; i < llen + 1; i++) {
				duration += ( str + ( time[i] || 0 ) ).slice(-len);
			}
			return duration;
		},
		type: 'text'
	});

	/*! Countdown parser ( hh:mm:ss ) */
	/* Added 2/7/2015 (v2.19.0) - see http://stackoverflow.com/a/27023733/145346 */
	$.tablesorter.addParser({
		id: 'countdown',
		is: function () {
			return false;
		},
		format: function ( text, table ) {
			// change maxDigits to 4, if values go > 999
			// or to 5 for values > 9999, etc.
			var maxDigits = table.config.durationLength || 4,
				// prefix contains leading zeros that are tacked
				prefix = new Array( maxDigits + 1 ).join( '0' ),
				// split time into blocks
				blocks = text.split( /\s*:\s*/ ),
				len = blocks.length,
				result = [];
			// add values in reverse, so if there is only one block
			// ( e.g. '10' ), then it would be the time in seconds
			while ( len ) {
				result.push( ( prefix + ( blocks[ --len ] || 0 ) ).slice( -maxDigits ) );
			}
			// reverse the results and join them
			return result.length ? result.reverse().join( '' ) : text;
		},
		type: 'text'
	});

})(jQuery);
","/*! Parser: duration & countdown - updated 2/7/2015 (v2.19.0) */
/*jshint jquery:true, unused:false */
;(function($){
	'use strict';

	// If any number > 9999, then set table.config.durationLength = 5
	// The below regex matches this duration example: 1y 23d 12h 44m 9s
	$.tablesorter.addParser({
		id: 'duration',
		is: function() {
			return false;
		},
		format: function(s, table) {
			var i, time,
				c = table.config,
				t = '',
				duration = '',
				len = c.durationLength || 4,
				str = new Array(len + 1).join('0'),
				labels = (c.durationLabels || '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)').split(/\s*,\s*/),
				llen = labels.length;
			// build regex
			if (!c.durationRegex) {
				for (i = 0; i < llen; i++) {
					t += '(?:(\\d+)\\s*' + labels[i] + '\\s*)?';
				}
				c.durationRegex = new RegExp(t, 'i');
			}
			// remove commas from value
			time = ( c.usNumberFormat ? s.replace(/,/g, '') : s.replace( /(\d)(?:\.|\s*)(\d)/g, '$1$2') ).match(c.durationRegex);
			for (i = 1; i < llen + 1; i++) {
				duration += ( str + ( time[i] || 0 ) ).slice(-len);
			}
			return duration;
		},
		type: 'text'
	});

	/*! Countdown parser ( hh:mm:ss ) */
	/* Added 2/7/2015 (v2.19.0) - see http://stackoverflow.com/a/27023733/145346 */
	$.tablesorter.addParser({
		id: 'countdown',
		is: function () {
			return false;
		},
		format: function ( text, table ) {
			// change maxDigits to 4, if values go > 999
			// or to 5 for values > 9999, etc.
			var maxDigits = table.config.durationLength || 4,
				// prefix contains leading zeros that are tacked
				prefix = new Array( maxDigits + 1 ).join( '0' ),
				// split time into blocks
				blocks = text.split( /\s*:\s*/ ),
				len = blocks.length,
				result = [];
			// add values in reverse, so if there is only one block
			// ( e.g. '10' ), then it would be the time in seconds
			while ( len ) {
				result.push( ( prefix + ( blocks[ --len ] || 0 ) ).slice( -maxDigits ) );
			}
			// reverse the results and join them
			return result.length ? result.reverse().join( '' ) : text;
		},
		type: 'text'
	});

})(jQuery);
",TRUE,,
5088,InitialSO.csv5088.txt,InitialGit.csv5088.txt,3,"__toString() public function __toString()
{
    try {
        // ... do some stuff
        // and try to return a string
        $string = $this->doSomeStuff();
        if (!is_string($string)) {
            // we must throw an exception manually here because if $value
            // is not a string, PHP will trigger an error right after the
            // return statement, thus escaping our try/catch.
            throw new \LogicException(__CLASS__ . ""__toString() must return a string"");
        }

        return $string;
    } catch (\Exception $exception) {
        $previousHandler = set_exception_handler(function (){
        });
        restore_error_handler();
        call_user_func($previousHandler, $exception);
        die;
    }
}
 trigger_error echo trigger_error output() __toString() ","__toString() public function __toString()
{
    try {
        // ... do some stuff
        // and try to return a string
        $string = $this->doSomeStuff();
        if (!is_string($string)) {
            // we must throw an exception manually here because if $value
            // is not a string, PHP will trigger an error right after the
            // return statement, thus escaping our try/catch.
            throw new \LogicException(__CLASS__ . ""__toString() must return a string"");
        }

        return $string;
    } catch (\Exception $exception) {
        $previousHandler = set_exception_handler(function (){
        });
        restore_error_handler();
        call_user_func($previousHandler, $exception);
        die;
    }
}
 trigger_error echo trigger_error output() __toString() ",TRUE,"<?php

namespace Zofe\Rapyd\DataForm;

use Illuminate\Database\Eloquent\Model;
use Zofe\Rapyd\DataForm\Field\Auto;
use Zofe\Rapyd\DataForm\Field\Autocomplete;
use Zofe\Rapyd\DataForm\Field\Colorpicker;
use Zofe\Rapyd\DataForm\Field\Date;
use Zofe\Rapyd\DataForm\Field\Field;
use Zofe\Rapyd\DataForm\Field\File;
use Zofe\Rapyd\DataForm\Field\Hidden;
use Zofe\Rapyd\DataForm\Field\Password;
use Zofe\Rapyd\DataForm\Field\Radiogroup;
use Zofe\Rapyd\DataForm\Field\Redactor;
use Zofe\Rapyd\DataForm\Field\Select;
use Zofe\Rapyd\DataForm\Field\Tags;
use Zofe\Rapyd\DataForm\Field\Text;
use Zofe\Rapyd\DataForm\Field\Textarea;
use Zofe\Rapyd\Widget;
use Illuminate\Html\FormFacade as Form;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Request;
use Zofe\Rapyd\Rapyd;

/**
 * Class DataForm
 *
 * @method Text         text        (string $name, string $label, $validation = '')
 * @method Hidden       hidden      (string $name, string $label, string $validation = '')
 * @method Password     password    (string $name, string $label, string $validation = '')
 * @method File         file        (string $name, string $label, string $validation = '')
 * @method Textarea     textarea    (string $name, string $label, string $validation = '')
 * @method Select       select      (string $name, string $label, string $validation = '')
 * @method Radiogroup   radiogroup  (string $name, string $label, string $validation = '')
 * @method Redactor     redactor    (string $name, string $label, string $validation = '')
 * @method Autocomplete autocomplete(string $name, string $label, string $validation = '')
 * @method Tags         tags        (string $name, string $label, string $validation = '')
 * @method Colorpicker  colorpicker (string $name, string $label, string $validation = '')
 * @method Date         date        (string $name, string $label, string $validation = '')
 * @method Auto         auto        (string $name, string $label, string $validation = '')
 *
 * @method Text         addText        (string $name, string $label, $validation = '')
 * @method Hidden       addHidden      (string $name, string $label, string $validation = '')
 * @method Password     addPassword    (string $name, string $label, string $validation = '')
 * @method File         addFile        (string $name, string $label, string $validation = '')
 * @method Textarea     addTextarea    (string $name, string $label, string $validation = '')
 * @method Select       addSelect      (string $name, string $label, string $validation = '')
 * @method Radiogroup   addRadiogroup  (string $name, string $label, string $validation = '')
 * @method Redactor     addRedactor    (string $name, string $label, string $validation = '')
 * @method Autocomplete addAutocomplete(string $name, string $label, string $validation = '')
 * @method Tags         addTags        (string $name, string $label, string $validation = '')
 * @method Colorpicker  addColorpicker (string $name, string $label, string $validation = '')
 * @method Date         addDate        (string $name, string $label, string $validation = '')
 * @method Auto         addAuto        (string $name, string $label, string $validation = '')
 *
 * @package Zofe\Rapyd\DataForm
 */
class DataForm extends Widget
{

    public $model;
    public $model_relations;
    public $validator;

    public $output = """";
    public $fields = array();
    public $hash = """";
    public $error = """";

    public $open;
    public $close;

    protected $method = 'POST';
    protected $redirect = null;
    protected $source;
    protected $process_url = '';
    protected $view = 'rapyd::dataform';
    protected $orientation = 'horizontal';
    protected $form_callable = '';

    public function __construct()
    {
        parent::__construct();
        $this->process_url = $this->url->append('process', 1)->get();
        $this->model_relations = new \ArrayObject();
    }

    /**
     * @param string $name
     * @param string $label
     * @param string $type
     * @param string $validation
     *
     * @return mixed
     */
    public function add($name, $label, $type, $validation = '')
    {
        if (strpos($type, ""\\"") !== false) {
            $field_class = $type;
        } else {
            $field_class = '\Zofe\Rapyd\DataForm\Field\\' .  ucfirst($type);
        }

        //instancing
        if (isset($this->model)) {
            $field_obj = new $field_class($name, $label, $this->model, $this->model_relations);
        } else {
            $field_obj = new $field_class($name, $label);
        }

        if (!$field_obj instanceof Field) {
            throw new \InvalidArgumentException('Third argument («type») must point to class inherited Field class');
        }

        if ($field_obj->type == ""file"") {
            $this->multipart = true;
        }

        //default group
        if (isset($this->default_group) && !isset($field_obj->group)) {
            $field_obj->group = $this->default_group;
        }
        $this->fields[$name] = $field_obj;

        return $field_obj;
    }

    /**
     * remove field from list
     * @param $fieldname
     * @return $this
     */
    public function remove($fieldname)
    {
        if (isset($this->fields[$fieldname]))
            unset($this->fields[$fieldname]);

        return $this;
    }

    /**
     * remove field where type==$type from field list and button container
     * @param $type
     * @return $this
     */
    public function removeType($type)
    {
        foreach ($this->fields as $fieldname => $field) {
            if ($field->type == $type) {
                unset($this->fields[$fieldname]);
            }
        }
        foreach ($this->button_container as $container => $buttons) {
            foreach ($buttons as $key=>$button) {
                if (strpos($button, 'type=""'.$type.'""')!==false) {
                    $this->button_container[$container][$key] = """";
                }
            }
        }

        return $this;
    }

    /**
     * @param string $name
     * @param string $position
     * @param array  $options
     *
     * @return $this
     */
    public function submit($name, $position = ""BL"", $options = array())
    {
        $options = array_merge(array(""class"" => ""btn btn-primary""), $options);
        $this->button_container[$position][] = Form::submit($name, $options);

        return $this;
    }

    /**
     * @param string $name
     * @param string $position
     * @param array  $options
     *
     * @return $this
     */
    public function reset($name = """", $position = ""BL"")
    {
        if ($name == """") $name = trans('rapyd::rapyd.reset');
        $this->link($this->url->current(true), $name, $position);

        return $this;
    }

    /**
     * get field instance from fields array
     * @param $field_name
     * @param  array                      $ttributes
     * @return \Zofe\Rapyd\DataForm\Field $field
     */
    public function field($field_name, array $attributes = array())
    {
        if (isset($this->fields[$field_name])) {
            $field = $this->fields[$field_name];
            if (count($attributes)) {
                $field->attributes($attributes);
                $field->build();
            }

            return $field;
        }
    }

    /**
     * get entire field output (label, output, and messages)
     * @param $field_name
     * @param  array  $ttributes
     * @return string
     */
    public function render($field_name, array $attributes = array())
    {
        $field = $this->field($field_name, $attributes);

        return $field->all();
    }

    /**
     * @return static
     */
    public static function create()
    {
        $ins = new static();
        $ins->cid = $ins->getIdentifier();
        $ins->sniffStatus();
        $ins->sniffAction();

        return $ins;
    }

    /**
     * @param \Illuminate\Database\Eloquent\Model $source
     *
     * @return static
     */
    public static function source($source = '')
    {
        $ins = new static();
        if (is_object($source) && is_a($source, ""\Illuminate\Database\Eloquent\Model"")) {
            $ins->model = $source;
        }
        $ins->cid = $ins->getIdentifier();
        $ins->sniffStatus();
        $ins->sniffAction();

        return $ins;
    }

    /**
     * @return bool
     */
    protected function isValid()
    {
        if ($this->error != """") {
            return false;
        }
        foreach ($this->fields as $field) {
            $field->action = $this->action;
            if (isset($field->rule)) {
                $rules[$field->name] = $field->rule;
                $attributes[$field->name] = $field->label;
            }
        }
        if (isset($this->validator)) {
            return !$this->validator->fails();
        }
        if (isset($rules)) {

            $this->validator = Validator::make(Input::all(), $rules, array(), $attributes);

            return !$this->validator->fails();
        } else {
            return true;
        }
    }

    /**
     * append error (to be used in passed/saved closure)
     * @param string $url
     * @param string $name
     * @param string $position
     * @param array  $attributes
     *
     * @return $this
     */
    public function error($error)
    {
        $this->process_status = 'error';
        $this->message = '';
        $this->error .= $error;

        return $this;
    }

    /**
     * @param string $process_status
     *
     * @return bool
     */
    public function on($process_status = ""false"")
    {
        if (is_array($process_status))
            return (bool) in_array($this->process_status, $process_status);
        return ($this->process_status == $process_status);
    }

    protected function sniffStatus()
    {
        if (isset($this->model)) {
            $this->status = ($this->model->exists) ? ""modify"" : ""create"";
        } else {
            $this->status = ""create"";
        }
    }

    /**
     * needed by DataEdit, to build standard action buttons
     */
    protected function buildButtons()
    {

    }

    /**
     * build each field and share some data from dataform to field (form status, validation errors)
     */
    protected function buildFields()
    {
        $messages = (isset($this->validator)) ? $this->validator->messages() : false;

        foreach ($this->fields as $field) {
            $field->status = $this->status;
            $field->orientation = $this->orientation;
            if ($messages and $messages->has($field->name)) {
                $field->messages = $messages->get($field->name);
                $field->has_error = "" has-error"";
            }
            $field->build();
        }
    }

    protected function sniffAction()
    {

        if (Request::isMethod('post') && ($this->url->value('process'))) {
            $this->action = ($this->status == ""modify"") ? ""update"" : ""insert"";
        }
    }

    protected function process()
    {
        //database save
        switch ($this->action) {
            case ""update"":
            case ""insert"":
                //validation failed
                if (!$this->isValid()) {
                    $this->process_status = ""error"";
                    foreach ($this->fields as $field) {
                        $field->action = ""idle"";
                    }

                    return false;
                } else {
                    $this->process_status = ""success"";
                }
                foreach ($this->fields as $field) {
                    $field->action = $this->action;
                    $result = $field->autoUpdate();
                    if (!$result) {
                        $this->process_status = ""error"";

                        return false;
                    }
                }
                if (isset($this->model)) {
                    $return = $this->model->save();
                    if (!$return) {
                        // in the cases where an error has not been returned, but a record has been inserted or updated
                        // the model->save() method returns null which need to interpret as success
                        $return = true;
                    }
                } else {
                    $return = true;
                }
                if (!$return) {
                    $this->process_status = ""error"";
                }

                return $return;
                break;
            case ""delete"":
                $return = $this->model->delete();
                if (!$return) {
                    $this->process_status = ""error"";
                } else {
                    $this->process_status = ""success"";
                }
                break;
            case ""idle"":
                $this->process_status = ""show"";

                return true;
                break;
            default:
                return false;
        }
    }

    protected function buildForm()
    {
        $this->prepareForm();
        $df = $this;

        return View::make($this->view, compact('df'));
    }

    public function prepareForm()
    {
        $form_attr = array('url' => $this->process_url, 'class' => ""form-horizontal"", 'role' => ""form"", 'method' => $this->method);
        $form_attr = array_merge($form_attr, $this->attributes);

        // See if we need a multipart form
        foreach ($this->fields as $field_obj) {
            if (in_array($field_obj->type, array('file','image'))) {
                $form_attr['files'] = 'true';
                break;
            }
        }
        // Set the form open and close
        if ($this->status == 'show') {
            $this->open = '<div class=""form"">';
            $this->close = '</div>';
        } else {

            $this->open = Form::open($form_attr);
            $this->close = Form::hidden('save', 1) . Form::close();

            if ($this->method == ""GET"") {
                $this->close = Form::hidden('search', 1) . Form::close();
            }
        }
        if (isset($this->validator)) {
            $this->errors = $this->validator->messages();
            $this->error .=  implode('<br />',$this->errors->all());
        }
    }

    /**
     * build form output and prepare form partials (header / footer / ..)
     * @param string $view
     */
    public function build($view = '')
    {
        if (isset($this->attributes['class']) and strpos($this->attributes['class'], 'form-inline') !== false) {
            $this->view = 'rapyd::dataform_inline';
            $this->orientation = 'inline';
        }
        if ($this->output != '') return;
        if ($view != '') $this->view = $view;

        $this->process();

        //callable
        if ($this->form_callable && $this->process_status == ""success"") {
            $callable = $this->form_callable;
            $result = $callable($this);
            if ($result && is_a($result, 'Illuminate\Http\RedirectResponse')) {
                $this->redirect = $result;
            }
            //reprocess if an error is added in closure
            if ($this->process_status == 'error') {
                $this->process();
            }
        }
        //cleanup submits if success
        if ($this->process_status == 'success') {
            $this->removeType('submit');
        }
        $this->buildButtons();
        $this->buildFields();
        $dataform = $this->buildForm();
        $this->output = $dataform->render();

        $sections = $dataform->renderSections();
        $this->header = $sections['df.header'];
        $this->footer = $sections['df.footer'];
        $this->body = @$sections['df.fields'];
        Rapyd::setForm($this);
    }

    /**
     * @param  string $view
     * @return string
     */
    public function getForm($view = '')
    {
        $this->build($view);

        return $this->output;
    }

    public function __toString()
    {
        if ($this->output == """") {

            //to avoid the error ""toString() must not throw an exception""
            //http://stackoverflow.com/questions/2429642/why-its-impossible-to-throw-exception-from-tostring/27307132#27307132
            try {
                $this->getForm();
            }
            catch (\Exception $e) {
                $previousHandler = set_exception_handler(function (){ });
                restore_error_handler();
                call_user_func($previousHandler, $e);
                die;
            }
            
        }

        return $this->output;
    }

    /**
     * @return bool
     */
    public function hasRedirect()
    {
        return ($this->redirect != null) ? true : false;
    }

    /**
     * @return string
     */
    public function getRedirect()
    {
        return $this->redirect;
    }

    /**
     * @param string $viewname
     * @param array  $array    of values for view
     *
     * @return View|Redirect
     */
    public function view($viewname, $array = array())
    {
        if (!isset($array['form'])) {
            $form = $this->getForm();
            $array['form'] = $form;
        }
        if ($this->hasRedirect()) {
            return (is_a($this->redirect, 'Illuminate\Http\RedirectResponse')) ? $this->redirect : Redirect::to($this->redirect);
        }

        return View::make($viewname, $array);
    }

    /**
     * build form and check if process status is ""success"" then execute a callable
     * @param callable $callable
     */
    public function saved(\Closure $callable)
    {
         $this->form_callable = $callable;
    }

    /**
     * alias for saved
     * @param callable $callable
     */
    public function passed(\Closure $callable)
    {
        $this->saved($callable);
    }

    /**
     * Set a value to model without show anything (it appends an auto-field)
     * It set value on insert and update (but is configurable)
     *
     * @param $field
     * @param $value
     * @param bool $insert
     * @param bool $update
     */
    public function set($field, $value = null , $insert = true, $update = true)
    {

        if (is_array($field)) {
            foreach ($field as $key=>$val) {
                $this->set($key, $val, $insert, $update);
            }
        }

        $this->add($field, '', 'auto');
        if ($insert)
            $this->field($field)->insertValue($value);

        if ($update)
            $this->field($field)->updateValue($value);

    }

    /**
     * Magic method to catch all appends
     *
     * @param  string $name
     * @param  Array  $arguments
     * @return mixed
     */
    public function __call($name, $arguments)
    {

        if (0 === strpos($name, 'add')) {
            $name = substr($name, 3);
        }

        $classname = '\Zofe\Rapyd\DataForm\Field\\'.ucfirst($name);

        if (class_exists($classname)) {
            array_push($arguments, $name);

            return  call_user_func_array(array($this, ""add""), $arguments);
        }
    }
}
","<?php namespace Zofe\Rapyd\DataForm;

use Zofe\Rapyd\Widget;
use Zofe\Rapyd\DataForm\Field\Field;
use Collective\Html\FormFacade as Form;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Request;
use Zofe\Rapyd\Rapyd;


/**
 * Class DataForm
 *
 * @method \Zofe\Rapyd\DataForm\Field\Auto           addAuto        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Autocomplete   addAutocomplete(string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Checkbox       addCheckbox (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Checkboxgroup  addCheckboxgroup (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Colorpicker    addColorpicker (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Container      addContainer   (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Date           addDate        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Daterange      addDaterange        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Datetime       addDatetime        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\File           addFile        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Hidden         addHidden      (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Iframe         addIframe      (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Multiselect    addMultiselect (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Number         addNumber      (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Numberrange    addNumberrange (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Password       addPassword    (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\QNFile         addQNFile        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Radiogroup     addRadiogroup  (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Redactor       addRedactor    (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Select         addSelect      (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Tags           addTags        (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Textarea       addTextarea    (string $name, string $label, string $validation = '')
 * @method \Zofe\Rapyd\DataForm\Field\Text           addText        (string $name, string $label, $validation = '')
 *
 * @package Zofe\Rapyd\DataForm
 */
class DataForm extends Widget
{
    /** @var \Illuminate\Database\Eloquent\Model */
    public $model;

    public $model_relations;
    public $validator;

    public $output = """";
    public $custom_output = null;

    /** @var \Zofe\Rapyd\DataForm\Field\Field[] */
    public $fields = array();

    public $hash = """";
    public $error = """";

    public $open;
    public $close;

    protected $method = 'POST';
    protected $redirect = null;
    protected $source;
    protected $process_url = '';
    protected $view = 'rapyd::dataform';
    protected $orientation = 'horizontal';
    protected $form_callable = '';

    public function __construct()
    {
        parent::__construct();
        $this->process_url = $this->url->append('process', 1)->get();
        $this->model_relations = new \ArrayObject();
    }

    /**
     * @param string $name
     * @param string $label
     * @param string $type
     * @param string $validation
     *
     * @return \Zofe\Rapyd\DataForm\Field\Field
     */
    public function add($name, $label, $type, $validation = '')
    {
        if (strpos($type, ""\\"") !== false) {
            $field_class = $type;
        } else {
            $field_class = '\Zofe\Rapyd\DataForm\Field\\' .  ucfirst($type);
        }

        //instancing
        if (isset($this->model)) {
            $field_obj = new $field_class($name, $label, $this->model, $this->model_relations);
        } else {
            $field_obj = new $field_class($name, $label);
        }

        if (!$field_obj instanceof Field) {
            throw new \InvalidArgumentException('Third argument («type») must point to class inherited Field class');
        }

        if ($field_obj->type == ""file"") {
            $this->multipart = true;
        }

        //default group
        if (isset($this->default_group) && !isset($field_obj->group)) {
            $field_obj->group = $this->default_group;
        }
        $this->fields[$name] = $field_obj;

        return $field_obj;
    }

    /**
     * remove field from list
     * @param $fieldname
     * @return $this
     */
    public function remove($fieldname)
    {
        if (isset($this->fields[$fieldname]))
            unset($this->fields[$fieldname]);

        return $this;
    }

    /**
     * remove field where type==$type from field list and button container
     * @param $type
     * @return $this
     */
    public function removeType($type)
    {
        foreach ($this->fields as $fieldname => $field) {
            if ($field->type == $type) {
                unset($this->fields[$fieldname]);
            }
        }
        foreach ($this->button_container as $container => $buttons) {
            foreach ($buttons as $key=>$button) {
                if (strpos($button, 'type=""'.$type.'""')!==false) {
                    $this->button_container[$container][$key] = """";
                }
            }
        }

        return $this;
    }

    /**
     * @param string $name
     * @param string $position
     * @param array  $options
     *
     * @return $this
     */
    public function submit($name, $position = ""BL"", $options = array())
    {
        $options = array_merge(array(""class"" => ""btn btn-primary""), $options);
        $this->button_container[$position][] = Form::submit($name, $options);

        return $this;
    }

    /**
     * @param string $name
     * @param string $position
     * @param array  $options
     *
     * @return $this
     */
    public function reset($name = """", $position = ""BL"", $options = array())
    {
        if ($name == """") $name = trans('rapyd::rapyd.reset');
        $this->link($this->url->current(true), $name, $position, $options);

        return $this;
    }

    /**
     * get field instance from fields array
     * @param string $field_name
     * @param array $attributes
     * @return \Zofe\Rapyd\DataForm\Field\Field
     */
    public function field($field_name, array $attributes = array())
    {
        if (isset($this->fields[$field_name])) {
            $field = $this->fields[$field_name];
            if (count($attributes)) {
                $field->attributes($attributes);
                $field->build();
            }

            return $field;
        }
    }

    /**
     * get entire field output (label, output, and messages)
     * @param $field_name
     * @param  array  $attributes
     * @return string
     */
    public function render($field_name, array $attributes = array())
    {
        $field = $this->field($field_name, $attributes);

        return $field->all();
    }

    /**
     * @return static
     */
    public static function create()
    {
        $ins = new static();
        $ins->cid = $ins->getIdentifier();
        $ins->sniffStatus();
        $ins->sniffAction();

        return $ins;
    }

    /**
     * @param \Illuminate\Database\Eloquent\Model $source
     *
     * @return static
     */
    public static function source($source = '')
    {
        $ins = new static();
        if (is_object($source) && is_a($source, ""\Illuminate\Database\Eloquent\Model"")) {
            $ins->model = $source;
        }
        $ins->cid = $ins->getIdentifier();
        $ins->sniffStatus();
        $ins->sniffAction();

        return $ins;
    }

    /**
     * @return bool
     */
    protected function isValid()
    {
        if ($this->error != """") {
            return false;
        }
        foreach ($this->fields as $field) {
            $field->action = $this->action;
            if (isset($field->rule)) {
                $rules[$field->name] = $field->rule;
                $attributes[$field->name] = $field->label;
            }
        }
        if (isset($this->validator)) {
            return !$this->validator->fails();
        }
        if (isset($rules)) {

            $this->validator = Validator::make(Input::all(), $rules, array(), $attributes);

            return !$this->validator->fails();
        } else {
            return true;
        }
    }

    /**
     * append error (to be used in passed/saved closure)
     * @param string $url
     * @param string $name
     * @param string $position
     * @param array  $attributes
     *
     * @return $this
     */
    public function error($error)
    {
        $this->process_status = 'error';
        $this->message = '';
        $this->error .= $error;

        return $this;
    }

    /**
     * @param string $process_status
     *
     * @return bool
     */
    public function on($process_status = ""false"")
    {
        if (is_array($process_status))
            return (bool) in_array($this->process_status, $process_status);
        return ($this->process_status == $process_status);
    }

    protected function sniffStatus()
    {
        if (isset($this->model)) {
            $this->status = ($this->model->exists) ? ""modify"" : ""create"";
        } else {
            $this->status = ""create"";
        }
    }

    /**
     * needed by DataEdit, to build standard action buttons
     */
    protected function buildButtons()
    {

    }

    /**
     * build each field and share some data from dataform to field (form status, validation errors)
     */
    protected function buildFields()
    {
        $messages = (isset($this->validator)) ? $this->validator->messages() : false;

        foreach ($this->fields as $field) {
            $field->status = $this->status;
            $field->orientation = $this->orientation;
            if ($messages and $messages->has($field->name)) {
                $field->messages = $messages->get($field->name);
                $field->has_error = "" has-error"";
            }
            $field->build();
        }
    }

    protected function sniffAction()
    {

        if (Request::isMethod('post') && ($this->url->value('process'))) {
            $this->action = ($this->status == ""modify"") ? ""update"" : ""insert"";
        }
    }

    protected function process()
    {
        //database save
        switch ($this->action) {
            case ""update"":
            case ""insert"":
                //validation failed
                if (!$this->isValid()) {
                    $this->process_status = ""error"";
                    foreach ($this->fields as $field) {
                        $field->action = ""idle"";
                    }

                    return false;
                } else {
                    $this->process_status = ""success"";
                }
                foreach ($this->fields as $field) {
                    //Field may be setted on other mode like ""readonly"", should not update it's value.
                    if ($field->mode != 'editable') {
                        continue;
                    }

                    $field->action = $this->action;
                    $result = $field->autoUpdate();
                    if (!$result) {
                        $this->process_status = ""error"";

                        return false;
                    }
                }
                if (isset($this->model)) {
                    $return = $this->model->save();
                    if (is_null($return)) {
                        // in the cases where an error has not been returned, but a record has been inserted or updated
                        // the model->save() method returns null which need to interpret as success
                        $return = true;
                    }
                } else {
                    $return = true;
                }
                if (!$return) {
                    $this->process_status = ""error"";
                }

                return $return;
                break;
            case ""delete"":
                $return = $this->model->delete();
                if (!$return) {
                    $this->process_status = ""error"";
                } else {
                    $this->process_status = ""success"";
                }
                break;
            case ""idle"":
                $this->process_status = ""show"";

                return true;
                break;
            default:
                return false;
        }
    }

    protected function buildForm()
    {
        $this->prepareForm();
        $df = $this;

        return View::make($this->view, compact('df'));
    }

    public function prepareForm()
    {
        $form_attr = array('url' => $this->process_url, 'class' => ""form-horizontal"", 'role' => ""form"", 'method' => $this->method);
        $form_attr = array_merge($form_attr, $this->attributes);

        // See if we need a multipart form
        foreach ($this->fields as $field_obj) {
            if (in_array($field_obj->type, array('file','image'))) {
                $form_attr['files'] = 'true';
                break;
            }
        }
        // Set the form open and close
        if ($this->status == 'show') {
            $this->open = '<div class=""form"">';
            $this->close = '</div>';
        } else {

            $this->open = Form::open($form_attr);
            $this->close = Form::hidden('save', 1) . Form::close();

            if ($this->method == ""GET"") {
                $this->close = Form::hidden('search', 1) . Form::close();
            }
        }
        if (isset($this->validator)) {
            $this->errors = $this->validator->messages();
            $this->error .=  implode('<br />',$this->errors->all());
        }
    }

    /**
     * build form output and prepare form partials (header / footer / ..)
     * @param string $view
     */
    public function build($view = '')
    {
        if (isset($this->attributes['class']) and strpos($this->attributes['class'], 'form-inline') !== false) {
            $this->view = 'rapyd::dataform_inline';
            $this->orientation = 'inline';
        }
        if ($this->output != '') return;
        if ($view != '') $this->view = $view;

        $this->process();

        //callable
        if ($this->form_callable && $this->process_status == ""success"") {
            $callable = $this->form_callable;
            $result = $callable($this);
            if ($result && is_a($result, 'Illuminate\Http\RedirectResponse')) {
                $this->redirect = $result;
            } elseif ($result && is_a($result, 'Illuminate\View\View')) {
                $this->custom_output = $result;
            }

            //reprocess if an error is added in closure
            if ($this->process_status == 'error') {
                $this->process();
            }
        }
        //cleanup submits if success
        if ($this->process_status == 'success') {
            $this->removeType('submit');
        }
        $this->buildButtons();
        $this->buildFields();
        $dataform = $this->buildForm();
        $this->output = $dataform->render();

        $sections = $dataform->renderSections();
        $this->header = $sections['df.header'];
        $this->footer = $sections['df.footer'];
        $this->body = @$sections['df.fields'];
        Rapyd::setForm($this);
    }

    /**
     * @param  string $view
     * @return string
     */
    public function getForm($view = '')
    {
        $this->build($view);

        return $this->output;
    }

    public function __toString()
    {
        if ($this->output == """") {

            //to avoid the error ""toString() must not throw an exception""
            //http://stackoverflow.com/questions/2429642/why-its-impossible-to-throw-exception-from-tostring/27307132#27307132
            try {
                $this->getForm();
            }
            catch (\Exception $e) {
                $previousHandler = set_exception_handler(function (){ });
                restore_error_handler();
                call_user_func($previousHandler, $e);
                die;
            }

        }

        return $this->output;
    }

    /**
     * @return bool
     */
    public function hasRedirect()
    {
        return ($this->redirect != null) ? true : false;
    }

    /**
     * @return bool
     */
    public function hasCustomOutput()
    {
        return ($this->custom_output != null) ? true : false;
    }

    /**
     * @return string
     */
    public function getRedirect()
    {
        return $this->redirect;
    }

    /**
     * @param string $viewname
     * @param array  $array    of values for view
     *
     * @return View|Redirect
     */
    public function view($viewname = 'rapyd::form', $array = [])
    {
        if (!isset($array['form'])) {
            $form = $this->getForm();
            $array['form'] = $form;
        }
        if ($this->hasRedirect()) {
            return (is_a($this->redirect, 'Illuminate\Http\RedirectResponse')) ? $this->redirect : Redirect::to($this->redirect);
        }
        if ($this->hasCustomOutput()) {
            return $this->custom_output;
        }
        return View::make($viewname, $array);
    }

    /**
     * build form and check if process status is ""success"" then execute a callable
     * @param callable $callable
     */
    public function saved(\Closure $callable)
    {
        $this->form_callable = $callable;
    }

    /**
     * alias for saved
     * @param callable $callable
     */
    public function passed(\Closure $callable)
    {
        $this->saved($callable);
    }

    /**
     * Set a value to model without show anything (it appends an auto-field)
     * It set value on insert and update (but is configurable)
     *
     * @param $field
     * @param $value
     * @param bool $insert
     * @param bool $update
     */
    public function set($field, $value = null , $insert = true, $update = true)
    {

        if (is_array($field)) {
            foreach ($field as $key=>$val) {
                $this->set($key, $val, $insert, $update);
            }
        }

        $this->add($field, '', 'auto');
        if ($insert)
            $this->field($field)->insertValue($value);

        if ($update)
            $this->field($field)->updateValue($value);

    }

    /**
     * Magic method to catch all appends
     *
     * @param  string $name
     * @param  array  $arguments
     * @return mixed
     */
    public function __call($name, $arguments)
    {

        if (0 === strpos($name, 'add')) {
            $name = substr($name, 3);
        }

        $classname = '\Zofe\Rapyd\DataForm\Field\\'.ucfirst($name);

        if (class_exists($classname)) {
            array_push($arguments, $name);

            return  call_user_func_array(array($this, ""add""), $arguments);
        }
    }
}
",FALSE,,
5093,InitialSO.csv5093.txt,InitialGit.csv5093.txt,4,"public abstract class TrackSelectionAdapter<VH extends TrackSelectionAdapter.ViewHolder> extends RecyclerView.Adapter<VH> {
    // Start with first item selected
    private int focusedItem = 0;

    @Override
    public void onAttachedToRecyclerView(final RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);

        // Handle key up and key down and attempt to move selection
        recyclerView.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                RecyclerView.LayoutManager lm = recyclerView.getLayoutManager();

                // Return false if scrolled to the bounds and allow focus to move off the list
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
                        return tryMoveSelection(lm, 1);
                    } else if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
                        return tryMoveSelection(lm, -1);
                    }
                }

                return false;
            }
        });
    }

    private boolean tryMoveSelection(RecyclerView.LayoutManager lm, int direction) {
        int tryFocusItem = focusedItem + direction;

        // If still within valid bounds, move the selection, notify to redraw, and scroll
        if (tryFocusItem >= 0 && tryFocusItem < getItemCount()) {
            notifyItemChanged(focusedItem);
            focusedItem = tryFocusItem;
            notifyItemChanged(focusedItem);
            lm.scrollToPosition(focusedItem);
            return true;
        }

        return false;
    }

    @Override
    public void onBindViewHolder(VH viewHolder, int i) {
        // Set selected state; use a state list drawable to style the view
        viewHolder.itemView.setSelected(focusedItem == i);
    }

    public class ViewHolder extends RecyclerView.ViewHolder {
        public ViewHolder(View itemView) {
            super(itemView);

            // Handle item click and set the selection
            itemView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    // Redraw the old selection and the new
                    notifyItemChanged(focusedItem);
                    focusedItem = getLayoutPosition();
                    notifyItemChanged(focusedItem);
                }
            });
        }
    }
} 
 ","public abstract class TrackSelectionAdapter<VH extends TrackSelectionAdapter.ViewHolder> extends RecyclerView.Adapter<VH> {
    // Start with first item selected
    private int focusedItem = 0;

    @Override
    public void onAttachedToRecyclerView(final RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);

        // Handle key up and key down and attempt to move selection
        recyclerView.setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                RecyclerView.LayoutManager lm = recyclerView.getLayoutManager();

                // Return false if scrolled to the bounds and allow focus to move off the list
                if (event.getAction() == KeyEvent.ACTION_DOWN) {
                    if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
                        return tryMoveSelection(lm, 1);
                    } else if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
                        return tryMoveSelection(lm, -1);
                    }
                }

                return false;
            }
        });
    }

    private boolean tryMoveSelection(RecyclerView.LayoutManager lm, int direction) {
        int tryFocusItem = focusedItem + direction;

        // If still within valid bounds, move the selection, notify to redraw, and scroll
        if (tryFocusItem >= 0 && tryFocusItem < getItemCount()) {
            notifyItemChanged(focusedItem);
            focusedItem = tryFocusItem;
            notifyItemChanged(focusedItem);
            lm.scrollToPosition(focusedItem);
            return true;
        }

        return false;
    }

    @Override
    public void onBindViewHolder(VH viewHolder, int i) {
        // Set selected state; use a state list drawable to style the view
        viewHolder.itemView.setSelected(focusedItem == i);
    }

    public class ViewHolder extends RecyclerView.ViewHolder {
        public ViewHolder(View itemView) {
            super(itemView);

            // Handle item click and set the selection
            itemView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    // Redraw the old selection and the new
                    notifyItemChanged(focusedItem);
                    focusedItem = getLayoutPosition();
                    notifyItemChanged(focusedItem);
                }
            });
        }
    }
} 
 ",TRUE,"/***
 Copyright (c) 2015 CommonsWare, LLC
 Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 use this file except in compliance with the License. You may obtain	a copy
 of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
 by applicable law or agreed to in writing, software distributed under the
 License is distributed on an ""AS IS"" BASIS,	WITHOUT	WARRANTIES OR CONDITIONS
 OF ANY KIND, either express or implied. See the License for the specific
 language governing permissions and limitations under the License.

 From _The Busy Coder's Guide to Android Development_
 https://commonsware.com/Android
 */

package com.commonsware.android.kbmouse.hotkeys;

import android.os.Bundle;
import android.support.v7.widget.RecyclerView;
import android.view.KeyEvent;
import android.view.View;

abstract public class
    ChoiceCapableAdapter<T extends RecyclerView.ViewHolder>
    extends RecyclerView.Adapter<T> {
  private static final long KEY_TIME_DELTA=250;
  private final ChoiceMode choiceMode;
  private final RecyclerView rv;
  private long lastDownKeyTime=-1L;
  private long lastUpKeyTime=-1L;

  public ChoiceCapableAdapter(RecyclerView rv,
                              ChoiceMode choiceMode) {
    super();
    this.rv=rv;
    this.choiceMode=choiceMode;
  }

  void onChecked(int position, boolean isChecked) {
    onChecked(position, isChecked, false);
  }

  void onChecked(int position, boolean isChecked, boolean updateUI) {
    if (choiceMode.isSingleChoice()) {
      int checked=choiceMode.getCheckedPosition();

      if (checked>=0) {
        RowController row=
            (RowController)rv.findViewHolderForAdapterPosition(checked);

        if (row!=null) {
          row.setChecked(false);
        }
      }
    }

    choiceMode.setChecked(position, isChecked);

    if (updateUI) {
      notifyItemChanged(position);
      rv.scrollToPosition(position);
    }
  }

  boolean isChecked(int position) {
    return(choiceMode.isChecked(position));
  }

  int getCheckedPosition() {
    if (choiceMode.isSingleChoice()) {
      return(choiceMode.getCheckedPosition());
    }

    throw new IllegalStateException(""Can only get checked position for single-choice"");
  }

  void onSaveInstanceState(Bundle state) {
    choiceMode.onSaveInstanceState(state);
  }

  void onRestoreInstanceState(Bundle state) {
    choiceMode.onRestoreInstanceState(state);
  }

  @Override
  public void onViewAttachedToWindow(T holder) {
    super.onViewAttachedToWindow(holder);

    if (holder.getAdapterPosition()!=choiceMode.getCheckedPosition()) {
      ((RowController)holder).setChecked(false);
    }
  }

  // inspired by http://stackoverflow.com/a/28838834/115145

  @Override
  public void onAttachedToRecyclerView(RecyclerView rv) {
    super.onAttachedToRecyclerView(rv);

    if (choiceMode.isSingleChoice()) {
      rv.setOnKeyListener(new View.OnKeyListener() {
        @Override
        public boolean onKey(View v, int keyCode, KeyEvent event) {
          if (event.getAction()==KeyEvent.ACTION_DOWN) {
            switch (keyCode) {
              case KeyEvent.KEYCODE_DPAD_DOWN:
                return(chooseNext());
              case KeyEvent.KEYCODE_DPAD_UP:
                return(choosePrevious());
            }
          }

          return(false);
        }
      });
    }
  }

  private boolean chooseNext() {
    long now=System.currentTimeMillis();
    boolean result=false;

    if (lastDownKeyTime==-1 || now-lastDownKeyTime>KEY_TIME_DELTA) {
      lastDownKeyTime=now;
      lastUpKeyTime=-1L;

      int checked=choiceMode.getCheckedPosition();

      if (checked<0) {
        onChecked(0, true, true);
        result=true;
      }
      else if (checked<getItemCount()-1) {
        onChecked(checked+1, true, true);
        result=true;
      }
    }

    return(result);
  }

  private boolean choosePrevious() {
    long now=System.currentTimeMillis();
    boolean result=false;

    if (lastUpKeyTime==-1 || now-lastUpKeyTime>KEY_TIME_DELTA) {
      lastUpKeyTime=now;
      lastDownKeyTime=-1L;

      int checked=choiceMode.getCheckedPosition();

      if (checked>0) {
        onChecked(checked-1, true, true);
        result=true;
      }
      else if (checked<0) {
        onChecked(0, true, true);
        result=true;
      }
    }

    return(result);
  }
}
","/***
 Copyright (c) 2015 CommonsWare, LLC
 Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 use this file except in compliance with the License. You may obtain	a copy
 of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
 by applicable law or agreed to in writing, software distributed under the
 License is distributed on an ""AS IS"" BASIS,	WITHOUT	WARRANTIES OR CONDITIONS
 OF ANY KIND, either express or implied. See the License for the specific
 language governing permissions and limitations under the License.

 Covered in detail in the book _The Busy Coder's Guide to Android Development_
 https://commonsware.com/Android
 */

package com.commonsware.android.kbmouse.hotkeys;

import android.os.Bundle;
import android.support.v7.widget.RecyclerView;
import android.view.KeyEvent;
import android.view.View;

abstract public class
    ChoiceCapableAdapter<T extends RecyclerView.ViewHolder>
    extends RecyclerView.Adapter<T> {
  private static final long KEY_TIME_DELTA=250;
  private final ChoiceMode choiceMode;
  private final RecyclerView rv;
  private long lastDownKeyTime=-1L;
  private long lastUpKeyTime=-1L;

  public ChoiceCapableAdapter(RecyclerView rv,
                              ChoiceMode choiceMode) {
    super();
    this.rv=rv;
    this.choiceMode=choiceMode;
  }

  void onChecked(int position, boolean isChecked) {
    onChecked(position, isChecked, false);
  }

  void onChecked(int position, boolean isChecked, boolean updateUI) {
    if (choiceMode.isSingleChoice()) {
      int checked=choiceMode.getCheckedPosition();

      if (checked>=0) {
        RowController row=
            (RowController)rv.findViewHolderForAdapterPosition(checked);

        if (row!=null) {
          row.setChecked(false);
        }
      }
    }

    choiceMode.setChecked(position, isChecked);

    if (updateUI) {
      notifyItemChanged(position);
      rv.scrollToPosition(position);
    }
  }

  boolean isChecked(int position) {
    return(choiceMode.isChecked(position));
  }

  int getCheckedPosition() {
    if (choiceMode.isSingleChoice()) {
      return(choiceMode.getCheckedPosition());
    }

    throw new IllegalStateException(""Can only get checked position for single-choice"");
  }

  void onSaveInstanceState(Bundle state) {
    choiceMode.onSaveInstanceState(state);
  }

  void onRestoreInstanceState(Bundle state) {
    choiceMode.onRestoreInstanceState(state);
  }

  @Override
  public void onViewAttachedToWindow(T holder) {
    super.onViewAttachedToWindow(holder);

    if (holder.getAdapterPosition()!=choiceMode.getCheckedPosition()) {
      ((RowController)holder).setChecked(false);
    }
  }

  // inspired by http://stackoverflow.com/a/28838834/115145

  @Override
  public void onAttachedToRecyclerView(RecyclerView rv) {
    super.onAttachedToRecyclerView(rv);

    if (choiceMode.isSingleChoice()) {
      rv.setOnKeyListener(new View.OnKeyListener() {
        @Override
        public boolean onKey(View v, int keyCode, KeyEvent event) {
          if (event.getAction()==KeyEvent.ACTION_DOWN) {
            switch (keyCode) {
              case KeyEvent.KEYCODE_DPAD_DOWN:
                return(chooseNext());
              case KeyEvent.KEYCODE_DPAD_UP:
                return(choosePrevious());
            }
          }

          return(false);
        }
      });
    }
  }

  private boolean chooseNext() {
    long now=System.currentTimeMillis();
    boolean result=false;

    if (lastDownKeyTime==-1 || now-lastDownKeyTime>KEY_TIME_DELTA) {
      lastDownKeyTime=now;
      lastUpKeyTime=-1L;

      int checked=choiceMode.getCheckedPosition();

      if (checked<0) {
        onChecked(0, true, true);
        result=true;
      }
      else if (checked<getItemCount()-1) {
        onChecked(checked+1, true, true);
        result=true;
      }
    }

    return(result);
  }

  private boolean choosePrevious() {
    long now=System.currentTimeMillis();
    boolean result=false;

    if (lastUpKeyTime==-1 || now-lastUpKeyTime>KEY_TIME_DELTA) {
      lastUpKeyTime=now;
      lastDownKeyTime=-1L;

      int checked=choiceMode.getCheckedPosition();

      if (checked>0) {
        onChecked(checked-1, true, true);
        result=true;
      }
      else if (checked<0) {
        onChecked(0, true, true);
        result=true;
      }
    }

    return(result);
  }
}
",FALSE,,
5098,InitialSO.csv5098.txt,InitialGit.csv5098.txt,3,"@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
public int calculateScreenHeightForLollipop() {
    WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
    Display display = wm.getDefaultDisplay();
    Point size = new Point();
    display.getSize(size);
    return size.y;
}

/**
 * Call this function to resize the emoji popup according to your soft keyboard size
 */
public void setSizeForSoftKeyboard() {
    rootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            Rect r = new Rect();
            rootView.getWindowVisibleDisplayFrame(r);
            int screenHeight;
            if (Build.VERSION.SDK_INT >= 5.0) {
                screenHeight = calculateScreenHeightForLollipop();
            } else {
                screenHeight = rootView.getRootView().getHeight();
            }
            int heightDifference = screenHeight
                    - (r.bottom - r.top);
            int resourceId = mContext.getResources()
                    .getIdentifier(""status_bar_height"",
                            ""dimen"", ""android"");
            if (resourceId > 0) {
                heightDifference -= mContext.getResources()
                        .getDimensionPixelSize(resourceId);
            }
            if (heightDifference > 100) {
                keyBoardHeight = heightDifference;
                setSize(LayoutParams.MATCH_PARENT, keyBoardHeight);
                if (!isOpened) {
                    if (onSoftKeyboardOpenCloseListener != null)
                        onSoftKeyboardOpenCloseListener.onKeyboardOpen(keyBoardHeight);
                }
                isOpened = true;
                if (pendingOpen) {
                    showAtBottom();
                    pendingOpen = false;
                }
            } else {
                isOpened = false;
                if (onSoftKeyboardOpenCloseListener != null)
                    onSoftKeyboardOpenCloseListener.onKeyboardClose();
            }
        }
    });
}
 ","@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
public int calculateScreenHeightForLollipop() {
    WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
    Display display = wm.getDefaultDisplay();
    Point size = new Point();
    display.getSize(size);
    return size.y;
}

/**
 * Call this function to resize the emoji popup according to your soft keyboard size
 */
public void setSizeForSoftKeyboard() {
    rootView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            Rect r = new Rect();
            rootView.getWindowVisibleDisplayFrame(r);
            int screenHeight;
            if (Build.VERSION.SDK_INT >= 5.0) {
                screenHeight = calculateScreenHeightForLollipop();
            } else {
                screenHeight = rootView.getRootView().getHeight();
            }
            int heightDifference = screenHeight
                    - (r.bottom - r.top);
            int resourceId = mContext.getResources()
                    .getIdentifier(""status_bar_height"",
                            ""dimen"", ""android"");
            if (resourceId > 0) {
                heightDifference -= mContext.getResources()
                        .getDimensionPixelSize(resourceId);
            }
            if (heightDifference > 100) {
                keyBoardHeight = heightDifference;
                setSize(LayoutParams.MATCH_PARENT, keyBoardHeight);
                if (!isOpened) {
                    if (onSoftKeyboardOpenCloseListener != null)
                        onSoftKeyboardOpenCloseListener.onKeyboardOpen(keyBoardHeight);
                }
                isOpened = true;
                if (pendingOpen) {
                    showAtBottom();
                    pendingOpen = false;
                }
            } else {
                isOpened = false;
                if (onSoftKeyboardOpenCloseListener != null)
                    onSoftKeyboardOpenCloseListener.onKeyboardClose();
            }
        }
    });
}
 ",TRUE,"package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

// import additionally required classes for calculating screen height
import android.view.Display;
import android.graphics.Point;
import android.os.Build;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);

                            PluginResult result;

                            // cache properties for later use
                            int rootViewHeight = rootView.getRootView().getHeight();
                            int resultBottom = r.bottom;

                            // calculate screen height differently for android versions >= 21: Lollipop 5.x, Marshmallow 6.x
                            //http://stackoverflow.com/a/29257533/3642890 beware of nexus 5
                            int screenHeight;

                            if (Build.VERSION.SDK_INT >= 21) {
                                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();
                                Point size = new Point();
                                display.getSize(size);
                                screenHeight = size.y;
                            } else {
                                screenHeight = rootViewHeight;
                            }

                            int heightDiff = screenHeight - resultBottom;

                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                                String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);


                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


","package io.ionic.keyboard;

import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaWebView;
import org.apache.cordova.PluginResult;
import org.apache.cordova.PluginResult.Status;
import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.view.inputmethod.InputMethodManager;

// import additionally required classes for calculating screen height
import android.view.Display;
import android.graphics.Point;
import android.os.Build;

public class IonicKeyboard extends CordovaPlugin {

    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
    }

    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {
        if (""close"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    //http://stackoverflow.com/a/7696791/1091751
                    InputMethodManager inputManager = (InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
                    View v = cordova.getActivity().getCurrentFocus();

                    if (v == null) {
                        callbackContext.error(""No current focus"");
                    } else {
                        inputManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
                        callbackContext.success(); // Thread-safe.
                    }
                }
            });
            return true;
        }
        if (""show"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                    ((InputMethodManager) cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE)).toggleSoftInput(0, InputMethodManager.HIDE_IMPLICIT_ONLY);
                    callbackContext.success(); // Thread-safe.
                }
            });
            return true;
        }
        if (""init"".equals(action)) {
            cordova.getThreadPool().execute(new Runnable() {
                public void run() {
                	//calculate density-independent pixels (dp)
                    //http://developer.android.com/guide/practices/screens_support.html
                    DisplayMetrics dm = new DisplayMetrics();
                    cordova.getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);
                    final float density = dm.density;

                    //http://stackoverflow.com/a/4737265/1091751 detect if keyboard is showing
                    final View rootView = cordova.getActivity().getWindow().getDecorView().findViewById(android.R.id.content).getRootView();
                    OnGlobalLayoutListener list = new OnGlobalLayoutListener() {
                        int previousHeightDiff = 0;
                        @Override
                        public void onGlobalLayout() {
                            Rect r = new Rect();
                            //r will be populated with the coordinates of your view that area still visible.
                            rootView.getWindowVisibleDisplayFrame(r);

                            PluginResult result;

                            // cache properties for later use
                            int rootViewHeight = rootView.getRootView().getHeight();
                            int resultBottom = r.bottom;

                            // calculate screen height differently for android versions >= 21: Lollipop 5.x, Marshmallow 6.x
                            //http://stackoverflow.com/a/29257533/3642890 beware of nexus 5
                            int screenHeight;

                            if (Build.VERSION.SDK_INT >= 21) {
                                Display display = cordova.getActivity().getWindowManager().getDefaultDisplay();
                                Point size = new Point();
                                display.getSize(size);
                                screenHeight = size.y;
                            } else {
                                screenHeight = rootViewHeight;
                            }

                            int heightDiff = screenHeight - resultBottom;

                            int pixelHeightDiff = (int)(heightDiff / density);
                            if (pixelHeightDiff > 100 && pixelHeightDiff != previousHeightDiff) { // if more than 100 pixels, its probably a keyboard...
                                String msg = ""S"" + Integer.toString(pixelHeightDiff);
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            else if ( pixelHeightDiff != previousHeightDiff && ( previousHeightDiff - pixelHeightDiff ) > 100 ){
                            	String msg = ""H"";
                                result = new PluginResult(PluginResult.Status.OK, msg);
                                result.setKeepCallback(true);
                                callbackContext.sendPluginResult(result);
                            }
                            previousHeightDiff = pixelHeightDiff;
                         }
                    };

                    rootView.getViewTreeObserver().addOnGlobalLayoutListener(list);


                    PluginResult dataResult = new PluginResult(PluginResult.Status.OK);
                    dataResult.setKeepCallback(true);
                    callbackContext.sendPluginResult(dataResult);
                }
            });
            return true;
        }
        return false;  // Returning false results in a ""MethodNotFound"" error.
    }


}


",TRUE,,
5099,InitialSO.csv5099.txt,InitialGit.csv5099.txt,3,"def make_executable(path):
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    os.chmod(path, mode)
 umask path = 'foo.sh'
with open(path, 'w') as f:           # umask in effect when file is created
    f.write('#!/bin/sh\n')
    f.write('echo ""hello world""\n')

make_executable(path)
 ","def make_executable(path):
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    os.chmod(path, mode)
 umask path = 'foo.sh'
with open(path, 'w') as f:           # umask in effect when file is created
    f.write('#!/bin/sh\n')
    f.write('echo ""hello world""\n')

make_executable(path)
 ",TRUE,"#!/usr/bin/env python

import os
import sys


if sys.version_info[0] == 2 and sys.version_info[1] < 7:
    sys.stderr.write(""ERROR: update.py requires at least Python 2.7\n"")
    sys.exit(-1)


AUTOCMAKE_GITHUB_URL = 'https://github.com/coderefinery/autocmake/raw/master/'


def licensing_info():
    return '''The CMake infrastructure for this project is generated using [Autocmake]
by Radovan Bast, Roberto Di Remigio, Jonas Juselius and contributors.
The `update.py` Python script and the contents of the directories `autocmake` and `downloaded` are licensed
under the terms of the [BSD-3-Clause license], unless otherwise stated.

[Autocmake]: http://autocmake.org
[BSD-3-Clause license]: https://tldrlegal.com/license/bsd-3-clause-license-(revised)'''


def check_for_yaml():
    try:
        import yaml
    except ImportError:
        sys.stderr.write(""ERROR: you need to install the pyyaml package\n"")
        sys.exit(-1)


def print_progress_bar(text, done, total, width):
    """"""
    Print progress bar.
    """"""
    if total > 0:
        n = int(float(width) * float(done) / float(total))
        sys.stdout.write(""\r{0} [{1}{2}] ({3}/{4})"".format(text, '#' * n, ' ' * (width - n), done, total))
        sys.stdout.flush()


def flat_add(l, x):
    if isinstance(x, int):
        l.append(x)
        return l
    elif isinstance(x, str):
        l.append(x)
        return l
    else:
        return l + x


def fetch_modules(config, relative_path, download_directory):
    """"""
    Assemble modules which will
    be included in CMakeLists.txt.
    """"""
    from collections import Iterable, namedtuple, defaultdict
    from autocmake.extract import extract_list, to_d, to_l
    from autocmake.parse_rst import parse_cmake_module

    cleaned_config = defaultdict(lambda: [])

    modules = []
    Module = namedtuple('Module', 'path name')

    num_sources = len(extract_list(config, 'source'))

    print_progress_bar(text='- assembling modules:',
                       done=0,
                       total=num_sources,
                       width=30)

    if 'modules' in config:
        i = 0
        for t in config['modules']:
            for k, v in t.items():

                d = to_d(v)
                for _k, _v in to_d(v).items():
                    cleaned_config[_k] = flat_add(cleaned_config[_k], _v)

                # fetch sources and parse them
                if 'source' in d:
                    for src in to_l(d['source']):
                        i += 1

                        # we download the file
                        module_name = os.path.basename(src)
                        if 'http' in src:
                            path = download_directory
                            name = 'autocmake_{0}'.format(module_name)
                            dst = os.path.join(download_directory, 'autocmake_{0}'.format(module_name))
                            fetch_url(src, dst)
                            file_name = dst
                            fetch_dst_directory = download_directory
                        else:
                            if os.path.exists(src):
                                path = os.path.dirname(src)
                                name = module_name
                                file_name = src
                                fetch_dst_directory = path
                            else:
                                sys.stderr.write(""ERROR: {0} does not exist\n"".format(src))
                                sys.exit(-1)

                        # we infer config from the module documentation
                        # dictionary d overrides the configuration in the module documentation
                        # this allows to override interpolation inside the module
                        with open(file_name, 'r') as f:
                            parsed_config = parse_cmake_module(f.read(), d)
                            for _k2, _v2 in parsed_config.items():
                                if _k2 not in to_d(v):
                                    # we add to clean_config only if the entry does not exist
                                    # in parent autocmake.yml already
                                    # this allows to override
                                    cleaned_config[_k2] = flat_add(cleaned_config[_k2], _v2)

                        modules.append(Module(path=path, name=name))
                        print_progress_bar(text='- assembling modules:',
                                           done=i,
                                           total=num_sources,
                                           width=30)
        print('')

    return modules, cleaned_config


def process_yaml(argv):
    from autocmake.parse_yaml import parse_yaml
    from autocmake.generate import gen_cmakelists, gen_setup
    from autocmake.extract import extract_list

    project_root = argv[1]
    if not os.path.isdir(project_root):
        sys.stderr.write(""ERROR: {0} is not a directory\n"".format(project_root))
        sys.exit(-1)

    # read config file
    print('- parsing autocmake.yml')
    with open('autocmake.yml', 'r') as stream:
        config = parse_yaml(stream)

    if 'name' in config:
        project_name = config['name']
    else:
        sys.stderr.write(""ERROR: you have to specify the project name in autocmake.yml\n"")
        sys.exit(-1)
    if ' ' in project_name.rstrip():
        sys.stderr.write(""ERROR: project name contains a space\n"")
        sys.exit(-1)

    if 'language' in config:
        project_language = ' '.join(config['language']) if isinstance(config['language'], list) else config['language']
    else:
        sys.stderr.write(""ERROR: you have to specify the project language(s) in autocmake.yml\n\n"")
        sys.stderr.write(""# for instance like this (several languages):\nlanguage:\n  - CXX\n  - Fortran\n\n"")
        sys.stderr.write(""# or like this (one language):\nlanguage: Fortran\n\n"")
        sys.exit(-1)

    if 'min_cmake_version' in config:
        min_cmake_version = config['min_cmake_version']
    else:
        sys.stderr.write(""ERROR: you have to specify min_cmake_version in autocmake.yml\n"")
        sys.exit(-1)

    if 'default_build_type' in config:
        default_build_type = config['default_build_type'].lower()
    else:
        sys.stderr.write(""ERROR: you have to specify default_build_type in autocmake.yml\n\n"")
        sys.stderr.write(""# for instance like this (debug, release, relwithdebinfo, or minsizerel):\ndefault_build_type: release\n\n"")
        sys.exit(-1)

    if 'setup_script' in config:
        setup_script_name = config['setup_script']
    else:
        setup_script_name = 'setup'

    # get relative path from setup script to this directory
    relative_path = os.path.relpath(os.path.abspath('.'), project_root)

    download_directory = 'downloaded'
    if not os.path.exists(download_directory):
        os.makedirs(download_directory)

    # fetch modules from the web or from relative paths
    modules, cleaned_config = fetch_modules(config, relative_path, download_directory)

    # fetch files which are not parsed
    for src in cleaned_config['fetch']:
        dst = os.path.join(download_directory, os.path.basename(src))
        fetch_url(src, dst)

    # print warnings
    for warning in cleaned_config['warning']:
        print('- WARNING: {0}'.format(warning))

    # create CMakeLists.txt
    print('- generating CMakeLists.txt')
    s = gen_cmakelists(project_name, project_language, min_cmake_version, default_build_type, relative_path, modules)
    with open(os.path.join(project_root, 'CMakeLists.txt'), 'w') as f:
        f.write('{0}\n'.format('\n'.join(s)))

    # create setup script unless it is 'None' or 'none'
    if setup_script_name.lower() != 'none':
        print('- generating setup script')
        s = gen_setup(cleaned_config, default_build_type, relative_path, setup_script_name)
        file_path = os.path.join(project_root, setup_script_name)
        with open(file_path, 'w') as f:
            f.write('{0}\n'.format('\n'.join(s)))
        if sys.platform != 'win32':
            make_executable(file_path)


def main(argv):
    """"""
    Main function.
    """"""

    if len(argv) != 2:
        sys.stderr.write(""\nYou can update a project in two steps.\n\n"")
        sys.stderr.write(""Step 1: Update or create infrastructure files\n"")
        sys.stderr.write(""        which will be needed to configure and build the project:\n"")
        sys.stderr.write(""        $ {0} --self\n\n"".format(argv[0]))
        sys.stderr.write(""Step 2: Create CMakeLists.txt and setup script in PROJECT_ROOT:\n"")
        sys.stderr.write(""        $ {0} <PROJECT_ROOT>\n"".format(argv[0]))
        sys.stderr.write(""        example:\n"")
        sys.stderr.write(""        $ {0} ..\n"".format(argv[0]))
        sys.exit(-1)

    if argv[1] in ['-h', '--help']:
        print('Usage:')
        for t, h in [('python update.py --self',
                      'Update this script and fetch or update infrastructure files under autocmake/.'),
                     ('python update.py <builddir>',
                      '(Re)generate CMakeLists.txt and setup script and fetch or update CMake modules.'),
                     ('python update.py (-h | --help)',
                      'Show this help text.')]:
            print('  {0:30} {1}'.format(t, h))
        sys.exit(0)

    if argv[1] == '--self':
        # update self
        if not os.path.isfile('autocmake.yml'):
            print('- fetching example autocmake.yml')
            fetch_url(
                src='{0}example/autocmake.yml'.format(AUTOCMAKE_GITHUB_URL),
                dst='autocmake.yml'
            )
        if not os.path.isfile('.gitignore'):
            print('- creating .gitignore')
            with open('.gitignore', 'w') as f:
                f.write('*.pyc\n')
        for f in ['autocmake/configure.py',
                  'autocmake/__init__.py',
                  'autocmake/external/docopt.py',
                  'autocmake/external/__init__.py',
                  'autocmake/generate.py',
                  'autocmake/extract.py',
                  'autocmake/interpolate.py',
                  'autocmake/parse_rst.py',
                  'autocmake/parse_yaml.py',
                  'update.py']:
            print('- fetching {0}'.format(f))
            fetch_url(
                src='{0}{1}'.format(AUTOCMAKE_GITHUB_URL, f),
                dst='{0}'.format(f)
            )
        # finally create a README.md with licensing information
        with open('README.md', 'w') as f:
            print('- generating licensing information')
            f.write(licensing_info())
        sys.exit(0)

    process_yaml(argv)


def make_executable(path):
    # http://stackoverflow.com/a/30463972
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    os.chmod(path, mode)


def fetch_url(src, dst):
    """"""
    Fetch file from URL src and save it to dst.
    """"""
    # we do not use the nicer sys.version_info.major
    # for compatibility with Python < 2.7
    if sys.version_info[0] > 2:
        import urllib.request

        class URLopener(urllib.request.FancyURLopener):
            def http_error_default(self, url, fp, errcode, errmsg, headers):
                sys.stderr.write(""ERROR: could not fetch {0}\n"".format(url))
                sys.exit(-1)
    else:
        import urllib

        class URLopener(urllib.FancyURLopener):
            def http_error_default(self, url, fp, errcode, errmsg, headers):
                sys.stderr.write(""ERROR: could not fetch {0}\n"".format(url))
                sys.exit(-1)

    dirname = os.path.dirname(dst)
    if dirname != '':
        if not os.path.isdir(dirname):
            os.makedirs(dirname)

    opener = URLopener()
    opener.retrieve(src, dst)


if __name__ == '__main__':
    check_for_yaml()
    main(sys.argv)
","#!/usr/bin/env python

import os
import sys


if sys.version_info[0] == 2 and sys.version_info[1] < 7:
    sys.stderr.write(""ERROR: update.py requires at least Python 2.7\n"")
    sys.exit(-1)


AUTOCMAKE_GITHUB_URL = 'https://github.com/dev-cafe/autocmake/raw/master/'


def licensing_info():
    return '''The CMake infrastructure for this project is generated using [Autocmake]
by Radovan Bast, Roberto Di Remigio, Jonas Juselius and contributors.
The `update.py` Python script and the contents of the directories `autocmake` and `downloaded` are licensed
under the terms of the [BSD-3-Clause license], unless otherwise stated.

[Autocmake]: http://autocmake.org
[BSD-3-Clause license]: https://tldrlegal.com/license/bsd-3-clause-license-(revised)'''


def check_for_yaml():
    try:
        import yaml
    except ImportError:
        sys.stderr.write(""ERROR: you need to install the pyyaml package\n"")
        sys.exit(-1)


def print_progress_bar(text, done, total, width):
    """"""
    Print progress bar.
    """"""
    if total > 0:
        n = int(float(width) * float(done) / float(total))
        sys.stdout.write(""\r{0} [{1}{2}] ({3}/{4})"".format(text, '#' * n, ' ' * (width - n), done, total))
        sys.stdout.flush()


def flat_add(l, x):
    if isinstance(x, int):
        l.append(x)
        return l
    elif isinstance(x, str):
        l.append(x)
        return l
    else:
        return l + x


def fetch_modules(config, relative_path, download_directory):
    """"""
    Assemble modules which will
    be included in CMakeLists.txt.
    """"""
    from collections import Iterable, namedtuple, defaultdict
    from autocmake.extract import extract_list, to_d, to_l
    from autocmake.parse_rst import parse_cmake_module

    cleaned_config = defaultdict(lambda: [])

    modules = []
    Module = namedtuple('Module', 'path name')

    num_sources = len(extract_list(config, 'source'))

    print_progress_bar(text='- assembling modules:',
                       done=0,
                       total=num_sources,
                       width=30)

    if 'modules' in config:
        i = 0
        for t in config['modules']:
            for k, v in t.items():

                d = to_d(v)
                for _k, _v in to_d(v).items():
                    cleaned_config[_k] = flat_add(cleaned_config[_k], _v)

                # fetch sources and parse them
                if 'source' in d:
                    for src in to_l(d['source']):
                        i += 1

                        # we download the file
                        module_name = os.path.basename(src)
                        if 'http' in src:
                            path = download_directory
                            name = 'autocmake_{0}'.format(module_name)
                            dst = os.path.join(download_directory, 'autocmake_{0}'.format(module_name))
                            fetch_url(src, dst)
                            file_name = dst
                            fetch_dst_directory = download_directory
                        else:
                            if os.path.exists(src):
                                path = os.path.dirname(src)
                                name = module_name
                                file_name = src
                                fetch_dst_directory = path
                            else:
                                sys.stderr.write(""ERROR: {0} does not exist\n"".format(src))
                                sys.exit(-1)

                        # we infer config from the module documentation
                        # dictionary d overrides the configuration in the module documentation
                        # this allows to override interpolation inside the module
                        with open(file_name, 'r') as f:
                            parsed_config = parse_cmake_module(f.read(), d)
                            for _k2, _v2 in parsed_config.items():
                                if _k2 not in to_d(v):
                                    # we add to clean_config only if the entry does not exist
                                    # in parent autocmake.yml already
                                    # this allows to override
                                    cleaned_config[_k2] = flat_add(cleaned_config[_k2], _v2)

                        modules.append(Module(path=path, name=name))
                        print_progress_bar(text='- assembling modules:',
                                           done=i,
                                           total=num_sources,
                                           width=30)
        print('')

    return modules, cleaned_config


def process_yaml(argv):
    from autocmake.parse_yaml import parse_yaml
    from autocmake.generate import gen_cmakelists, gen_setup
    from autocmake.extract import extract_list

    project_root = argv[1]
    if not os.path.isdir(project_root):
        sys.stderr.write(""ERROR: {0} is not a directory\n"".format(project_root))
        sys.exit(-1)

    # read config file
    print('- parsing autocmake.yml')
    with open('autocmake.yml', 'r') as stream:
        config = parse_yaml(stream)

    if 'name' in config:
        project_name = config['name']
    else:
        sys.stderr.write(""ERROR: you have to specify the project name in autocmake.yml\n"")
        sys.exit(-1)
    if ' ' in project_name.rstrip():
        sys.stderr.write(""ERROR: project name contains a space\n"")
        sys.exit(-1)

    if 'language' in config:
        project_language = ' '.join(config['language']) if isinstance(config['language'], list) else config['language']
    else:
        sys.stderr.write(""ERROR: you have to specify the project language(s) in autocmake.yml\n\n"")
        sys.stderr.write(""# for instance like this (several languages):\nlanguage:\n  - CXX\n  - Fortran\n\n"")
        sys.stderr.write(""# or like this (one language):\nlanguage: Fortran\n\n"")
        sys.exit(-1)

    if 'min_cmake_version' in config:
        min_cmake_version = config['min_cmake_version']
    else:
        sys.stderr.write(""ERROR: you have to specify min_cmake_version in autocmake.yml\n"")
        sys.exit(-1)

    if 'default_build_type' in config:
        default_build_type = config['default_build_type'].lower()
    else:
        sys.stderr.write(""ERROR: you have to specify default_build_type in autocmake.yml\n\n"")
        sys.stderr.write(""# for instance like this (debug, release, relwithdebinfo, or minsizerel):\ndefault_build_type: release\n\n"")
        sys.exit(-1)

    if 'setup_script' in config:
        setup_script_name = config['setup_script']
    else:
        setup_script_name = 'setup'

    # get relative path from setup script to this directory
    relative_path = os.path.relpath(os.path.abspath('.'), project_root)

    download_directory = 'downloaded'
    if not os.path.exists(download_directory):
        os.makedirs(download_directory)

    # fetch modules from the web or from relative paths
    modules, cleaned_config = fetch_modules(config, relative_path, download_directory)

    # fetch files which are not parsed
    for src in cleaned_config['fetch']:
        dst = os.path.join(download_directory, os.path.basename(src))
        fetch_url(src, dst)

    # print warnings
    for warning in cleaned_config['warning']:
        print('- WARNING: {0}'.format(warning))

    # create CMakeLists.txt
    print('- generating CMakeLists.txt')
    s = gen_cmakelists(project_name, project_language, min_cmake_version, default_build_type, relative_path, modules)
    with open(os.path.join(project_root, 'CMakeLists.txt'), 'w') as f:
        f.write('{0}\n'.format('\n'.join(s)))

    # create setup script unless it is 'None' or 'none'
    if setup_script_name.lower() != 'none':
        print('- generating setup script')
        s = gen_setup(cleaned_config, default_build_type, relative_path, setup_script_name)
        file_path = os.path.join(project_root, setup_script_name)
        with open(file_path, 'w') as f:
            f.write('{0}\n'.format('\n'.join(s)))
        if sys.platform != 'win32':
            make_executable(file_path)


def main(argv):
    """"""
    Main function.
    """"""

    if len(argv) != 2:
        sys.stderr.write(""\nYou can update a project in two steps.\n\n"")
        sys.stderr.write(""Step 1: Update or create infrastructure files\n"")
        sys.stderr.write(""        which will be needed to configure and build the project:\n"")
        sys.stderr.write(""        $ {0} --self\n\n"".format(argv[0]))
        sys.stderr.write(""Step 2: Create CMakeLists.txt and setup script in PROJECT_ROOT:\n"")
        sys.stderr.write(""        $ {0} <PROJECT_ROOT>\n"".format(argv[0]))
        sys.stderr.write(""        example:\n"")
        sys.stderr.write(""        $ {0} ..\n"".format(argv[0]))
        sys.exit(-1)

    if argv[1] in ['-h', '--help']:
        print('Usage:')
        for t, h in [('python update.py --self',
                      'Update this script and fetch or update infrastructure files under autocmake/.'),
                     ('python update.py <builddir>',
                      '(Re)generate CMakeLists.txt and setup script and fetch or update CMake modules.'),
                     ('python update.py (-h | --help)',
                      'Show this help text.')]:
            print('  {0:30} {1}'.format(t, h))
        sys.exit(0)

    if argv[1] == '--self':
        # update self
        if not os.path.isfile('autocmake.yml'):
            print('- fetching example autocmake.yml')
            fetch_url(
                src='{0}example/autocmake.yml'.format(AUTOCMAKE_GITHUB_URL),
                dst='autocmake.yml'
            )
        if not os.path.isfile('.gitignore'):
            print('- creating .gitignore')
            with open('.gitignore', 'w') as f:
                f.write('*.pyc\n')
        for f in ['autocmake/configure.py',
                  'autocmake/__init__.py',
                  'autocmake/external/docopt.py',
                  'autocmake/external/__init__.py',
                  'autocmake/generate.py',
                  'autocmake/extract.py',
                  'autocmake/interpolate.py',
                  'autocmake/parse_rst.py',
                  'autocmake/parse_yaml.py',
                  'update.py']:
            print('- fetching {0}'.format(f))
            fetch_url(
                src='{0}{1}'.format(AUTOCMAKE_GITHUB_URL, f),
                dst='{0}'.format(f)
            )
        # finally create a README.md with licensing information
        with open('README.md', 'w') as f:
            print('- generating licensing information')
            f.write(licensing_info())
        sys.exit(0)

    process_yaml(argv)


def make_executable(path):
    # http://stackoverflow.com/a/30463972
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2    # copy R bits to X
    os.chmod(path, mode)


def fetch_url(src, dst):
    """"""
    Fetch file from URL src and save it to dst.
    """"""
    # we do not use the nicer sys.version_info.major
    # for compatibility with Python < 2.7
    if sys.version_info[0] > 2:
        import urllib.request

        class URLopener(urllib.request.FancyURLopener):
            def http_error_default(self, url, fp, errcode, errmsg, headers):
                sys.stderr.write(""ERROR: could not fetch {0}\n"".format(url))
                sys.exit(-1)
    else:
        import urllib

        class URLopener(urllib.FancyURLopener):
            def http_error_default(self, url, fp, errcode, errmsg, headers):
                sys.stderr.write(""ERROR: could not fetch {0}\n"".format(url))
                sys.exit(-1)

    dirname = os.path.dirname(dst)
    if dirname != '':
        if not os.path.isdir(dirname):
            os.makedirs(dirname)

    opener = URLopener()
    opener.retrieve(src, dst)


if __name__ == '__main__':
    check_for_yaml()
    main(sys.argv)
",FALSE,,
5100,InitialSO.csv5100.txt,InitialGit.csv5100.txt,17,"package com.example;

import android.os.Bundle;
import android.support.test.runner.AndroidJUnitRunner;
import android.util.Log;

import java.lang.reflect.Method;

public class AndroidJacocoTestRunner extends AndroidJUnitRunner {

    static {
        System.setProperty(""jacoco-agent.destfile"", ""/data/data/""+BuildConfig.APPLICATION_ID+""/coverage.ec"");
    }

    @Override
    public void finish(int resultCode, Bundle results) {
        try {
            Class rt = Class.forName(""org.jacoco.agent.rt.RT"");
            Method getAgent = rt.getMethod(""getAgent"");
            Method dump = getAgent.getReturnType().getMethod(""dump"", boolean.class);
            Object agent = getAgent.invoke(null);
            dump.invoke(agent, false);
        } catch (Throwable e) {
            Log.d(""JACOCO"", e.getMessage());
        }
        super.finish(resultCode, results);
    }
}
 android{
    ...
    defaultConfig {
      ....
      testInstrumentationRunner ""com.example.AndroidJacocoTestRunner""
    }
}
 ","package com.example;

import android.os.Bundle;
import android.support.test.runner.AndroidJUnitRunner;
import android.util.Log;

import java.lang.reflect.Method;

public class AndroidJacocoTestRunner extends AndroidJUnitRunner {

    static {
        System.setProperty(""jacoco-agent.destfile"", ""/data/data/""+BuildConfig.APPLICATION_ID+""/coverage.ec"");
    }

    @Override
    public void finish(int resultCode, Bundle results) {
        try {
            Class rt = Class.forName(""org.jacoco.agent.rt.RT"");
            Method getAgent = rt.getMethod(""getAgent"");
            Method dump = getAgent.getReturnType().getMethod(""dump"", boolean.class);
            Object agent = getAgent.invoke(null);
            dump.invoke(agent, false);
        } catch (Throwable e) {
            Log.d(""JACOCO"", e.getMessage());
        }
        super.finish(resultCode, results);
    }
}
 android{
    ...
    defaultConfig {
      ....
      testInstrumentationRunner ""com.example.AndroidJacocoTestRunner""
    }
}
 ",TRUE,"/*
 * This class comes from a StackOverflow post:
 * http://stackoverflow.com/questions/30337375/empty-jacoco-report-for-android-espresso/31600193#31600193
 *
 * This should be fixed in com.android.test.support:runner:0.4 and this class can be removed.
 */
package org.connectbot;

import android.os.Bundle;
import android.support.test.runner.AndroidJUnitRunner;
import android.util.Log;

import java.lang.reflect.Method;

public class FixJacocoTestRunner extends AndroidJUnitRunner {

	static {
		System.setProperty(""jacoco-agent.destfile"", ""/data/data/"" + BuildConfig.APPLICATION_ID + ""/coverage.ec"");
	}

	@Override
	public void finish(int resultCode, Bundle results) {
		try {
			Class rt = Class.forName(""org.jacoco.agent.rt.RT"");
			Method getAgent = rt.getMethod(""getAgent"");
			Method dump = getAgent.getReturnType().getMethod(""dump"", boolean.class);
			Object agent = getAgent.invoke(null);
			dump.invoke(agent, false);
		} catch (Throwable e) {
			Log.d(""JACOCO"", e.getMessage());
		}
		super.finish(resultCode, results);
	}
}
","/*
 * This class comes from a StackOverflow post:
 * http://stackoverflow.com/questions/30337375/empty-jacoco-report-for-android-espresso/31600193#31600193
 *
 * This should be fixed in com.android.test.support:runner:0.4 and this class can be removed.
 */
package org.connectbot;

import android.os.Bundle;
import android.support.test.runner.AndroidJUnitRunner;
import android.util.Log;

import java.lang.reflect.Method;

public class FixJacocoTestRunner extends AndroidJUnitRunner {

	static {
		System.setProperty(""jacoco-agent.destfile"", ""/data/data/"" + BuildConfig.APPLICATION_ID + ""/coverage.ec"");
	}

	@Override
	public void finish(int resultCode, Bundle results) {
		try {
			Class rt = Class.forName(""org.jacoco.agent.rt.RT"");
			Method getAgent = rt.getMethod(""getAgent"");
			Method dump = getAgent.getReturnType().getMethod(""dump"", boolean.class);
			Object agent = getAgent.invoke(null);
			dump.invoke(agent, false);
		} catch (Throwable e) {
			Log.d(""JACOCO"", e.getMessage());
		}
		super.finish(resultCode, results);
	}
}
",TRUE,,
5101,InitialSO.csv5101.txt,InitialGit.csv5101.txt,3,"-g null PackageManager#getAllPermissionGroups(int) null null PackageManager public static void printPermissionInfo(Context context) throws Exception {
    PackageManager pm = context.getPackageManager();
    List<PermissionGroupInfo> groupList = pm.getAllPermissionGroups(0);
    groupList.add(null); // ungrouped permissions
    Method protectionToString = PermissionInfo.class.getDeclaredMethod(""protectionToString"",
            int.class);
    for (PermissionGroupInfo group : groupList) {
        try {
            String name = group == null ? null : group.name;
            List<PermissionInfo> permissionInfos = pm.queryPermissionsByGroup(name, 0);
            for (PermissionInfo permissionInfo : permissionInfos) {
                String protection = (String) protectionToString.invoke(permissionInfo,
                        permissionInfo.protectionLevel);
                System.out.println(permissionInfo.name + "" "" + protection);
            }
        } catch (PackageManager.NameNotFoundException ignored) {
        }
    }
}
 com.google.android.gms.permission.CAR_VENDOR_EXTENSION dangerous
com.google.android.gms.permission.CAR_MILEAGE dangerous
com.google.android.gms.permission.CAR_FUEL dangerous
android.permission.WRITE_CONTACTS dangerous
android.permission.GET_ACCOUNTS dangerous
android.permission.READ_CONTACTS dangerous
android.permission.READ_CALL_LOG dangerous
android.permission.READ_PHONE_STATE dangerous
android.permission.ACCESS_IMS_CALL_SERVICE signature|privileged
android.permission.CALL_PHONE dangerous
android.permission.WRITE_CALL_LOG dangerous
android.permission.USE_SIP dangerous
android.permission.PROCESS_OUTGOING_CALLS dangerous
com.android.voicemail.permission.ADD_VOICEMAIL dangerous
android.permission.READ_CALENDAR dangerous
android.permission.WRITE_CALENDAR dangerous
android.permission.CAMERA dangerous
android.permission.BODY_SENSORS dangerous
android.permission.USE_FINGERPRINT normal
android.permission.ACCESS_FINE_LOCATION dangerous
com.google.android.gms.permission.CAR_SPEED dangerous
android.permission.ACCESS_COARSE_LOCATION dangerous
android.permission.READ_EXTERNAL_STORAGE dangerous
android.permission.WRITE_EXTERNAL_STORAGE dangerous
android.permission.RECORD_AUDIO dangerous
android.permission.READ_SMS dangerous
android.permission.RECEIVE_WAP_PUSH dangerous
android.permission.RECEIVE_MMS dangerous
android.permission.RECEIVE_SMS dangerous
android.permission.SEND_SMS dangerous
android.permission.READ_CELL_BROADCASTS dangerous
android.permission.REAL_GET_TASKS signature|privileged
android.permission.ACCESS_CACHE_FILESYSTEM signature|privileged
android.permission.REMOTE_AUDIO_PLAYBACK signature
com.google.android.apps.photos.permission.C2D_MESSAGE signature
android.permission.INTENT_FILTER_VERIFICATION_AGENT signature|privileged
android.permission.BIND_INCALL_SERVICE signature|privileged
com.google.android.gms.trustagent.framework.model.DATA_CHANGE_NOTIFICATION signature
android.permission.WRITE_SETTINGS signature|appop|pre23|preinstalled
android.permission.CONTROL_KEYGUARD signature
com.google.android.apps.magazines.permission.C2D_MESSAGE signature
com.google.android.calendar.permission.C2D_MESSAGE signature
android.permission.CONFIGURE_WIFI_DISPLAY signature
android.permission.ACCESS_WIMAX_STATE normal
android.permission.SET_INPUT_CALIBRATION signature
android.permission.RECOVERY signature|privileged
android.permission.TEMPORARY_ENABLE_ACCESSIBILITY signature
com.google.android.talk.permission.C2D_MESSAGE signature
android.permission.SET_PROCESS_LIMIT signature|privileged|development
com.google.android.googlequicksearchbox.permission.C2D_MESSAGE signature
android.permission.FRAME_STATS signature
com.google.android.apps.genie.geniewidget.permission.C2D_MESSAGE signature
android.permission.BRICK signature
com.google.android.gallery3d.permission.GALLERY_PROVIDER signature
android.permission.RESTART_PACKAGES normal
android.permission.BIND_KEYGUARD_APPWIDGET signature|privileged
android.permission.BIND_DEVICE_ADMIN signature
android.permission.MODIFY_AUDIO_SETTINGS normal
android.permission.ACCESS_CHECKIN_PROPERTIES signature|privileged
android.permission.KILL_UID signature|installer
android.permission.SIGNAL_PERSISTENT_PROCESSES signature|privileged|development
android.permission.BIND_PRINT_SERVICE signature
android.permission.ACCESS_NOTIFICATION_POLICY normal
android.permission.MODIFY_AUDIO_ROUTING signature|privileged
android.permission.RECEIVE_BLUETOOTH_MAP signature|privileged
android.permission.ACCESS_MOCK_LOCATION signature
com.google.android.apps.enterprise.dmagent.permission.NotificationBroadcastReceiverPermission signature|privileged
android.permission.GET_APP_OPS_STATS signature|privileged|development
android.permission.RECEIVE_DATA_ACTIVITY_CHANGE signature|privileged
android.permission.GET_PACKAGE_IMPORTANCE signature|privileged
com.google.android.youtube.permission.C2D_MESSAGE signature
android.permission.READ_WIFI_CREDENTIAL signature|privileged
android.permission.BIND_DREAM_SERVICE signature
android.permission.WRITE_GSERVICES signature|privileged
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS signature
android.permission.INSTALL_LOCATION_PROVIDER signature|privileged
com.google.android.voicesearch.AUDIO_FILE_ACCESS signature
android.permission.CONTROL_WIFI_DISPLAY signature
android.permission.SYSTEM_ALERT_WINDOW signature|appop|pre23|preinstalled
android.permission.BIND_CARRIER_SERVICES signature|privileged
com.google.android.gsf.subscribedfeeds.permission.C2D_MESSAGE signature
android.permission.BROADCAST_PHONE_ACCOUNT_REGISTRATION signature|privileged
android.permission.START_TASKS_FROM_RECENTS signature|privileged
com.google.android.apps.enterprise.dmagent.permission.AutoRegisterPermission signature|privileged
android.permission.CONTROL_LOCATION_UPDATES signature|privileged
com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE signature
android.permission.GET_TOP_ACTIVITY_INFO signature
android.permission.CLEAR_APP_USER_DATA signature|installer
android.permission.PROVIDE_TRUST_AGENT signature|privileged
android.permission.BROADCAST_CALLLOG_INFO signature|privileged
com.google.android.gms.chromesync.permission.CONTENT_PROVIDER_ACCESS signature
android.permission.INSTALL_PACKAGES signature|privileged
android.permission.SEND_RESPOND_VIA_MESSAGE signature|privileged
com.android.permission.WHITELIST_BLUETOOTH_DEVICE signature
android.permission.ACCESS_FM_RADIO signature|privileged
android.permission.MANAGE_VOICE_KEYPHRASES signature|privileged
android.permission.SHUTDOWN signature|privileged
android.permission.CHANGE_COMPONENT_ENABLED_STATE signature|privileged
com.google.android.gms.permission.CHECKIN_NOW signature
android.permission.BIND_TV_INPUT signature|privileged
android.permission.NFC normal
android.permission.MODIFY_PARENTAL_CONTROLS signature|privileged
android.permission.INTERNAL_SYSTEM_WINDOW signature
android.permission.PROCESS_PHONE_ACCOUNT_REGISTRATION signature|privileged
android.permission.RETRIEVE_WINDOW_TOKEN signature
android.permission.BIND_WALLPAPER signature|privileged
android.permission.START_ANY_ACTIVITY signature
android.permission.CAMERA_SEND_SYSTEM_EVENTS signature|privileged
com.google.android.apps.now.OPT_IN_WIZARD signature|privileged
android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS signature
com.google.android.googlequicksearchbox.permission.FINISH_GEL_ACTIVITY signature
android.permission.BROADCAST_SMS signature
android.permission.CALL_PRIVILEGED signature|privileged
android.permission.BIND_INTENT_FILTER_VERIFIER signature
android.permission.MANAGE_APP_TOKENS signature
android.permission.CHANGE_NETWORK_STATE signature|appop|pre23|preinstalled
android.permission.CAPTURE_TV_INPUT signature|privileged
com.google.android.apps.fitness.permission.C2D_MESSAGE signature
android.permission.MASTER_CLEAR signature|privileged
android.permission.PERSISTENT_ACTIVITY normal
android.permission.BIND_TELECOM_CONNECTION_SERVICE signature|privileged
android.permission.WRITE_SYNC_SETTINGS normal
com.google.android.providers.gsf.permission.WRITE_GSERVICES signature|privileged
android.permission.SET_DEBUG_APP signature|privileged|development
com.google.android.apps.wallet.permission.WALLET_INTERNAL signature
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY signature
com.google.android.apps.walletnfcrel.permission.C2D_MESSAGE signature
android.permission.RECEIVE_BOOT_COMPLETED normal
com.google.android.apps.cloudprint.permission.C2D_MESSAGE signature
android.permission.LOOP_RADIO signature|privileged
android.permission.GLOBAL_SEARCH_CONTROL signature
com.google.android.gms.auth.permission.POST_SIGN_IN_ACCOUNT signature
android.permission.PEERS_MAC_ADDRESS signature
android.permission.DEVICE_POWER signature
com.google.android.providers.settings.permission.READ_GSETTINGS signature
com.google.android.gms.cloudsave.BIND_EVENT_BROADCAST signature|privileged
com.android.vending.permission.C2D_MESSAGE signature
android.permission.SET_TIME_ZONE normal
android.permission.REMOVE_TASKS signature
com.google.android.googlequicksearchbox.permission.PAUSE_HOTWORD signature|privileged
android.permission.EXPAND_STATUS_BAR normal
com.android.launcher.permission.UNINSTALL_SHORTCUT normal
android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS signature
android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS normal
android.permission.READ_PROFILE normal
android.permission.BIND_VOICE_INTERACTION signature
com.google.android.marvin.feedback.permission.TALKBACK signature
android.permission.BLUETOOTH normal
android.permission.BROADCAST_WAP_PUSH signature
android.permission.CHANGE_WIFI_MULTICAST_STATE normal
com.google.android.onetimeinitializer.permission.ONE_TIME_INITIALIZED signature
android.permission.DVB_DEVICE signature|privileged
android.permission.PERFORM_SIM_ACTIVATION signature|privileged
com.android.alarm.permission.SET_ALARM normal
android.permission.CAPTURE_AUDIO_HOTWORD signature|privileged
android.permission.WRITE_MEDIA_STORAGE signature|privileged
com.android.voicemail.permission.READ_VOICEMAIL signature|privileged
android.permission.SET_ANIMATION_SCALE signature|privileged|development
com.google.android.gms.permission.AD_ID_NOTIFICATION normal
com.android.vending.setup.PLAY_SETUP_SERVICE signature|privileged
android.permission.GET_TASKS normal
android.permission.BROADCAST_NETWORK_PRIVILEGED signature|privileged
android.permission.ACCESS_SURFACE_FLINGER signature
com.google.android.googleapps.permission.ACCESS_GOOGLE_PASSWORD signature
android.permission.INTERNET normal
android.permission.TV_INPUT_HARDWARE signature|privileged
com.android.vending.INTENT_VENDING_ONLY signature
android.permission.TRANSMIT_IR normal
com.google.android.gms.permission.C2D_MESSAGE signature
android.permission.RETRIEVE_WINDOW_CONTENT signature|privileged
android.permission.REORDER_TASKS normal
com.android.chrome.permission.CHILD_SERVICE signature
com.google.android.videos.permission.C2D_MESSAGE signature
android.permission.BLUETOOTH_ADMIN normal
android.permission.CONTROL_VPN signature|privileged
android.permission.UPDATE_DEVICE_STATS signature|privileged
android.permission.BLUETOOTH_STACK signature
android.permission.BLUETOOTH_MAP signature
android.permission.READ_PRECISE_PHONE_STATE signature|privileged
android.permission.MANAGE_FINGERPRINT signature|privileged
com.google.android.partnersetup.permission.UPDATE_CLIENT_ID signature|privileged
android.permission.NET_ADMIN signature
com.google.android.gms.permission.GAMES_DEBUG_SETTINGS signature
android.permission.CARRIER_FILTER_SMS signature|privileged
android.permission.PERFORM_CDMA_PROVISIONING signature|privileged
com.google.android.gms.trustagent.permission.TRUSTAGENT_STATE signature
android.permission.BIND_CONNECTION_SERVICE signature|privileged
android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS signature|installer|verifier
android.permission.WRITE_SOCIAL_STREAM normal
android.permission.LAUNCH_TRUST_AGENT_SETTINGS signature|privileged
android.permission.REGISTER_CALL_PROVIDER signature|privileged
android.permission.GET_PACKAGE_SIZE normal
android.permission.BIND_VPN_SERVICE signature
android.permission.TRUST_LISTENER signature
android.permission.ACCOUNT_MANAGER signature
android.permission.MANAGE_USB signature|privileged
android.permission.ACCESS_ALL_DOWNLOADS signature
android.permission.INTERACT_ACROSS_USERS_FULL signature|installer
android.permission.BIND_APPWIDGET signature|privileged
android.permission.STOP_APP_SWITCHES signature|privileged
android.permission.BATTERY_STATS signature|privileged|development
com.google.android.gms.permission.INTERNAL_BROADCAST signature
android.permission.PACKAGE_USAGE_STATS signature|privileged|development|appop
android.permission.WRITE_PROFILE normal
android.permission.MOUNT_UNMOUNT_FILESYSTEMS signature|privileged
android.permission.GET_ACCOUNTS_PRIVILEGED signature|privileged
android.permission.WRITE_SECURE_SETTINGS signature|privileged|development
com.android.vending.TOS_ACKED signature|privileged
android.permission.SERIAL_PORT signature|privileged
android.permission.BIND_NOTIFICATION_LISTENER_SERVICE signature
android.permission.CAPTURE_AUDIO_OUTPUT signature|privileged
android.permission.BIND_MIDI_DEVICE_SERVICE signature
android.permission.MOVE_PACKAGE signature|privileged
android.permission.SET_ACTIVITY_WATCHER signature
android.permission.STATUS_BAR_SERVICE signature
android.permission.READ_SEARCH_INDEXABLES signature|privileged
android.permission.NFC_HANDOVER_STATUS signature|privileged
android.permission.SCORE_NETWORKS signature|privileged
android.permission.DIAGNOSTIC signature
android.permission.ACCESS_LOCATION_EXTRA_COMMANDS normal
android.permission.RECEIVE_WIFI_CREDENTIAL_CHANGE signature|privileged
android.permission.READ_PRIVILEGED_PHONE_STATE signature|privileged
android.permission.ACCESS_DOWNLOAD_MANAGER signature|privileged
android.permission.BROADCAST_STICKY normal
android.permission.ASEC_ACCESS signature
android.permission.BIND_REMOTE_DISPLAY signature
android.permission.BLUETOOTH_PRIVILEGED signature|privileged
com.google.android.gms.permission.CAR signature
android.permission.SET_ALWAYS_FINISH signature|privileged|development
android.permission.HARDWARE_TEST signature
com.google.android.videos.permission.INVALIDATE_AUTH_TOKENS signature
android.permission.ASEC_CREATE signature
com.google.android.apps.enterprise.dmagent.permission.AutoSyncPermission signature|privileged
com.google.android.apps.enterprise.dmagent.permission.InvokeDMServicePermission signature
android.intent.category.MASTER_CLEAR.permission.C2D_MESSAGE signature
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE signature
com.google.android.launcher.permission.CONTENT_REDIRECT signature
android.permission.BIND_JOB_SERVICE signature
android.permission.CONFIRM_FULL_BACKUP signature
android.permission.CAPTURE_SECURE_VIDEO_OUTPUT signature|privileged
android.permission.SET_TIME signature|privileged
android.permission.WRITE_APN_SETTINGS signature|privileged
com.google.android.providers.settings.permission.WRITE_GSETTINGS signature
android.permission.CHANGE_WIFI_STATE normal
com.google.android.apps.gcs.RECEIVE_GCS_STATE signature|privileged
android.permission.BIND_PACKAGE_VERIFIER signature
android.permission.READ_INSTALL_SESSIONS normal
android.permission.BIND_ROUTE_PROVIDER signature
android.permission.RECEIVE_STK_COMMANDS signature|privileged
android.permission.BIND_CARRIER_MESSAGING_SERVICE signature|privileged
android.permission.ACCESS_BLUETOOTH_SHARE signature
android.permission.PACKAGE_VERIFICATION_AGENT signature|privileged
com.google.android.apps.maps.permission.PREFETCH signature
android.permission.SET_ORIENTATION signature
android.permission.REVOKE_RUNTIME_PERMISSIONS signature|installer|verifier
android.permission.MANAGE_USERS signature|privileged
com.android.vending.billing.BILLING_ACCOUNT_SERVICE signature|privileged
com.google.android.gm.email.permission.ACCESS_PROVIDER signature
android.permission.SET_PREFERRED_APPLICATIONS signature
android.permission.FLASHLIGHT normal
android.permission.DELETE_CACHE_FILES signature|privileged
com.google.android.hangouts.START_HANGOUT signature
android.permission.SET_WALLPAPER_COMPONENT signature|privileged
android.permission.ACCESS_NETWORK_STATE normal
android.permission.BIND_CONDITION_PROVIDER_SERVICE signature
android.permission.ACCESS_MTP signature|privileged
android.permission.DISABLE_KEYGUARD normal
android.permission.BACKUP signature|privileged
android.permission.PROCESS_CALLLOG_INFO signature|privileged
android.permission.CHANGE_CONFIGURATION signature|privileged|development
android.permission.USER_ACTIVITY signature|privileged
android.permission.LOCAL_MAC_ADDRESS signature|privileged
android.permission.READ_LOGS signature|privileged|development
com.google.android.apps.maps.permission.C2D_MESSAGE signature
android.permission.COPY_PROTECTED_DATA signature
android.permission.ASEC_DESTROY signature
android.permission.INTERACT_ACROSS_USERS signature|privileged|development
android.permission.SET_WALLPAPER normal
android.permission.ASEC_RENAME signature
android.permission.SET_KEYBOARD_LAYOUT signature
android.permission.UPDATE_CONFIG signature|privileged
android.permission.ACCESS_NETWORK_CONDITIONS signature|privileged
android.permission.READ_DREAM_STATE signature|privileged
android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT signature
com.google.googlenav.friend.permission.OPT_IN signature
com.google.android.launcher.permission.RECEIVE_FIRST_LOAD_BROADCAST signature|privileged
android.permission.UPDATE_LOCK signature|privileged
android.permission.READ_NETWORK_USAGE_HISTORY signature|privileged
android.permission.ACCESS_DRM_CERTIFICATES signature|privileged
com.google.android.gsf.permission.C2D_MESSAGE signature
com.google.android.googlequicksearchbox.permission.FLUSH_LOGS signature
android.permission.READ_INPUT_STATE signature
android.permission.KILL_BACKGROUND_PROCESSES normal
android.permission.ACCESS_VOICE_INTERACTION_SERVICE signature
android.permission.BIND_PRINT_SPOOLER_SERVICE signature
android.permission.BIND_DIRECTORY_SEARCH signature|privileged
android.permission.WRITE_USER_DICTIONARY normal
android.permission.REGISTER_SIM_SUBSCRIPTION signature|privileged
android.permission.READ_SYNC_STATS normal
android.permission.WRITE_DREAM_STATE signature|privileged
android.permission.FREEZE_SCREEN signature
android.permission.DOWNLOAD_CACHE_NON_PURGEABLE signature|privileged
android.permission.REBOOT signature|privileged
android.permission.DISPATCH_NFC_MESSAGE signature|privileged
com.google.android.gms.auth.permission.FACE_UNLOCK signature
android.permission.MOUNT_FORMAT_FILESYSTEMS signature|privileged
android.permission.OEM_UNLOCK_STATE signature
android.permission.REGISTER_CONNECTION_MANAGER signature|privileged
android.permission.MANAGE_DEVICE_ADMINS signature|privileged
android.permission.CLEAR_APP_CACHE signature|privileged
android.permission.CHANGE_APP_IDLE_STATE signature
com.google.android.gms.auth.permission.GOOGLE_ACCOUNT_CHANGE signature
com.google.android.gms.trustagent.framework.model.DATA_ACCESS signature
android.permission.BIND_TRUST_AGENT signature
android.permission.MANAGE_DOCUMENTS signature
android.permission.ACCESS_PDB_STATE signature
android.permission.MANAGE_NETWORK_POLICY signature
android.permission.BIND_REMOTEVIEWS signature|privileged
android.permission.ASEC_MOUNT_UNMOUNT signature
android.permission.GRANT_RUNTIME_PERMISSIONS signature|installer
android.permission.SET_POINTER_SPEED signature
android.permission.CHANGE_BACKGROUND_DATA_SETTING signature
com.android.systemui.permission.SELF signature
com.android.chrome.TOS_ACKED signature|privileged
android.permission.GLOBAL_SEARCH signature|privileged
android.permission.NET_TUNNELING signature
android.permission.CONNECTIVITY_INTERNAL signature|privileged
android.permission.FACTORY_TEST signature
android.permission.SET_WALLPAPER_HINTS normal
android.permission.MANAGE_MEDIA_PROJECTION signature
android.permission.READ_SYNC_SETTINGS normal
com.google.android.apps.now.CURRENT_ACCOUNT_ACCESS signature
com.google.android.partnersetup.permission.ACCESS_PROVIDER signature
com.android.chrome.permission.C2D_MESSAGE signature
android.permission.BROADCAST_PACKAGE_REMOVED signature
com.google.android.music.store.permission.C2D_MESSAGE signature
android.permission.OVERRIDE_WIFI_CONFIG signature|privileged
com.android.gallery3d.filtershow.permission.READ signature
android.permission.FORCE_STOP_PACKAGES signature|privileged
android.permission.MANAGE_CA_CERTIFICATES signature|privileged
android.permission.CAPTURE_VIDEO_OUTPUT signature|privileged
android.permission.ACCESS_NOTIFICATIONS signature|privileged
android.permission.VIBRATE normal
com.android.certinstaller.INSTALL_AS_USER signature
com.google.android.gsf.permission.CONNECTION signature
com.google.android.apps.plus.permission.MAPS_RECEIVE signature
android.permission.BIND_ACCESSIBILITY_SERVICE signature
android.server.checkin.CHECKIN.permission.C2D_MESSAGE signature
android.permission.MANAGE_ACTIVITY_STACKS signature|privileged
android.permission.SEND_CALL_LOG_CHANGE signature|privileged
android.permission.HDMI_CEC signature|privileged
android.permission.BIND_INPUT_METHOD signature
android.permission.INVOKE_CARRIER_SETUP signature|privileged
android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST signature|privileged
android.permission.REMOVE_DRM_CERTIFICATES signature|privileged
com.google.android.googleapps.permission.GOOGLE_MAIL_SWITCH signature
android.permission.READ_USER_DICTIONARY normal
android.permission.FILTER_EVENTS signature
android.permission.RECEIVE_EMERGENCY_BROADCAST signature|privileged
com.google.android.finsky.permission.GEARHEAD_SERVICE signature|privileged
android.permission.MODIFY_NETWORK_ACCOUNTING signature|privileged
android.permission.CRYPT_KEEPER signature|privileged
android.permission.BIND_NFC_SERVICE signature
android.permission.START_PRINT_SERVICE_CONFIG_ACTIVITY signature
com.android.voicemail.permission.WRITE_VOICEMAIL signature|privileged
android.permission.GET_DETAILED_TASKS signature
android.permission.NOTIFY_PENDING_SYSTEM_UPDATE signature|privileged
android.permission.ALLOW_ANY_CODEC_FOR_PLAYBACK signature|privileged
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS signature|privileged
android.permission.ACCESS_WIFI_STATE normal
com.google.android.apps.enterprise.dmagent.permission.C2D_MESSAGE signature
android.permission.FORCE_BACK signature
com.android.chrome.permission.READ_WRITE_BOOKMARK_FOLDERS signature|privileged
com.google.android.launcher.permission.RECEIVE_LAUNCH_BROADCASTS signature
android.permission.CHANGE_WIMAX_STATE normal
android.permission.CAMERA_DISABLE_TRANSMIT_LED signature|privileged
android.permission.REQUEST_INSTALL_PACKAGES normal
android.permission.CONTROL_INCALL_EXPERIENCE signature|privileged
android.permission.MODIFY_PHONE_STATE signature|privileged
com.google.android.gm.email.permission.UPDATE_AUTH_NOTIFICATION signature
com.google.android.googlequicksearchbox.LAUNCH_FROM_DSP_HOTWORD signature|privileged
com.android.launcher.permission.INSTALL_SHORTCUT normal
android.permission.BIND_TEXT_SERVICE signature
android.permission.STATUS_BAR signature|privileged
android.permission.READ_FRAME_BUFFER signature|privileged
com.google.android.gms.DRIVE signature
android.permission.DUMP signature|privileged|development
android.permission.LOCATION_HARDWARE signature|privileged
com.google.android.apps.plus.permission.C2D_MESSAGE signature
com.google.android.marvin.talkback.permission.LABELING signature
com.google.android.googlequicksearchbox.LAUNCH_WITH_RECORDED_AUDIO signature|privileged
android.permission.READ_SOCIAL_STREAM normal
android.permission.WAKE_LOCK normal
android.permission.INJECT_EVENTS signature
android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED signature|privileged
android.permission.BIND_CHOOSER_TARGET_SERVICE signature
android.permission.UPDATE_APP_OPS_STATS signature|privileged|installer
com.android.gallery3d.filtershow.permission.WRITE signature
android.permission.ACCESS_INPUT_FLINGER signature
android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS signature|privileged
com.android.vending.billing.ADD_CREDIT_CARD signature|privileged
android.permission.SET_SCREEN_COMPATIBILITY signature
com.android.vending.billing.IN_APP_NOTIFY.permission.C2D_MESSAGE signature
android.permission.MEDIA_CONTENT_CONTROL signature|privileged
android.permission.DELETE_PACKAGES signature|privileged
com.google.android.calendar.permission.READ_OOBE signature
 android.permission.NFC ","-g null PackageManager#getAllPermissionGroups(int) null null PackageManager public static void printPermissionInfo(Context context) throws Exception {
    PackageManager pm = context.getPackageManager();
    List<PermissionGroupInfo> groupList = pm.getAllPermissionGroups(0);
    groupList.add(null); // ungrouped permissions
    Method protectionToString = PermissionInfo.class.getDeclaredMethod(""protectionToString"",
            int.class);
    for (PermissionGroupInfo group : groupList) {
        try {
            String name = group == null ? null : group.name;
            List<PermissionInfo> permissionInfos = pm.queryPermissionsByGroup(name, 0);
            for (PermissionInfo permissionInfo : permissionInfos) {
                String protection = (String) protectionToString.invoke(permissionInfo,
                        permissionInfo.protectionLevel);
                System.out.println(permissionInfo.name + "" "" + protection);
            }
        } catch (PackageManager.NameNotFoundException ignored) {
        }
    }
}
 com.google.android.gms.permission.CAR_VENDOR_EXTENSION dangerous
com.google.android.gms.permission.CAR_MILEAGE dangerous
com.google.android.gms.permission.CAR_FUEL dangerous
android.permission.WRITE_CONTACTS dangerous
android.permission.GET_ACCOUNTS dangerous
android.permission.READ_CONTACTS dangerous
android.permission.READ_CALL_LOG dangerous
android.permission.READ_PHONE_STATE dangerous
android.permission.ACCESS_IMS_CALL_SERVICE signature|privileged
android.permission.CALL_PHONE dangerous
android.permission.WRITE_CALL_LOG dangerous
android.permission.USE_SIP dangerous
android.permission.PROCESS_OUTGOING_CALLS dangerous
com.android.voicemail.permission.ADD_VOICEMAIL dangerous
android.permission.READ_CALENDAR dangerous
android.permission.WRITE_CALENDAR dangerous
android.permission.CAMERA dangerous
android.permission.BODY_SENSORS dangerous
android.permission.USE_FINGERPRINT normal
android.permission.ACCESS_FINE_LOCATION dangerous
com.google.android.gms.permission.CAR_SPEED dangerous
android.permission.ACCESS_COARSE_LOCATION dangerous
android.permission.READ_EXTERNAL_STORAGE dangerous
android.permission.WRITE_EXTERNAL_STORAGE dangerous
android.permission.RECORD_AUDIO dangerous
android.permission.READ_SMS dangerous
android.permission.RECEIVE_WAP_PUSH dangerous
android.permission.RECEIVE_MMS dangerous
android.permission.RECEIVE_SMS dangerous
android.permission.SEND_SMS dangerous
android.permission.READ_CELL_BROADCASTS dangerous
android.permission.REAL_GET_TASKS signature|privileged
android.permission.ACCESS_CACHE_FILESYSTEM signature|privileged
android.permission.REMOTE_AUDIO_PLAYBACK signature
com.google.android.apps.photos.permission.C2D_MESSAGE signature
android.permission.INTENT_FILTER_VERIFICATION_AGENT signature|privileged
android.permission.BIND_INCALL_SERVICE signature|privileged
com.google.android.gms.trustagent.framework.model.DATA_CHANGE_NOTIFICATION signature
android.permission.WRITE_SETTINGS signature|appop|pre23|preinstalled
android.permission.CONTROL_KEYGUARD signature
com.google.android.apps.magazines.permission.C2D_MESSAGE signature
com.google.android.calendar.permission.C2D_MESSAGE signature
android.permission.CONFIGURE_WIFI_DISPLAY signature
android.permission.ACCESS_WIMAX_STATE normal
android.permission.SET_INPUT_CALIBRATION signature
android.permission.RECOVERY signature|privileged
android.permission.TEMPORARY_ENABLE_ACCESSIBILITY signature
com.google.android.talk.permission.C2D_MESSAGE signature
android.permission.SET_PROCESS_LIMIT signature|privileged|development
com.google.android.googlequicksearchbox.permission.C2D_MESSAGE signature
android.permission.FRAME_STATS signature
com.google.android.apps.genie.geniewidget.permission.C2D_MESSAGE signature
android.permission.BRICK signature
com.google.android.gallery3d.permission.GALLERY_PROVIDER signature
android.permission.RESTART_PACKAGES normal
android.permission.BIND_KEYGUARD_APPWIDGET signature|privileged
android.permission.BIND_DEVICE_ADMIN signature
android.permission.MODIFY_AUDIO_SETTINGS normal
android.permission.ACCESS_CHECKIN_PROPERTIES signature|privileged
android.permission.KILL_UID signature|installer
android.permission.SIGNAL_PERSISTENT_PROCESSES signature|privileged|development
android.permission.BIND_PRINT_SERVICE signature
android.permission.ACCESS_NOTIFICATION_POLICY normal
android.permission.MODIFY_AUDIO_ROUTING signature|privileged
android.permission.RECEIVE_BLUETOOTH_MAP signature|privileged
android.permission.ACCESS_MOCK_LOCATION signature
com.google.android.apps.enterprise.dmagent.permission.NotificationBroadcastReceiverPermission signature|privileged
android.permission.GET_APP_OPS_STATS signature|privileged|development
android.permission.RECEIVE_DATA_ACTIVITY_CHANGE signature|privileged
android.permission.GET_PACKAGE_IMPORTANCE signature|privileged
com.google.android.youtube.permission.C2D_MESSAGE signature
android.permission.READ_WIFI_CREDENTIAL signature|privileged
android.permission.BIND_DREAM_SERVICE signature
android.permission.WRITE_GSERVICES signature|privileged
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS signature
android.permission.INSTALL_LOCATION_PROVIDER signature|privileged
com.google.android.voicesearch.AUDIO_FILE_ACCESS signature
android.permission.CONTROL_WIFI_DISPLAY signature
android.permission.SYSTEM_ALERT_WINDOW signature|appop|pre23|preinstalled
android.permission.BIND_CARRIER_SERVICES signature|privileged
com.google.android.gsf.subscribedfeeds.permission.C2D_MESSAGE signature
android.permission.BROADCAST_PHONE_ACCOUNT_REGISTRATION signature|privileged
android.permission.START_TASKS_FROM_RECENTS signature|privileged
com.google.android.apps.enterprise.dmagent.permission.AutoRegisterPermission signature|privileged
android.permission.CONTROL_LOCATION_UPDATES signature|privileged
com.google.android.gms.permission.BIND_NETWORK_TASK_SERVICE signature
android.permission.GET_TOP_ACTIVITY_INFO signature
android.permission.CLEAR_APP_USER_DATA signature|installer
android.permission.PROVIDE_TRUST_AGENT signature|privileged
android.permission.BROADCAST_CALLLOG_INFO signature|privileged
com.google.android.gms.chromesync.permission.CONTENT_PROVIDER_ACCESS signature
android.permission.INSTALL_PACKAGES signature|privileged
android.permission.SEND_RESPOND_VIA_MESSAGE signature|privileged
com.android.permission.WHITELIST_BLUETOOTH_DEVICE signature
android.permission.ACCESS_FM_RADIO signature|privileged
android.permission.MANAGE_VOICE_KEYPHRASES signature|privileged
android.permission.SHUTDOWN signature|privileged
android.permission.CHANGE_COMPONENT_ENABLED_STATE signature|privileged
com.google.android.gms.permission.CHECKIN_NOW signature
android.permission.BIND_TV_INPUT signature|privileged
android.permission.NFC normal
android.permission.MODIFY_PARENTAL_CONTROLS signature|privileged
android.permission.INTERNAL_SYSTEM_WINDOW signature
android.permission.PROCESS_PHONE_ACCOUNT_REGISTRATION signature|privileged
android.permission.RETRIEVE_WINDOW_TOKEN signature
android.permission.BIND_WALLPAPER signature|privileged
android.permission.START_ANY_ACTIVITY signature
android.permission.CAMERA_SEND_SYSTEM_EVENTS signature|privileged
com.google.android.apps.now.OPT_IN_WIZARD signature|privileged
android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS signature
com.google.android.googlequicksearchbox.permission.FINISH_GEL_ACTIVITY signature
android.permission.BROADCAST_SMS signature
android.permission.CALL_PRIVILEGED signature|privileged
android.permission.BIND_INTENT_FILTER_VERIFIER signature
android.permission.MANAGE_APP_TOKENS signature
android.permission.CHANGE_NETWORK_STATE signature|appop|pre23|preinstalled
android.permission.CAPTURE_TV_INPUT signature|privileged
com.google.android.apps.fitness.permission.C2D_MESSAGE signature
android.permission.MASTER_CLEAR signature|privileged
android.permission.PERSISTENT_ACTIVITY normal
android.permission.BIND_TELECOM_CONNECTION_SERVICE signature|privileged
android.permission.WRITE_SYNC_SETTINGS normal
com.google.android.providers.gsf.permission.WRITE_GSERVICES signature|privileged
android.permission.SET_DEBUG_APP signature|privileged|development
com.google.android.apps.wallet.permission.WALLET_INTERNAL signature
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY signature
com.google.android.apps.walletnfcrel.permission.C2D_MESSAGE signature
android.permission.RECEIVE_BOOT_COMPLETED normal
com.google.android.apps.cloudprint.permission.C2D_MESSAGE signature
android.permission.LOOP_RADIO signature|privileged
android.permission.GLOBAL_SEARCH_CONTROL signature
com.google.android.gms.auth.permission.POST_SIGN_IN_ACCOUNT signature
android.permission.PEERS_MAC_ADDRESS signature
android.permission.DEVICE_POWER signature
com.google.android.providers.settings.permission.READ_GSETTINGS signature
com.google.android.gms.cloudsave.BIND_EVENT_BROADCAST signature|privileged
com.android.vending.permission.C2D_MESSAGE signature
android.permission.SET_TIME_ZONE normal
android.permission.REMOVE_TASKS signature
com.google.android.googlequicksearchbox.permission.PAUSE_HOTWORD signature|privileged
android.permission.EXPAND_STATUS_BAR normal
com.android.launcher.permission.UNINSTALL_SHORTCUT normal
android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS signature
android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS normal
android.permission.READ_PROFILE normal
android.permission.BIND_VOICE_INTERACTION signature
com.google.android.marvin.feedback.permission.TALKBACK signature
android.permission.BLUETOOTH normal
android.permission.BROADCAST_WAP_PUSH signature
android.permission.CHANGE_WIFI_MULTICAST_STATE normal
com.google.android.onetimeinitializer.permission.ONE_TIME_INITIALIZED signature
android.permission.DVB_DEVICE signature|privileged
android.permission.PERFORM_SIM_ACTIVATION signature|privileged
com.android.alarm.permission.SET_ALARM normal
android.permission.CAPTURE_AUDIO_HOTWORD signature|privileged
android.permission.WRITE_MEDIA_STORAGE signature|privileged
com.android.voicemail.permission.READ_VOICEMAIL signature|privileged
android.permission.SET_ANIMATION_SCALE signature|privileged|development
com.google.android.gms.permission.AD_ID_NOTIFICATION normal
com.android.vending.setup.PLAY_SETUP_SERVICE signature|privileged
android.permission.GET_TASKS normal
android.permission.BROADCAST_NETWORK_PRIVILEGED signature|privileged
android.permission.ACCESS_SURFACE_FLINGER signature
com.google.android.googleapps.permission.ACCESS_GOOGLE_PASSWORD signature
android.permission.INTERNET normal
android.permission.TV_INPUT_HARDWARE signature|privileged
com.android.vending.INTENT_VENDING_ONLY signature
android.permission.TRANSMIT_IR normal
com.google.android.gms.permission.C2D_MESSAGE signature
android.permission.RETRIEVE_WINDOW_CONTENT signature|privileged
android.permission.REORDER_TASKS normal
com.android.chrome.permission.CHILD_SERVICE signature
com.google.android.videos.permission.C2D_MESSAGE signature
android.permission.BLUETOOTH_ADMIN normal
android.permission.CONTROL_VPN signature|privileged
android.permission.UPDATE_DEVICE_STATS signature|privileged
android.permission.BLUETOOTH_STACK signature
android.permission.BLUETOOTH_MAP signature
android.permission.READ_PRECISE_PHONE_STATE signature|privileged
android.permission.MANAGE_FINGERPRINT signature|privileged
com.google.android.partnersetup.permission.UPDATE_CLIENT_ID signature|privileged
android.permission.NET_ADMIN signature
com.google.android.gms.permission.GAMES_DEBUG_SETTINGS signature
android.permission.CARRIER_FILTER_SMS signature|privileged
android.permission.PERFORM_CDMA_PROVISIONING signature|privileged
com.google.android.gms.trustagent.permission.TRUSTAGENT_STATE signature
android.permission.BIND_CONNECTION_SERVICE signature|privileged
android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS signature|installer|verifier
android.permission.WRITE_SOCIAL_STREAM normal
android.permission.LAUNCH_TRUST_AGENT_SETTINGS signature|privileged
android.permission.REGISTER_CALL_PROVIDER signature|privileged
android.permission.GET_PACKAGE_SIZE normal
android.permission.BIND_VPN_SERVICE signature
android.permission.TRUST_LISTENER signature
android.permission.ACCOUNT_MANAGER signature
android.permission.MANAGE_USB signature|privileged
android.permission.ACCESS_ALL_DOWNLOADS signature
android.permission.INTERACT_ACROSS_USERS_FULL signature|installer
android.permission.BIND_APPWIDGET signature|privileged
android.permission.STOP_APP_SWITCHES signature|privileged
android.permission.BATTERY_STATS signature|privileged|development
com.google.android.gms.permission.INTERNAL_BROADCAST signature
android.permission.PACKAGE_USAGE_STATS signature|privileged|development|appop
android.permission.WRITE_PROFILE normal
android.permission.MOUNT_UNMOUNT_FILESYSTEMS signature|privileged
android.permission.GET_ACCOUNTS_PRIVILEGED signature|privileged
android.permission.WRITE_SECURE_SETTINGS signature|privileged|development
com.android.vending.TOS_ACKED signature|privileged
android.permission.SERIAL_PORT signature|privileged
android.permission.BIND_NOTIFICATION_LISTENER_SERVICE signature
android.permission.CAPTURE_AUDIO_OUTPUT signature|privileged
android.permission.BIND_MIDI_DEVICE_SERVICE signature
android.permission.MOVE_PACKAGE signature|privileged
android.permission.SET_ACTIVITY_WATCHER signature
android.permission.STATUS_BAR_SERVICE signature
android.permission.READ_SEARCH_INDEXABLES signature|privileged
android.permission.NFC_HANDOVER_STATUS signature|privileged
android.permission.SCORE_NETWORKS signature|privileged
android.permission.DIAGNOSTIC signature
android.permission.ACCESS_LOCATION_EXTRA_COMMANDS normal
android.permission.RECEIVE_WIFI_CREDENTIAL_CHANGE signature|privileged
android.permission.READ_PRIVILEGED_PHONE_STATE signature|privileged
android.permission.ACCESS_DOWNLOAD_MANAGER signature|privileged
android.permission.BROADCAST_STICKY normal
android.permission.ASEC_ACCESS signature
android.permission.BIND_REMOTE_DISPLAY signature
android.permission.BLUETOOTH_PRIVILEGED signature|privileged
com.google.android.gms.permission.CAR signature
android.permission.SET_ALWAYS_FINISH signature|privileged|development
android.permission.HARDWARE_TEST signature
com.google.android.videos.permission.INVALIDATE_AUTH_TOKENS signature
android.permission.ASEC_CREATE signature
com.google.android.apps.enterprise.dmagent.permission.AutoSyncPermission signature|privileged
com.google.android.apps.enterprise.dmagent.permission.InvokeDMServicePermission signature
android.intent.category.MASTER_CLEAR.permission.C2D_MESSAGE signature
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE signature
com.google.android.launcher.permission.CONTENT_REDIRECT signature
android.permission.BIND_JOB_SERVICE signature
android.permission.CONFIRM_FULL_BACKUP signature
android.permission.CAPTURE_SECURE_VIDEO_OUTPUT signature|privileged
android.permission.SET_TIME signature|privileged
android.permission.WRITE_APN_SETTINGS signature|privileged
com.google.android.providers.settings.permission.WRITE_GSETTINGS signature
android.permission.CHANGE_WIFI_STATE normal
com.google.android.apps.gcs.RECEIVE_GCS_STATE signature|privileged
android.permission.BIND_PACKAGE_VERIFIER signature
android.permission.READ_INSTALL_SESSIONS normal
android.permission.BIND_ROUTE_PROVIDER signature
android.permission.RECEIVE_STK_COMMANDS signature|privileged
android.permission.BIND_CARRIER_MESSAGING_SERVICE signature|privileged
android.permission.ACCESS_BLUETOOTH_SHARE signature
android.permission.PACKAGE_VERIFICATION_AGENT signature|privileged
com.google.android.apps.maps.permission.PREFETCH signature
android.permission.SET_ORIENTATION signature
android.permission.REVOKE_RUNTIME_PERMISSIONS signature|installer|verifier
android.permission.MANAGE_USERS signature|privileged
com.android.vending.billing.BILLING_ACCOUNT_SERVICE signature|privileged
com.google.android.gm.email.permission.ACCESS_PROVIDER signature
android.permission.SET_PREFERRED_APPLICATIONS signature
android.permission.FLASHLIGHT normal
android.permission.DELETE_CACHE_FILES signature|privileged
com.google.android.hangouts.START_HANGOUT signature
android.permission.SET_WALLPAPER_COMPONENT signature|privileged
android.permission.ACCESS_NETWORK_STATE normal
android.permission.BIND_CONDITION_PROVIDER_SERVICE signature
android.permission.ACCESS_MTP signature|privileged
android.permission.DISABLE_KEYGUARD normal
android.permission.BACKUP signature|privileged
android.permission.PROCESS_CALLLOG_INFO signature|privileged
android.permission.CHANGE_CONFIGURATION signature|privileged|development
android.permission.USER_ACTIVITY signature|privileged
android.permission.LOCAL_MAC_ADDRESS signature|privileged
android.permission.READ_LOGS signature|privileged|development
com.google.android.apps.maps.permission.C2D_MESSAGE signature
android.permission.COPY_PROTECTED_DATA signature
android.permission.ASEC_DESTROY signature
android.permission.INTERACT_ACROSS_USERS signature|privileged|development
android.permission.SET_WALLPAPER normal
android.permission.ASEC_RENAME signature
android.permission.SET_KEYBOARD_LAYOUT signature
android.permission.UPDATE_CONFIG signature|privileged
android.permission.ACCESS_NETWORK_CONDITIONS signature|privileged
android.permission.READ_DREAM_STATE signature|privileged
android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT signature
com.google.googlenav.friend.permission.OPT_IN signature
com.google.android.launcher.permission.RECEIVE_FIRST_LOAD_BROADCAST signature|privileged
android.permission.UPDATE_LOCK signature|privileged
android.permission.READ_NETWORK_USAGE_HISTORY signature|privileged
android.permission.ACCESS_DRM_CERTIFICATES signature|privileged
com.google.android.gsf.permission.C2D_MESSAGE signature
com.google.android.googlequicksearchbox.permission.FLUSH_LOGS signature
android.permission.READ_INPUT_STATE signature
android.permission.KILL_BACKGROUND_PROCESSES normal
android.permission.ACCESS_VOICE_INTERACTION_SERVICE signature
android.permission.BIND_PRINT_SPOOLER_SERVICE signature
android.permission.BIND_DIRECTORY_SEARCH signature|privileged
android.permission.WRITE_USER_DICTIONARY normal
android.permission.REGISTER_SIM_SUBSCRIPTION signature|privileged
android.permission.READ_SYNC_STATS normal
android.permission.WRITE_DREAM_STATE signature|privileged
android.permission.FREEZE_SCREEN signature
android.permission.DOWNLOAD_CACHE_NON_PURGEABLE signature|privileged
android.permission.REBOOT signature|privileged
android.permission.DISPATCH_NFC_MESSAGE signature|privileged
com.google.android.gms.auth.permission.FACE_UNLOCK signature
android.permission.MOUNT_FORMAT_FILESYSTEMS signature|privileged
android.permission.OEM_UNLOCK_STATE signature
android.permission.REGISTER_CONNECTION_MANAGER signature|privileged
android.permission.MANAGE_DEVICE_ADMINS signature|privileged
android.permission.CLEAR_APP_CACHE signature|privileged
android.permission.CHANGE_APP_IDLE_STATE signature
com.google.android.gms.auth.permission.GOOGLE_ACCOUNT_CHANGE signature
com.google.android.gms.trustagent.framework.model.DATA_ACCESS signature
android.permission.BIND_TRUST_AGENT signature
android.permission.MANAGE_DOCUMENTS signature
android.permission.ACCESS_PDB_STATE signature
android.permission.MANAGE_NETWORK_POLICY signature
android.permission.BIND_REMOTEVIEWS signature|privileged
android.permission.ASEC_MOUNT_UNMOUNT signature
android.permission.GRANT_RUNTIME_PERMISSIONS signature|installer
android.permission.SET_POINTER_SPEED signature
android.permission.CHANGE_BACKGROUND_DATA_SETTING signature
com.android.systemui.permission.SELF signature
com.android.chrome.TOS_ACKED signature|privileged
android.permission.GLOBAL_SEARCH signature|privileged
android.permission.NET_TUNNELING signature
android.permission.CONNECTIVITY_INTERNAL signature|privileged
android.permission.FACTORY_TEST signature
android.permission.SET_WALLPAPER_HINTS normal
android.permission.MANAGE_MEDIA_PROJECTION signature
android.permission.READ_SYNC_SETTINGS normal
com.google.android.apps.now.CURRENT_ACCOUNT_ACCESS signature
com.google.android.partnersetup.permission.ACCESS_PROVIDER signature
com.android.chrome.permission.C2D_MESSAGE signature
android.permission.BROADCAST_PACKAGE_REMOVED signature
com.google.android.music.store.permission.C2D_MESSAGE signature
android.permission.OVERRIDE_WIFI_CONFIG signature|privileged
com.android.gallery3d.filtershow.permission.READ signature
android.permission.FORCE_STOP_PACKAGES signature|privileged
android.permission.MANAGE_CA_CERTIFICATES signature|privileged
android.permission.CAPTURE_VIDEO_OUTPUT signature|privileged
android.permission.ACCESS_NOTIFICATIONS signature|privileged
android.permission.VIBRATE normal
com.android.certinstaller.INSTALL_AS_USER signature
com.google.android.gsf.permission.CONNECTION signature
com.google.android.apps.plus.permission.MAPS_RECEIVE signature
android.permission.BIND_ACCESSIBILITY_SERVICE signature
android.server.checkin.CHECKIN.permission.C2D_MESSAGE signature
android.permission.MANAGE_ACTIVITY_STACKS signature|privileged
android.permission.SEND_CALL_LOG_CHANGE signature|privileged
android.permission.HDMI_CEC signature|privileged
android.permission.BIND_INPUT_METHOD signature
android.permission.INVOKE_CARRIER_SETUP signature|privileged
android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST signature|privileged
android.permission.REMOVE_DRM_CERTIFICATES signature|privileged
com.google.android.googleapps.permission.GOOGLE_MAIL_SWITCH signature
android.permission.READ_USER_DICTIONARY normal
android.permission.FILTER_EVENTS signature
android.permission.RECEIVE_EMERGENCY_BROADCAST signature|privileged
com.google.android.finsky.permission.GEARHEAD_SERVICE signature|privileged
android.permission.MODIFY_NETWORK_ACCOUNTING signature|privileged
android.permission.CRYPT_KEEPER signature|privileged
android.permission.BIND_NFC_SERVICE signature
android.permission.START_PRINT_SERVICE_CONFIG_ACTIVITY signature
com.android.voicemail.permission.WRITE_VOICEMAIL signature|privileged
android.permission.GET_DETAILED_TASKS signature
android.permission.NOTIFY_PENDING_SYSTEM_UPDATE signature|privileged
android.permission.ALLOW_ANY_CODEC_FOR_PLAYBACK signature|privileged
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS signature|privileged
android.permission.ACCESS_WIFI_STATE normal
com.google.android.apps.enterprise.dmagent.permission.C2D_MESSAGE signature
android.permission.FORCE_BACK signature
com.android.chrome.permission.READ_WRITE_BOOKMARK_FOLDERS signature|privileged
com.google.android.launcher.permission.RECEIVE_LAUNCH_BROADCASTS signature
android.permission.CHANGE_WIMAX_STATE normal
android.permission.CAMERA_DISABLE_TRANSMIT_LED signature|privileged
android.permission.REQUEST_INSTALL_PACKAGES normal
android.permission.CONTROL_INCALL_EXPERIENCE signature|privileged
android.permission.MODIFY_PHONE_STATE signature|privileged
com.google.android.gm.email.permission.UPDATE_AUTH_NOTIFICATION signature
com.google.android.googlequicksearchbox.LAUNCH_FROM_DSP_HOTWORD signature|privileged
com.android.launcher.permission.INSTALL_SHORTCUT normal
android.permission.BIND_TEXT_SERVICE signature
android.permission.STATUS_BAR signature|privileged
android.permission.READ_FRAME_BUFFER signature|privileged
com.google.android.gms.DRIVE signature
android.permission.DUMP signature|privileged|development
android.permission.LOCATION_HARDWARE signature|privileged
com.google.android.apps.plus.permission.C2D_MESSAGE signature
com.google.android.marvin.talkback.permission.LABELING signature
com.google.android.googlequicksearchbox.LAUNCH_WITH_RECORDED_AUDIO signature|privileged
android.permission.READ_SOCIAL_STREAM normal
android.permission.WAKE_LOCK normal
android.permission.INJECT_EVENTS signature
android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED signature|privileged
android.permission.BIND_CHOOSER_TARGET_SERVICE signature
android.permission.UPDATE_APP_OPS_STATS signature|privileged|installer
com.android.gallery3d.filtershow.permission.WRITE signature
android.permission.ACCESS_INPUT_FLINGER signature
android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS signature|privileged
com.android.vending.billing.ADD_CREDIT_CARD signature|privileged
android.permission.SET_SCREEN_COMPATIBILITY signature
com.android.vending.billing.IN_APP_NOTIFY.permission.C2D_MESSAGE signature
android.permission.MEDIA_CONTENT_CONTROL signature|privileged
android.permission.DELETE_PACKAGES signature|privileged
com.google.android.calendar.permission.READ_OOBE signature
 android.permission.NFC ",TRUE,"/***
  Copyright (c) 2012-2015 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    https://commonsware.com/Android
 */

package com.commonsware.android.permreporter;

import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import java.util.List;
import de.greenrobot.event.EventBus;
import io.karim.MaterialTabs;

public class MainActivity extends Activity  {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    ViewPager pager=(ViewPager)findViewById(R.id.pager);

    pager.setAdapter(new PermissionTabAdapter(this, getFragmentManager()));

    MaterialTabs tabs=(MaterialTabs)findViewById(R.id.tabs);
    tabs.setViewPager(pager);

    new PermissionLoadThread(this).start();
  }

  // inspired by https://stackoverflow.com/a/32063384/115145

  private static class PermissionLoadThread extends Thread {
    private final Context ctxt;
    private final PermissionRosterLoadedEvent result=
        new PermissionRosterLoadedEvent();

    PermissionLoadThread(Context ctxt) {
      this.ctxt=ctxt.getApplicationContext();
    }

    @Override
    public void run() {
      PackageManager pm=ctxt.getPackageManager();

      addPermissionsFromGroup(pm, null);

      for (PermissionGroupInfo group : pm.getAllPermissionGroups(0)) {
        addPermissionsFromGroup(pm, group.name);
      }

      EventBus.getDefault().postSticky(result);
    }

    private void addPermissionsFromGroup(PackageManager pm,
                                         String groupName) {
      try {
        for (PermissionInfo info :
            pm.queryPermissionsByGroup(groupName, 0)) {
          int coreBits=
              info.protectionLevel & PermissionInfo.PROTECTION_MASK_BASE;

          switch(coreBits) {
            case PermissionInfo.PROTECTION_NORMAL:
              result.add(PermissionType.NORMAL, info);
              break;

            case PermissionInfo.PROTECTION_DANGEROUS:
              result.add(PermissionType.DANGEROUS, info);
              break;

            case PermissionInfo.PROTECTION_SIGNATURE:
              result.add(PermissionType.SIGNATURE, info);
              break;

            default:
              result.add(PermissionType.OTHER, info);
              break;
          }
        }
      }
      catch (PackageManager.NameNotFoundException e) {
        throw new IllegalStateException(""And you may ask yourself... how did I get here?"");
      }
    }
  }
}","/***
  Copyright (c) 2012-2015 CommonsWare, LLC
  Licensed under the Apache License, Version 2.0 (the ""License""); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
  by applicable law or agreed to in writing, software distributed under the
  License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS
  OF ANY KIND, either express or implied. See the License for the specific
  language governing permissions and limitations under the License.
  
  From _The Busy Coder's Guide to Android Development_
    https://commonsware.com/Android
 */

package com.commonsware.android.permreporter;

import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PermissionGroupInfo;
import android.content.pm.PermissionInfo;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import java.util.List;
import de.greenrobot.event.EventBus;
import io.karim.MaterialTabs;

public class MainActivity extends Activity  {
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    ViewPager pager=(ViewPager)findViewById(R.id.pager);

    pager.setAdapter(new PermissionTabAdapter(this, getFragmentManager()));

    MaterialTabs tabs=(MaterialTabs)findViewById(R.id.tabs);
    tabs.setViewPager(pager);

    new PermissionLoadThread(this).start();
  }

  // inspired by https://stackoverflow.com/a/32063384/115145

  private static class PermissionLoadThread extends Thread {
    private final Context ctxt;
    private final PermissionRosterLoadedEvent result=
        new PermissionRosterLoadedEvent();

    PermissionLoadThread(Context ctxt) {
      this.ctxt=ctxt.getApplicationContext();
    }

    @Override
    public void run() {
      PackageManager pm=ctxt.getPackageManager();

      addPermissionsFromGroup(pm, null);

      for (PermissionGroupInfo group : pm.getAllPermissionGroups(0)) {
        addPermissionsFromGroup(pm, group.name);
      }

      EventBus.getDefault().postSticky(result);
    }

    private void addPermissionsFromGroup(PackageManager pm,
                                         String groupName) {
      try {
        for (PermissionInfo info :
            pm.queryPermissionsByGroup(groupName, 0)) {
          int coreBits=
              info.protectionLevel & PermissionInfo.PROTECTION_MASK_BASE;

          switch(coreBits) {
            case PermissionInfo.PROTECTION_NORMAL:
              result.add(PermissionType.NORMAL, info);
              break;

            case PermissionInfo.PROTECTION_DANGEROUS:
              result.add(PermissionType.DANGEROUS, info);
              break;

            case PermissionInfo.PROTECTION_SIGNATURE:
              result.add(PermissionType.SIGNATURE, info);
              break;

            default:
              result.add(PermissionType.OTHER, info);
              break;
          }
        }
      }
      catch (PackageManager.NameNotFoundException e) {
        throw new IllegalStateException(""And you may ask yourself... how did I get here?"");
      }
    }
  }
}",TRUE,,
5104,InitialSO.csv5104.txt,InitialGit.csv5104.txt,18,"public class HyperlinkRedirectListener implements ChangeListener<Worker.State>, EventListener {
private static final Logger LOGGER = LoggerFactory.getLogger(HyperlinkRedirectListener.class);

private static final String CLICK_EVENT = ""click"";
private static final String ANCHOR_TAG = ""a"";

private final WebView webView;

public HyperlinkRedirectListener(WebView webView) {
    this.webView = webView;
}

@Override
public void changed(ObservableValue<? extends State> observable, State oldValue, State newValue) {
    if (State.SUCCEEDED.equals(newValue)) {
        Document document = webView.getEngine().getDocument();
        NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);
        for (int i = 0; i < anchors.getLength(); i++) {
            Node node = anchors.item(i);
            EventTarget eventTarget = (EventTarget) node;
            eventTarget.addEventListener(CLICK_EVENT, this, false);
        }
    }
}

@Override
public void handleEvent(Event event) {
    HTMLAnchorElement anchorElement = (HTMLAnchorElement)event.getCurrentTarget();
    String href = anchorElement.getHref();

    if (Desktop.isDesktopSupported()) {
        openLinkInSystemBrowser(href);
    } else {
        LOGGER.warn(""OS does not support desktop operations like browsing. Cannot open link '{}'."", href);
    }

    event.preventDefault();
}

private void openLinkInSystemBrowser(String url) {
    LOGGER.debug(""Opening link '{}' in default system browser."", url);

    try {
        URI uri = new URI(url);
        Desktop.getDesktop().browse(uri);
    } catch (Throwable e) {
        LOGGER.error(""Error on opening link '{}' in system browser."", url);
    }
}
 ","import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.scene.web.WebView;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.html.HTMLAnchorElement;

import java.awt.*;
import java.net.URI;

public class HyperLinkRedirectListener implements ChangeListener<Worker.State>, EventListener
{
    private static final String CLICK_EVENT = ""click"";
    private static final String ANCHOR_TAG = ""a"";

    private final WebView webView;

    public HyperLinkRedirectListener(WebView webView)
    {
        this.webView = webView;
    }

    @Override
    public void changed(ObservableValue<? extends Worker.State> observable, Worker.State oldValue, Worker.State newValue)
    {
        if (Worker.State.SUCCEEDED.equals(newValue))
        {
            Document document = webView.getEngine().getDocument();
            NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);
            for (int i = 0; i < anchors.getLength(); i++)
            {
                Node node = anchors.item(i);
                EventTarget eventTarget = (EventTarget) node;
                eventTarget.addEventListener(CLICK_EVENT, this, false);
            }
        }
    }

    @Override
    public void handleEvent(Event event)
    {
        HTMLAnchorElement anchorElement = (HTMLAnchorElement) event.getCurrentTarget();
        String href = anchorElement.getHref();

        if (Desktop.isDesktopSupported())
        {
            openLinkInSystemBrowser(href);
        } else
        {
            // LOGGER.warn(""OS does not support desktop operations like browsing. Cannot open link '{}'."", href);
        }

        event.preventDefault();
    }

    private void openLinkInSystemBrowser(String url)
    {
        // LOGGER.debug(""Opening link '{}' in default system browser."", url);

        try
        {
            URI uri = new URI(url);
            Desktop.getDesktop().browse(uri);
        } catch (Throwable e)
        {
            // LOGGER.error(""Error on opening link '{}' in system browser."", url);
        }
    }
}
 webView.getEngine().getLoadWorker().stateProperty().addListener(new HyperLinkRedirectListener(webView));
 ",FALSE,"package org.jabref.gui.util;

import java.io.IOException;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.concurrent.Worker.State;
import javafx.scene.web.WebView;

import org.jabref.gui.desktop.JabRefDesktop;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.html.HTMLAnchorElement;

/**
 * A Hyperlink Click Listener for javafx.WebView to open links on click in the browser
 *  Code adapted from: <a href=""https://stackoverflow.com/a/33445383/"">https://stackoverflow.com/a/33445383/</a>
 */
public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {

    private static final Log LOGGER = LogFactory.getLog(OpenHyperlinksInExternalBrowser.class);
    private static final String CLICK_EVENT = ""click"";
    private static final String ANCHOR_TAG = ""a"";

    private final WebView webView;

    public OpenHyperlinksInExternalBrowser(WebView webView) {
        this.webView = webView;
    }

    @Override
    public void changed(ObservableValue<? extends State> observable, State oldValue, State newValue) {
        if (State.SUCCEEDED.equals(newValue)) {
            Document document = webView.getEngine().getDocument();
            NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);
            for (int i = 0; i < anchors.getLength(); i++) {
                Node node = anchors.item(i);
                EventTarget eventTarget = (EventTarget) node;
                eventTarget.addEventListener(CLICK_EVENT, this, false);
            }
        }
    }

    @Override
    public void handleEvent(Event event) {
        HTMLAnchorElement anchorElement = (HTMLAnchorElement) event.getCurrentTarget();
        String href = anchorElement.getHref();

        try {
            JabRefDesktop.openBrowser(href);
        } catch (IOException e) {
            LOGGER.error(e);
        }
        event.preventDefault();
    }

}
","package org.jabref.gui.util;

import java.io.IOException;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.concurrent.Worker.State;
import javafx.scene.web.WebView;

import org.jabref.gui.desktop.JabRefDesktop;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.html.HTMLAnchorElement;

/**
 * A Hyperlink Click Listener for javafx.WebView to open links on click in the browser
 *  Code adapted from: <a href=""https://stackoverflow.com/a/33445383/"">https://stackoverflow.com/a/33445383/</a>
 */
public class OpenHyperlinksInExternalBrowser implements ChangeListener<Worker.State>, EventListener {

    private static final Log LOGGER = LogFactory.getLog(OpenHyperlinksInExternalBrowser.class);
    private static final String CLICK_EVENT = ""click"";
    private static final String ANCHOR_TAG = ""a"";

    private final WebView webView;

    public OpenHyperlinksInExternalBrowser(WebView webView) {
        this.webView = webView;
    }

    @Override
    public void changed(ObservableValue<? extends State> observable, State oldValue, State newValue) {
        if (State.SUCCEEDED.equals(newValue)) {
            Document document = webView.getEngine().getDocument();
            NodeList anchors = document.getElementsByTagName(ANCHOR_TAG);
            for (int i = 0; i < anchors.getLength(); i++) {
                Node node = anchors.item(i);
                EventTarget eventTarget = (EventTarget) node;
                eventTarget.addEventListener(CLICK_EVENT, this, false);
            }
        }
    }

    @Override
    public void handleEvent(Event event) {
        HTMLAnchorElement anchorElement = (HTMLAnchorElement) event.getCurrentTarget();
        String href = anchorElement.getHref();

        try {
            JabRefDesktop.openBrowser(href);
        } catch (IOException e) {
            LOGGER.error(e);
        }
        event.preventDefault();
    }

}
",TRUE,,
5105,InitialSO.csv5105.txt,InitialGit.csv5105.txt,18,"object_hook import json

def json_load_byteified(file_handle):
    return _byteify(
        json.load(file_handle, object_hook=_byteify),
        ignore_dicts=True
    )

def json_loads_byteified(json_text):
    return _byteify(
        json.loads(json_text, object_hook=_byteify),
        ignore_dicts=True
    )

def _byteify(data, ignore_dicts = False):
    # if this is a unicode string, return its string representation
    if isinstance(data, unicode):
        return data.encode('utf-8')
    # if this is a list of values, return list of byteified values
    if isinstance(data, list):
        return [ _byteify(item, ignore_dicts=True) for item in data ]
    # if this is a dictionary, return dictionary of byteified keys and values
    # but only if we haven't already byteified it
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.iteritems()
        }
    # if it's anything else, return it in its original form
    return data
 >>> <b><i>json_loads_byteified('{""Hello"": ""World""}')</i></b>
{'Hello': 'World'}
>>> <b><i>json_loads_byteified('""I am a top-level string""')</i></b>
'I am a top-level string'
>>> <b><i>json_loads_byteified('7')</i></b>
7
>>> <b><i>json_loads_byteified('[""I am inside a list""]')</i></b>
['I am inside a list']
>>> <b><i>json_loads_byteified('[[[[[[[[""I am inside a big nest of lists""]]]]]]]]')</i></b>
[[[[[[[['I am inside a big nest of lists']]]]]]]]
>>> <b><i>json_loads_byteified('{""foo"": ""bar"", ""things"": [7, {""qux"": ""baz"", ""moo"": {""cow"": [""milk""]}}]}')</i></b>
{'things': [7, {'qux': 'baz', 'moo': {'cow': ['milk']}}], 'foo': 'bar'}
>>> <b><i>json_load_byteified(open('somefile.json'))</i></b>
{'more json': 'from a file'} object_hook json.load json.loads object_hook dict dict object_hook object_hook ignore_dicts _byteify object_hook dict ignore_dicts _byteify dict json_load_byteified json_loads_byteified _byteify ignore_dicts=True json.load json.loads dict ","object_hook import json

def json_load_byteified(file_handle):
    return _byteify(
        json.load(file_handle, object_hook=_byteify),
        ignore_dicts=True
    )

def json_loads_byteified(json_text):
    return _byteify(
        json.loads(json_text, object_hook=_byteify),
        ignore_dicts=True
    )

def _byteify(data, ignore_dicts = False):
    if isinstance(data, str):
        return data

    # if this is a list of values, return list of byteified values
    if isinstance(data, list):
        return [ _byteify(item, ignore_dicts=True) for item in data ]
    # if this is a dictionary, return dictionary of byteified keys and values
    # but only if we haven't already byteified it
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.items() # changed to .items() for python 2.7/3
        }

    # python 3 compatible duck-typing
    # if this is a unicode string, return its string representation
    if str(type(data)) == ""<type 'unicode'>"":
        return data.encode('utf-8')

    # if it's anything else, return it in its original form
    return data
 >>> <b><i>json_loads_byteified('{""Hello"": ""World""}')</i></b>
{'Hello': 'World'}
>>> <b><i>json_loads_byteified('""I am a top-level string""')</i></b>
'I am a top-level string'
>>> <b><i>json_loads_byteified('7')</i></b>
7
>>> <b><i>json_loads_byteified('[""I am inside a list""]')</i></b>
['I am inside a list']
>>> <b><i>json_loads_byteified('[[[[[[[[""I am inside a big nest of lists""]]]]]]]]')</i></b>
[[[[[[[['I am inside a big nest of lists']]]]]]]]
>>> <b><i>json_loads_byteified('{""foo"": ""bar"", ""things"": [7, {""qux"": ""baz"", ""moo"": {""cow"": [""milk""]}}]}')</i></b>
{'things': [7, {'qux': 'baz', 'moo': {'cow': ['milk']}}], 'foo': 'bar'}
>>> <b><i>json_load_byteified(open('somefile.json'))</i></b>
{'more json': 'from a file'} object_hook json.load json.loads object_hook dict dict object_hook object_hook ignore_dicts _byteify object_hook dict ignore_dicts _byteify dict json_load_byteified json_loads_byteified _byteify ignore_dicts=True json.load json.loads dict ",FALSE,"#!/usr/bin/env python2

# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os
import unittest
import shutil
import tempfile

import summarize


make_test = lambda t: {'failure_text': t}


class StringsTest(unittest.TestCase):
	def test_normalize(self):
		for src, dst in [
				('0x1234 a 123.13.45.43 b 2e24e003-9ffd-4e78-852c-9dcb6cbef493-123', 'UNIQ1 a UNIQ2 b UNIQ3'),
				('Mon, 12 January 2017 11:34:35 blah blah', 'TIMEblah blah'),
				('123.45.68.12:345 abcd1234eeee', 'UNIQ1 UNIQ2'),
		]:
			self.assertEqual(summarize.normalize(src), dst)

	def test_editdist(self):
		for a, b, expected in [
			('foob', 'food', 1),
			('doot', 'dot', 1),
			('foob', 'f', 3),
			('foob', 'g', 4),
		]:
			self.assertEqual(summarize.editdist(a, b), expected, (a, b, expected))

	def test_make_ngram_counts(self):
		self.assertEqual(sum(summarize.make_ngram_counts('abcdefg')), 4)
		self.assertEqual(sum(summarize.make_ngram_counts(u'abcdefg')), 4)
		self.assertEqual(sum(summarize.make_ngram_counts(u'abcdefg\u2006')), 5)

	def test_make_ngram_counts_digest(self):
		# ensure stability of ngram count digest
		self.assertEqual(summarize.make_ngram_counts_digest('some example string'), '0189cb9183d7e7cdff84')

	def test_ngram_editdist(self):
		self.assertEqual(summarize.ngram_editdist('example text', 'exampl text'), 1)


class ClusterTest(unittest.TestCase):
	def test_cluster_test(self):
		# small strings aren't equal, even with tiny differences
		t1 = make_test('exit 1')
		t2 = make_test('exit 2')
		self.assertEqual(summarize.cluster_test([t1, t2]), {'exit 1': [t1], 'exit 2': [t2]})

		t3 = make_test('long message immediately preceding exit code 1')
		t4 = make_test('long message immediately preceding exit code 2')
		self.assertEqual(summarize.cluster_test([t3, t4]), {t3['failure_text']: [t3, t4]})

		t5 = make_test('1 2 ' * 40000)
		t6 = make_test('1 2 ' * 39999 + '3 4 ')

		self.assertEqual(summarize.cluster_test([t1, t5, t6]), {t1['failure_text']: [t1], t5['failure_text']: [t5, t6]})

	def test_cluster_global(self):
		t1 = make_test('exit 1')
		t2 = make_test('exit 1')
		t3 = make_test('exit 1')

		self.assertEqual(summarize.cluster_global.__wrapped__({'test a': {'exit 1': [t1, t2]}, 'test b': {'exit 1': [t3]}}),
						 {'exit 1': {'test a': [t1, t2], 'test b': [t3]}})


############ decode JSON without a bunch of unicode garbage
### http://stackoverflow.com/a/33571117
def json_load_byteified(json_text):
    return _byteify(
        json.load(json_text, object_hook=_byteify),
        ignore_dicts=True
    )

def _byteify(data, ignore_dicts = False):
    # if this is a unicode string, return its string representation
    if isinstance(data, unicode):
        return data.encode('utf-8')
    # if this is a list of values, return list of byteified values
    if isinstance(data, list):
        return [ _byteify(item, ignore_dicts=True) for item in data ]
    # if this is a dictionary, return dictionary of byteified keys and values
    # but only if we haven't already byteified it
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.iteritems()
        }
    # if it's anything else, return it in its original form
    return data
################################


class IntegrationTest(unittest.TestCase):
	def setUp(self):
		self.tmpdir = tempfile.mkdtemp(prefix='summarize_test_')
		os.chdir(self.tmpdir)

	def tearDown(self):
		shutil.rmtree(self.tmpdir)

	def test_main(self):
		def smear(l):
			""given a list of dictionary deltas, return a list of dictionaries""
			cur = {}
			out = []
			for delta in l:
				cur.update(delta)
				out.append(dict(cur))
			return out
		json.dump(smear([
			{'started': 1234, 'number': 1, 'tests_failed': 1, 'tests_run': 2, 'elapsed': 4, 'path': 'gs://logs/some-job/1', 'job': 'some-job', 'result': 'SUCCESS'},
			{'number': 2, 'path': 'gs://logs/some-job/2'},
			{'number': 3, 'path': 'gs://logs/some-job/3'},
			{'number': 4, 'path': 'gs://logs/some-job/4'},
			{'number': 5, 'path': 'gs://logs/other-job/5', 'job': 'other-job', 'elapsed': 8},
			{'number': 7, 'path': 'gs://logs/other-job/7', 'result': 'FAILURE'},
		]), open('builds.json', 'w'))
		json.dump(smear([
			{'name': 'example test', 'build': 'gs://logs/some-job/1', 'failure_text': 'some awful stack trace exit 1'},
			{'build': 'gs://logs/some-job/2'},
			{'build': 'gs://logs/some-job/3'},
			{'build': 'gs://logs/some-job/4'},
			{'failure_text': 'some other error message'},
			{'name': 'unrelated test', 'build': 'gs://logs/other-job/5'},
			{'build': 'gs://logs/other-job/7'},
		]), open('tests.json', 'w'))
		summarize.main('builds.json', 'tests.json')
		output = json_load_byteified(open('failure_data.json'))

		# uncomment when output changes
		# import pprint; pprint.pprint(output)

		self.assertEqual(output['builds'],
			{'cols': {'elapsed': [8, 8, 4, 4, 4, 4],
                      'executor': [None, None, None, None, None, None],
                      'pr': [None, None, None, None, None, None],
                      'result': ['SUCCESS',
                                 'FAILURE',
                                 'SUCCESS',
                                 'SUCCESS',
                                 'SUCCESS',
                                 'SUCCESS'],
                      'started': [1234, 1234, 1234, 1234, 1234, 1234],
                      'tests_failed': [1, 1, 1, 1, 1, 1],
                      'tests_run': [2, 2, 2, 2, 2, 2]},
             'job_paths': {'other-job': 'gs://logs/other-job',
                            'some-job': 'gs://logs/some-job'},
             'jobs': {'other-job': {'5': 0, '7': 1},
                       'some-job': [1, 4, 2]}})

		random_hash_1 = output['clustered'][0][1]
		random_hash_2 = output['clustered'][1][1]
		self.assertEqual(output['clustered'],
			[['some awful stack trace exit 1', random_hash_1, 'some awful stack trace exit 1',
              [['example test', [['some-job', [1, 2, 3, 4]]]]]],
             ['some other error message', random_hash_2, 'some other error message',
              [['unrelated test', [['other-job', [5, 7]]]],
               ['example test', [['some-job', [4]]]]]]]
        )


if __name__ == '__main__':
    unittest.main()
","#!/usr/bin/env python2

# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=invalid-name,missing-docstring

import json
import os
import unittest
import shutil
import tempfile

import summarize


make_test = lambda t: {'failure_text': t}


class StringsTest(unittest.TestCase):
    def test_normalize(self):
        for src, dst in [
                ('0x1234 a 123.13.45.43 b 2e24e003-9ffd-4e78-852c-9dcb6cbef493-123',
                 'UNIQ1 a UNIQ2 b UNIQ3'),
                ('Mon, 12 January 2017 11:34:35 blah blah', 'TIMEblah blah'),
                ('123.45.68.12:345 abcd1234eeee', 'UNIQ1 UNIQ2'),
                ('foobarbaz ' * 500000,
                 'foobarbaz ' * 20000 + '\n...[truncated]...\n' + 'foobarbaz ' * 20000),
        ]:
            self.assertEqual(summarize.normalize(src), dst)

    def test_editdist(self):
        for a, b, expected in [
                ('foob', 'food', 1),
                ('doot', 'dot', 1),
                ('foob', 'f', 3),
                ('foob', 'g', 4),
        ]:
            self.assertEqual(summarize.editdist(a, b), expected, (a, b, expected))

    def test_make_ngram_counts(self):
        self.assertEqual(sum(summarize.make_ngram_counts('abcdefg')), 4)
        self.assertEqual(sum(summarize.make_ngram_counts(u'abcdefg')), 4)
        self.assertEqual(sum(summarize.make_ngram_counts(u'abcdefg\u2006')), 5)

    def test_make_ngram_counts_digest(self):
        # ensure stability of ngram count digest
        self.assertEqual(summarize.make_ngram_counts_digest('some string'), 'eddb950347d1eb05b5d7')

    def test_ngram_editdist(self):
        self.assertEqual(summarize.ngram_editdist('example text', 'exampl text'), 1)

    def test_common_spans(self):
        for a, b, expected in [
                ('an exact match', 'an exact match', [14]),
                ('some example string', 'some other string', [5, 7, 7]),
                ('a problem with a common set', 'a common set', [2, 7, 1, 4, 13]),
        ]:
            self.assertEqual(summarize.common_spans([a, b]), expected)


class ClusterTest(unittest.TestCase):
    def test_cluster_test(self):
        # small strings aren't equal, even with tiny differences
        t1 = make_test('exit 1')
        t2 = make_test('exit 2')
        self.assertEqual(summarize.cluster_test([t1, t2]), {'exit 1': [t1], 'exit 2': [t2]})

        t3 = make_test('long message immediately preceding exit code 1')
        t4 = make_test('long message immediately preceding exit code 2')
        self.assertEqual(summarize.cluster_test([t3, t4]), {t3['failure_text']: [t3, t4]})

        t5 = make_test('1 2 ' * 40000)
        t6 = make_test('1 2 ' * 39999 + '3 4 ')

        self.assertEqual(summarize.cluster_test([t1, t5, t6]),
                         {t1['failure_text']: [t1], t5['failure_text']: [t5, t6]})

    @staticmethod
    def cluster_global(clustered, previous_clustered=None):
        return summarize.cluster_global.__wrapped__(clustered, previous_clustered)

    def test_cluster_global(self):
        t1 = make_test('exit 1')
        t2 = make_test('exit 1')
        t3 = make_test('exit 1')

        self.assertEqual(
            self.cluster_global({'test a': {'exit 1': [t1, t2]}, 'test b': {'exit 1': [t3]}}),
            {'exit 1': {'test a': [t1, t2], 'test b': [t3]}})

    def test_cluster_global_previous(self):
        # clusters are stable when provided with previou seeds
        textOld = 'some long failure message that changes occasionally foo'
        textNew = textOld.replace('foo', 'bar')
        t1 = make_test(textNew)

        self.assertEqual(
            self.cluster_global({'test a': {textNew: [t1]}}, [{'key': textOld}]),
            {textOld: {'test a': [t1]}})


############ decode JSON without a bunch of unicode garbage
### http://stackoverflow.com/a/33571117
def json_load_byteified(json_text):
    return _byteify(
        json.load(json_text, object_hook=_byteify),
        ignore_dicts=True
    )

def _byteify(data, ignore_dicts=False):
    # if this is a unicode string, return its string representation
    if isinstance(data, unicode):
        return data.encode('utf-8')
    # if this is a list of values, return list of byteified values
    if isinstance(data, list):
        return [_byteify(item, ignore_dicts=True) for item in data]
    # if this is a dictionary, return dictionary of byteified keys and values
    # but only if we haven't already byteified it
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.iteritems()
        }
    # if it's anything else, return it in its original form
    return data
################################


class IntegrationTest(unittest.TestCase):
    def setUp(self):
        self.tmpdir = tempfile.mkdtemp(prefix='summarize_test_')
        os.chdir(self.tmpdir)

    def tearDown(self):
        shutil.rmtree(self.tmpdir)

    def test_main(self):
        def smear(l):
            ""given a list of dictionary deltas, return a list of dictionaries""
            cur = {}
            out = []
            for delta in l:
                cur.update(delta)
                out.append(dict(cur))
            return out
        json.dump(smear([
            {'started': 1234, 'number': 1, 'tests_failed': 1, 'tests_run': 2,
             'elapsed': 4, 'path': 'gs://logs/some-job/1', 'job': 'some-job', 'result': 'SUCCESS'},
            {'number': 2, 'path': 'gs://logs/some-job/2'},
            {'number': 3, 'path': 'gs://logs/some-job/3'},
            {'number': 4, 'path': 'gs://logs/some-job/4'},
            {'number': 5, 'path': 'gs://logs/other-job/5', 'job': 'other-job', 'elapsed': 8},
            {'number': 7, 'path': 'gs://logs/other-job/7', 'result': 'FAILURE'},
        ]), open('builds.json', 'w'))
        json.dump(smear([
            {'name': 'example test', 'build': 'gs://logs/some-job/1',
             'failure_text': 'some awful stack trace exit 1'},
            {'build': 'gs://logs/some-job/2'},
            {'build': 'gs://logs/some-job/3'},
            {'build': 'gs://logs/some-job/4'},
            {'name': 'another test', 'failure_text': 'some other error message'},
            {'name': 'unrelated test', 'build': 'gs://logs/other-job/5'},
            {},  # intentional dupe
            {'build': 'gs://logs/other-job/7'},
        ]), open('tests.json', 'w'))
        json.dump({
            'node': ['example']
        }, open('owners.json', 'w'))
        summarize.main(summarize.parse_args(
            ['builds.json', 'tests.json',
             '--output_slices=failure_data_PREFIX.json',
             '--owners=owners.json']))
        output = json_load_byteified(open('failure_data.json'))

        # uncomment when output changes
        # import pprint; pprint.pprint(output)

        self.assertEqual(
            output['builds'],
            {'cols': {'elapsed': [8, 8, 4, 4, 4, 4],
                      'executor': [None, None, None, None, None, None],
                      'pr': [None, None, None, None, None, None],
                      'result': ['SUCCESS',
                                 'FAILURE',
                                 'SUCCESS',
                                 'SUCCESS',
                                 'SUCCESS',
                                 'SUCCESS'],
                      'started': [1234, 1234, 1234, 1234, 1234, 1234],
                      'tests_failed': [1, 1, 1, 1, 1, 1],
                      'tests_run': [2, 2, 2, 2, 2, 2]},
             'job_paths': {'other-job': 'gs://logs/other-job',
                           'some-job': 'gs://logs/some-job'},
             'jobs': {'other-job': {'5': 0, '7': 1}, 'some-job': [1, 4, 2]}})

        random_hash_1 = output['clustered'][0]['id']
        random_hash_2 = output['clustered'][1]['id']

        self.assertEqual(
            output['clustered'],
            [{'id': random_hash_1,
              'key': 'some awful stack trace exit 1',
              'tests': [{'jobs': [{'builds': [4, 3, 2, 1],
                                   'name': 'some-job'}],
                         'name': 'example test'}],
              'spans': [29],
              'owner': 'node',
              'text': 'some awful stack trace exit 1'},
             {'id': random_hash_2,
              'key': 'some other error message',
              'tests': [{'jobs': [{'builds': [7, 5],
                                   'name': 'other-job'}],
                         'name': 'unrelated test'},
                        {'jobs': [{'builds': [4], 'name': 'some-job'}],
                         'name': 'another test'}],
              'spans': [24],
              'owner': 'testing',
              'text': 'some other error message'}]
        )

        slice_output = json_load_byteified(open('failure_data_%s.json' % random_hash_1[:2]))

        self.assertEqual(slice_output['clustered'], [output['clustered'][0]])
        self.assertEqual(slice_output['builds']['cols']['started'], [1234, 1234, 1234, 1234])


if __name__ == '__main__':
    unittest.main()
",FALSE,,
5121,InitialSO.csv5121.txt,InitialGit.csv5121.txt,17,"Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
};
if (Highcharts.VMLRenderer) {
    Highcharts.VMLRenderer.prototype.symbols.plus = Highcharts.SVGRenderer.prototype.symbols.plus;
}
 ","Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
};
if (Highcharts.VMLRenderer) {
    Highcharts.VMLRenderer.prototype.symbols.plus = Highcharts.SVGRenderer.prototype.symbols.plus;
}
 ",TRUE,"(function (H) {
  
  // cross http://stackoverflow.com/a/25379352/829971
  Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
    };

  // plus http://stackoverflow.com/a/36270224/829971
  Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
  };
  
  
}(Highcharts));
","(function (H) {
  
  // cross http://stackoverflow.com/a/25379352/829971
  Highcharts.Renderer.prototype.symbols.cross = function (x, y, radius) {
    var r = radius * 0.4,
        e = r * 0.8,
        a = e / Math.sqrt(2),
        p = r / Math.sqrt(2);
    return [
        'M', x, y + a,
        'L', x + p, y + a + p,
        x, y + a + (2 * p),
        x + a, y + (2 * a) + (2 * p),
        x + a + p, y + (2 * a) + p,
        x + a + (2 * p), y + (2 * a) + (2 * p),
        x + (2 * a) + (2 * p), y + a + (2 * p),
        x + (2 * a) + p, y + a + p,
        x + (2 * a) + (2 * p), y + a,
        x + a + (2 * p), y,
        x + a + p, y + p,
        x + a, y,
        'Z'];
    };

  // plus http://stackoverflow.com/a/36270224/829971
  Highcharts.SVGRenderer.prototype.symbols.plus = function (x, y, w, h) {
    return [
        'M', x, y + (5 * h) / 8,
        'L', x, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y + (3 * h) / 8,
        'L', x + (3 * w) / 8, y,
        'L', x + (5 * w) / 8, y,
        'L', x + (5 * w) / 8, y + (3 * h) / 8,
        'L', x + w, y + (3 * h) / 8,
        'L', x + w, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + (5 * h) / 8,
        'L', x + (5 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + h,
        'L', x + (3 * w) / 8, y + (5 * h) / 8,
        'L', x, y + (5 * h) / 8,
        'z'
    ];
  };
  
  
}(Highcharts));
",TRUE,,
5122,InitialSO.csv5122.txt,InitialGit.csv5122.txt,8,"/woocommerce/includes/wc-template-functions.php woocommerce_form_field $defaults /*********************************************************************************************/
/** WooCommerce - Modify each individual input type $args defaults /**
/*********************************************************************************************/

add_filter('woocommerce_form_field_args','wc_form_field_args',10,3);

function wc_form_field_args( $args, $key, $value = null ) {

/*********************************************************************************************/
/** This is not meant to be here, but it serves as a reference
/** of what is possible to be changed. /**

$defaults = array(
    'type'              => 'text',
    'label'             => '',
    'description'       => '',
    'placeholder'       => '',
    'maxlength'         => false,
    'required'          => false,
    'id'                => $key,
    'class'             => array(),
    'label_class'       => array(),
    'input_class'       => array(),
    'return'            => false,
    'options'           => array(),
    'custom_attributes' => array(),
    'validate'          => array(),
    'default'           => '',
);
/*********************************************************************************************/

// Start field type switch case

switch ( $args['type'] ) {

    case ""select"" :  /* Targets all select input type elements, except the country and state select input types */
        $args['class'][] = 'form-group'; // Add a class to the field's html element wrapper - woocommerce input types (fields) are often wrapped within a <p></p> tag  
        $args['input_class'] = array('form-control', 'input-lg'); // Add a class to the form input itself
        //$args['custom_attributes']['data-plugin'] = 'select2';
        $args['label_class'] = array('control-label');
        $args['custom_attributes'] = array( 'data-plugin' => 'select2', 'data-allow-clear' => 'true', 'aria-hidden' => 'true',  ); // Add custom data attributes to the form input itself
    break;

    case 'country' : /* By default WooCommerce will populate a select with the country names - $args defined for this specific input type targets only the country select element */
        $args['class'][] = 'form-group single-country';
        $args['label_class'] = array('control-label');
    break;

    case ""state"" : /* By default WooCommerce will populate a select with state names - $args defined for this specific input type targets only the country select element */
        $args['class'][] = 'form-group'; // Add class to the field's html element wrapper 
        $args['input_class'] = array('form-control', 'input-lg'); // add class to the form input itself
        //$args['custom_attributes']['data-plugin'] = 'select2';
        $args['label_class'] = array('control-label');
        $args['custom_attributes'] = array( 'data-plugin' => 'select2', 'data-allow-clear' => 'true', 'aria-hidden' => 'true',  );
    break;


    case ""password"" :
    case ""text"" :
    case ""email"" :
    case ""tel"" :
    case ""number"" :
        $args['class'][] = 'form-group';
        //$args['input_class'][] = 'form-control input-lg'; // will return an array of classes, the same as bellow
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;

    case 'textarea' :
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;

    case 'checkbox' :  
    break;

    case 'radio' :
    break;

    default :
        $args['class'][] = 'form-group';
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;
    }

    return $args;
}
 is_page() //add_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3); add_action('woocommerce_form_field_args', 'wc_form_field_args', 10, 3); function wc_form_field_args( $args, $key, $value = null ) {

...

// Right after 
    return $args;

// Place the following

if ( !is_page('checkout') ) {
  add_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3);
} else {
  remove_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3);
}


}
 ","/woocommerce/includes/wc-template-functions.php woocommerce_form_field $defaults /*********************************************************************************************/
/** WooCommerce - Modify each individual input type $args defaults /**
/*********************************************************************************************/

add_filter('woocommerce_form_field_args','wc_form_field_args',10,3);

function wc_form_field_args( $args, $key, $value = null ) {

/*********************************************************************************************/
/** This is not meant to be here, but it serves as a reference
/** of what is possible to be changed. /**

$defaults = array(
    'type'              => 'text',
    'label'             => '',
    'description'       => '',
    'placeholder'       => '',
    'maxlength'         => false,
    'required'          => false,
    'id'                => $key,
    'class'             => array(),
    'label_class'       => array(),
    'input_class'       => array(),
    'return'            => false,
    'options'           => array(),
    'custom_attributes' => array(),
    'validate'          => array(),
    'default'           => '',
);
/*********************************************************************************************/

// Start field type switch case

switch ( $args['type'] ) {

    case ""select"" :  /* Targets all select input type elements, except the country and state select input types */
        $args['class'][] = 'form-group'; // Add a class to the field's html element wrapper - woocommerce input types (fields) are often wrapped within a <p></p> tag  
        $args['input_class'] = array('form-control', 'input-lg'); // Add a class to the form input itself
        //$args['custom_attributes']['data-plugin'] = 'select2';
        $args['label_class'] = array('control-label');
        $args['custom_attributes'] = array( 'data-plugin' => 'select2', 'data-allow-clear' => 'true', 'aria-hidden' => 'true',  ); // Add custom data attributes to the form input itself
    break;

    case 'country' : /* By default WooCommerce will populate a select with the country names - $args defined for this specific input type targets only the country select element */
        $args['class'][] = 'form-group single-country';
        $args['label_class'] = array('control-label');
    break;

    case ""state"" : /* By default WooCommerce will populate a select with state names - $args defined for this specific input type targets only the country select element */
        $args['class'][] = 'form-group'; // Add class to the field's html element wrapper 
        $args['input_class'] = array('form-control', 'input-lg'); // add class to the form input itself
        //$args['custom_attributes']['data-plugin'] = 'select2';
        $args['label_class'] = array('control-label');
        $args['custom_attributes'] = array( 'data-plugin' => 'select2', 'data-allow-clear' => 'true', 'aria-hidden' => 'true',  );
    break;


    case ""password"" :
    case ""text"" :
    case ""email"" :
    case ""tel"" :
    case ""number"" :
        $args['class'][] = 'form-group';
        //$args['input_class'][] = 'form-control input-lg'; // will return an array of classes, the same as bellow
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;

    case 'textarea' :
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;

    case 'checkbox' :  
    break;

    case 'radio' :
    break;

    default :
        $args['class'][] = 'form-group';
        $args['input_class'] = array('form-control', 'input-lg');
        $args['label_class'] = array('control-label');
    break;
    }

    return $args;
}
 is_page() //add_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3); add_action('woocommerce_form_field_args', 'wc_form_field_args', 10, 3); function wc_form_field_args( $args, $key, $value = null ) {

...

// Right after 
    return $args;

// Place the following

if ( !is_page('checkout') ) {
  add_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3);
} else {
  remove_filter('woocommerce_form_field_args','wc_form_field_args', 10, 3);
}


}
 ",TRUE,"<?php
/**
 * Add WooCommerce support
 *
 * @package np011
 */


add_action( 'after_setup_theme', 'np011_woocommerce_support' );
if ( ! function_exists( 'np011_woocommerce_support' ) ) {
	/**
	 * Declares WooCommerce theme support.
	 */
	function np011_woocommerce_support() {
		add_theme_support( 'woocommerce' );
		
		// Add New Woocommerce 3.0.0 Product Gallery support
		add_theme_support( 'wc-product-gallery-lightbox' );
		add_theme_support( 'wc-product-gallery-zoom' );
		add_theme_support( 'wc-product-gallery-slider' );

		// hook in and customizer form fields.
		add_filter( 'woocommerce_form_field_args', 'np011_wc_form_field_args', 10, 3 );
	}
}


/**
* First unhook the WooCommerce wrappers
*/
remove_action( 'woocommerce_before_main_content', 'woocommerce_output_content_wrapper', 10);
remove_action( 'woocommerce_after_main_content', 'woocommerce_output_content_wrapper_end', 10);

/**
* Then hook in your own functions to display the wrappers your theme requires
*/
add_action('woocommerce_before_main_content', 'np011_woocommerce_wrapper_start', 10);
add_action('woocommerce_after_main_content', 'np011_woocommerce_wrapper_end', 10);
if ( ! function_exists( 'np011_woocommerce_wrapper_start' ) ) {
	function np011_woocommerce_wrapper_start() {
		$container   = get_theme_mod( 'np011_container_type' );
		echo '<div class=""wrapper"" id=""woocommerce-wrapper"">';
	  echo '<div class=""' . esc_attr( $container ) . '"" id=""content"" tabindex=""-1"">';
		echo '<div class=""row"">';
		get_template_part( 'global-templates/left-sidebar-check' );
		echo '<main class=""site-main"" id=""main"">';
	}
}
if ( ! function_exists( 'np011_woocommerce_wrapper_end' ) ) {
function np011_woocommerce_wrapper_end() {
	echo '</main><!-- #main -->';
	echo '</div><!-- #primary -->';
	get_template_part( 'global-templates/right-sidebar-check' );
  echo '</div><!-- .row -->';
	echo '</div><!-- Container end -->';
	echo '</div><!-- Wrapper end -->';
	}
}


/**
 * Filter hook function monkey patching form classes
 * Author: Adriano Monecchi http://stackoverflow.com/a/36724593/307826
 *
 * @param string $args Form attributes.
 * @param string $key Not in use.
 * @param null   $value Not in use.
 *
 * @return mixed
 */
if ( ! function_exists ( 'np011_wc_form_field_args' ) ) {
	function np011_wc_form_field_args( $args, $key, $value = null ) {
		// Start field type switch case.
		switch ( $args['type'] ) {
			/* Targets all select input type elements, except the country and state select input types */
			case 'select' :
				// Add a class to the field's html element wrapper - woocommerce
				// input types (fields) are often wrapped within a <p></p> tag.
				$args['class'][] = 'form-group';
				// Add a class to the form input itself.
				$args['input_class']       = array( 'form-control', 'input-lg' );
				$args['label_class']       = array( 'control-label' );
				$args['custom_attributes'] = array(
					'data-plugin'      => 'select2',
					'data-allow-clear' => 'true',
					'aria-hidden'      => 'true',
					// Add custom data attributes to the form input itself.
				);
				break;
			// By default WooCommerce will populate a select with the country names - $args
			// defined for this specific input type targets only the country select element.
			case 'country' :
				$args['class'][]     = 'form-group single-country';
				$args['label_class'] = array( 'control-label' );
				break;
			// By default WooCommerce will populate a select with state names - $args defined
			// for this specific input type targets only the country select element.
			case 'state' :
				// Add class to the field's html element wrapper.
				$args['class'][] = 'form-group';
				// add class to the form input itself.
				$args['input_class']       = array( '', 'input-lg' );
				$args['label_class']       = array( 'control-label' );
				$args['custom_attributes'] = array(
					'data-plugin'      => 'select2',
					'data-allow-clear' => 'true',
					'aria-hidden'      => 'true',
				);
				break;
			case 'password' :
			case 'text' :
			case 'email' :
			case 'tel' :
			case 'number' :
				$args['class'][]     = 'form-group';
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
			case 'textarea' :
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
			case 'checkbox' :
				$args['label_class'] = array( 'custom-control custom-checkbox' );
				$args['input_class'] = array( 'custom-control-input', 'input-lg' );
				break;
			case 'radio' :
				$args['label_class'] = array( 'custom-control custom-radio' );
				$args['input_class'] = array( 'custom-control-input', 'input-lg' );
				break;
			default :
				$args['class'][]     = 'form-group';
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
		} // end switch ($args).
		return $args;
	}
}


/**
* Change loop add-to-cart button class to Bootstrap
*/
add_filter( 'woocommerce_loop_add_to_cart_args', 'np011_woocommerce_add_to_cart_args', 10, 2 );

if ( ! function_exists ( 'np011_woocommerce_add_to_cart_args' ) ) {
	function np011_woocommerce_add_to_cart_args( $args, $product ) {
		$args['class'] = str_replace('button','btn btn-outline-primary', 'button');
		return $args;
	}
}","<?php
/**
 * Add WooCommerce support
 *
 * @package np011
 */


add_action( 'after_setup_theme', 'np011_woocommerce_support' );
if ( ! function_exists( 'np011_woocommerce_support' ) ) {
	/**
	 * Declares WooCommerce theme support.
	 */
	function np011_woocommerce_support() {
		add_theme_support( 'woocommerce' );
		
		// Add New Woocommerce 3.0.0 Product Gallery support
		add_theme_support( 'wc-product-gallery-lightbox' );
		add_theme_support( 'wc-product-gallery-zoom' );
		add_theme_support( 'wc-product-gallery-slider' );

		// hook in and customizer form fields.
		add_filter( 'woocommerce_form_field_args', 'np011_wc_form_field_args', 10, 3 );
	}
}


/**
* First unhook the WooCommerce wrappers
*/
remove_action( 'woocommerce_before_main_content', 'woocommerce_output_content_wrapper', 10);
remove_action( 'woocommerce_after_main_content', 'woocommerce_output_content_wrapper_end', 10);

/**
* Then hook in your own functions to display the wrappers your theme requires
*/
add_action('woocommerce_before_main_content', 'np011_woocommerce_wrapper_start', 10);
add_action('woocommerce_after_main_content', 'np011_woocommerce_wrapper_end', 10);
if ( ! function_exists( 'np011_woocommerce_wrapper_start' ) ) {
	function np011_woocommerce_wrapper_start() {
		$container   = get_theme_mod( 'np011_container_type' );
		echo '<div class=""wrapper"" id=""woocommerce-wrapper"">';
	  echo '<div class=""' . esc_attr( $container ) . '"" id=""content"" tabindex=""-1"">';
		echo '<div class=""row"">';
		get_template_part( 'global-templates/left-sidebar-check' );
		echo '<main class=""site-main"" id=""main"">';
	}
}
if ( ! function_exists( 'np011_woocommerce_wrapper_end' ) ) {
function np011_woocommerce_wrapper_end() {
	echo '</main><!-- #main -->';
	echo '</div><!-- #primary -->';
	get_template_part( 'global-templates/right-sidebar-check' );
  echo '</div><!-- .row -->';
	echo '</div><!-- Container end -->';
	echo '</div><!-- Wrapper end -->';
	}
}


/**
 * Filter hook function monkey patching form classes
 * Author: Adriano Monecchi http://stackoverflow.com/a/36724593/307826
 *
 * @param string $args Form attributes.
 * @param string $key Not in use.
 * @param null   $value Not in use.
 *
 * @return mixed
 */
if ( ! function_exists ( 'np011_wc_form_field_args' ) ) {
	function np011_wc_form_field_args( $args, $key, $value = null ) {
		// Start field type switch case.
		switch ( $args['type'] ) {
			/* Targets all select input type elements, except the country and state select input types */
			case 'select' :
				// Add a class to the field's html element wrapper - woocommerce
				// input types (fields) are often wrapped within a <p></p> tag.
				$args['class'][] = 'form-group';
				// Add a class to the form input itself.
				$args['input_class']       = array( 'form-control', 'input-lg' );
				$args['label_class']       = array( 'control-label' );
				$args['custom_attributes'] = array(
					'data-plugin'      => 'select2',
					'data-allow-clear' => 'true',
					'aria-hidden'      => 'true',
					// Add custom data attributes to the form input itself.
				);
				break;
			// By default WooCommerce will populate a select with the country names - $args
			// defined for this specific input type targets only the country select element.
			case 'country' :
				$args['class'][]     = 'form-group single-country';
				$args['label_class'] = array( 'control-label' );
				break;
			// By default WooCommerce will populate a select with state names - $args defined
			// for this specific input type targets only the country select element.
			case 'state' :
				// Add class to the field's html element wrapper.
				$args['class'][] = 'form-group';
				// add class to the form input itself.
				$args['input_class']       = array( '', 'input-lg' );
				$args['label_class']       = array( 'control-label' );
				$args['custom_attributes'] = array(
					'data-plugin'      => 'select2',
					'data-allow-clear' => 'true',
					'aria-hidden'      => 'true',
				);
				break;
			case 'password' :
			case 'text' :
			case 'email' :
			case 'tel' :
			case 'number' :
				$args['class'][]     = 'form-group';
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
			case 'textarea' :
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
			case 'checkbox' :
				$args['label_class'] = array( 'custom-control custom-checkbox' );
				$args['input_class'] = array( 'custom-control-input', 'input-lg' );
				break;
			case 'radio' :
				$args['label_class'] = array( 'custom-control custom-radio' );
				$args['input_class'] = array( 'custom-control-input', 'input-lg' );
				break;
			default :
				$args['class'][]     = 'form-group';
				$args['input_class'] = array( 'form-control', 'input-lg' );
				$args['label_class'] = array( 'control-label' );
				break;
		} // end switch ($args).
		return $args;
	}
}


/**
* Change loop add-to-cart button class to Bootstrap
*/
add_filter( 'woocommerce_loop_add_to_cart_args', 'np011_woocommerce_add_to_cart_args', 10, 2 );

if ( ! function_exists ( 'np011_woocommerce_add_to_cart_args' ) ) {
	function np011_woocommerce_add_to_cart_args( $args, $product ) {
		$args['class'] = str_replace('button','btn btn-outline-primary', 'button');
		return $args;
	}
}",TRUE,,
5124,InitialSO.csv5124.txt,InitialGit.csv5124.txt,5,"Button EditText public class MyView extends RelativeLayout {


public MyView(Context context, AttributeSet attrs) {
    super(context, attrs);
    addViews();
}

public MyView(Context context) {
    super(context);
    addViews();
}

private void addViews() {
    View view = inflate(getContext(), R.layout.my_layout, null);
    addView(view);
}
}
 <RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
android:orientation=""vertical"" android:layout_width=""match_parent""
android:layout_height=""match_parent"">
<EditText
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:id=""@+id/editText""
    android:layout_gravity=""center_horizontal""
    android:visibility=""gone""
    android:singleLine=""true""/>

<TextView
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:text=""Some Text""
    android:id=""@+id/textView""
    android:layout_gravity=""center_horizontal""
    android:textAlignment=""center""
    android:textStyle=""bold""
    android:textSize=""30sp"" />

</RelativeLayout>
  private class MyLongClickListener implements View.OnLongClickListener {
  EditText editText;
  TextView textView ;
 @Override
        public boolean onLongClick(View view) {
            editText =(EditText) view.findViewById(R.id.editText);
            textView =(TextView) view.findViewById(R.id.textView);
            editText.bringToFront();
            textView.setVisibility(View.INVISIBLE);
            editText.setVisibility(View.VISIBLE);
            if (editText.requestFocus()) {
                InputMethodManager imm = (InputMethodManager)
                        getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);

            }
            textView.setText(editText.getText().toString());
            editText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                @Override
                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                    if(actionId== EditorInfo.IME_ACTION_DONE){
                        editText.setVisibility(View.INVISIBLE);
                        textView.bringToFront();
                        textView.setVisibility(View.VISIBLE);
                        textView.setText(editText.getText().toString());
                    }
                    return false;
                }
            });

            return true;
        }
}
       
 ","Button EditText public class MyView extends RelativeLayout {


public MyView(Context context, AttributeSet attrs) {
    super(context, attrs);
    addViews();
}

public MyView(Context context) {
    super(context);
    addViews();
}

private void addViews() {
    View view = inflate(getContext(), R.layout.my_layout, null);
    addView(view);
}
}
 <RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
android:orientation=""vertical"" android:layout_width=""match_parent""
android:layout_height=""match_parent"">
<EditText
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:id=""@+id/editText""
    android:layout_gravity=""center_horizontal""
    android:visibility=""gone""
    android:singleLine=""true""/>

<TextView
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:text=""Some Text""
    android:id=""@+id/textView""
    android:layout_gravity=""center_horizontal""
    android:textAlignment=""center""
    android:textStyle=""bold""
    android:textSize=""30sp"" />

</RelativeLayout>
  private class MyLongClickListener implements View.OnLongClickListener {
  EditText editText;
  TextView textView ;
 @Override
        public boolean onLongClick(View view) {
            editText =(EditText) view.findViewById(R.id.editText);
            textView =(TextView) view.findViewById(R.id.textView);
            editText.bringToFront();
            textView.setVisibility(View.INVISIBLE);
            editText.setVisibility(View.VISIBLE);
            if (editText.requestFocus()) {
                InputMethodManager imm = (InputMethodManager)
                        getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);
                imm.showSoftInput(editText, InputMethodManager.SHOW_IMPLICIT);

            }
            textView.setText(editText.getText().toString());
            editText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                @Override
                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                    if(actionId== EditorInfo.IME_ACTION_DONE){
                        editText.setVisibility(View.INVISIBLE);
                        textView.bringToFront();
                        textView.setVisibility(View.VISIBLE);
                        textView.setText(editText.getText().toString());
                    }
                    return false;
                }
            });

            return true;
        }
}
 ",FALSE,"package cgeo.geocaching.ui;

import android.content.Context;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Toast;

import java.util.ArrayList;

import cgeo.geocaching.R;
import cgeo.geocaching.ui.dialog.ClickCompleteCallback;
import cgeo.geocaching.ui.dialog.LongClickCompleteCallback;

import static android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
import static android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;

/**
 * This class allows for a user to change the text on a button with a long-click.
 */
public class EditButton extends RelativeLayout {

    private EditText edit;  // EditText used to facilitate keyboard entry.
    Button butt;    // The actual button used for the most part.

    private ArrayList<ClickCompleteCallback> clickCompleteCallbacks;
    private ArrayList<LongClickCompleteCallback> longClickCompleteCallbacks;

    private class CoordDigitLongClickListener implements View.OnLongClickListener {
        // This implementation was obtained from 'Adithya' via the stack overflow question 'Long-press on Button to Change Text':
        // https://stackoverflow.com/questions/44858720/long-press-on-button-to-change-text/44859328#44859328

        @Override
        public boolean onLongClick(final View view) {
            return handleLongClick();
        }
    }

    // These variables are accessed from the derived class 'CalculateButton'.
    public EditButton(final Context context) {
        super(context);
        addViews(context);
    }

    public EditButton(final Context context, final AttributeSet attrs) {
        super(context, attrs);
        addViews(context);
    }

    private void addViews(final Context context) {
        clickCompleteCallbacks = new ArrayList<>();
        longClickCompleteCallbacks = new ArrayList<>();

        setLongClickable(true);

        edit = new EditText(context);
        edit.setMaxLines(1);
        edit.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);
        edit.setInputType(InputType.TYPE_CLASS_TEXT);
        edit.setClickable(false);
        edit.setLongClickable(false);
        edit.setTextSize(22f);
        edit.setInputType(TYPE_TEXT_FLAG_CAP_CHARACTERS | TYPE_TEXT_FLAG_NO_SUGGESTIONS);
        edit.setPadding(0, 0, 0, 0);

        butt = new Button(context);
        butt.setClickable(false);
        butt.setLongClickable(false);
        butt.setTextSize(22f);
        butt.setInputType(TYPE_TEXT_FLAG_CAP_CHARACTERS | TYPE_TEXT_FLAG_NO_SUGGESTIONS);
        butt.setPadding(0, 0, 0, 0);
        butt.setOnLongClickListener(new CoordDigitLongClickListener());

        final RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        edit.setLayoutParams(lp);
        butt.setLayoutParams(lp);

        addView(butt);
        addView(edit);

        edit.setVisibility(INVISIBLE);
    }

    public void addClickCompleteCallback(final ClickCompleteCallback callback) {
        clickCompleteCallbacks.add(callback);
    }

    public void addLongClickCompleteCallback(final LongClickCompleteCallback callback) {
        longClickCompleteCallbacks.add(callback);
    }

    public void setCustomChar(final char theChar) {
        butt.setText(String.valueOf(theChar));
    }

    public char getLabel() {
        return butt.getText().charAt(0);
    }

    public void setOnClickListener(final OnClickListener listener) {
        butt.setOnClickListener(listener);
    }

    public void setOnLongClickListener(final OnLongClickListener listener) {
        butt.setOnLongClickListener(listener);
    }

    public void handleClick() {
        for (final ClickCompleteCallback callback : clickCompleteCallbacks) {
            callback.onClickCompleteCallback();
        }
    }

    public boolean handleLongClick() {
        final InputMethodManager imm = (InputMethodManager)
                getContext().getSystemService(Context.INPUT_METHOD_SERVICE);

        butt.setVisibility(View.INVISIBLE);
        edit.setVisibility(View.VISIBLE);

        if (edit.requestFocus()) {
            imm.showSoftInput(edit, InputMethodManager.SHOW_IMPLICIT);
        }

        edit.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(final CharSequence s, final int start, final int count, final int after) {
                // Intentionally left empty
            }

            @Override
            public void onTextChanged(final CharSequence s, final int start, final int before, final int count) {
                // Intentionally left empty
            }

            @Override
            public void afterTextChanged(final Editable s) {
                final Editable text = edit.getText();

                if (text.length() > 0) {
                    final char customChar = text.charAt(0);

                    if ('A' <= customChar && customChar <= 'Z'
                            || 'a' <= customChar && customChar <= 'z'
                            || '0' <= customChar && customChar <= '9'
                            || customChar == ' ') {
                        setCustomChar(Character.toUpperCase(customChar));
                    } else {
                        final Context context = getContext();
                        Toast.makeText(context, context.getString(R.string.warn_invalid_character), Toast.LENGTH_SHORT).show();
                    }

                    edit.setText("""");
                } else {
                    edit.clearFocus();
                }
            }
        });

        edit.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(final View v, final boolean hasFocus) {
                if (!hasFocus) {
                    edit.setVisibility(View.INVISIBLE);
                    butt.setVisibility(View.VISIBLE);
                    imm.hideSoftInputFromWindow(edit.getWindowToken(), 0);

                    for (final LongClickCompleteCallback callback : longClickCompleteCallbacks) {
                        callback.onLongClickCompleteCallback();
                    }
                }
            }
        });

        return true;
    }
}
","package cgeo.geocaching.ui;

import static android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
import static android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;

import cgeo.geocaching.R;
import cgeo.geocaching.ui.dialog.ClickCompleteCallback;
import cgeo.geocaching.ui.dialog.LongClickCompleteCallback;

import android.content.Context;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.Toast;

import java.util.ArrayList;

/**
 * This class allows for a user to change the text on a button with a long-click.
 */
public class EditButton extends RelativeLayout {

    /** EditText used to facilitate keyboard entry */
    private EditText edit;
    /** The actual button used for the most part */
    Button butt;

    private ArrayList<ClickCompleteCallback> clickCompleteCallbacks;
    private ArrayList<LongClickCompleteCallback> longClickCompleteCallbacks;

    /**
     * This implementation was obtained from 'Adithya' via the stack overflow question 'Long-press on Button to Change Text':
     * https://stackoverflow.com/questions/44858720/long-press-on-button-to-change-text/44859328#44859328
     */
    private class CoordDigitLongClickListener implements View.OnLongClickListener {
        @Override
        public boolean onLongClick(final View view) {
            return handleLongClick();
        }
    }

    /**
     * These variables are accessed from the derived class 'CalculateButton'
     */
    public EditButton(final Context context) {
        super(context);
        addViews(context);
    }

    public EditButton(final Context context, final AttributeSet attrs) {
        super(context, attrs);
        addViews(context);
    }

    private void addViews(final Context context) {
        clickCompleteCallbacks = new ArrayList<>();
        longClickCompleteCallbacks = new ArrayList<>();

        setLongClickable(true);

        edit = new EditText(context);
        edit.setMaxLines(1);
        edit.setGravity(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM);
        edit.setInputType(InputType.TYPE_CLASS_TEXT);
        edit.setClickable(false);
        edit.setLongClickable(false);
        edit.setTextSize(22f);
        edit.setInputType(TYPE_TEXT_FLAG_CAP_CHARACTERS | TYPE_TEXT_FLAG_NO_SUGGESTIONS);
        edit.setPadding(0, 0, 0, 0);

        butt = new Button(context);
        butt.setClickable(false);
        butt.setLongClickable(false);
        butt.setTextSize(22f);
        butt.setInputType(TYPE_TEXT_FLAG_CAP_CHARACTERS | TYPE_TEXT_FLAG_NO_SUGGESTIONS);
        butt.setPadding(0, 0, 0, 0);
        butt.setOnLongClickListener(new CoordDigitLongClickListener());

        final RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        edit.setLayoutParams(lp);
        butt.setLayoutParams(lp);

        addView(butt);
        addView(edit);

        edit.setVisibility(INVISIBLE);
    }

    public void addClickCompleteCallback(final ClickCompleteCallback callback) {
        clickCompleteCallbacks.add(callback);
    }

    public void addLongClickCompleteCallback(final LongClickCompleteCallback callback) {
        longClickCompleteCallbacks.add(callback);
    }

    public void setCustomChar(final char theChar) {
        butt.setText(String.valueOf(theChar));
    }

    public char getLabel() {
        return butt.getText().charAt(0);
    }

    @Override
    public void setOnClickListener(final OnClickListener listener) {
        butt.setOnClickListener(listener);
    }

    @Override
    public void setOnLongClickListener(final OnLongClickListener listener) {
        butt.setOnLongClickListener(listener);
    }

    public void handleClick() {
        for (final ClickCompleteCallback callback : clickCompleteCallbacks) {
            callback.onClickCompleteCallback();
        }
    }

    public boolean handleLongClick() {
        final InputMethodManager imm = (InputMethodManager)
                getContext().getSystemService(Context.INPUT_METHOD_SERVICE);

        butt.setVisibility(View.INVISIBLE);
        edit.setVisibility(View.VISIBLE);

        if (edit.requestFocus()) {
            imm.showSoftInput(edit, InputMethodManager.SHOW_IMPLICIT);
        }

        edit.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(final CharSequence s, final int start, final int count, final int after) {
                // Intentionally left empty
            }

            @Override
            public void onTextChanged(final CharSequence s, final int start, final int before, final int count) {
                // Intentionally left empty
            }

            @Override
            public void afterTextChanged(final Editable s) {
                final Editable text = edit.getText();

                if (text.length() > 0) {
                    final char customChar = text.charAt(0);

                    if ('A' <= customChar && customChar <= 'Z'
                            || 'a' <= customChar && customChar <= 'z'
                            || '0' <= customChar && customChar <= '9'
                            || customChar == ' ') {
                        setCustomChar(Character.toUpperCase(customChar));
                    } else {
                        final Context context = getContext();
                        Toast.makeText(context, context.getString(R.string.warn_invalid_character), Toast.LENGTH_SHORT).show();
                    }

                    edit.setText("""");
                } else {
                    edit.clearFocus();
                }
            }
        });

        edit.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(final View v, final boolean hasFocus) {
                if (!hasFocus) {
                    edit.setVisibility(View.INVISIBLE);
                    butt.setVisibility(View.VISIBLE);
                    imm.hideSoftInputFromWindow(edit.getWindowToken(), 0);

                    for (final LongClickCompleteCallback callback : longClickCompleteCallbacks) {
                        callback.onLongClickCompleteCallback();
                    }
                }
            }
        });

        return true;
    }
}
",FALSE,,
,,,10.4939759,,,,,,,,
