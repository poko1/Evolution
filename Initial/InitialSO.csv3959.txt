,SOCode
3959,"from sqlalchemy import event
from sqlalchemy.engine import Engine
import time
import logging
 
logging.basicConfig()
logger = logging.getLogger(""myapp.sqltime"")
logger.setLevel(logging.DEBUG)

@event.listens_for(Engine, ""before_cursor_execute"")
def before_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    context._query_start_time = time.time()
    logger.debug(""Start Query:\n%s"" % statement)
    # Modification for StackOverflow answer:
    # Show parameters, which might be too verbose, depending on usage..
    logger.debug(""Parameters:\n%r"" % (parameters,))


@event.listens_for(Engine, ""after_cursor_execute"")
def after_cursor_execute(conn, cursor, statement, 
                        parameters, context, executemany):
    total = time.time() - context._query_start_time
    logger.debug(""Query Complete!"")

    # Modification for StackOverflow: times in milliseconds
    logger.debug(""Total Time: %.02fms"" % (total*1000))

if __name__ == '__main__':
    from sqlalchemy import *
 
    engine = create_engine('sqlite://')
 
    m1 = MetaData(engine)
    t1 = Table(""sometable"", m1, 
            Column(""id"", Integer, primary_key=True),
            Column(""data"", String(255), nullable=False),
        )
 
    conn = engine.connect()
    m1.create_all(conn)
 
    conn.execute(
        t1.insert(), 
        [{""data"":""entry %d"" % x} for x in xrange(100000)]
    )
 
    conn.execute(
        t1.select().where(t1.c.data.between(""entry 25"", ""entry 7800"")).order_by(desc(t1.c.data))
    )
 DEBUG:myapp.sqltime:Start Query:
SELECT sometable.id, sometable.data 
FROM sometable 
WHERE sometable.data BETWEEN ? AND ? ORDER BY sometable.data DESC
DEBUG:myapp.sqltime:Parameters:
('entry 25', 'entry 7800')
DEBUG:myapp.sqltime:Query Complete!
DEBUG:myapp.sqltime:Total Time: 410.46ms
 % "
